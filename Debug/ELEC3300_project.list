
ELEC3300_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba0  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014474  08007d88  08007d88  00008d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c1fc  0801c1fc  00020078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c1fc  0801c1fc  0001d1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c204  0801c204  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c204  0801c204  0001d204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c208  0801c208  0001d208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002078  20000000  0801c20c  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004298  20002078  0801e284  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006310  0801e284  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f82f  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c2a  00000000  00000000  0002f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00032500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac9  00000000  00000000  000333f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b211  00000000  00000000  00033ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001233b  00000000  00000000  0004f0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0fcf  00000000  00000000  0006140d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  001023dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004504  00000000  00000000  00102490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00106994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000037ff  00000000  00000000  00106a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000070  00000000  00000000  0010a1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20002078 	.word	0x20002078
 8000204:	00000000 	.word	0x00000000
 8000208:	08007d70 	.word	0x08007d70

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000207c 	.word	0x2000207c
 8000224:	08007d70 	.word	0x08007d70

08000228 <arm_bitreversal_32>:
 8000228:	1c4b      	adds	r3, r1, #1
 800022a:	2b01      	cmp	r3, #1
 800022c:	bf98      	it	ls
 800022e:	4770      	bxls	lr
 8000230:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000234:	1c91      	adds	r1, r2, #2
 8000236:	089b      	lsrs	r3, r3, #2

08000238 <arm_bitreversal_32_0>:
 8000238:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800023c:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000240:	880a      	ldrh	r2, [r1, #0]
 8000242:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000246:	4480      	add	r8, r0
 8000248:	4481      	add	r9, r0
 800024a:	4402      	add	r2, r0
 800024c:	4484      	add	ip, r0
 800024e:	f8d9 7000 	ldr.w	r7, [r9]
 8000252:	f8d8 6000 	ldr.w	r6, [r8]
 8000256:	6815      	ldr	r5, [r2, #0]
 8000258:	f8dc 4000 	ldr.w	r4, [ip]
 800025c:	f8c9 6000 	str.w	r6, [r9]
 8000260:	f8c8 7000 	str.w	r7, [r8]
 8000264:	f8cc 5000 	str.w	r5, [ip]
 8000268:	6014      	str	r4, [r2, #0]
 800026a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800026e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000272:	6855      	ldr	r5, [r2, #4]
 8000274:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000278:	f8c9 6004 	str.w	r6, [r9, #4]
 800027c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000280:	f8cc 5004 	str.w	r5, [ip, #4]
 8000284:	6054      	str	r4, [r2, #4]
 8000286:	3108      	adds	r1, #8
 8000288:	3b01      	subs	r3, #1
 800028a:	d1d5      	bne.n	8000238 <arm_bitreversal_32_0>
 800028c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000290:	4770      	bx	lr

08000292 <arm_bitreversal_16>:
 8000292:	1c4b      	adds	r3, r1, #1
 8000294:	2b01      	cmp	r3, #1
 8000296:	bf98      	it	ls
 8000298:	4770      	bxls	lr
 800029a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	1c91      	adds	r1, r2, #2
 80002a0:	089b      	lsrs	r3, r3, #2

080002a2 <arm_bitreversal_16_0>:
 80002a2:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002a6:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002aa:	880a      	ldrh	r2, [r1, #0]
 80002ac:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002b0:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002b4:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002b8:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002bc:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002c0:	f8d9 7000 	ldr.w	r7, [r9]
 80002c4:	f8d8 6000 	ldr.w	r6, [r8]
 80002c8:	6815      	ldr	r5, [r2, #0]
 80002ca:	f8dc 4000 	ldr.w	r4, [ip]
 80002ce:	f8c9 6000 	str.w	r6, [r9]
 80002d2:	f8c8 7000 	str.w	r7, [r8]
 80002d6:	f8cc 5000 	str.w	r5, [ip]
 80002da:	6014      	str	r4, [r2, #0]
 80002dc:	3108      	adds	r1, #8
 80002de:	3b01      	subs	r3, #1
 80002e0:	d1df      	bne.n	80002a2 <arm_bitreversal_16_0>
 80002e2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002e6:	4770      	bx	lr

080002e8 <strcmp>:
 80002e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f0:	2a01      	cmp	r2, #1
 80002f2:	bf28      	it	cs
 80002f4:	429a      	cmpcs	r2, r3
 80002f6:	d0f7      	beq.n	80002e8 <strcmp>
 80002f8:	1ad0      	subs	r0, r2, r3
 80002fa:	4770      	bx	lr

080002fc <__aeabi_drsub>:
 80002fc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000300:	e002      	b.n	8000308 <__adddf3>
 8000302:	bf00      	nop

08000304 <__aeabi_dsub>:
 8000304:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000308 <__adddf3>:
 8000308:	b530      	push	{r4, r5, lr}
 800030a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800030e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000312:	ea94 0f05 	teq	r4, r5
 8000316:	bf08      	it	eq
 8000318:	ea90 0f02 	teqeq	r0, r2
 800031c:	bf1f      	itttt	ne
 800031e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000322:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000326:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800032e:	f000 80e2 	beq.w	80004f6 <__adddf3+0x1ee>
 8000332:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000336:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033a:	bfb8      	it	lt
 800033c:	426d      	neglt	r5, r5
 800033e:	dd0c      	ble.n	800035a <__adddf3+0x52>
 8000340:	442c      	add	r4, r5
 8000342:	ea80 0202 	eor.w	r2, r0, r2
 8000346:	ea81 0303 	eor.w	r3, r1, r3
 800034a:	ea82 0000 	eor.w	r0, r2, r0
 800034e:	ea83 0101 	eor.w	r1, r3, r1
 8000352:	ea80 0202 	eor.w	r2, r0, r2
 8000356:	ea81 0303 	eor.w	r3, r1, r3
 800035a:	2d36      	cmp	r5, #54	@ 0x36
 800035c:	bf88      	it	hi
 800035e:	bd30      	pophi	{r4, r5, pc}
 8000360:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000364:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000368:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800036c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000370:	d002      	beq.n	8000378 <__adddf3+0x70>
 8000372:	4240      	negs	r0, r0
 8000374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000378:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800037c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000380:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x84>
 8000386:	4252      	negs	r2, r2
 8000388:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038c:	ea94 0f05 	teq	r4, r5
 8000390:	f000 80a7 	beq.w	80004e2 <__adddf3+0x1da>
 8000394:	f1a4 0401 	sub.w	r4, r4, #1
 8000398:	f1d5 0e20 	rsbs	lr, r5, #32
 800039c:	db0d      	blt.n	80003ba <__adddf3+0xb2>
 800039e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a2:	fa22 f205 	lsr.w	r2, r2, r5
 80003a6:	1880      	adds	r0, r0, r2
 80003a8:	f141 0100 	adc.w	r1, r1, #0
 80003ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b0:	1880      	adds	r0, r0, r2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	4159      	adcs	r1, r3
 80003b8:	e00e      	b.n	80003d8 <__adddf3+0xd0>
 80003ba:	f1a5 0520 	sub.w	r5, r5, #32
 80003be:	f10e 0e20 	add.w	lr, lr, #32
 80003c2:	2a01      	cmp	r2, #1
 80003c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003c8:	bf28      	it	cs
 80003ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ce:	fa43 f305 	asr.w	r3, r3, r5
 80003d2:	18c0      	adds	r0, r0, r3
 80003d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	d507      	bpl.n	80003ee <__adddf3+0xe6>
 80003de:	f04f 0e00 	mov.w	lr, #0
 80003e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ee:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003f2:	d31b      	bcc.n	800042c <__adddf3+0x124>
 80003f4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003f8:	d30c      	bcc.n	8000414 <__adddf3+0x10c>
 80003fa:	0849      	lsrs	r1, r1, #1
 80003fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000400:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000404:	f104 0401 	add.w	r4, r4, #1
 8000408:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800040c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000410:	f080 809a 	bcs.w	8000548 <__adddf3+0x240>
 8000414:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000418:	bf08      	it	eq
 800041a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800041e:	f150 0000 	adcs.w	r0, r0, #0
 8000422:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000426:	ea41 0105 	orr.w	r1, r1, r5
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000430:	4140      	adcs	r0, r0
 8000432:	eb41 0101 	adc.w	r1, r1, r1
 8000436:	3c01      	subs	r4, #1
 8000438:	bf28      	it	cs
 800043a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800043e:	d2e9      	bcs.n	8000414 <__adddf3+0x10c>
 8000440:	f091 0f00 	teq	r1, #0
 8000444:	bf04      	itt	eq
 8000446:	4601      	moveq	r1, r0
 8000448:	2000      	moveq	r0, #0
 800044a:	fab1 f381 	clz	r3, r1
 800044e:	bf08      	it	eq
 8000450:	3320      	addeq	r3, #32
 8000452:	f1a3 030b 	sub.w	r3, r3, #11
 8000456:	f1b3 0220 	subs.w	r2, r3, #32
 800045a:	da0c      	bge.n	8000476 <__adddf3+0x16e>
 800045c:	320c      	adds	r2, #12
 800045e:	dd08      	ble.n	8000472 <__adddf3+0x16a>
 8000460:	f102 0c14 	add.w	ip, r2, #20
 8000464:	f1c2 020c 	rsb	r2, r2, #12
 8000468:	fa01 f00c 	lsl.w	r0, r1, ip
 800046c:	fa21 f102 	lsr.w	r1, r1, r2
 8000470:	e00c      	b.n	800048c <__adddf3+0x184>
 8000472:	f102 0214 	add.w	r2, r2, #20
 8000476:	bfd8      	it	le
 8000478:	f1c2 0c20 	rsble	ip, r2, #32
 800047c:	fa01 f102 	lsl.w	r1, r1, r2
 8000480:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000484:	bfdc      	itt	le
 8000486:	ea41 010c 	orrle.w	r1, r1, ip
 800048a:	4090      	lslle	r0, r2
 800048c:	1ae4      	subs	r4, r4, r3
 800048e:	bfa2      	ittt	ge
 8000490:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000494:	4329      	orrge	r1, r5
 8000496:	bd30      	popge	{r4, r5, pc}
 8000498:	ea6f 0404 	mvn.w	r4, r4
 800049c:	3c1f      	subs	r4, #31
 800049e:	da1c      	bge.n	80004da <__adddf3+0x1d2>
 80004a0:	340c      	adds	r4, #12
 80004a2:	dc0e      	bgt.n	80004c2 <__adddf3+0x1ba>
 80004a4:	f104 0414 	add.w	r4, r4, #20
 80004a8:	f1c4 0220 	rsb	r2, r4, #32
 80004ac:	fa20 f004 	lsr.w	r0, r0, r4
 80004b0:	fa01 f302 	lsl.w	r3, r1, r2
 80004b4:	ea40 0003 	orr.w	r0, r0, r3
 80004b8:	fa21 f304 	lsr.w	r3, r1, r4
 80004bc:	ea45 0103 	orr.w	r1, r5, r3
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	f1c4 040c 	rsb	r4, r4, #12
 80004c6:	f1c4 0220 	rsb	r2, r4, #32
 80004ca:	fa20 f002 	lsr.w	r0, r0, r2
 80004ce:	fa01 f304 	lsl.w	r3, r1, r4
 80004d2:	ea40 0003 	orr.w	r0, r0, r3
 80004d6:	4629      	mov	r1, r5
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	fa21 f004 	lsr.w	r0, r1, r4
 80004de:	4629      	mov	r1, r5
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	f094 0f00 	teq	r4, #0
 80004e6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ea:	bf06      	itte	eq
 80004ec:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004f0:	3401      	addeq	r4, #1
 80004f2:	3d01      	subne	r5, #1
 80004f4:	e74e      	b.n	8000394 <__adddf3+0x8c>
 80004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fa:	bf18      	it	ne
 80004fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000500:	d029      	beq.n	8000556 <__adddf3+0x24e>
 8000502:	ea94 0f05 	teq	r4, r5
 8000506:	bf08      	it	eq
 8000508:	ea90 0f02 	teqeq	r0, r2
 800050c:	d005      	beq.n	800051a <__adddf3+0x212>
 800050e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000512:	bf04      	itt	eq
 8000514:	4619      	moveq	r1, r3
 8000516:	4610      	moveq	r0, r2
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea91 0f03 	teq	r1, r3
 800051e:	bf1e      	ittt	ne
 8000520:	2100      	movne	r1, #0
 8000522:	2000      	movne	r0, #0
 8000524:	bd30      	popne	{r4, r5, pc}
 8000526:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052a:	d105      	bne.n	8000538 <__adddf3+0x230>
 800052c:	0040      	lsls	r0, r0, #1
 800052e:	4149      	adcs	r1, r1
 8000530:	bf28      	it	cs
 8000532:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000536:	bd30      	pop	{r4, r5, pc}
 8000538:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800053c:	bf3c      	itt	cc
 800053e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000542:	bd30      	popcc	{r4, r5, pc}
 8000544:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000548:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800054c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000550:	f04f 0000 	mov.w	r0, #0
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055a:	bf1a      	itte	ne
 800055c:	4619      	movne	r1, r3
 800055e:	4610      	movne	r0, r2
 8000560:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000564:	bf1c      	itt	ne
 8000566:	460b      	movne	r3, r1
 8000568:	4602      	movne	r2, r0
 800056a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800056e:	bf06      	itte	eq
 8000570:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000574:	ea91 0f03 	teqeq	r1, r3
 8000578:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	bf00      	nop

08000580 <__aeabi_ui2d>:
 8000580:	f090 0f00 	teq	r0, #0
 8000584:	bf04      	itt	eq
 8000586:	2100      	moveq	r1, #0
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000590:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000594:	f04f 0500 	mov.w	r5, #0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e750      	b.n	8000440 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_i2d>:
 80005a0:	f090 0f00 	teq	r0, #0
 80005a4:	bf04      	itt	eq
 80005a6:	2100      	moveq	r1, #0
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005b8:	bf48      	it	mi
 80005ba:	4240      	negmi	r0, r0
 80005bc:	f04f 0100 	mov.w	r1, #0
 80005c0:	e73e      	b.n	8000440 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_f2d>:
 80005c4:	0042      	lsls	r2, r0, #1
 80005c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d2:	bf1f      	itttt	ne
 80005d4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005d8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005dc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005e0:	4770      	bxne	lr
 80005e2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005e6:	bf08      	it	eq
 80005e8:	4770      	bxeq	lr
 80005ea:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ee:	bf04      	itt	eq
 80005f0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005f4:	4770      	bxeq	lr
 80005f6:	b530      	push	{r4, r5, lr}
 80005f8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000604:	e71c      	b.n	8000440 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_ul2d>:
 8000608:	ea50 0201 	orrs.w	r2, r0, r1
 800060c:	bf08      	it	eq
 800060e:	4770      	bxeq	lr
 8000610:	b530      	push	{r4, r5, lr}
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	e00a      	b.n	800062e <__aeabi_l2d+0x16>

08000618 <__aeabi_l2d>:
 8000618:	ea50 0201 	orrs.w	r2, r0, r1
 800061c:	bf08      	it	eq
 800061e:	4770      	bxeq	lr
 8000620:	b530      	push	{r4, r5, lr}
 8000622:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000626:	d502      	bpl.n	800062e <__aeabi_l2d+0x16>
 8000628:	4240      	negs	r0, r0
 800062a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800062e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000632:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000636:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063a:	f43f aed8 	beq.w	80003ee <__adddf3+0xe6>
 800063e:	f04f 0203 	mov.w	r2, #3
 8000642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000646:	bf18      	it	ne
 8000648:	3203      	addne	r2, #3
 800064a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064e:	bf18      	it	ne
 8000650:	3203      	addne	r2, #3
 8000652:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000656:	f1c2 0320 	rsb	r3, r2, #32
 800065a:	fa00 fc03 	lsl.w	ip, r0, r3
 800065e:	fa20 f002 	lsr.w	r0, r0, r2
 8000662:	fa01 fe03 	lsl.w	lr, r1, r3
 8000666:	ea40 000e 	orr.w	r0, r0, lr
 800066a:	fa21 f102 	lsr.w	r1, r1, r2
 800066e:	4414      	add	r4, r2
 8000670:	e6bd      	b.n	80003ee <__adddf3+0xe6>
 8000672:	bf00      	nop

08000674 <__aeabi_dmul>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800067a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800067e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000682:	bf1d      	ittte	ne
 8000684:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000688:	ea94 0f0c 	teqne	r4, ip
 800068c:	ea95 0f0c 	teqne	r5, ip
 8000690:	f000 f8de 	bleq	8000850 <__aeabi_dmul+0x1dc>
 8000694:	442c      	add	r4, r5
 8000696:	ea81 0603 	eor.w	r6, r1, r3
 800069a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800069e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006a6:	bf18      	it	ne
 80006a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006b4:	d038      	beq.n	8000728 <__aeabi_dmul+0xb4>
 80006b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006c2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ca:	f04f 0600 	mov.w	r6, #0
 80006ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006d2:	f09c 0f00 	teq	ip, #0
 80006d6:	bf18      	it	ne
 80006d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006dc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006e0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006e4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006e8:	d204      	bcs.n	80006f4 <__aeabi_dmul+0x80>
 80006ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ee:	416d      	adcs	r5, r5
 80006f0:	eb46 0606 	adc.w	r6, r6, r6
 80006f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000700:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000704:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000708:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800070c:	bf88      	it	hi
 800070e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000712:	d81e      	bhi.n	8000752 <__aeabi_dmul+0xde>
 8000714:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000718:	bf08      	it	eq
 800071a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800071e:	f150 0000 	adcs.w	r0, r0, #0
 8000722:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800072c:	ea46 0101 	orr.w	r1, r6, r1
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800073c:	bfc2      	ittt	gt
 800073e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000746:	bd70      	popgt	{r4, r5, r6, pc}
 8000748:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800074c:	f04f 0e00 	mov.w	lr, #0
 8000750:	3c01      	subs	r4, #1
 8000752:	f300 80ab 	bgt.w	80008ac <__aeabi_dmul+0x238>
 8000756:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800075a:	bfde      	ittt	le
 800075c:	2000      	movle	r0, #0
 800075e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000762:	bd70      	pople	{r4, r5, r6, pc}
 8000764:	f1c4 0400 	rsb	r4, r4, #0
 8000768:	3c20      	subs	r4, #32
 800076a:	da35      	bge.n	80007d8 <__aeabi_dmul+0x164>
 800076c:	340c      	adds	r4, #12
 800076e:	dc1b      	bgt.n	80007a8 <__aeabi_dmul+0x134>
 8000770:	f104 0414 	add.w	r4, r4, #20
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f305 	lsl.w	r3, r0, r5
 800077c:	fa20 f004 	lsr.w	r0, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800078c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	fa21 f604 	lsr.w	r6, r1, r4
 8000798:	eb42 0106 	adc.w	r1, r2, r6
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f1c4 040c 	rsb	r4, r4, #12
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f304 	lsl.w	r3, r0, r4
 80007b4:	fa20 f005 	lsr.w	r0, r0, r5
 80007b8:	fa01 f204 	lsl.w	r2, r1, r4
 80007bc:	ea40 0002 	orr.w	r0, r0, r2
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	f141 0100 	adc.w	r1, r1, #0
 80007cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d0:	bf08      	it	eq
 80007d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f205 	lsl.w	r2, r0, r5
 80007e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e4:	fa20 f304 	lsr.w	r3, r0, r4
 80007e8:	fa01 f205 	lsl.w	r2, r1, r5
 80007ec:	ea43 0302 	orr.w	r3, r3, r2
 80007f0:	fa21 f004 	lsr.w	r0, r1, r4
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	fa21 f204 	lsr.w	r2, r1, r4
 80007fc:	ea20 0002 	bic.w	r0, r0, r2
 8000800:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000804:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000808:	bf08      	it	eq
 800080a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080e:	bd70      	pop	{r4, r5, r6, pc}
 8000810:	f094 0f00 	teq	r4, #0
 8000814:	d10f      	bne.n	8000836 <__aeabi_dmul+0x1c2>
 8000816:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800081a:	0040      	lsls	r0, r0, #1
 800081c:	eb41 0101 	adc.w	r1, r1, r1
 8000820:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000824:	bf08      	it	eq
 8000826:	3c01      	subeq	r4, #1
 8000828:	d0f7      	beq.n	800081a <__aeabi_dmul+0x1a6>
 800082a:	ea41 0106 	orr.w	r1, r1, r6
 800082e:	f095 0f00 	teq	r5, #0
 8000832:	bf18      	it	ne
 8000834:	4770      	bxne	lr
 8000836:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800083a:	0052      	lsls	r2, r2, #1
 800083c:	eb43 0303 	adc.w	r3, r3, r3
 8000840:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000844:	bf08      	it	eq
 8000846:	3d01      	subeq	r5, #1
 8000848:	d0f7      	beq.n	800083a <__aeabi_dmul+0x1c6>
 800084a:	ea43 0306 	orr.w	r3, r3, r6
 800084e:	4770      	bx	lr
 8000850:	ea94 0f0c 	teq	r4, ip
 8000854:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000858:	bf18      	it	ne
 800085a:	ea95 0f0c 	teqne	r5, ip
 800085e:	d00c      	beq.n	800087a <__aeabi_dmul+0x206>
 8000860:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000864:	bf18      	it	ne
 8000866:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086a:	d1d1      	bne.n	8000810 <__aeabi_dmul+0x19c>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800087e:	bf06      	itte	eq
 8000880:	4610      	moveq	r0, r2
 8000882:	4619      	moveq	r1, r3
 8000884:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000888:	d019      	beq.n	80008be <__aeabi_dmul+0x24a>
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	d102      	bne.n	8000896 <__aeabi_dmul+0x222>
 8000890:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000894:	d113      	bne.n	80008be <__aeabi_dmul+0x24a>
 8000896:	ea95 0f0c 	teq	r5, ip
 800089a:	d105      	bne.n	80008a8 <__aeabi_dmul+0x234>
 800089c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008a0:	bf1c      	itt	ne
 80008a2:	4610      	movne	r0, r2
 80008a4:	4619      	movne	r1, r3
 80008a6:	d10a      	bne.n	80008be <__aeabi_dmul+0x24a>
 80008a8:	ea81 0103 	eor.w	r1, r1, r3
 80008ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008b0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008c2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008c6:	bd70      	pop	{r4, r5, r6, pc}

080008c8 <__aeabi_ddiv>:
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008d6:	bf1d      	ittte	ne
 80008d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008dc:	ea94 0f0c 	teqne	r4, ip
 80008e0:	ea95 0f0c 	teqne	r5, ip
 80008e4:	f000 f8a7 	bleq	8000a36 <__aeabi_ddiv+0x16e>
 80008e8:	eba4 0405 	sub.w	r4, r4, r5
 80008ec:	ea81 0e03 	eor.w	lr, r1, r3
 80008f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008f8:	f000 8088 	beq.w	8000a0c <__aeabi_ddiv+0x144>
 80008fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000900:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000904:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000908:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800090c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000910:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000914:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000918:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800091c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000920:	429d      	cmp	r5, r3
 8000922:	bf08      	it	eq
 8000924:	4296      	cmpeq	r6, r2
 8000926:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800092a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800092e:	d202      	bcs.n	8000936 <__aeabi_ddiv+0x6e>
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	1ab6      	subs	r6, r6, r2
 8000938:	eb65 0503 	sbc.w	r5, r5, r3
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000946:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 000c 	orrcs.w	r0, r0, ip
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	ebb6 0e02 	subs.w	lr, r6, r2
 800097e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000982:	bf22      	ittt	cs
 8000984:	1ab6      	subcs	r6, r6, r2
 8000986:	4675      	movcs	r5, lr
 8000988:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800098c:	085b      	lsrs	r3, r3, #1
 800098e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000992:	ebb6 0e02 	subs.w	lr, r6, r2
 8000996:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099a:	bf22      	ittt	cs
 800099c:	1ab6      	subcs	r6, r6, r2
 800099e:	4675      	movcs	r5, lr
 80009a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80009a8:	d018      	beq.n	80009dc <__aeabi_ddiv+0x114>
 80009aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009c6:	d1c0      	bne.n	800094a <__aeabi_ddiv+0x82>
 80009c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009cc:	d10b      	bne.n	80009e6 <__aeabi_ddiv+0x11e>
 80009ce:	ea41 0100 	orr.w	r1, r1, r0
 80009d2:	f04f 0000 	mov.w	r0, #0
 80009d6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009da:	e7b6      	b.n	800094a <__aeabi_ddiv+0x82>
 80009dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009e0:	bf04      	itt	eq
 80009e2:	4301      	orreq	r1, r0
 80009e4:	2000      	moveq	r0, #0
 80009e6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ea:	bf88      	it	hi
 80009ec:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009f0:	f63f aeaf 	bhi.w	8000752 <__aeabi_dmul+0xde>
 80009f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009f8:	bf04      	itt	eq
 80009fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a02:	f150 0000 	adcs.w	r0, r0, #0
 8000a06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
 8000a0c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a10:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a14:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a18:	bfc2      	ittt	gt
 8000a1a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a22:	bd70      	popgt	{r4, r5, r6, pc}
 8000a24:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a28:	f04f 0e00 	mov.w	lr, #0
 8000a2c:	3c01      	subs	r4, #1
 8000a2e:	e690      	b.n	8000752 <__aeabi_dmul+0xde>
 8000a30:	ea45 0e06 	orr.w	lr, r5, r6
 8000a34:	e68d      	b.n	8000752 <__aeabi_dmul+0xde>
 8000a36:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a3a:	ea94 0f0c 	teq	r4, ip
 8000a3e:	bf08      	it	eq
 8000a40:	ea95 0f0c 	teqeq	r5, ip
 8000a44:	f43f af3b 	beq.w	80008be <__aeabi_dmul+0x24a>
 8000a48:	ea94 0f0c 	teq	r4, ip
 8000a4c:	d10a      	bne.n	8000a64 <__aeabi_ddiv+0x19c>
 8000a4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a52:	f47f af34 	bne.w	80008be <__aeabi_dmul+0x24a>
 8000a56:	ea95 0f0c 	teq	r5, ip
 8000a5a:	f47f af25 	bne.w	80008a8 <__aeabi_dmul+0x234>
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4619      	mov	r1, r3
 8000a62:	e72c      	b.n	80008be <__aeabi_dmul+0x24a>
 8000a64:	ea95 0f0c 	teq	r5, ip
 8000a68:	d106      	bne.n	8000a78 <__aeabi_ddiv+0x1b0>
 8000a6a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a6e:	f43f aefd 	beq.w	800086c <__aeabi_dmul+0x1f8>
 8000a72:	4610      	mov	r0, r2
 8000a74:	4619      	mov	r1, r3
 8000a76:	e722      	b.n	80008be <__aeabi_dmul+0x24a>
 8000a78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a7c:	bf18      	it	ne
 8000a7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a82:	f47f aec5 	bne.w	8000810 <__aeabi_dmul+0x19c>
 8000a86:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a8a:	f47f af0d 	bne.w	80008a8 <__aeabi_dmul+0x234>
 8000a8e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a92:	f47f aeeb 	bne.w	800086c <__aeabi_dmul+0x1f8>
 8000a96:	e712      	b.n	80008be <__aeabi_dmul+0x24a>

08000a98 <__gedf2>:
 8000a98:	f04f 3cff 	mov.w	ip, #4294967295
 8000a9c:	e006      	b.n	8000aac <__cmpdf2+0x4>
 8000a9e:	bf00      	nop

08000aa0 <__ledf2>:
 8000aa0:	f04f 0c01 	mov.w	ip, #1
 8000aa4:	e002      	b.n	8000aac <__cmpdf2+0x4>
 8000aa6:	bf00      	nop

08000aa8 <__cmpdf2>:
 8000aa8:	f04f 0c01 	mov.w	ip, #1
 8000aac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	bf18      	it	ne
 8000abe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ac2:	d01b      	beq.n	8000afc <__cmpdf2+0x54>
 8000ac4:	b001      	add	sp, #4
 8000ac6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aca:	bf0c      	ite	eq
 8000acc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ad0:	ea91 0f03 	teqne	r1, r3
 8000ad4:	bf02      	ittt	eq
 8000ad6:	ea90 0f02 	teqeq	r0, r2
 8000ada:	2000      	moveq	r0, #0
 8000adc:	4770      	bxeq	lr
 8000ade:	f110 0f00 	cmn.w	r0, #0
 8000ae2:	ea91 0f03 	teq	r1, r3
 8000ae6:	bf58      	it	pl
 8000ae8:	4299      	cmppl	r1, r3
 8000aea:	bf08      	it	eq
 8000aec:	4290      	cmpeq	r0, r2
 8000aee:	bf2c      	ite	cs
 8000af0:	17d8      	asrcs	r0, r3, #31
 8000af2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000af6:	f040 0001 	orr.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__cmpdf2+0x64>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d107      	bne.n	8000b1c <__cmpdf2+0x74>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d1d6      	bne.n	8000ac4 <__cmpdf2+0x1c>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d0d3      	beq.n	8000ac4 <__cmpdf2+0x1c>
 8000b1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_cdrcmple>:
 8000b24:	4684      	mov	ip, r0
 8000b26:	4610      	mov	r0, r2
 8000b28:	4662      	mov	r2, ip
 8000b2a:	468c      	mov	ip, r1
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4663      	mov	r3, ip
 8000b30:	e000      	b.n	8000b34 <__aeabi_cdcmpeq>
 8000b32:	bf00      	nop

08000b34 <__aeabi_cdcmpeq>:
 8000b34:	b501      	push	{r0, lr}
 8000b36:	f7ff ffb7 	bl	8000aa8 <__cmpdf2>
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	bf48      	it	mi
 8000b3e:	f110 0f00 	cmnmi.w	r0, #0
 8000b42:	bd01      	pop	{r0, pc}

08000b44 <__aeabi_dcmpeq>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff fff4 	bl	8000b34 <__aeabi_cdcmpeq>
 8000b4c:	bf0c      	ite	eq
 8000b4e:	2001      	moveq	r0, #1
 8000b50:	2000      	movne	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmplt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffea 	bl	8000b34 <__aeabi_cdcmpeq>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmple>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffe0 	bl	8000b34 <__aeabi_cdcmpeq>
 8000b74:	bf94      	ite	ls
 8000b76:	2001      	movls	r0, #1
 8000b78:	2000      	movhi	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmpge>:
 8000b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b84:	f7ff ffce 	bl	8000b24 <__aeabi_cdrcmple>
 8000b88:	bf94      	ite	ls
 8000b8a:	2001      	movls	r0, #1
 8000b8c:	2000      	movhi	r0, #0
 8000b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b92:	bf00      	nop

08000b94 <__aeabi_dcmpgt>:
 8000b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b98:	f7ff ffc4 	bl	8000b24 <__aeabi_cdrcmple>
 8000b9c:	bf34      	ite	cc
 8000b9e:	2001      	movcc	r0, #1
 8000ba0:	2000      	movcs	r0, #0
 8000ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	@ 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_fmul>:
 8000dc4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dcc:	bf1e      	ittt	ne
 8000dce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd2:	ea92 0f0c 	teqne	r2, ip
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d06f      	beq.n	8000ebc <__aeabi_fmul+0xf8>
 8000ddc:	441a      	add	r2, r3
 8000dde:	ea80 0c01 	eor.w	ip, r0, r1
 8000de2:	0240      	lsls	r0, r0, #9
 8000de4:	bf18      	it	ne
 8000de6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dea:	d01e      	beq.n	8000e2a <__aeabi_fmul+0x66>
 8000dec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000df0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dfc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e00:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e04:	bf3e      	ittt	cc
 8000e06:	0049      	lslcc	r1, r1, #1
 8000e08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e0c:	005b      	lslcc	r3, r3, #1
 8000e0e:	ea40 0001 	orr.w	r0, r0, r1
 8000e12:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e16:	2afd      	cmp	r2, #253	@ 0xfd
 8000e18:	d81d      	bhi.n	8000e56 <__aeabi_fmul+0x92>
 8000e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e22:	bf08      	it	eq
 8000e24:	f020 0001 	biceq.w	r0, r0, #1
 8000e28:	4770      	bx	lr
 8000e2a:	f090 0f00 	teq	r0, #0
 8000e2e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e32:	bf08      	it	eq
 8000e34:	0249      	lsleq	r1, r1, #9
 8000e36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e3e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e40:	bfc2      	ittt	gt
 8000e42:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4a:	4770      	bxgt	lr
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	3a01      	subs	r2, #1
 8000e56:	dc5d      	bgt.n	8000f14 <__aeabi_fmul+0x150>
 8000e58:	f112 0f19 	cmn.w	r2, #25
 8000e5c:	bfdc      	itt	le
 8000e5e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e62:	4770      	bxle	lr
 8000e64:	f1c2 0200 	rsb	r2, r2, #0
 8000e68:	0041      	lsls	r1, r0, #1
 8000e6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e6e:	f1c2 0220 	rsb	r2, r2, #32
 8000e72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7a:	f140 0000 	adc.w	r0, r0, #0
 8000e7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e82:	bf08      	it	eq
 8000e84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e88:	4770      	bx	lr
 8000e8a:	f092 0f00 	teq	r2, #0
 8000e8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0040      	lsleq	r0, r0, #1
 8000e96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e9a:	3a01      	subeq	r2, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fmul+0xce>
 8000e9e:	ea40 000c 	orr.w	r0, r0, ip
 8000ea2:	f093 0f00 	teq	r3, #0
 8000ea6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0049      	lsleq	r1, r1, #1
 8000eae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eb2:	3b01      	subeq	r3, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fmul+0xe6>
 8000eb6:	ea41 010c 	orr.w	r1, r1, ip
 8000eba:	e78f      	b.n	8000ddc <__aeabi_fmul+0x18>
 8000ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec0:	ea92 0f0c 	teq	r2, ip
 8000ec4:	bf18      	it	ne
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d00a      	beq.n	8000ee2 <__aeabi_fmul+0x11e>
 8000ecc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ed0:	bf18      	it	ne
 8000ed2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ed6:	d1d8      	bne.n	8000e8a <__aeabi_fmul+0xc6>
 8000ed8:	ea80 0001 	eor.w	r0, r0, r1
 8000edc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ee0:	4770      	bx	lr
 8000ee2:	f090 0f00 	teq	r0, #0
 8000ee6:	bf17      	itett	ne
 8000ee8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eec:	4608      	moveq	r0, r1
 8000eee:	f091 0f00 	teqne	r1, #0
 8000ef2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ef6:	d014      	beq.n	8000f22 <__aeabi_fmul+0x15e>
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	d101      	bne.n	8000f02 <__aeabi_fmul+0x13e>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	d10f      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f02:	ea93 0f0c 	teq	r3, ip
 8000f06:	d103      	bne.n	8000f10 <__aeabi_fmul+0x14c>
 8000f08:	024b      	lsls	r3, r1, #9
 8000f0a:	bf18      	it	ne
 8000f0c:	4608      	movne	r0, r1
 8000f0e:	d108      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f20:	4770      	bx	lr
 8000f22:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f26:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f2a:	4770      	bx	lr

08000f2c <__aeabi_fdiv>:
 8000f2c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f34:	bf1e      	ittt	ne
 8000f36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3a:	ea92 0f0c 	teqne	r2, ip
 8000f3e:	ea93 0f0c 	teqne	r3, ip
 8000f42:	d069      	beq.n	8001018 <__aeabi_fdiv+0xec>
 8000f44:	eba2 0203 	sub.w	r2, r2, r3
 8000f48:	ea80 0c01 	eor.w	ip, r0, r1
 8000f4c:	0249      	lsls	r1, r1, #9
 8000f4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f52:	d037      	beq.n	8000fc4 <__aeabi_fdiv+0x98>
 8000f54:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f60:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f64:	428b      	cmp	r3, r1
 8000f66:	bf38      	it	cc
 8000f68:	005b      	lslcc	r3, r3, #1
 8000f6a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f6e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f72:	428b      	cmp	r3, r1
 8000f74:	bf24      	itt	cs
 8000f76:	1a5b      	subcs	r3, r3, r1
 8000f78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f80:	bf24      	itt	cs
 8000f82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f8e:	bf24      	itt	cs
 8000f90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	bf18      	it	ne
 8000faa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fae:	d1e0      	bne.n	8000f72 <__aeabi_fdiv+0x46>
 8000fb0:	2afd      	cmp	r2, #253	@ 0xfd
 8000fb2:	f63f af50 	bhi.w	8000e56 <__aeabi_fmul+0x92>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fbc:	bf08      	it	eq
 8000fbe:	f020 0001 	biceq.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fc8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fcc:	327f      	adds	r2, #127	@ 0x7f
 8000fce:	bfc2      	ittt	gt
 8000fd0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fd4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd8:	4770      	bxgt	lr
 8000fda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	3a01      	subs	r2, #1
 8000fe4:	e737      	b.n	8000e56 <__aeabi_fmul+0x92>
 8000fe6:	f092 0f00 	teq	r2, #0
 8000fea:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fee:	bf02      	ittt	eq
 8000ff0:	0040      	lsleq	r0, r0, #1
 8000ff2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ff6:	3a01      	subeq	r2, #1
 8000ff8:	d0f9      	beq.n	8000fee <__aeabi_fdiv+0xc2>
 8000ffa:	ea40 000c 	orr.w	r0, r0, ip
 8000ffe:	f093 0f00 	teq	r3, #0
 8001002:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001006:	bf02      	ittt	eq
 8001008:	0049      	lsleq	r1, r1, #1
 800100a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800100e:	3b01      	subeq	r3, #1
 8001010:	d0f9      	beq.n	8001006 <__aeabi_fdiv+0xda>
 8001012:	ea41 010c 	orr.w	r1, r1, ip
 8001016:	e795      	b.n	8000f44 <__aeabi_fdiv+0x18>
 8001018:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800101c:	ea92 0f0c 	teq	r2, ip
 8001020:	d108      	bne.n	8001034 <__aeabi_fdiv+0x108>
 8001022:	0242      	lsls	r2, r0, #9
 8001024:	f47f af7d 	bne.w	8000f22 <__aeabi_fmul+0x15e>
 8001028:	ea93 0f0c 	teq	r3, ip
 800102c:	f47f af70 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001030:	4608      	mov	r0, r1
 8001032:	e776      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001034:	ea93 0f0c 	teq	r3, ip
 8001038:	d104      	bne.n	8001044 <__aeabi_fdiv+0x118>
 800103a:	024b      	lsls	r3, r1, #9
 800103c:	f43f af4c 	beq.w	8000ed8 <__aeabi_fmul+0x114>
 8001040:	4608      	mov	r0, r1
 8001042:	e76e      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001044:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001048:	bf18      	it	ne
 800104a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800104e:	d1ca      	bne.n	8000fe6 <__aeabi_fdiv+0xba>
 8001050:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001054:	f47f af5c 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001058:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800105c:	f47f af3c 	bne.w	8000ed8 <__aeabi_fmul+0x114>
 8001060:	e75f      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001062:	bf00      	nop

08001064 <__gesf2>:
 8001064:	f04f 3cff 	mov.w	ip, #4294967295
 8001068:	e006      	b.n	8001078 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__lesf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	e002      	b.n	8001078 <__cmpsf2+0x4>
 8001072:	bf00      	nop

08001074 <__cmpsf2>:
 8001074:	f04f 0c01 	mov.w	ip, #1
 8001078:	f84d cd04 	str.w	ip, [sp, #-4]!
 800107c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001080:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001084:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001088:	bf18      	it	ne
 800108a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800108e:	d011      	beq.n	80010b4 <__cmpsf2+0x40>
 8001090:	b001      	add	sp, #4
 8001092:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001096:	bf18      	it	ne
 8001098:	ea90 0f01 	teqne	r0, r1
 800109c:	bf58      	it	pl
 800109e:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a2:	bf88      	it	hi
 80010a4:	17c8      	asrhi	r0, r1, #31
 80010a6:	bf38      	it	cc
 80010a8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010ac:	bf18      	it	ne
 80010ae:	f040 0001 	orrne.w	r0, r0, #1
 80010b2:	4770      	bx	lr
 80010b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b8:	d102      	bne.n	80010c0 <__cmpsf2+0x4c>
 80010ba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010be:	d105      	bne.n	80010cc <__cmpsf2+0x58>
 80010c0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c4:	d1e4      	bne.n	8001090 <__cmpsf2+0x1c>
 80010c6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ca:	d0e1      	beq.n	8001090 <__cmpsf2+0x1c>
 80010cc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <__aeabi_cfrcmple>:
 80010d4:	4684      	mov	ip, r0
 80010d6:	4608      	mov	r0, r1
 80010d8:	4661      	mov	r1, ip
 80010da:	e7ff      	b.n	80010dc <__aeabi_cfcmpeq>

080010dc <__aeabi_cfcmpeq>:
 80010dc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010de:	f7ff ffc9 	bl	8001074 <__cmpsf2>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	bf48      	it	mi
 80010e6:	f110 0f00 	cmnmi.w	r0, #0
 80010ea:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ec <__aeabi_fcmpeq>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff fff4 	bl	80010dc <__aeabi_cfcmpeq>
 80010f4:	bf0c      	ite	eq
 80010f6:	2001      	moveq	r0, #1
 80010f8:	2000      	movne	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmplt>:
 8001100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001104:	f7ff ffea 	bl	80010dc <__aeabi_cfcmpeq>
 8001108:	bf34      	ite	cc
 800110a:	2001      	movcc	r0, #1
 800110c:	2000      	movcs	r0, #0
 800110e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001112:	bf00      	nop

08001114 <__aeabi_fcmple>:
 8001114:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001118:	f7ff ffe0 	bl	80010dc <__aeabi_cfcmpeq>
 800111c:	bf94      	ite	ls
 800111e:	2001      	movls	r0, #1
 8001120:	2000      	movhi	r0, #0
 8001122:	f85d fb08 	ldr.w	pc, [sp], #8
 8001126:	bf00      	nop

08001128 <__aeabi_fcmpge>:
 8001128:	f84d ed08 	str.w	lr, [sp, #-8]!
 800112c:	f7ff ffd2 	bl	80010d4 <__aeabi_cfrcmple>
 8001130:	bf94      	ite	ls
 8001132:	2001      	movls	r0, #1
 8001134:	2000      	movhi	r0, #0
 8001136:	f85d fb08 	ldr.w	pc, [sp], #8
 800113a:	bf00      	nop

0800113c <__aeabi_fcmpgt>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff ffc8 	bl	80010d4 <__aeabi_cfrcmple>
 8001144:	bf34      	ite	cc
 8001146:	2001      	movcc	r0, #1
 8001148:	2000      	movcs	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_fcmpun>:
 8001150:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001154:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001158:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800115c:	d102      	bne.n	8001164 <__aeabi_fcmpun+0x14>
 800115e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001162:	d108      	bne.n	8001176 <__aeabi_fcmpun+0x26>
 8001164:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001168:	d102      	bne.n	8001170 <__aeabi_fcmpun+0x20>
 800116a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800116e:	d102      	bne.n	8001176 <__aeabi_fcmpun+0x26>
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	4770      	bx	lr
 8001176:	f04f 0001 	mov.w	r0, #1
 800117a:	4770      	bx	lr

0800117c <__aeabi_f2iz>:
 800117c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001180:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001184:	d30f      	bcc.n	80011a6 <__aeabi_f2iz+0x2a>
 8001186:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800118a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800118e:	d90d      	bls.n	80011ac <__aeabi_f2iz+0x30>
 8001190:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001194:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001198:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800119c:	fa23 f002 	lsr.w	r0, r3, r2
 80011a0:	bf18      	it	ne
 80011a2:	4240      	negne	r0, r0
 80011a4:	4770      	bx	lr
 80011a6:	f04f 0000 	mov.w	r0, #0
 80011aa:	4770      	bx	lr
 80011ac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011b0:	d101      	bne.n	80011b6 <__aeabi_f2iz+0x3a>
 80011b2:	0242      	lsls	r2, r0, #9
 80011b4:	d105      	bne.n	80011c2 <__aeabi_f2iz+0x46>
 80011b6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80011ba:	bf08      	it	eq
 80011bc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80011c0:	4770      	bx	lr
 80011c2:	f04f 0000 	mov.w	r0, #0
 80011c6:	4770      	bx	lr

080011c8 <__aeabi_f2uiz>:
 80011c8:	0042      	lsls	r2, r0, #1
 80011ca:	d20e      	bcs.n	80011ea <__aeabi_f2uiz+0x22>
 80011cc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011d0:	d30b      	bcc.n	80011ea <__aeabi_f2uiz+0x22>
 80011d2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011d6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011da:	d409      	bmi.n	80011f0 <__aeabi_f2uiz+0x28>
 80011dc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011e4:	fa23 f002 	lsr.w	r0, r3, r2
 80011e8:	4770      	bx	lr
 80011ea:	f04f 0000 	mov.w	r0, #0
 80011ee:	4770      	bx	lr
 80011f0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011f4:	d101      	bne.n	80011fa <__aeabi_f2uiz+0x32>
 80011f6:	0242      	lsls	r2, r0, #9
 80011f8:	d102      	bne.n	8001200 <__aeabi_f2uiz+0x38>
 80011fa:	f04f 30ff 	mov.w	r0, #4294967295
 80011fe:	4770      	bx	lr
 8001200:	f04f 0000 	mov.w	r0, #0
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop

08001208 <Delay>:
uint16_t	LCD_Read_PixelData      ( void );

#define CHAR_WIDTH  24
#define CHAR_HEIGHT 24

void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	e002      	b.n	8001218 <Delay+0x10>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3b01      	subs	r3, #1
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f9      	bne.n	8001212 <Delay+0xa>
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <LCD_INIT>:

void LCD_INIT ( void )
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001230:	2001      	movs	r0, #1
 8001232:	f000 f829 	bl	8001288 <LCD_BackLed_Control>
	LCD_Rst();
 8001236:	f000 f80f 	bl	8001258 <LCD_Rst>
	LCD_REG_Config();
 800123a:	f000 f85f 	bl	80012fc <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800123e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001248:	22f0      	movs	r2, #240	@ 0xf0
 800124a:	2100      	movs	r1, #0
 800124c:	2000      	movs	r0, #0
 800124e:	f000 f9e6 	bl	800161e <LCD_Clear>
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2102      	movs	r1, #2
 8001260:	4807      	ldr	r0, [pc, #28]	@ (8001280 <LCD_Rst+0x28>)
 8001262:	f003 f92a 	bl	80044ba <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8001266:	4807      	ldr	r0, [pc, #28]	@ (8001284 <LCD_Rst+0x2c>)
 8001268:	f7ff ffce 	bl	8001208 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2102      	movs	r1, #2
 8001270:	4803      	ldr	r0, [pc, #12]	@ (8001280 <LCD_Rst+0x28>)
 8001272:	f003 f922 	bl	80044ba <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8001276:	4803      	ldr	r0, [pc, #12]	@ (8001284 <LCD_Rst+0x2c>)
 8001278:	f7ff ffc6 	bl	8001208 <Delay>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40011800 	.word	0x40011800
 8001284:	0002bffc 	.word	0x0002bffc

08001288 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800129e:	4807      	ldr	r0, [pc, #28]	@ (80012bc <LCD_BackLed_Control+0x34>)
 80012a0:	f003 f90b 	bl	80044ba <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80012a4:	e005      	b.n	80012b2 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80012a6:	2201      	movs	r2, #1
 80012a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012ac:	4803      	ldr	r0, [pc, #12]	@ (80012bc <LCD_BackLed_Control+0x34>)
 80012ae:	f003 f904 	bl	80044ba <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40011400 	.word	0x40011400

080012c0 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80012ca:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	8013      	strh	r3, [r2, #0]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80012e6:	4a04      	ldr	r2, [pc, #16]	@ (80012f8 <LCD_Write_Data+0x1c>)
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	8013      	strh	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	60020000 	.word	0x60020000

080012fc <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001300:	20cf      	movs	r0, #207	@ 0xcf
 8001302:	f7ff ffdd 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff ffe8 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 800130c:	2081      	movs	r0, #129	@ 0x81
 800130e:	f7ff ffe5 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001312:	2030      	movs	r0, #48	@ 0x30
 8001314:	f7ff ffe2 	bl	80012dc <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001318:	20ed      	movs	r0, #237	@ 0xed
 800131a:	f7ff ffd1 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800131e:	2064      	movs	r0, #100	@ 0x64
 8001320:	f7ff ffdc 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001324:	2003      	movs	r0, #3
 8001326:	f7ff ffd9 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800132a:	2012      	movs	r0, #18
 800132c:	f7ff ffd6 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001330:	2081      	movs	r0, #129	@ 0x81
 8001332:	f7ff ffd3 	bl	80012dc <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001336:	20e8      	movs	r0, #232	@ 0xe8
 8001338:	f7ff ffc2 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800133c:	2085      	movs	r0, #133	@ 0x85
 800133e:	f7ff ffcd 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001342:	2010      	movs	r0, #16
 8001344:	f7ff ffca 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001348:	2078      	movs	r0, #120	@ 0x78
 800134a:	f7ff ffc7 	bl	80012dc <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800134e:	20cb      	movs	r0, #203	@ 0xcb
 8001350:	f7ff ffb6 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001354:	2039      	movs	r0, #57	@ 0x39
 8001356:	f7ff ffc1 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800135a:	202c      	movs	r0, #44	@ 0x2c
 800135c:	f7ff ffbe 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff ffbb 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001366:	2034      	movs	r0, #52	@ 0x34
 8001368:	f7ff ffb8 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 800136c:	2002      	movs	r0, #2
 800136e:	f7ff ffb5 	bl	80012dc <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001372:	20f7      	movs	r0, #247	@ 0xf7
 8001374:	f7ff ffa4 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001378:	2020      	movs	r0, #32
 800137a:	f7ff ffaf 	bl	80012dc <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800137e:	20ea      	movs	r0, #234	@ 0xea
 8001380:	f7ff ff9e 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff ffa9 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff ffa6 	bl	80012dc <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001390:	20b1      	movs	r0, #177	@ 0xb1
 8001392:	f7ff ff95 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001396:	2000      	movs	r0, #0
 8001398:	f7ff ffa0 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800139c:	201b      	movs	r0, #27
 800139e:	f7ff ff9d 	bl	80012dc <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80013a2:	20b6      	movs	r0, #182	@ 0xb6
 80013a4:	f7ff ff8c 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80013a8:	200a      	movs	r0, #10
 80013aa:	f7ff ff97 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80013ae:	20a2      	movs	r0, #162	@ 0xa2
 80013b0:	f7ff ff94 	bl	80012dc <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80013b4:	20c0      	movs	r0, #192	@ 0xc0
 80013b6:	f7ff ff83 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80013ba:	2035      	movs	r0, #53	@ 0x35
 80013bc:	f7ff ff8e 	bl	80012dc <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80013c0:	20c1      	movs	r0, #193	@ 0xc1
 80013c2:	f7ff ff7d 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80013c6:	2011      	movs	r0, #17
 80013c8:	f7ff ff88 	bl	80012dc <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80013cc:	20c5      	movs	r0, #197	@ 0xc5
 80013ce:	f7ff ff77 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80013d2:	2045      	movs	r0, #69	@ 0x45
 80013d4:	f7ff ff82 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80013d8:	2045      	movs	r0, #69	@ 0x45
 80013da:	f7ff ff7f 	bl	80012dc <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80013de:	20c7      	movs	r0, #199	@ 0xc7
 80013e0:	f7ff ff6e 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80013e4:	20a2      	movs	r0, #162	@ 0xa2
 80013e6:	f7ff ff79 	bl	80012dc <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80013ea:	20f2      	movs	r0, #242	@ 0xf2
 80013ec:	f7ff ff68 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff ff73 	bl	80012dc <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80013f6:	2026      	movs	r0, #38	@ 0x26
 80013f8:	f7ff ff62 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80013fc:	2001      	movs	r0, #1
 80013fe:	f7ff ff6d 	bl	80012dc <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001402:	20e0      	movs	r0, #224	@ 0xe0
 8001404:	f7ff ff5c 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001408:	200f      	movs	r0, #15
 800140a:	f7ff ff67 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800140e:	2026      	movs	r0, #38	@ 0x26
 8001410:	f7ff ff64 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001414:	2024      	movs	r0, #36	@ 0x24
 8001416:	f7ff ff61 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800141a:	200b      	movs	r0, #11
 800141c:	f7ff ff5e 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001420:	200e      	movs	r0, #14
 8001422:	f7ff ff5b 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001426:	2009      	movs	r0, #9
 8001428:	f7ff ff58 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 800142c:	2054      	movs	r0, #84	@ 0x54
 800142e:	f7ff ff55 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001432:	20a8      	movs	r0, #168	@ 0xa8
 8001434:	f7ff ff52 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001438:	2046      	movs	r0, #70	@ 0x46
 800143a:	f7ff ff4f 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800143e:	200c      	movs	r0, #12
 8001440:	f7ff ff4c 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001444:	2017      	movs	r0, #23
 8001446:	f7ff ff49 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800144a:	2009      	movs	r0, #9
 800144c:	f7ff ff46 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001450:	200f      	movs	r0, #15
 8001452:	f7ff ff43 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001456:	2007      	movs	r0, #7
 8001458:	f7ff ff40 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff ff3d 	bl	80012dc <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001462:	20e1      	movs	r0, #225	@ 0xe1
 8001464:	f7ff ff2c 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff ff37 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800146e:	2019      	movs	r0, #25
 8001470:	f7ff ff34 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001474:	201b      	movs	r0, #27
 8001476:	f7ff ff31 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800147a:	2004      	movs	r0, #4
 800147c:	f7ff ff2e 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001480:	2010      	movs	r0, #16
 8001482:	f7ff ff2b 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001486:	2007      	movs	r0, #7
 8001488:	f7ff ff28 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 800148c:	202a      	movs	r0, #42	@ 0x2a
 800148e:	f7ff ff25 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001492:	2047      	movs	r0, #71	@ 0x47
 8001494:	f7ff ff22 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001498:	2039      	movs	r0, #57	@ 0x39
 800149a:	f7ff ff1f 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800149e:	2003      	movs	r0, #3
 80014a0:	f7ff ff1c 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80014a4:	2006      	movs	r0, #6
 80014a6:	f7ff ff19 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80014aa:	2006      	movs	r0, #6
 80014ac:	f7ff ff16 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80014b0:	2030      	movs	r0, #48	@ 0x30
 80014b2:	f7ff ff13 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80014b6:	2038      	movs	r0, #56	@ 0x38
 80014b8:	f7ff ff10 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80014bc:	200f      	movs	r0, #15
 80014be:	f7ff ff0d 	bl	80012dc <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80014c2:	2036      	movs	r0, #54	@ 0x36
 80014c4:	f7ff fefc 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 80014c8:	20c8      	movs	r0, #200	@ 0xc8
 80014ca:	f7ff ff07 	bl	80012dc <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80014ce:	202a      	movs	r0, #42	@ 0x2a
 80014d0:	f7ff fef6 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff ff01 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff fefe 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80014e0:	2000      	movs	r0, #0
 80014e2:	f7ff fefb 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80014e6:	20ef      	movs	r0, #239	@ 0xef
 80014e8:	f7ff fef8 	bl	80012dc <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80014ec:	202b      	movs	r0, #43	@ 0x2b
 80014ee:	f7ff fee7 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff fef2 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80014f8:	2000      	movs	r0, #0
 80014fa:	f7ff feef 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80014fe:	2001      	movs	r0, #1
 8001500:	f7ff feec 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001504:	203f      	movs	r0, #63	@ 0x3f
 8001506:	f7ff fee9 	bl	80012dc <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800150a:	203a      	movs	r0, #58	@ 0x3a
 800150c:	f7ff fed8 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001510:	2055      	movs	r0, #85	@ 0x55
 8001512:	f7ff fee3 	bl	80012dc <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001516:	2011      	movs	r0, #17
 8001518:	f7ff fed2 	bl	80012c0 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 800151c:	4803      	ldr	r0, [pc, #12]	@ (800152c <LCD_REG_Config+0x230>)
 800151e:	f7ff fe73 	bl	8001208 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001522:	2029      	movs	r0, #41	@ 0x29
 8001524:	f7ff fecc 	bl	80012c0 <LCD_Write_Cmd>
	
	
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	0002bffc 	.word	0x0002bffc

08001530 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4604      	mov	r4, r0
 8001538:	4608      	mov	r0, r1
 800153a:	4611      	mov	r1, r2
 800153c:	461a      	mov	r2, r3
 800153e:	4623      	mov	r3, r4
 8001540:	80fb      	strh	r3, [r7, #6]
 8001542:	4603      	mov	r3, r0
 8001544:	80bb      	strh	r3, [r7, #4]
 8001546:	460b      	mov	r3, r1
 8001548:	807b      	strh	r3, [r7, #2]
 800154a:	4613      	mov	r3, r2
 800154c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800154e:	202a      	movs	r0, #42	@ 0x2a
 8001550:	f7ff feb6 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	0a1b      	lsrs	r3, r3, #8
 8001558:	b29b      	uxth	r3, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff febe 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	b29b      	uxth	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff feb8 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 800156c:	88fa      	ldrh	r2, [r7, #6]
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	4413      	add	r3, r2
 8001572:	3b01      	subs	r3, #1
 8001574:	121b      	asrs	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff feaf 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800157e:	88fa      	ldrh	r2, [r7, #6]
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	4413      	add	r3, r2
 8001584:	b29b      	uxth	r3, r3
 8001586:	3b01      	subs	r3, #1
 8001588:	b29b      	uxth	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	b29b      	uxth	r3, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fea4 	bl	80012dc <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001594:	202b      	movs	r0, #43	@ 0x2b
 8001596:	f7ff fe93 	bl	80012c0 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 800159a:	88bb      	ldrh	r3, [r7, #4]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fe9b 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80015a6:	88bb      	ldrh	r3, [r7, #4]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fe95 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80015b2:	88ba      	ldrh	r2, [r7, #4]
 80015b4:	883b      	ldrh	r3, [r7, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	3b01      	subs	r3, #1
 80015ba:	121b      	asrs	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fe8c 	bl	80012dc <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80015c4:	88ba      	ldrh	r2, [r7, #4]
 80015c6:	883b      	ldrh	r3, [r7, #0]
 80015c8:	4413      	add	r3, r2
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	3b01      	subs	r3, #1
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fe81 	bl	80012dc <LCD_Write_Data>
	
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd90      	pop	{r4, r7, pc}

080015e2 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	460b      	mov	r3, r1
 80015ec:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80015f2:	202c      	movs	r0, #44	@ 0x2c
 80015f4:	f7ff fe64 	bl	80012c0 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e006      	b.n	800160c <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fe6b 	bl	80012dc <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3301      	adds	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	d3f4      	bcc.n	80015fe <LCD_FillColor+0x1c>
		
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800161e:	b590      	push	{r4, r7, lr}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	4604      	mov	r4, r0
 8001626:	4608      	mov	r0, r1
 8001628:	4611      	mov	r1, r2
 800162a:	461a      	mov	r2, r3
 800162c:	4623      	mov	r3, r4
 800162e:	80fb      	strh	r3, [r7, #6]
 8001630:	4603      	mov	r3, r0
 8001632:	80bb      	strh	r3, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
 8001638:	4613      	mov	r3, r2
 800163a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800163c:	883b      	ldrh	r3, [r7, #0]
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	88b9      	ldrh	r1, [r7, #4]
 8001642:	88f8      	ldrh	r0, [r7, #6]
 8001644:	f7ff ff74 	bl	8001530 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	883a      	ldrh	r2, [r7, #0]
 800164c:	fb02 f303 	mul.w	r3, r2, r3
 8001650:	461a      	mov	r2, r3
 8001652:	8b3b      	ldrh	r3, [r7, #24]
 8001654:	4619      	mov	r1, r3
 8001656:	4610      	mov	r0, r2
 8001658:	f7ff ffc3 	bl	80015e2 <LCD_FillColor>
	
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bd90      	pop	{r4, r7, pc}

08001664 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
 800166e:	460b      	mov	r3, r1
 8001670:	80bb      	strh	r3, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	3b20      	subs	r3, #32
 800167a:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 800167c:	88b9      	ldrh	r1, [r7, #4]
 800167e:	88f8      	ldrh	r0, [r7, #6]
 8001680:	2310      	movs	r3, #16
 8001682:	2208      	movs	r2, #8
 8001684:	f7ff ff54 	bl	8001530 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001688:	202c      	movs	r0, #44	@ 0x2c
 800168a:	f7ff fe19 	bl	80012c0 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800168e:	2300      	movs	r3, #0
 8001690:	73bb      	strb	r3, [r7, #14]
 8001692:	e023      	b.n	80016dc <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001694:	7b3a      	ldrb	r2, [r7, #12]
 8001696:	7bbb      	ldrb	r3, [r7, #14]
 8001698:	4914      	ldr	r1, [pc, #80]	@ (80016ec <LCD_DrawChar+0x88>)
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	440a      	add	r2, r1
 800169e:	4413      	add	r3, r2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80016a4:	2300      	movs	r3, #0
 80016a6:	737b      	strb	r3, [r7, #13]
 80016a8:	e012      	b.n	80016d0 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80016b4:	201f      	movs	r0, #31
 80016b6:	f7ff fe11 	bl	80012dc <LCD_Write_Data>
 80016ba:	e003      	b.n	80016c4 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80016bc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80016c0:	f7ff fe0c 	bl	80012dc <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80016ca:	7b7b      	ldrb	r3, [r7, #13]
 80016cc:	3301      	adds	r3, #1
 80016ce:	737b      	strb	r3, [r7, #13]
 80016d0:	7b7b      	ldrb	r3, [r7, #13]
 80016d2:	2b07      	cmp	r3, #7
 80016d4:	d9e9      	bls.n	80016aa <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80016d6:	7bbb      	ldrb	r3, [r7, #14]
 80016d8:	3301      	adds	r3, #1
 80016da:	73bb      	strb	r3, [r7, #14]
 80016dc:	7bbb      	ldrb	r3, [r7, #14]
 80016de:	2b0f      	cmp	r3, #15
 80016e0:	d9d8      	bls.n	8001694 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80016e2:	bf00      	nop
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	08007f1c 	.word	0x08007f1c

080016f0 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	603a      	str	r2, [r7, #0]
 80016fa:	80fb      	strh	r3, [r7, #6]
 80016fc:	460b      	mov	r3, r1
 80016fe:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001700:	e01c      	b.n	800173c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	2be8      	cmp	r3, #232	@ 0xe8
 8001706:	d904      	bls.n	8001712 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001708:	2300      	movs	r3, #0
 800170a:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 800170c:	88bb      	ldrh	r3, [r7, #4]
 800170e:	3310      	adds	r3, #16
 8001710:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001712:	88bb      	ldrh	r3, [r7, #4]
 8001714:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8001718:	d903      	bls.n	8001722 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800171a:	2300      	movs	r3, #0
 800171c:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800171e:	2300      	movs	r3, #0
 8001720:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	781a      	ldrb	r2, [r3, #0]
 8001726:	88b9      	ldrh	r1, [r7, #4]
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff9a 	bl	8001664 <LCD_DrawChar>
		
		pStr ++;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	3301      	adds	r3, #1
 8001734:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	3308      	adds	r3, #8
 800173a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1de      	bne.n	8001702 <LCD_DrawString+0x12>
		
	}
	
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
    if(in >= 0.0f)
 8001758:	f04f 0100 	mov.w	r1, #0
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff fce3 	bl	8001128 <__aeabi_fcmpge>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <arm_sqrt_f32+0x2a>
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined ( __ICCARM__ ) && (__VER__ >= 6040000)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f006 fa77 	bl	8007c5c <sqrtf>
 800176e:	4602      	mov	r2, r0
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	601a      	str	r2, [r3, #0]
#endif

      return (ARM_MATH_SUCCESS);
 8001774:	2300      	movs	r3, #0
 8001776:	e005      	b.n	8001784 <arm_sqrt_f32+0x36>
    }
    else
    {
      *pOut = 0.0f;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <apply_hann_window>:
  * @brief  Apply Hann window to input data to reduce spectral leakage
  * @param  data: Input data array
  * @param  N: Number of samples
  * @retval None
  */
void apply_hann_window(float *data, uint32_t N) {
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  for (uint32_t i = 0; i < N; i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	e035      	b.n	8001808 <apply_hann_window+0x7c>
    data[i] *= 0.5f * (1.0f - arm_cos_f32(2.0f * PI * i / (N - 1)));
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f7ff fab9 	bl	8000d14 <__aeabi_ui2f>
 80017a2:	4603      	mov	r3, r0
 80017a4:	491d      	ldr	r1, [pc, #116]	@ (800181c <apply_hann_window+0x90>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fb0c 	bl	8000dc4 <__aeabi_fmul>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461c      	mov	r4, r3
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff faad 	bl	8000d14 <__aeabi_ui2f>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4619      	mov	r1, r3
 80017be:	4620      	mov	r0, r4
 80017c0:	f7ff fbb4 	bl	8000f2c <__aeabi_fdiv>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f005 f874 	bl	80068b4 <arm_cos_f32>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80017d4:	f7ff f9ec 	bl	8000bb0 <__aeabi_fsub>
 80017d8:	4603      	mov	r3, r0
 80017da:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff faf0 	bl	8000dc4 <__aeabi_fmul>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4618      	mov	r0, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	6819      	ldr	r1, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	18d4      	adds	r4, r2, r3
 80017fa:	f7ff fae3 	bl	8000dc4 <__aeabi_fmul>
 80017fe:	4603      	mov	r3, r0
 8001800:	6023      	str	r3, [r4, #0]
  for (uint32_t i = 0; i < N; i++) {
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3301      	adds	r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d3c5      	bcc.n	800179c <apply_hann_window+0x10>
  }
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	bd90      	pop	{r4, r7, pc}
 800181a:	bf00      	nop
 800181c:	40c90fdb 	.word	0x40c90fdb

08001820 <high_pass_filter>:
  * @brief  Apply a simple high-pass filter to remove low-frequency noise
  * @param  data: Input data array
  * @param  N: Number of samples
  * @retval None
  */
void high_pass_filter(float *data, uint32_t N) {
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  // Simple first-order high-pass filter with cutoff ~20 Hz
  float alpha = 0.98f; // Adjusted for lower cutoff
 800182a:	4b21      	ldr	r3, [pc, #132]	@ (80018b0 <high_pass_filter+0x90>)
 800182c:	60fb      	str	r3, [r7, #12]
  float prev = 0.0f;
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < N; i++) {
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	e031      	b.n	800189e <high_pass_filter+0x7e>
    float curr = data[i];
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60bb      	str	r3, [r7, #8]
    data[i] = alpha * (prev + data[i] - (i > 0 ? data[i-1] : 0.0f));
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6979      	ldr	r1, [r7, #20]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff f9ae 	bl	8000bb4 <__addsf3>
 8001858:	4603      	mov	r3, r0
 800185a:	4618      	mov	r0, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d008      	beq.n	8001874 <high_pass_filter+0x54>
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001868:	3b01      	subs	r3, #1
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	4413      	add	r3, r2
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	e001      	b.n	8001878 <high_pass_filter+0x58>
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f999 	bl	8000bb0 <__aeabi_fsub>
 800187e:	4603      	mov	r3, r0
 8001880:	4618      	mov	r0, r3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	18d4      	adds	r4, r2, r3
 800188a:	68f9      	ldr	r1, [r7, #12]
 800188c:	f7ff fa9a 	bl	8000dc4 <__aeabi_fmul>
 8001890:	4603      	mov	r3, r0
 8001892:	6023      	str	r3, [r4, #0]
    prev = curr;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < N; i++) {
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	3301      	adds	r3, #1
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d3c9      	bcc.n	800183a <high_pass_filter+0x1a>
  }
}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd90      	pop	{r4, r7, pc}
 80018b0:	3f7ae148 	.word	0x3f7ae148

080018b4 <find_dominant_freq>:
  * @brief  Find dominant frequency from FFT output
  * @param  fft_out: FFT output array (complex interleaved)
  * @param  N: FFT size
  * @retval Dominant frequency in Hz
  */
float find_dominant_freq(float *fft_out, uint32_t N) {
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b09d      	sub	sp, #116	@ 0x74
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  float max_mag = 0.0f;
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  uint32_t max_idx = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint32_t min_idx = (uint32_t)(50.0f * N / SAMPLING_RATE); // Min 50 Hz
 80018c8:	6838      	ldr	r0, [r7, #0]
 80018ca:	f7ff fa23 	bl	8000d14 <__aeabi_ui2f>
 80018ce:	4603      	mov	r3, r0
 80018d0:	494f      	ldr	r1, [pc, #316]	@ (8001a10 <find_dominant_freq+0x15c>)
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fa76 	bl	8000dc4 <__aeabi_fmul>
 80018d8:	4603      	mov	r3, r0
 80018da:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fb24 	bl	8000f2c <__aeabi_fdiv>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fc6e 	bl	80011c8 <__aeabi_f2uiz>
 80018ec:	4603      	mov	r3, r0
 80018ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  uint32_t max_idx_limit = (uint32_t)(400.0f * N / SAMPLING_RATE); // Max 400 Hz
 80018f0:	6838      	ldr	r0, [r7, #0]
 80018f2:	f7ff fa0f 	bl	8000d14 <__aeabi_ui2f>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4946      	ldr	r1, [pc, #280]	@ (8001a14 <find_dominant_freq+0x160>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fa62 	bl	8000dc4 <__aeabi_fmul>
 8001900:	4603      	mov	r3, r0
 8001902:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fb10 	bl	8000f2c <__aeabi_fdiv>
 800190c:	4603      	mov	r3, r0
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fc5a 	bl	80011c8 <__aeabi_f2uiz>
 8001914:	4603      	mov	r3, r0
 8001916:	657b      	str	r3, [r7, #84]	@ 0x54
  for (uint32_t i = min_idx; i < max_idx_limit && i < N / 2; i++) {
 8001918:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800191a:	667b      	str	r3, [r7, #100]	@ 0x64
 800191c:	e039      	b.n	8001992 <find_dominant_freq+0xde>
    float mag;
    arm_sqrt_f32(fft_out[2*i] * fft_out[2*i] + fft_out[2*i+1] * fft_out[2*i+1], &mag);
 800191e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff fa46 	bl	8000dc4 <__aeabi_fmul>
 8001938:	4603      	mov	r3, r0
 800193a:	461c      	mov	r4, r3
 800193c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	3304      	adds	r3, #4
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	3304      	adds	r3, #4
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	f7ff fa35 	bl	8000dc4 <__aeabi_fmul>
 800195a:	4603      	mov	r3, r0
 800195c:	4619      	mov	r1, r3
 800195e:	4620      	mov	r0, r4
 8001960:	f7ff f928 	bl	8000bb4 <__addsf3>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	4619      	mov	r1, r3
 800196e:	4610      	mov	r0, r2
 8001970:	f7ff feed 	bl	800174e <arm_sqrt_f32>
    if (mag > max_mag) {
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4619      	mov	r1, r3
 8001978:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800197a:	f7ff fbc1 	bl	8001100 <__aeabi_fcmplt>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <find_dominant_freq+0xd8>
      max_mag = mag;
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	66fb      	str	r3, [r7, #108]	@ 0x6c
      max_idx = i;
 8001988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800198a:	66bb      	str	r3, [r7, #104]	@ 0x68
  for (uint32_t i = min_idx; i < max_idx_limit && i < N / 2; i++) {
 800198c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800198e:	3301      	adds	r3, #1
 8001990:	667b      	str	r3, [r7, #100]	@ 0x64
 8001992:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001996:	429a      	cmp	r2, r3
 8001998:	d204      	bcs.n	80019a4 <find_dominant_freq+0xf0>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d3bc      	bcc.n	800191e <find_dominant_freq+0x6a>
    }
  }
  // Debug signal magnitude
  char buff[50];
  sprintf(buff, "Max Mag: %d.%02d    ", (int)max_mag, (int)((max_mag - (int)max_mag) * 100));
 80019a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80019a6:	f7ff fbe9 	bl	800117c <__aeabi_f2iz>
 80019aa:	4604      	mov	r4, r0
 80019ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80019ae:	f7ff fbe5 	bl	800117c <__aeabi_f2iz>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f9b1 	bl	8000d1c <__aeabi_i2f>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4619      	mov	r1, r3
 80019be:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80019c0:	f7ff f8f6 	bl	8000bb0 <__aeabi_fsub>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4914      	ldr	r1, [pc, #80]	@ (8001a18 <find_dominant_freq+0x164>)
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f9fb 	bl	8000dc4 <__aeabi_fmul>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fbd3 	bl	800117c <__aeabi_f2iz>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f107 0014 	add.w	r0, r7, #20
 80019dc:	4622      	mov	r2, r4
 80019de:	490f      	ldr	r1, [pc, #60]	@ (8001a1c <find_dominant_freq+0x168>)
 80019e0:	f005 fc84 	bl	80072ec <siprintf>
  LCD_DrawString(20, 150, buff);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	461a      	mov	r2, r3
 80019ea:	2196      	movs	r1, #150	@ 0x96
 80019ec:	2014      	movs	r0, #20
 80019ee:	f7ff fe7f 	bl	80016f0 <LCD_DrawString>

  // Check for sufficient signal strength
  if (max_mag < MIN_MAG_THRESHOLD) {
 80019f2:	490b      	ldr	r1, [pc, #44]	@ (8001a20 <find_dominant_freq+0x16c>)
 80019f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80019f6:	f7ff fb83 	bl	8001100 <__aeabi_fcmplt>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d013      	beq.n	8001a28 <find_dominant_freq+0x174>
    LCD_DrawString(20, 110, "No Signal          ");
 8001a00:	4a08      	ldr	r2, [pc, #32]	@ (8001a24 <find_dominant_freq+0x170>)
 8001a02:	216e      	movs	r1, #110	@ 0x6e
 8001a04:	2014      	movs	r0, #20
 8001a06:	f7ff fe73 	bl	80016f0 <LCD_DrawString>
    return 0.0f; // Return 0 Hz for no valid signal
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	e120      	b.n	8001c52 <find_dominant_freq+0x39e>
 8001a10:	42480000 	.word	0x42480000
 8001a14:	43c80000 	.word	0x43c80000
 8001a18:	42c80000 	.word	0x42c80000
 8001a1c:	08007da0 	.word	0x08007da0
 8001a20:	3dcccccd 	.word	0x3dcccccd
 8001a24:	08007db8 	.word	0x08007db8
  }

  float freq = (float)max_idx * SAMPLING_RATE / N;
 8001a28:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001a2a:	f7ff f973 	bl	8000d14 <__aeabi_ui2f>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f9c5 	bl	8000dc4 <__aeabi_fmul>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461c      	mov	r4, r3
 8001a3e:	6838      	ldr	r0, [r7, #0]
 8001a40:	f7ff f968 	bl	8000d14 <__aeabi_ui2f>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4619      	mov	r1, r3
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7ff fa6f 	bl	8000f2c <__aeabi_fdiv>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	663b      	str	r3, [r7, #96]	@ 0x60
  if (max_idx > 0 && max_idx < N / 2 - 1) {
 8001a52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80a8 	beq.w	8001baa <find_dominant_freq+0x2f6>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	085b      	lsrs	r3, r3, #1
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001a62:	429a      	cmp	r2, r3
 8001a64:	f080 80a1 	bcs.w	8001baa <find_dominant_freq+0x2f6>
    float y1, y2, y3;
    arm_sqrt_f32(fft_out[2*(max_idx-1)] * fft_out[2*(max_idx-1)] + fft_out[2*(max_idx-1)+1] * fft_out[2*(max_idx-1)+1], &y1);
 8001a68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	6818      	ldr	r0, [r3, #0]
 8001a74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a76:	3b01      	subs	r3, #1
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff f99f 	bl	8000dc4 <__aeabi_fmul>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461c      	mov	r4, r3
 8001a8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	3304      	adds	r3, #4
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7ff f98c 	bl	8000dc4 <__aeabi_fmul>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f7ff f87f 	bl	8000bb4 <__addsf3>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	f7ff fe44 	bl	800174e <arm_sqrt_f32>
    y2 = max_mag;
 8001ac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ac8:	653b      	str	r3, [r7, #80]	@ 0x50
    arm_sqrt_f32(fft_out[2*(max_idx+1)] * fft_out[2*(max_idx+1)] + fft_out[2*(max_idx+1)+1] * fft_out[2*(max_idx+1)+1], &y3);
 8001aca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001acc:	3301      	adds	r3, #1
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ad8:	3301      	adds	r3, #1
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff f96e 	bl	8000dc4 <__aeabi_fmul>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461c      	mov	r4, r3
 8001aec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001aee:	3301      	adds	r3, #1
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	3304      	adds	r3, #4
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4413      	add	r3, r2
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001afc:	3301      	adds	r3, #1
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	3304      	adds	r3, #4
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7ff f95b 	bl	8000dc4 <__aeabi_fmul>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4619      	mov	r1, r3
 8001b12:	4620      	mov	r0, r4
 8001b14:	f7ff f84e 	bl	8000bb4 <__addsf3>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f107 0308 	add.w	r3, r7, #8
 8001b20:	4619      	mov	r1, r3
 8001b22:	4610      	mov	r0, r2
 8001b24:	f7ff fe13 	bl	800174e <arm_sqrt_f32>
    float p = (y3 - y1) / (2.0f * (2.0f * y2 - y1 - y3));
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f83e 	bl	8000bb0 <__aeabi_fsub>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461c      	mov	r4, r3
 8001b38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff f839 	bl	8000bb4 <__addsf3>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	f7ff f830 	bl	8000bb0 <__aeabi_fsub>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4619      	mov	r1, r3
 8001b58:	4610      	mov	r0, r2
 8001b5a:	f7ff f829 	bl	8000bb0 <__aeabi_fsub>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4619      	mov	r1, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff f826 	bl	8000bb4 <__addsf3>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f7ff f9dd 	bl	8000f2c <__aeabi_fdiv>
 8001b72:	4603      	mov	r3, r0
 8001b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
    freq = (float)(max_idx + p) * SAMPLING_RATE / N;
 8001b76:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001b78:	f7ff f8cc 	bl	8000d14 <__aeabi_ui2f>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f817 	bl	8000bb4 <__addsf3>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff f919 	bl	8000dc4 <__aeabi_fmul>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461c      	mov	r4, r3
 8001b96:	6838      	ldr	r0, [r7, #0]
 8001b98:	f7ff f8bc 	bl	8000d14 <__aeabi_ui2f>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f7ff f9c3 	bl	8000f2c <__aeabi_fdiv>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  // Debug raw frequency
  sprintf(buff, "Raw Freq: %d.%02d Hz    ", (int)freq, (int)((freq - (int)freq) * 100));
 8001baa:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001bac:	f7ff fae6 	bl	800117c <__aeabi_f2iz>
 8001bb0:	4604      	mov	r4, r0
 8001bb2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001bb4:	f7ff fae2 	bl	800117c <__aeabi_f2iz>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f8ae 	bl	8000d1c <__aeabi_i2f>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001bc6:	f7fe fff3 	bl	8000bb0 <__aeabi_fsub>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4923      	ldr	r1, [pc, #140]	@ (8001c5c <find_dominant_freq+0x3a8>)
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f8f8 	bl	8000dc4 <__aeabi_fmul>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fad0 	bl	800117c <__aeabi_f2iz>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f107 0014 	add.w	r0, r7, #20
 8001be2:	4622      	mov	r2, r4
 8001be4:	491e      	ldr	r1, [pc, #120]	@ (8001c60 <find_dominant_freq+0x3ac>)
 8001be6:	f005 fb81 	bl	80072ec <siprintf>
  LCD_DrawString(20, 110, buff);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	461a      	mov	r2, r3
 8001bf0:	216e      	movs	r1, #110	@ 0x6e
 8001bf2:	2014      	movs	r0, #20
 8001bf4:	f7ff fd7c 	bl	80016f0 <LCD_DrawString>
  // Check for second harmonic for guitar signals, only for freq < 220 Hz
  if (freq < 220.0f) {
 8001bf8:	491a      	ldr	r1, [pc, #104]	@ (8001c64 <find_dominant_freq+0x3b0>)
 8001bfa:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001bfc:	f7ff fa80 	bl	8001100 <__aeabi_fcmplt>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d024      	beq.n	8001c50 <find_dominant_freq+0x39c>
    float fund = freq / 2;
 8001c06:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c0a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001c0c:	f7ff f98e 	bl	8000f2c <__aeabi_fdiv>
 8001c10:	4603      	mov	r3, r0
 8001c12:	64bb      	str	r3, [r7, #72]	@ 0x48
    for (int i = 0; i < 6; i++) {
 8001c14:	2300      	movs	r3, #0
 8001c16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c18:	e017      	b.n	8001c4a <find_dominant_freq+0x396>
      if (fabs(fund - note_freqs[i]) < 5.0f) {
 8001c1a:	4a13      	ldr	r2, [pc, #76]	@ (8001c68 <find_dominant_freq+0x3b4>)
 8001c1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c22:	4619      	mov	r1, r3
 8001c24:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001c26:	f7fe ffc3 	bl	8000bb0 <__aeabi_fsub>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c30:	490e      	ldr	r1, [pc, #56]	@ (8001c6c <find_dominant_freq+0x3b8>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fa64 	bl	8001100 <__aeabi_fcmplt>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <find_dominant_freq+0x390>
        freq = fund;
 8001c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c40:	663b      	str	r3, [r7, #96]	@ 0x60
        break;
 8001c42:	e005      	b.n	8001c50 <find_dominant_freq+0x39c>
    for (int i = 0; i < 6; i++) {
 8001c44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c46:	3301      	adds	r3, #1
 8001c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c4c:	2b05      	cmp	r3, #5
 8001c4e:	dde4      	ble.n	8001c1a <find_dominant_freq+0x366>
      }
    }
  }
  return freq;
 8001c50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3774      	adds	r7, #116	@ 0x74
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd90      	pop	{r4, r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	42c80000 	.word	0x42c80000
 8001c60:	08007dcc 	.word	0x08007dcc
 8001c64:	435c0000 	.word	0x435c0000
 8001c68:	0800850c 	.word	0x0800850c
 8001c6c:	40a00000 	.word	0x40a00000

08001c70 <map_to_note>:
  * @param  freq: Detected frequency
  * @param  note: Output buffer for note name
  * @param  status: Output buffer for tuning status
  * @retval None
  */
void map_to_note(float freq, char *note, char *status) {
 8001c70:	b5b0      	push	{r4, r5, r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  if (freq < 50.0f) {
 8001c7c:	4946      	ldr	r1, [pc, #280]	@ (8001d98 <map_to_note+0x128>)
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f7ff fa3e 	bl	8001100 <__aeabi_fcmplt>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00f      	beq.n	8001caa <map_to_note+0x3a>
    strcpy(note, "--");
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	4a43      	ldr	r2, [pc, #268]	@ (8001d9c <map_to_note+0x12c>)
 8001c8e:	8811      	ldrh	r1, [r2, #0]
 8001c90:	7892      	ldrb	r2, [r2, #2]
 8001c92:	8019      	strh	r1, [r3, #0]
 8001c94:	709a      	strb	r2, [r3, #2]
    strcpy(status, "No Signal");
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4941      	ldr	r1, [pc, #260]	@ (8001da0 <map_to_note+0x130>)
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	cb03      	ldmia	r3!, {r0, r1}
 8001ca0:	6010      	str	r0, [r2, #0]
 8001ca2:	6051      	str	r1, [r2, #4]
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	8113      	strh	r3, [r2, #8]
    return;
 8001ca8:	e06d      	b.n	8001d86 <map_to_note+0x116>
  }
  float min_diff = 1000.0f;
 8001caa:	4b3e      	ldr	r3, [pc, #248]	@ (8001da4 <map_to_note+0x134>)
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
  int closest_note = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < 6; i++) {
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	e019      	b.n	8001cec <map_to_note+0x7c>
    float diff = fabs(freq - note_freqs[i]);
 8001cb8:	4a3b      	ldr	r2, [pc, #236]	@ (8001da8 <map_to_note+0x138>)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f7fe ff74 	bl	8000bb0 <__aeabi_fsub>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cce:	617b      	str	r3, [r7, #20]
    if (diff < min_diff) {
 8001cd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cd2:	6978      	ldr	r0, [r7, #20]
 8001cd4:	f7ff fa14 	bl	8001100 <__aeabi_fcmplt>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <map_to_note+0x76>
      min_diff = diff;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
      closest_note = i;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < 6; i++) {
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	dde2      	ble.n	8001cb8 <map_to_note+0x48>
    }
  }
  strcpy(note, note_names[closest_note]);
 8001cf2:	4a2e      	ldr	r2, [pc, #184]	@ (8001dac <map_to_note+0x13c>)
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	68b8      	ldr	r0, [r7, #8]
 8001cfe:	f005 fb4b 	bl	8007398 <strcpy>
  float target = note_freqs[closest_note];
 8001d02:	4a29      	ldr	r2, [pc, #164]	@ (8001da8 <map_to_note+0x138>)
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0a:	61bb      	str	r3, [r7, #24]
  if (fabs(freq - target) / target < 0.02f)
 8001d0c:	69b9      	ldr	r1, [r7, #24]
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f7fe ff4e 	bl	8000bb0 <__aeabi_fsub>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc52 	bl	80005c4 <__aeabi_f2d>
 8001d20:	4604      	mov	r4, r0
 8001d22:	460d      	mov	r5, r1
 8001d24:	69b8      	ldr	r0, [r7, #24]
 8001d26:	f7fe fc4d 	bl	80005c4 <__aeabi_f2d>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4620      	mov	r0, r4
 8001d30:	4629      	mov	r1, r5
 8001d32:	f7fe fdc9 	bl	80008c8 <__aeabi_ddiv>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	a314      	add	r3, pc, #80	@ (adr r3, 8001d90 <map_to_note+0x120>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	f7fe ff08 	bl	8000b58 <__aeabi_dcmplt>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d007      	beq.n	8001d5e <map_to_note+0xee>
    strcpy(status, "In Tune");
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4917      	ldr	r1, [pc, #92]	@ (8001db0 <map_to_note+0x140>)
 8001d52:	461a      	mov	r2, r3
 8001d54:	460b      	mov	r3, r1
 8001d56:	cb03      	ldmia	r3!, {r0, r1}
 8001d58:	6010      	str	r0, [r2, #0]
 8001d5a:	6051      	str	r1, [r2, #4]
 8001d5c:	e013      	b.n	8001d86 <map_to_note+0x116>
  else if (freq < target)
 8001d5e:	69b9      	ldr	r1, [r7, #24]
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f7ff f9cd 	bl	8001100 <__aeabi_fcmplt>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <map_to_note+0x10a>
    strcpy(status, "Flat");
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a11      	ldr	r2, [pc, #68]	@ (8001db4 <map_to_note+0x144>)
 8001d70:	6810      	ldr	r0, [r2, #0]
 8001d72:	6018      	str	r0, [r3, #0]
 8001d74:	7912      	ldrb	r2, [r2, #4]
 8001d76:	711a      	strb	r2, [r3, #4]
 8001d78:	e005      	b.n	8001d86 <map_to_note+0x116>
  else
    strcpy(status, "Sharp");
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001db8 <map_to_note+0x148>)
 8001d7e:	6810      	ldr	r0, [r2, #0]
 8001d80:	6018      	str	r0, [r3, #0]
 8001d82:	8892      	ldrh	r2, [r2, #4]
 8001d84:	809a      	strh	r2, [r3, #4]
}
 8001d86:	3728      	adds	r7, #40	@ 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d8c:	f3af 8000 	nop.w
 8001d90:	40000000 	.word	0x40000000
 8001d94:	3f947ae1 	.word	0x3f947ae1
 8001d98:	42480000 	.word	0x42480000
 8001d9c:	08007de8 	.word	0x08007de8
 8001da0:	08007dec 	.word	0x08007dec
 8001da4:	447a0000 	.word	0x447a0000
 8001da8:	0800850c 	.word	0x0800850c
 8001dac:	20002000 	.word	0x20002000
 8001db0:	08007df8 	.word	0x08007df8
 8001db4:	08007e00 	.word	0x08007e00
 8001db8:	08007e08 	.word	0x08007e08
 8001dbc:	00000000 	.word	0x00000000

08001dc0 <map_to_target_note>:
  * @param  target_idx: Index of target note
  * @param  note: Output buffer for note name
  * @param  status: Output buffer for tuning status
  * @retval None
  */
void map_to_target_note(float freq, uint8_t target_idx, char *note, char *status) {
 8001dc0:	b5b0      	push	{r4, r5, r7, lr}
 8001dc2:	b08c      	sub	sp, #48	@ 0x30
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	72fb      	strb	r3, [r7, #11]
  if (freq < 50.0f) {
 8001dd0:	4953      	ldr	r1, [pc, #332]	@ (8001f20 <map_to_target_note+0x160>)
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff f994 	bl	8001100 <__aeabi_fcmplt>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d011      	beq.n	8001e02 <map_to_target_note+0x42>
    strcpy(note, note_names[target_idx]);
 8001dde:	7afb      	ldrb	r3, [r7, #11]
 8001de0:	4a50      	ldr	r2, [pc, #320]	@ (8001f24 <map_to_target_note+0x164>)
 8001de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de6:	4619      	mov	r1, r3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f005 fad5 	bl	8007398 <strcpy>
    strcpy(status, "No Signal");
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	494d      	ldr	r1, [pc, #308]	@ (8001f28 <map_to_target_note+0x168>)
 8001df2:	461a      	mov	r2, r3
 8001df4:	460b      	mov	r3, r1
 8001df6:	cb03      	ldmia	r3!, {r0, r1}
 8001df8:	6010      	str	r0, [r2, #0]
 8001dfa:	6051      	str	r1, [r2, #4]
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	8113      	strh	r3, [r2, #8]
 8001e00:	e084      	b.n	8001f0c <map_to_target_note+0x14c>
    return;
  }
  strcpy(note, note_names[target_idx]);
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	4a47      	ldr	r2, [pc, #284]	@ (8001f24 <map_to_target_note+0x164>)
 8001e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f005 fac3 	bl	8007398 <strcpy>
  float target = note_freqs[target_idx];
 8001e12:	7afb      	ldrb	r3, [r7, #11]
 8001e14:	4a45      	ldr	r2, [pc, #276]	@ (8001f2c <map_to_target_note+0x16c>)
 8001e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1a:	623b      	str	r3, [r7, #32]
  // Check for harmonic errors (octave up/down)
  float possible_freqs[3] = {freq, freq * 2.0f, freq / 2.0f};
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4619      	mov	r1, r3
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fec5 	bl	8000bb4 <__addsf3>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f7ff f87a 	bl	8000f2c <__aeabi_fdiv>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	61bb      	str	r3, [r7, #24]
  float min_diff = 1000.0f;
 8001e3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f30 <map_to_target_note+0x170>)
 8001e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float corrected_freq = freq;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (int i = 0; i < 3; i++) {
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e48:	e020      	b.n	8001e8c <map_to_target_note+0xcc>
    float diff = fabs(possible_freqs[i] - target);
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	3330      	adds	r3, #48	@ 0x30
 8001e50:	443b      	add	r3, r7
 8001e52:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001e56:	6a39      	ldr	r1, [r7, #32]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fea9 	bl	8000bb0 <__aeabi_fsub>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e64:	61fb      	str	r3, [r7, #28]
    if (diff < min_diff) {
 8001e66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001e68:	69f8      	ldr	r0, [r7, #28]
 8001e6a:	f7ff f949 	bl	8001100 <__aeabi_fcmplt>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <map_to_target_note+0xc6>
      min_diff = diff;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      corrected_freq = possible_freqs[i];
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	3330      	adds	r3, #48	@ 0x30
 8001e7e:	443b      	add	r3, r7
 8001e80:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (int i = 0; i < 3; i++) {
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	3301      	adds	r3, #1
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	dddb      	ble.n	8001e4a <map_to_target_note+0x8a>
    }
  }
  if (fabs(corrected_freq - target) / target < 0.02f)
 8001e92:	6a39      	ldr	r1, [r7, #32]
 8001e94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001e96:	f7fe fe8b 	bl	8000bb0 <__aeabi_fsub>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fb8f 	bl	80005c4 <__aeabi_f2d>
 8001ea6:	4604      	mov	r4, r0
 8001ea8:	460d      	mov	r5, r1
 8001eaa:	6a38      	ldr	r0, [r7, #32]
 8001eac:	f7fe fb8a 	bl	80005c4 <__aeabi_f2d>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	f7fe fd06 	bl	80008c8 <__aeabi_ddiv>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	a314      	add	r3, pc, #80	@ (adr r3, 8001f18 <map_to_target_note+0x158>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	f7fe fe45 	bl	8000b58 <__aeabi_dcmplt>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <map_to_target_note+0x124>
    strcpy(status, "In Tune");
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4917      	ldr	r1, [pc, #92]	@ (8001f34 <map_to_target_note+0x174>)
 8001ed8:	461a      	mov	r2, r3
 8001eda:	460b      	mov	r3, r1
 8001edc:	cb03      	ldmia	r3!, {r0, r1}
 8001ede:	6010      	str	r0, [r2, #0]
 8001ee0:	6051      	str	r1, [r2, #4]
 8001ee2:	e013      	b.n	8001f0c <map_to_target_note+0x14c>
  else if (corrected_freq < target)
 8001ee4:	6a39      	ldr	r1, [r7, #32]
 8001ee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ee8:	f7ff f90a 	bl	8001100 <__aeabi_fcmplt>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <map_to_target_note+0x140>
    strcpy(status, "Flat");
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	4a10      	ldr	r2, [pc, #64]	@ (8001f38 <map_to_target_note+0x178>)
 8001ef6:	6810      	ldr	r0, [r2, #0]
 8001ef8:	6018      	str	r0, [r3, #0]
 8001efa:	7912      	ldrb	r2, [r2, #4]
 8001efc:	711a      	strb	r2, [r3, #4]
 8001efe:	e005      	b.n	8001f0c <map_to_target_note+0x14c>
  else
    strcpy(status, "Sharp");
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4a0e      	ldr	r2, [pc, #56]	@ (8001f3c <map_to_target_note+0x17c>)
 8001f04:	6810      	ldr	r0, [r2, #0]
 8001f06:	6018      	str	r0, [r3, #0]
 8001f08:	8892      	ldrh	r2, [r2, #4]
 8001f0a:	809a      	strh	r2, [r3, #4]
}
 8001f0c:	3730      	adds	r7, #48	@ 0x30
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bdb0      	pop	{r4, r5, r7, pc}
 8001f12:	bf00      	nop
 8001f14:	f3af 8000 	nop.w
 8001f18:	40000000 	.word	0x40000000
 8001f1c:	3f947ae1 	.word	0x3f947ae1
 8001f20:	42480000 	.word	0x42480000
 8001f24:	20002000 	.word	0x20002000
 8001f28:	08007dec 	.word	0x08007dec
 8001f2c:	0800850c 	.word	0x0800850c
 8001f30:	447a0000 	.word	0x447a0000
 8001f34:	08007df8 	.word	0x08007df8
 8001f38:	08007e00 	.word	0x08007e00
 8001f3c:	08007e08 	.word	0x08007e08

08001f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f40:	b5b0      	push	{r4, r5, r7, lr}
 8001f42:	b0b6      	sub	sp, #216	@ 0xd8
 8001f44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f46:	f000 ff23 	bl	8002d90 <HAL_Init>

  /* USER CODE BEGIN Init */
  // Initialize CMSIS-DSP FFT
  arm_rfft_fast_init_f32(&fft_handler, FFT_SIZE);
 8001f4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f4e:	48c1      	ldr	r0, [pc, #772]	@ (8002254 <main+0x314>)
 8001f50:	f003 fd98 	bl	8005a84 <arm_rfft_fast_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f54:	f000 fad8 	bl	8002508 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f58:	f000 fbde 	bl	8002718 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f5c:	f000 fbbe 	bl	80026dc <MX_DMA_Init>
  MX_FSMC_Init();
 8001f60:	f000 fc84 	bl	800286c <MX_FSMC_Init>
  MX_ADC1_Init();
 8001f64:	f000 fb2e 	bl	80025c4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001f68:	f000 fb6a 	bl	8002640 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Reset LCD (PD12, active-low)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f72:	48b9      	ldr	r0, [pc, #740]	@ (8002258 <main+0x318>)
 8001f74:	f002 faa1 	bl	80044ba <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8001f78:	2014      	movs	r0, #20
 8001f7a:	f000 ff6b 	bl	8002e54 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f84:	48b4      	ldr	r0, [pc, #720]	@ (8002258 <main+0x318>)
 8001f86:	f002 fa98 	bl	80044ba <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001f8a:	20c8      	movs	r0, #200	@ 0xc8
 8001f8c:	f000 ff62 	bl	8002e54 <HAL_Delay>

  // Backlight/control (PE1, active-high)
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8001f90:	2201      	movs	r2, #1
 8001f92:	2102      	movs	r1, #2
 8001f94:	48b1      	ldr	r0, [pc, #708]	@ (800225c <main+0x31c>)
 8001f96:	f002 fa90 	bl	80044ba <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8001f9a:	2032      	movs	r0, #50	@ 0x32
 8001f9c:	f000 ff5a 	bl	8002e54 <HAL_Delay>

  LCD_INIT();
 8001fa0:	f7ff f943 	bl	800122a <LCD_INIT>
  HAL_Delay(200);
 8001fa4:	20c8      	movs	r0, #200	@ 0xc8
 8001fa6:	f000 ff55 	bl	8002e54 <HAL_Delay>
  LCD_DrawString(20, 10, "Tuner Starting...");
 8001faa:	4aad      	ldr	r2, [pc, #692]	@ (8002260 <main+0x320>)
 8001fac:	210a      	movs	r1, #10
 8001fae:	2014      	movs	r0, #20
 8001fb0:	f7ff fb9e 	bl	80016f0 <LCD_DrawString>

  HAL_TIM_Base_Start(&htim3);
 8001fb4:	48ab      	ldr	r0, [pc, #684]	@ (8002264 <main+0x324>)
 8001fb6:	f003 f8bf 	bl	8005138 <HAL_TIM_Base_Start>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001fba:	48ab      	ldr	r0, [pc, #684]	@ (8002268 <main+0x328>)
 8001fbc:	f001 fb8e 	bl	80036dc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer[0], FFT_SIZE);
 8001fc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fc4:	49a9      	ldr	r1, [pc, #676]	@ (800226c <main+0x32c>)
 8001fc6:	48a8      	ldr	r0, [pc, #672]	@ (8002268 <main+0x328>)
 8001fc8:	f001 f852 	bl	8003070 <HAL_ADC_Start_DMA>
  float freq;
  char note[10], status[20];
  while (1)
  {
    // Handle K1 (Mode toggle, assuming PC13 for K1, active-low)
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET &&
 8001fcc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fd0:	48a7      	ldr	r0, [pc, #668]	@ (8002270 <main+0x330>)
 8001fd2:	f002 fa5b 	bl	800448c <HAL_GPIO_ReadPin>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d124      	bne.n	8002026 <main+0xe6>
        HAL_GetTick() - last_k1_press > DEBOUNCE_MS) {
 8001fdc:	f000 ff30 	bl	8002e40 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4ba4      	ldr	r3, [pc, #656]	@ (8002274 <main+0x334>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	1ad3      	subs	r3, r2, r3
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET &&
 8001fe8:	2b32      	cmp	r3, #50	@ 0x32
 8001fea:	d91c      	bls.n	8002026 <main+0xe6>
      tuner_mode = (tuner_mode == 1) ? 2 : 1;
 8001fec:	4ba2      	ldr	r3, [pc, #648]	@ (8002278 <main+0x338>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <main+0xb8>
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	e000      	b.n	8001ffa <main+0xba>
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4b9f      	ldr	r3, [pc, #636]	@ (8002278 <main+0x338>)
 8001ffc:	701a      	strb	r2, [r3, #0]
      last_k1_press = HAL_GetTick();
 8001ffe:	f000 ff1f 	bl	8002e40 <HAL_GetTick>
 8002002:	4603      	mov	r3, r0
 8002004:	4a9b      	ldr	r2, [pc, #620]	@ (8002274 <main+0x334>)
 8002006:	6013      	str	r3, [r2, #0]
      LCD_DrawString(20, 10, tuner_mode == 1 ? "Mode: Auto       " : "Mode: Target Note");
 8002008:	4b9b      	ldr	r3, [pc, #620]	@ (8002278 <main+0x338>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <main+0xd4>
 8002010:	4b9a      	ldr	r3, [pc, #616]	@ (800227c <main+0x33c>)
 8002012:	e000      	b.n	8002016 <main+0xd6>
 8002014:	4b9a      	ldr	r3, [pc, #616]	@ (8002280 <main+0x340>)
 8002016:	461a      	mov	r2, r3
 8002018:	210a      	movs	r1, #10
 800201a:	2014      	movs	r0, #20
 800201c:	f7ff fb68 	bl	80016f0 <LCD_DrawString>
      selected_note_idx = 0; // Reset selected note when switching modes
 8002020:	4b98      	ldr	r3, [pc, #608]	@ (8002284 <main+0x344>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
    }

    // Handle K2 (Note selection in Mode 2, assuming PA0 for K2, active-low)
    if (tuner_mode == 2 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET &&
 8002026:	4b94      	ldr	r3, [pc, #592]	@ (8002278 <main+0x338>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d136      	bne.n	800209c <main+0x15c>
 800202e:	2101      	movs	r1, #1
 8002030:	4895      	ldr	r0, [pc, #596]	@ (8002288 <main+0x348>)
 8002032:	f002 fa2b 	bl	800448c <HAL_GPIO_ReadPin>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d12f      	bne.n	800209c <main+0x15c>
        HAL_GetTick() - last_k2_press > DEBOUNCE_MS) {
 800203c:	f000 ff00 	bl	8002e40 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	4b92      	ldr	r3, [pc, #584]	@ (800228c <main+0x34c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	1ad3      	subs	r3, r2, r3
    if (tuner_mode == 2 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET &&
 8002048:	2b32      	cmp	r3, #50	@ 0x32
 800204a:	d927      	bls.n	800209c <main+0x15c>
      selected_note_idx = (selected_note_idx + 1) % 6;
 800204c:	4b8d      	ldr	r3, [pc, #564]	@ (8002284 <main+0x344>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	4b8f      	ldr	r3, [pc, #572]	@ (8002290 <main+0x350>)
 8002054:	fb83 3102 	smull	r3, r1, r3, r2
 8002058:	17d3      	asrs	r3, r2, #31
 800205a:	1ac9      	subs	r1, r1, r3
 800205c:	460b      	mov	r3, r1
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	440b      	add	r3, r1
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	1ad1      	subs	r1, r2, r3
 8002066:	b2ca      	uxtb	r2, r1
 8002068:	4b86      	ldr	r3, [pc, #536]	@ (8002284 <main+0x344>)
 800206a:	701a      	strb	r2, [r3, #0]
      last_k2_press = HAL_GetTick();
 800206c:	f000 fee8 	bl	8002e40 <HAL_GetTick>
 8002070:	4603      	mov	r3, r0
 8002072:	4a86      	ldr	r2, [pc, #536]	@ (800228c <main+0x34c>)
 8002074:	6013      	str	r3, [r2, #0]
      sprintf(buff, "Target: %s    ", note_names[selected_note_idx]);
 8002076:	4b83      	ldr	r3, [pc, #524]	@ (8002284 <main+0x344>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	4b85      	ldr	r3, [pc, #532]	@ (8002294 <main+0x354>)
 800207e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002082:	f107 0320 	add.w	r3, r7, #32
 8002086:	4984      	ldr	r1, [pc, #528]	@ (8002298 <main+0x358>)
 8002088:	4618      	mov	r0, r3
 800208a:	f005 f92f 	bl	80072ec <siprintf>
      LCD_DrawString(20, 30, buff);
 800208e:	f107 0320 	add.w	r3, r7, #32
 8002092:	461a      	mov	r2, r3
 8002094:	211e      	movs	r1, #30
 8002096:	2014      	movs	r0, #20
 8002098:	f7ff fb2a 	bl	80016f0 <LCD_DrawString>
    }

    if (adc_complete) {
 800209c:	4b7f      	ldr	r3, [pc, #508]	@ (800229c <main+0x35c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 8214 	beq.w	80024d0 <main+0x590>
      adc_complete = 0; // Reset flag immediately to avoid reprocessing
 80020a8:	4b7c      	ldr	r3, [pc, #496]	@ (800229c <main+0x35c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
      uint8_t buf_to_process = processing_buffer; // Use synchronized buffer index
 80020ae:	4b7c      	ldr	r3, [pc, #496]	@ (80022a0 <main+0x360>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb

      // Debug: Display first few ADC values to check buffer contents
      sprintf(buff, "Buf %d: %u %u %u    ", buf_to_process,
 80020b6:	f897 20bb 	ldrb.w	r2, [r7, #187]	@ 0xbb
              adc_buffer[buf_to_process][0], adc_buffer[buf_to_process][1],
 80020ba:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 80020be:	496b      	ldr	r1, [pc, #428]	@ (800226c <main+0x32c>)
 80020c0:	031b      	lsls	r3, r3, #12
 80020c2:	440b      	add	r3, r1
 80020c4:	881b      	ldrh	r3, [r3, #0]
      sprintf(buff, "Buf %d: %u %u %u    ", buf_to_process,
 80020c6:	461d      	mov	r5, r3
              adc_buffer[buf_to_process][0], adc_buffer[buf_to_process][1],
 80020c8:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 80020cc:	4967      	ldr	r1, [pc, #412]	@ (800226c <main+0x32c>)
 80020ce:	031b      	lsls	r3, r3, #12
 80020d0:	440b      	add	r3, r1
 80020d2:	3302      	adds	r3, #2
 80020d4:	881b      	ldrh	r3, [r3, #0]
      sprintf(buff, "Buf %d: %u %u %u    ", buf_to_process,
 80020d6:	461c      	mov	r4, r3
              adc_buffer[buf_to_process][2]);
 80020d8:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 80020dc:	4963      	ldr	r1, [pc, #396]	@ (800226c <main+0x32c>)
 80020de:	031b      	lsls	r3, r3, #12
 80020e0:	440b      	add	r3, r1
 80020e2:	3304      	adds	r3, #4
 80020e4:	881b      	ldrh	r3, [r3, #0]
      sprintf(buff, "Buf %d: %u %u %u    ", buf_to_process,
 80020e6:	f107 0020 	add.w	r0, r7, #32
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	9400      	str	r4, [sp, #0]
 80020ee:	462b      	mov	r3, r5
 80020f0:	496c      	ldr	r1, [pc, #432]	@ (80022a4 <main+0x364>)
 80020f2:	f005 f8fb 	bl	80072ec <siprintf>
      LCD_DrawString(20, 130, buff);
 80020f6:	f107 0320 	add.w	r3, r7, #32
 80020fa:	461a      	mov	r2, r3
 80020fc:	2182      	movs	r1, #130	@ 0x82
 80020fe:	2014      	movs	r0, #20
 8002100:	f7ff faf6 	bl	80016f0 <LCD_DrawString>

      // Display raw ADC value
      sprintf(buff, "ADC: %u    ", adc_buffer[buf_to_process][0]);
 8002104:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 8002108:	4a58      	ldr	r2, [pc, #352]	@ (800226c <main+0x32c>)
 800210a:	031b      	lsls	r3, r3, #12
 800210c:	4413      	add	r3, r2
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	f107 0320 	add.w	r3, r7, #32
 8002116:	4964      	ldr	r1, [pc, #400]	@ (80022a8 <main+0x368>)
 8002118:	4618      	mov	r0, r3
 800211a:	f005 f8e7 	bl	80072ec <siprintf>
      LCD_DrawString(20, 50, buff);
 800211e:	f107 0320 	add.w	r3, r7, #32
 8002122:	461a      	mov	r2, r3
 8002124:	2132      	movs	r1, #50	@ 0x32
 8002126:	2014      	movs	r0, #20
 8002128:	f7ff fae2 	bl	80016f0 <LCD_DrawString>

      // Check for ADC overrun (OVR bit is bit 5 in ADC_SR)
      if (hadc1.Instance->SR & (1U << 5)) {
 800212c:	4b4e      	ldr	r3, [pc, #312]	@ (8002268 <main+0x328>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b00      	cmp	r3, #0
 8002138:	d004      	beq.n	8002144 <main+0x204>
        LCD_DrawString(20, 170, "ADC Overrun");
 800213a:	4a5c      	ldr	r2, [pc, #368]	@ (80022ac <main+0x36c>)
 800213c:	21aa      	movs	r1, #170	@ 0xaa
 800213e:	2014      	movs	r0, #20
 8002140:	f7ff fad6 	bl	80016f0 <LCD_DrawString>
      }

      // Remove DC offset and prepare FFT input
      float mean = 0.0f;
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
      for (uint32_t i = 0; i < FFT_SIZE; i++) {
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002152:	e019      	b.n	8002188 <main+0x248>
        mean += adc_buffer[buf_to_process][i];
 8002154:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 8002158:	4944      	ldr	r1, [pc, #272]	@ (800226c <main+0x32c>)
 800215a:	02da      	lsls	r2, r3, #11
 800215c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002160:	4413      	add	r3, r2
 8002162:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fdd8 	bl	8000d1c <__aeabi_i2f>
 800216c:	4603      	mov	r3, r0
 800216e:	4619      	mov	r1, r3
 8002170:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8002174:	f7fe fd1e 	bl	8000bb4 <__addsf3>
 8002178:	4603      	mov	r3, r0
 800217a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
      for (uint32_t i = 0; i < FFT_SIZE; i++) {
 800217e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002182:	3301      	adds	r3, #1
 8002184:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002188:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800218c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002190:	d3e0      	bcc.n	8002154 <main+0x214>
      }
      mean /= FFT_SIZE;
 8002192:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 8002196:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 800219a:	f7fe fec7 	bl	8000f2c <__aeabi_fdiv>
 800219e:	4603      	mov	r3, r0
 80021a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
      for (uint32_t i = 0; i < FFT_SIZE; i++) {
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80021aa:	e022      	b.n	80021f2 <main+0x2b2>
        fft_input[i] = (float)(adc_buffer[buf_to_process][i] - mean) / (ADC_MAX / 2.0f); // Scale to [-1, 1]
 80021ac:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 80021b0:	492e      	ldr	r1, [pc, #184]	@ (800226c <main+0x32c>)
 80021b2:	02da      	lsls	r2, r3, #11
 80021b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021b8:	4413      	add	r3, r2
 80021ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fdac 	bl	8000d1c <__aeabi_i2f>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fcf0 	bl	8000bb0 <__aeabi_fsub>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4937      	ldr	r1, [pc, #220]	@ (80022b0 <main+0x370>)
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fea9 	bl	8000f2c <__aeabi_fdiv>
 80021da:	4603      	mov	r3, r0
 80021dc:	4619      	mov	r1, r3
 80021de:	4a35      	ldr	r2, [pc, #212]	@ (80022b4 <main+0x374>)
 80021e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      for (uint32_t i = 0; i < FFT_SIZE; i++) {
 80021e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021ec:	3301      	adds	r3, #1
 80021ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80021f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021fa:	d3d7      	bcc.n	80021ac <main+0x26c>
      }

      // Apply high-pass filter to remove low-frequency noise from guitar signal
      high_pass_filter(fft_input, FFT_SIZE);
 80021fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002200:	482c      	ldr	r0, [pc, #176]	@ (80022b4 <main+0x374>)
 8002202:	f7ff fb0d 	bl	8001820 <high_pass_filter>

      // Apply Hann window
      apply_hann_window(fft_input, FFT_SIZE);
 8002206:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800220a:	482a      	ldr	r0, [pc, #168]	@ (80022b4 <main+0x374>)
 800220c:	f7ff fabe 	bl	800178c <apply_hann_window>

      // Compute FFT using CMSIS-DSP
      arm_rfft_fast_f32(&fft_handler, fft_input, fft_output, 0);
 8002210:	2300      	movs	r3, #0
 8002212:	4a29      	ldr	r2, [pc, #164]	@ (80022b8 <main+0x378>)
 8002214:	4927      	ldr	r1, [pc, #156]	@ (80022b4 <main+0x374>)
 8002216:	480f      	ldr	r0, [pc, #60]	@ (8002254 <main+0x314>)
 8002218:	f003 fcb4 	bl	8005b84 <arm_rfft_fast_f32>
      freq = find_dominant_freq(fft_output, FFT_SIZE);
 800221c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002220:	4825      	ldr	r0, [pc, #148]	@ (80022b8 <main+0x378>)
 8002222:	f7ff fb47 	bl	80018b4 <find_dominant_freq>
 8002226:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4

      // Process based on mode
      if (tuner_mode == 1) {
 800222a:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <main+0x338>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b01      	cmp	r3, #1
 8002230:	f040 8094 	bne.w	800235c <main+0x41c>
        // Mode 1: Auto-detect nearest note
        map_to_note(freq, note, status);
 8002234:	463a      	mov	r2, r7
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8002240:	f7ff fd16 	bl	8001c70 <map_to_note>

        // Find note frequency
        float note_freq = 0.0f;
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        for (int i = 0; i < 6; i++) {
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002252:	e04e      	b.n	80022f2 <main+0x3b2>
 8002254:	20006198 	.word	0x20006198
 8002258:	40011400 	.word	0x40011400
 800225c:	40011800 	.word	0x40011800
 8002260:	08007e10 	.word	0x08007e10
 8002264:	20002108 	.word	0x20002108
 8002268:	20002094 	.word	0x20002094
 800226c:	20000000 	.word	0x20000000
 8002270:	40011000 	.word	0x40011000
 8002274:	200061b4 	.word	0x200061b4
 8002278:	20002018 	.word	0x20002018
 800227c:	08007e24 	.word	0x08007e24
 8002280:	08007e38 	.word	0x08007e38
 8002284:	200061b3 	.word	0x200061b3
 8002288:	40010800 	.word	0x40010800
 800228c:	200061b8 	.word	0x200061b8
 8002290:	2aaaaaab 	.word	0x2aaaaaab
 8002294:	20002000 	.word	0x20002000
 8002298:	08007e4c 	.word	0x08007e4c
 800229c:	200061b0 	.word	0x200061b0
 80022a0:	200061b2 	.word	0x200061b2
 80022a4:	08007e5c 	.word	0x08007e5c
 80022a8:	08007e74 	.word	0x08007e74
 80022ac:	08007e80 	.word	0x08007e80
 80022b0:	44fff000 	.word	0x44fff000
 80022b4:	20002198 	.word	0x20002198
 80022b8:	20004198 	.word	0x20004198
          if (strcmp(note, note_names[i]) == 0) {
 80022bc:	4a86      	ldr	r2, [pc, #536]	@ (80024d8 <main+0x598>)
 80022be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f80b 	bl	80002e8 <strcmp>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d107      	bne.n	80022e8 <main+0x3a8>
            note_freq = note_freqs[i];
 80022d8:	4a80      	ldr	r2, [pc, #512]	@ (80024dc <main+0x59c>)
 80022da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            break;
 80022e6:	e008      	b.n	80022fa <main+0x3ba>
        for (int i = 0; i < 6; i++) {
 80022e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022ec:	3301      	adds	r3, #1
 80022ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80022f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	dde0      	ble.n	80022bc <main+0x37c>
          }
        }

        // Display note with standard frequency
        int note_int_part = (int)note_freq;
 80022fa:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80022fe:	f7fe ff3d 	bl	800117c <__aeabi_f2iz>
 8002302:	4603      	mov	r3, r0
 8002304:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        int note_frac_part = (int)((note_freq - note_int_part) * 100);
 8002308:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800230c:	f7fe fd06 	bl	8000d1c <__aeabi_i2f>
 8002310:	4603      	mov	r3, r0
 8002312:	4619      	mov	r1, r3
 8002314:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8002318:	f7fe fc4a 	bl	8000bb0 <__aeabi_fsub>
 800231c:	4603      	mov	r3, r0
 800231e:	4970      	ldr	r1, [pc, #448]	@ (80024e0 <main+0x5a0>)
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe fd4f 	bl	8000dc4 <__aeabi_fmul>
 8002326:	4603      	mov	r3, r0
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe ff27 	bl	800117c <__aeabi_f2iz>
 800232e:	4603      	mov	r3, r0
 8002330:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        sprintf(buff, "Note: %s (%d.%02d Hz)    ", note, note_int_part, note_frac_part);
 8002334:	f107 0214 	add.w	r2, r7, #20
 8002338:	f107 0020 	add.w	r0, r7, #32
 800233c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002346:	4967      	ldr	r1, [pc, #412]	@ (80024e4 <main+0x5a4>)
 8002348:	f004 ffd0 	bl	80072ec <siprintf>
        LCD_DrawString(20, 70, buff);
 800234c:	f107 0320 	add.w	r3, r7, #32
 8002350:	461a      	mov	r2, r3
 8002352:	2146      	movs	r1, #70	@ 0x46
 8002354:	2014      	movs	r0, #20
 8002356:	f7ff f9cb 	bl	80016f0 <LCD_DrawString>
 800235a:	e040      	b.n	80023de <main+0x49e>
      } else {
        // Mode 2: Target specific note
        map_to_target_note(freq, selected_note_idx, note, status);
 800235c:	4b62      	ldr	r3, [pc, #392]	@ (80024e8 <main+0x5a8>)
 800235e:	7819      	ldrb	r1, [r3, #0]
 8002360:	463b      	mov	r3, r7
 8002362:	f107 0214 	add.w	r2, r7, #20
 8002366:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800236a:	f7ff fd29 	bl	8001dc0 <map_to_target_note>

        // Display target note with standard frequency
        float note_freq = note_freqs[selected_note_idx];
 800236e:	4b5e      	ldr	r3, [pc, #376]	@ (80024e8 <main+0x5a8>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	4b59      	ldr	r3, [pc, #356]	@ (80024dc <main+0x59c>)
 8002376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        int note_int_part = (int)note_freq;
 800237e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8002382:	f7fe fefb 	bl	800117c <__aeabi_f2iz>
 8002386:	4603      	mov	r3, r0
 8002388:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        int note_frac_part = (int)((note_freq - note_int_part) * 100);
 800238c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002390:	f7fe fcc4 	bl	8000d1c <__aeabi_i2f>
 8002394:	4603      	mov	r3, r0
 8002396:	4619      	mov	r1, r3
 8002398:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800239c:	f7fe fc08 	bl	8000bb0 <__aeabi_fsub>
 80023a0:	4603      	mov	r3, r0
 80023a2:	494f      	ldr	r1, [pc, #316]	@ (80024e0 <main+0x5a0>)
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fd0d 	bl	8000dc4 <__aeabi_fmul>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fee5 	bl	800117c <__aeabi_f2iz>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        sprintf(buff, "Target: %s (%d.%02d Hz)    ", note, note_int_part, note_frac_part);
 80023b8:	f107 0214 	add.w	r2, r7, #20
 80023bc:	f107 0020 	add.w	r0, r7, #32
 80023c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023ca:	4948      	ldr	r1, [pc, #288]	@ (80024ec <main+0x5ac>)
 80023cc:	f004 ff8e 	bl	80072ec <siprintf>
        LCD_DrawString(20, 70, buff);
 80023d0:	f107 0320 	add.w	r3, r7, #32
 80023d4:	461a      	mov	r2, r3
 80023d6:	2146      	movs	r1, #70	@ 0x46
 80023d8:	2014      	movs	r0, #20
 80023da:	f7ff f989 	bl	80016f0 <LCD_DrawString>
      }

      // Display tuning status
      sprintf(buff, "Status: %s    ", status);
 80023de:	463a      	mov	r2, r7
 80023e0:	f107 0320 	add.w	r3, r7, #32
 80023e4:	4942      	ldr	r1, [pc, #264]	@ (80024f0 <main+0x5b0>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f004 ff80 	bl	80072ec <siprintf>
      LCD_DrawString(20, 90, buff);
 80023ec:	f107 0320 	add.w	r3, r7, #32
 80023f0:	461a      	mov	r2, r3
 80023f2:	215a      	movs	r1, #90	@ 0x5a
 80023f4:	2014      	movs	r0, #20
 80023f6:	f7ff f97b 	bl	80016f0 <LCD_DrawString>

      // Display detected frequency
      int freq_int_part = (int)freq;
 80023fa:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80023fe:	f7fe febd 	bl	800117c <__aeabi_f2iz>
 8002402:	4603      	mov	r3, r0
 8002404:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      int freq_frac_part = (int)((freq - freq_int_part) * 100);
 8002408:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800240c:	f7fe fc86 	bl	8000d1c <__aeabi_i2f>
 8002410:	4603      	mov	r3, r0
 8002412:	4619      	mov	r1, r3
 8002414:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8002418:	f7fe fbca 	bl	8000bb0 <__aeabi_fsub>
 800241c:	4603      	mov	r3, r0
 800241e:	4930      	ldr	r1, [pc, #192]	@ (80024e0 <main+0x5a0>)
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fccf 	bl	8000dc4 <__aeabi_fmul>
 8002426:	4603      	mov	r3, r0
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fea7 	bl	800117c <__aeabi_f2iz>
 800242e:	4603      	mov	r3, r0
 8002430:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      sprintf(buff, "Freq: %d.%02d Hz    ", freq_int_part, freq_frac_part);
 8002434:	f107 0020 	add.w	r0, r7, #32
 8002438:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800243c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8002440:	492c      	ldr	r1, [pc, #176]	@ (80024f4 <main+0x5b4>)
 8002442:	f004 ff53 	bl	80072ec <siprintf>
      LCD_DrawString(20, 110, buff);
 8002446:	f107 0320 	add.w	r3, r7, #32
 800244a:	461a      	mov	r2, r3
 800244c:	216e      	movs	r1, #110	@ 0x6e
 800244e:	2014      	movs	r0, #20
 8002450:	f7ff f94e 	bl	80016f0 <LCD_DrawString>

      // LED indicators
      if (strcmp(status, "In Tune") == 0) {
 8002454:	463b      	mov	r3, r7
 8002456:	4928      	ldr	r1, [pc, #160]	@ (80024f8 <main+0x5b8>)
 8002458:	4618      	mov	r0, r3
 800245a:	f7fd ff45 	bl	80002e8 <strcmp>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10a      	bne.n	800247a <main+0x53a>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Green on
 8002464:	2200      	movs	r2, #0
 8002466:	2101      	movs	r1, #1
 8002468:	4824      	ldr	r0, [pc, #144]	@ (80024fc <main+0x5bc>)
 800246a:	f002 f826 	bl	80044ba <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_5, GPIO_PIN_SET);
 800246e:	2201      	movs	r2, #1
 8002470:	2122      	movs	r1, #34	@ 0x22
 8002472:	4822      	ldr	r0, [pc, #136]	@ (80024fc <main+0x5bc>)
 8002474:	f002 f821 	bl	80044ba <HAL_GPIO_WritePin>
 8002478:	e02a      	b.n	80024d0 <main+0x590>
      } else if (strcmp(status, "Flat") == 0) {
 800247a:	463b      	mov	r3, r7
 800247c:	4920      	ldr	r1, [pc, #128]	@ (8002500 <main+0x5c0>)
 800247e:	4618      	mov	r0, r3
 8002480:	f7fd ff32 	bl	80002e8 <strcmp>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10a      	bne.n	80024a0 <main+0x560>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Red on
 800248a:	2200      	movs	r2, #0
 800248c:	2120      	movs	r1, #32
 800248e:	481b      	ldr	r0, [pc, #108]	@ (80024fc <main+0x5bc>)
 8002490:	f002 f813 	bl	80044ba <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_SET);
 8002494:	2201      	movs	r2, #1
 8002496:	2103      	movs	r1, #3
 8002498:	4818      	ldr	r0, [pc, #96]	@ (80024fc <main+0x5bc>)
 800249a:	f002 f80e 	bl	80044ba <HAL_GPIO_WritePin>
 800249e:	e017      	b.n	80024d0 <main+0x590>
      } else if (strcmp(status, "Sharp") == 0) {
 80024a0:	463b      	mov	r3, r7
 80024a2:	4918      	ldr	r1, [pc, #96]	@ (8002504 <main+0x5c4>)
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fd ff1f 	bl	80002e8 <strcmp>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10a      	bne.n	80024c6 <main+0x586>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Blue on
 80024b0:	2200      	movs	r2, #0
 80024b2:	2102      	movs	r1, #2
 80024b4:	4811      	ldr	r0, [pc, #68]	@ (80024fc <main+0x5bc>)
 80024b6:	f002 f800 	bl	80044ba <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_5, GPIO_PIN_SET);
 80024ba:	2201      	movs	r2, #1
 80024bc:	2121      	movs	r1, #33	@ 0x21
 80024be:	480f      	ldr	r0, [pc, #60]	@ (80024fc <main+0x5bc>)
 80024c0:	f001 fffb 	bl	80044ba <HAL_GPIO_WritePin>
 80024c4:	e004      	b.n	80024d0 <main+0x590>
      } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5, GPIO_PIN_SET); // All off for no signal
 80024c6:	2201      	movs	r2, #1
 80024c8:	2123      	movs	r1, #35	@ 0x23
 80024ca:	480c      	ldr	r0, [pc, #48]	@ (80024fc <main+0x5bc>)
 80024cc:	f001 fff5 	bl	80044ba <HAL_GPIO_WritePin>
      }
    }
    HAL_Delay(10); // Reduced delay to improve responsiveness
 80024d0:	200a      	movs	r0, #10
 80024d2:	f000 fcbf 	bl	8002e54 <HAL_Delay>
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET &&
 80024d6:	e579      	b.n	8001fcc <main+0x8c>
 80024d8:	20002000 	.word	0x20002000
 80024dc:	0800850c 	.word	0x0800850c
 80024e0:	42c80000 	.word	0x42c80000
 80024e4:	08007e8c 	.word	0x08007e8c
 80024e8:	200061b3 	.word	0x200061b3
 80024ec:	08007ea8 	.word	0x08007ea8
 80024f0:	08007ec4 	.word	0x08007ec4
 80024f4:	08007ed4 	.word	0x08007ed4
 80024f8:	08007df8 	.word	0x08007df8
 80024fc:	40010c00 	.word	0x40010c00
 8002500:	08007e00 	.word	0x08007e00
 8002504:	08007e08 	.word	0x08007e08

08002508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b096      	sub	sp, #88	@ 0x58
 800250c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800250e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002512:	2228      	movs	r2, #40	@ 0x28
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f004 ff0a 	bl	8007330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
 8002538:	611a      	str	r2, [r3, #16]
 800253a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800253c:	2301      	movs	r3, #1
 800253e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002540:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002544:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002546:	2300      	movs	r3, #0
 8002548:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800254a:	2301      	movs	r3, #1
 800254c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800254e:	2302      	movs	r3, #2
 8002550:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002552:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002556:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002558:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800255c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800255e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002562:	4618      	mov	r0, r3
 8002564:	f001 ffc2 	bl	80044ec <HAL_RCC_OscConfig>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800256e:	f000 fa57 	bl	8002a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002572:	230f      	movs	r3, #15
 8002574:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002576:	2302      	movs	r3, #2
 8002578:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800257e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002582:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002584:	2300      	movs	r3, #0
 8002586:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002588:	f107 031c 	add.w	r3, r7, #28
 800258c:	2102      	movs	r1, #2
 800258e:	4618      	mov	r0, r3
 8002590:	f002 fa2e 	bl	80049f0 <HAL_RCC_ClockConfig>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800259a:	f000 fa41 	bl	8002a20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800259e:	2302      	movs	r3, #2
 80025a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80025a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025a6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 fb9a 	bl	8004ce4 <HAL_RCCEx_PeriphCLKConfig>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80025b6:	f000 fa33 	bl	8002a20 <Error_Handler>
  }
}
 80025ba:	bf00      	nop
 80025bc:	3758      	adds	r7, #88	@ 0x58
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80025d4:	4b18      	ldr	r3, [pc, #96]	@ (8002638 <MX_ADC1_Init+0x74>)
 80025d6:	4a19      	ldr	r2, [pc, #100]	@ (800263c <MX_ADC1_Init+0x78>)
 80025d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80025da:	4b17      	ldr	r3, [pc, #92]	@ (8002638 <MX_ADC1_Init+0x74>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025e0:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <MX_ADC1_Init+0x74>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025e6:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <MX_ADC1_Init+0x74>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80025ec:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <MX_ADC1_Init+0x74>)
 80025ee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80025f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025f4:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <MX_ADC1_Init+0x74>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80025fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002638 <MX_ADC1_Init+0x74>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002600:	480d      	ldr	r0, [pc, #52]	@ (8002638 <MX_ADC1_Init+0x74>)
 8002602:	f000 fc4b 	bl	8002e9c <HAL_ADC_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800260c:	f000 fa08 	bl	8002a20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002610:	2303      	movs	r3, #3
 8002612:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002614:	2301      	movs	r3, #1
 8002616:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002618:	2307      	movs	r3, #7
 800261a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	4619      	mov	r1, r3
 8002620:	4805      	ldr	r0, [pc, #20]	@ (8002638 <MX_ADC1_Init+0x74>)
 8002622:	f000 fe61 	bl	80032e8 <HAL_ADC_ConfigChannel>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800262c:	f000 f9f8 	bl	8002a20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20002094 	.word	0x20002094
 800263c:	40012400 	.word	0x40012400

08002640 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002646:	f107 0308 	add.w	r3, r7, #8
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002654:	463b      	mov	r3, r7
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800265c:	4b1d      	ldr	r3, [pc, #116]	@ (80026d4 <MX_TIM3_Init+0x94>)
 800265e:	4a1e      	ldr	r2, [pc, #120]	@ (80026d8 <MX_TIM3_Init+0x98>)
 8002660:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35;
 8002662:	4b1c      	ldr	r3, [pc, #112]	@ (80026d4 <MX_TIM3_Init+0x94>)
 8002664:	2223      	movs	r2, #35	@ 0x23
 8002666:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002668:	4b1a      	ldr	r3, [pc, #104]	@ (80026d4 <MX_TIM3_Init+0x94>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 974;
 800266e:	4b19      	ldr	r3, [pc, #100]	@ (80026d4 <MX_TIM3_Init+0x94>)
 8002670:	f240 32ce 	movw	r2, #974	@ 0x3ce
 8002674:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002676:	4b17      	ldr	r3, [pc, #92]	@ (80026d4 <MX_TIM3_Init+0x94>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800267c:	4b15      	ldr	r3, [pc, #84]	@ (80026d4 <MX_TIM3_Init+0x94>)
 800267e:	2280      	movs	r2, #128	@ 0x80
 8002680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002682:	4814      	ldr	r0, [pc, #80]	@ (80026d4 <MX_TIM3_Init+0x94>)
 8002684:	f002 fd09 	bl	800509a <HAL_TIM_Base_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800268e:	f000 f9c7 	bl	8002a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002696:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002698:	f107 0308 	add.w	r3, r7, #8
 800269c:	4619      	mov	r1, r3
 800269e:	480d      	ldr	r0, [pc, #52]	@ (80026d4 <MX_TIM3_Init+0x94>)
 80026a0:	f002 fe92 	bl	80053c8 <HAL_TIM_ConfigClockSource>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80026aa:	f000 f9b9 	bl	8002a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026ae:	2320      	movs	r3, #32
 80026b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80026b2:	2380      	movs	r3, #128	@ 0x80
 80026b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026b6:	463b      	mov	r3, r7
 80026b8:	4619      	mov	r1, r3
 80026ba:	4806      	ldr	r0, [pc, #24]	@ (80026d4 <MX_TIM3_Init+0x94>)
 80026bc:	f003 f894 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80026c6:	f000 f9ab 	bl	8002a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20002108 	.word	0x20002108
 80026d8:	40000400 	.word	0x40000400

080026dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <MX_DMA_Init+0x38>)
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002714 <MX_DMA_Init+0x38>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6153      	str	r3, [r2, #20]
 80026ee:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <MX_DMA_Init+0x38>)
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	200b      	movs	r0, #11
 8002700:	f001 f971 	bl	80039e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002704:	200b      	movs	r0, #11
 8002706:	f001 f98a 	bl	8003a1e <HAL_NVIC_EnableIRQ>

}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000

08002718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	@ 0x28
 800271c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271e:	f107 0318 	add.w	r3, r7, #24
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800272c:	4b49      	ldr	r3, [pc, #292]	@ (8002854 <MX_GPIO_Init+0x13c>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	4a48      	ldr	r2, [pc, #288]	@ (8002854 <MX_GPIO_Init+0x13c>)
 8002732:	f043 0310 	orr.w	r3, r3, #16
 8002736:	6193      	str	r3, [r2, #24]
 8002738:	4b46      	ldr	r3, [pc, #280]	@ (8002854 <MX_GPIO_Init+0x13c>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002744:	4b43      	ldr	r3, [pc, #268]	@ (8002854 <MX_GPIO_Init+0x13c>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	4a42      	ldr	r2, [pc, #264]	@ (8002854 <MX_GPIO_Init+0x13c>)
 800274a:	f043 0304 	orr.w	r3, r3, #4
 800274e:	6193      	str	r3, [r2, #24]
 8002750:	4b40      	ldr	r3, [pc, #256]	@ (8002854 <MX_GPIO_Init+0x13c>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800275c:	4b3d      	ldr	r3, [pc, #244]	@ (8002854 <MX_GPIO_Init+0x13c>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	4a3c      	ldr	r2, [pc, #240]	@ (8002854 <MX_GPIO_Init+0x13c>)
 8002762:	f043 0308 	orr.w	r3, r3, #8
 8002766:	6193      	str	r3, [r2, #24]
 8002768:	4b3a      	ldr	r3, [pc, #232]	@ (8002854 <MX_GPIO_Init+0x13c>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002774:	4b37      	ldr	r3, [pc, #220]	@ (8002854 <MX_GPIO_Init+0x13c>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	4a36      	ldr	r2, [pc, #216]	@ (8002854 <MX_GPIO_Init+0x13c>)
 800277a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800277e:	6193      	str	r3, [r2, #24]
 8002780:	4b34      	ldr	r3, [pc, #208]	@ (8002854 <MX_GPIO_Init+0x13c>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800278c:	4b31      	ldr	r3, [pc, #196]	@ (8002854 <MX_GPIO_Init+0x13c>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	4a30      	ldr	r2, [pc, #192]	@ (8002854 <MX_GPIO_Init+0x13c>)
 8002792:	f043 0320 	orr.w	r3, r3, #32
 8002796:	6193      	str	r3, [r2, #24]
 8002798:	4b2e      	ldr	r3, [pc, #184]	@ (8002854 <MX_GPIO_Init+0x13c>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 80027a4:	2200      	movs	r2, #0
 80027a6:	2123      	movs	r1, #35	@ 0x23
 80027a8:	482b      	ldr	r0, [pc, #172]	@ (8002858 <MX_GPIO_Init+0x140>)
 80027aa:	f001 fe86 	bl	80044ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80027ae:	2201      	movs	r2, #1
 80027b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027b4:	4829      	ldr	r0, [pc, #164]	@ (800285c <MX_GPIO_Init+0x144>)
 80027b6:	f001 fe80 	bl	80044ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80027ba:	2201      	movs	r2, #1
 80027bc:	2102      	movs	r1, #2
 80027be:	4828      	ldr	r0, [pc, #160]	@ (8002860 <MX_GPIO_Init+0x148>)
 80027c0:	f001 fe7b 	bl	80044ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80027c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ce:	2301      	movs	r3, #1
 80027d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d2:	f107 0318 	add.w	r3, r7, #24
 80027d6:	4619      	mov	r1, r3
 80027d8:	4822      	ldr	r0, [pc, #136]	@ (8002864 <MX_GPIO_Init+0x14c>)
 80027da:	f001 fcc3 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027de:	2301      	movs	r3, #1
 80027e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e6:	2301      	movs	r3, #1
 80027e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	f107 0318 	add.w	r3, r7, #24
 80027ee:	4619      	mov	r1, r3
 80027f0:	481d      	ldr	r0, [pc, #116]	@ (8002868 <MX_GPIO_Init+0x150>)
 80027f2:	f001 fcb7 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 80027f6:	2323      	movs	r3, #35	@ 0x23
 80027f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fa:	2301      	movs	r3, #1
 80027fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2302      	movs	r3, #2
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002806:	f107 0318 	add.w	r3, r7, #24
 800280a:	4619      	mov	r1, r3
 800280c:	4812      	ldr	r0, [pc, #72]	@ (8002858 <MX_GPIO_Init+0x140>)
 800280e:	f001 fca9 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002818:	2301      	movs	r3, #1
 800281a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002820:	2302      	movs	r3, #2
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002824:	f107 0318 	add.w	r3, r7, #24
 8002828:	4619      	mov	r1, r3
 800282a:	480c      	ldr	r0, [pc, #48]	@ (800285c <MX_GPIO_Init+0x144>)
 800282c:	f001 fc9a 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002830:	2302      	movs	r3, #2
 8002832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002834:	2301      	movs	r3, #1
 8002836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2302      	movs	r3, #2
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002840:	f107 0318 	add.w	r3, r7, #24
 8002844:	4619      	mov	r1, r3
 8002846:	4806      	ldr	r0, [pc, #24]	@ (8002860 <MX_GPIO_Init+0x148>)
 8002848:	f001 fc8c 	bl	8004164 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800284c:	bf00      	nop
 800284e:	3728      	adds	r7, #40	@ 0x28
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	40010c00 	.word	0x40010c00
 800285c:	40011400 	.word	0x40011400
 8002860:	40011800 	.word	0x40011800
 8002864:	40011000 	.word	0x40011000
 8002868:	40010800 	.word	0x40010800

0800286c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
 8002880:	615a      	str	r2, [r3, #20]
 8002882:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002884:	4b28      	ldr	r3, [pc, #160]	@ (8002928 <MX_FSMC_Init+0xbc>)
 8002886:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800288a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800288c:	4b26      	ldr	r3, [pc, #152]	@ (8002928 <MX_FSMC_Init+0xbc>)
 800288e:	4a27      	ldr	r2, [pc, #156]	@ (800292c <MX_FSMC_Init+0xc0>)
 8002890:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002892:	4b25      	ldr	r3, [pc, #148]	@ (8002928 <MX_FSMC_Init+0xbc>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002898:	4b23      	ldr	r3, [pc, #140]	@ (8002928 <MX_FSMC_Init+0xbc>)
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800289e:	4b22      	ldr	r3, [pc, #136]	@ (8002928 <MX_FSMC_Init+0xbc>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80028a4:	4b20      	ldr	r3, [pc, #128]	@ (8002928 <MX_FSMC_Init+0xbc>)
 80028a6:	2210      	movs	r2, #16
 80028a8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80028aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002928 <MX_FSMC_Init+0xbc>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80028b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002928 <MX_FSMC_Init+0xbc>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80028b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002928 <MX_FSMC_Init+0xbc>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80028bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002928 <MX_FSMC_Init+0xbc>)
 80028be:	2200      	movs	r2, #0
 80028c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80028c2:	4b19      	ldr	r3, [pc, #100]	@ (8002928 <MX_FSMC_Init+0xbc>)
 80028c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80028ca:	4b17      	ldr	r3, [pc, #92]	@ (8002928 <MX_FSMC_Init+0xbc>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80028d0:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <MX_FSMC_Init+0xbc>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80028d6:	4b14      	ldr	r3, [pc, #80]	@ (8002928 <MX_FSMC_Init+0xbc>)
 80028d8:	2200      	movs	r2, #0
 80028da:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80028dc:	4b12      	ldr	r3, [pc, #72]	@ (8002928 <MX_FSMC_Init+0xbc>)
 80028de:	2200      	movs	r2, #0
 80028e0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80028e2:	230f      	movs	r3, #15
 80028e4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80028e6:	230f      	movs	r3, #15
 80028e8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80028ea:	23ff      	movs	r3, #255	@ 0xff
 80028ec:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80028ee:	230f      	movs	r3, #15
 80028f0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80028f2:	2310      	movs	r3, #16
 80028f4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80028f6:	2311      	movs	r3, #17
 80028f8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	2200      	movs	r2, #0
 8002902:	4619      	mov	r1, r3
 8002904:	4808      	ldr	r0, [pc, #32]	@ (8002928 <MX_FSMC_Init+0xbc>)
 8002906:	f002 fb7b 	bl	8005000 <HAL_SRAM_Init>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8002910:	f000 f886 	bl	8002a20 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <MX_FSMC_Init+0xc4>)
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	4a05      	ldr	r2, [pc, #20]	@ (8002930 <MX_FSMC_Init+0xc4>)
 800291a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800291e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002920:	bf00      	nop
 8002922:	3720      	adds	r7, #32
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20002150 	.word	0x20002150
 800292c:	a0000104 	.word	0xa0000104
 8002930:	40010000 	.word	0x40010000

08002934 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  ADC conversion complete callback
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b090      	sub	sp, #64	@ 0x40
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1) {
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a2d      	ldr	r2, [pc, #180]	@ (80029f8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d154      	bne.n	80029f0 <HAL_ADC_ConvCpltCallback+0xbc>
    // Verify DMA state before proceeding
    if (HAL_DMA_GetState(&hdma_adc1) == HAL_DMA_STATE_READY) {
 8002946:	482d      	ldr	r0, [pc, #180]	@ (80029fc <HAL_ADC_ConvCpltCallback+0xc8>)
 8002948:	f001 fbd2 	bl	80040f0 <HAL_DMA_GetState>
 800294c:	4603      	mov	r3, r0
 800294e:	2b01      	cmp	r3, #1
 8002950:	d13c      	bne.n	80029cc <HAL_ADC_ConvCpltCallback+0x98>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002952:	b672      	cpsid	i
}
 8002954:	bf00      	nop
      // Critical section to synchronize buffer toggle
      __disable_irq();
      adc_complete = 1;
 8002956:	4b2a      	ldr	r3, [pc, #168]	@ (8002a00 <HAL_ADC_ConvCpltCallback+0xcc>)
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
      buffer_idx = !buffer_idx;
 800295c:	4b29      	ldr	r3, [pc, #164]	@ (8002a04 <HAL_ADC_ConvCpltCallback+0xd0>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	bf0c      	ite	eq
 8002966:	2301      	moveq	r3, #1
 8002968:	2300      	movne	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	4b25      	ldr	r3, [pc, #148]	@ (8002a04 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002970:	701a      	strb	r2, [r3, #0]
      processing_buffer = !buffer_idx;
 8002972:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	4b20      	ldr	r3, [pc, #128]	@ (8002a08 <HAL_ADC_ConvCpltCallback+0xd4>)
 8002986:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002988:	b662      	cpsie	i
}
 800298a:	bf00      	nop
      __enable_irq();

      // Stop current DMA transfer
      if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK) {
 800298c:	481f      	ldr	r0, [pc, #124]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xd8>)
 800298e:	f000 fc4d 	bl	800322c <HAL_ADC_Stop_DMA>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d004      	beq.n	80029a2 <HAL_ADC_ConvCpltCallback+0x6e>
        LCD_DrawString(20, 150, "DMA Stop Error");
 8002998:	4a1d      	ldr	r2, [pc, #116]	@ (8002a10 <HAL_ADC_ConvCpltCallback+0xdc>)
 800299a:	2196      	movs	r1, #150	@ 0x96
 800299c:	2014      	movs	r0, #20
 800299e:	f7fe fea7 	bl	80016f0 <LCD_DrawString>
      }

      // Start DMA transfer for the new buffer
      if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer[buffer_idx], FFT_SIZE) != HAL_OK) {
 80029a2:	4b18      	ldr	r3, [pc, #96]	@ (8002a04 <HAL_ADC_ConvCpltCallback+0xd0>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	031b      	lsls	r3, r3, #12
 80029aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002a14 <HAL_ADC_ConvCpltCallback+0xe0>)
 80029ac:	4413      	add	r3, r2
 80029ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029b2:	4619      	mov	r1, r3
 80029b4:	4815      	ldr	r0, [pc, #84]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0xd8>)
 80029b6:	f000 fb5b 	bl	8003070 <HAL_ADC_Start_DMA>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d017      	beq.n	80029f0 <HAL_ADC_ConvCpltCallback+0xbc>
        LCD_DrawString(20, 150, "DMA Start Error");
 80029c0:	4a15      	ldr	r2, [pc, #84]	@ (8002a18 <HAL_ADC_ConvCpltCallback+0xe4>)
 80029c2:	2196      	movs	r1, #150	@ 0x96
 80029c4:	2014      	movs	r0, #20
 80029c6:	f7fe fe93 	bl	80016f0 <LCD_DrawString>
      char buff[50];
      sprintf(buff, "DMA State: %d", HAL_DMA_GetState(&hdma_adc1));
      LCD_DrawString(20, 150, buff);
    }
  }
}
 80029ca:	e011      	b.n	80029f0 <HAL_ADC_ConvCpltCallback+0xbc>
      sprintf(buff, "DMA State: %d", HAL_DMA_GetState(&hdma_adc1));
 80029cc:	480b      	ldr	r0, [pc, #44]	@ (80029fc <HAL_ADC_ConvCpltCallback+0xc8>)
 80029ce:	f001 fb8f 	bl	80040f0 <HAL_DMA_GetState>
 80029d2:	4603      	mov	r3, r0
 80029d4:	461a      	mov	r2, r3
 80029d6:	f107 030c 	add.w	r3, r7, #12
 80029da:	4910      	ldr	r1, [pc, #64]	@ (8002a1c <HAL_ADC_ConvCpltCallback+0xe8>)
 80029dc:	4618      	mov	r0, r3
 80029de:	f004 fc85 	bl	80072ec <siprintf>
      LCD_DrawString(20, 150, buff);
 80029e2:	f107 030c 	add.w	r3, r7, #12
 80029e6:	461a      	mov	r2, r3
 80029e8:	2196      	movs	r1, #150	@ 0x96
 80029ea:	2014      	movs	r0, #20
 80029ec:	f7fe fe80 	bl	80016f0 <LCD_DrawString>
}
 80029f0:	bf00      	nop
 80029f2:	3740      	adds	r7, #64	@ 0x40
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40012400 	.word	0x40012400
 80029fc:	200020c4 	.word	0x200020c4
 8002a00:	200061b0 	.word	0x200061b0
 8002a04:	200061b1 	.word	0x200061b1
 8002a08:	200061b2 	.word	0x200061b2
 8002a0c:	20002094 	.word	0x20002094
 8002a10:	08007eec 	.word	0x08007eec
 8002a14:	20000000 	.word	0x20000000
 8002a18:	08007efc 	.word	0x08007efc
 8002a1c:	08007f0c 	.word	0x08007f0c

08002a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a24:	b672      	cpsid	i
}
 8002a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a28:	bf00      	nop
 8002a2a:	e7fd      	b.n	8002a28 <Error_Handler+0x8>

08002a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a32:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <HAL_MspInit+0x5c>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	4a14      	ldr	r2, [pc, #80]	@ (8002a88 <HAL_MspInit+0x5c>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6193      	str	r3, [r2, #24]
 8002a3e:	4b12      	ldr	r3, [pc, #72]	@ (8002a88 <HAL_MspInit+0x5c>)
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a88 <HAL_MspInit+0x5c>)
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002a88 <HAL_MspInit+0x5c>)
 8002a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a54:	61d3      	str	r3, [r2, #28]
 8002a56:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <HAL_MspInit+0x5c>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <HAL_MspInit+0x60>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	4a04      	ldr	r2, [pc, #16]	@ (8002a8c <HAL_MspInit+0x60>)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40010000 	.word	0x40010000

08002a90 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0310 	add.w	r3, r7, #16
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a29      	ldr	r2, [pc, #164]	@ (8002b50 <HAL_ADC_MspInit+0xc0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d14a      	bne.n	8002b46 <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ab0:	4b28      	ldr	r3, [pc, #160]	@ (8002b54 <HAL_ADC_MspInit+0xc4>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4a27      	ldr	r2, [pc, #156]	@ (8002b54 <HAL_ADC_MspInit+0xc4>)
 8002ab6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aba:	6193      	str	r3, [r2, #24]
 8002abc:	4b25      	ldr	r3, [pc, #148]	@ (8002b54 <HAL_ADC_MspInit+0xc4>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac8:	4b22      	ldr	r3, [pc, #136]	@ (8002b54 <HAL_ADC_MspInit+0xc4>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a21      	ldr	r2, [pc, #132]	@ (8002b54 <HAL_ADC_MspInit+0xc4>)
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b54 <HAL_ADC_MspInit+0xc4>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ae0:	2308      	movs	r3, #8
 8002ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae8:	f107 0310 	add.w	r3, r7, #16
 8002aec:	4619      	mov	r1, r3
 8002aee:	481a      	ldr	r0, [pc, #104]	@ (8002b58 <HAL_ADC_MspInit+0xc8>)
 8002af0:	f001 fb38 	bl	8004164 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002af4:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <HAL_ADC_MspInit+0xcc>)
 8002af6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b60 <HAL_ADC_MspInit+0xd0>)
 8002af8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002afa:	4b18      	ldr	r3, [pc, #96]	@ (8002b5c <HAL_ADC_MspInit+0xcc>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b00:	4b16      	ldr	r3, [pc, #88]	@ (8002b5c <HAL_ADC_MspInit+0xcc>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b06:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <HAL_ADC_MspInit+0xcc>)
 8002b08:	2280      	movs	r2, #128	@ 0x80
 8002b0a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b0c:	4b13      	ldr	r3, [pc, #76]	@ (8002b5c <HAL_ADC_MspInit+0xcc>)
 8002b0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b14:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <HAL_ADC_MspInit+0xcc>)
 8002b16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b5c <HAL_ADC_MspInit+0xcc>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002b22:	4b0e      	ldr	r3, [pc, #56]	@ (8002b5c <HAL_ADC_MspInit+0xcc>)
 8002b24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b2a:	480c      	ldr	r0, [pc, #48]	@ (8002b5c <HAL_ADC_MspInit+0xcc>)
 8002b2c:	f000 ff92 	bl	8003a54 <HAL_DMA_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8002b36:	f7ff ff73 	bl	8002a20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a07      	ldr	r2, [pc, #28]	@ (8002b5c <HAL_ADC_MspInit+0xcc>)
 8002b3e:	621a      	str	r2, [r3, #32]
 8002b40:	4a06      	ldr	r2, [pc, #24]	@ (8002b5c <HAL_ADC_MspInit+0xcc>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002b46:	bf00      	nop
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40012400 	.word	0x40012400
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40010800 	.word	0x40010800
 8002b5c:	200020c4 	.word	0x200020c4
 8002b60:	40020008 	.word	0x40020008

08002b64 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba8 <HAL_TIM_Base_MspInit+0x44>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d113      	bne.n	8002b9e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b76:	4b0d      	ldr	r3, [pc, #52]	@ (8002bac <HAL_TIM_Base_MspInit+0x48>)
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002bac <HAL_TIM_Base_MspInit+0x48>)
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	61d3      	str	r3, [r2, #28]
 8002b82:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <HAL_TIM_Base_MspInit+0x48>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2100      	movs	r1, #0
 8002b92:	201d      	movs	r0, #29
 8002b94:	f000 ff27 	bl	80039e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b98:	201d      	movs	r0, #29
 8002b9a:	f000 ff40 	bl	8003a1e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40000400 	.word	0x40000400
 8002bac:	40021000 	.word	0x40021000

08002bb0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002bb6:	f107 0308 	add.w	r3, r7, #8
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8002bc4:	4b18      	ldr	r3, [pc, #96]	@ (8002c28 <HAL_FSMC_MspInit+0x78>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d129      	bne.n	8002c20 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8002bcc:	4b16      	ldr	r3, [pc, #88]	@ (8002c28 <HAL_FSMC_MspInit+0x78>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002bd2:	4b16      	ldr	r3, [pc, #88]	@ (8002c2c <HAL_FSMC_MspInit+0x7c>)
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	4a15      	ldr	r2, [pc, #84]	@ (8002c2c <HAL_FSMC_MspInit+0x7c>)
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bdc:	6153      	str	r3, [r2, #20]
 8002bde:	4b13      	ldr	r3, [pc, #76]	@ (8002c2c <HAL_FSMC_MspInit+0x7c>)
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002bea:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002bee:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bf8:	f107 0308 	add.w	r3, r7, #8
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	480c      	ldr	r0, [pc, #48]	@ (8002c30 <HAL_FSMC_MspInit+0x80>)
 8002c00:	f001 fab0 	bl	8004164 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002c04:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 8002c08:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c12:	f107 0308 	add.w	r3, r7, #8
 8002c16:	4619      	mov	r1, r3
 8002c18:	4806      	ldr	r0, [pc, #24]	@ (8002c34 <HAL_FSMC_MspInit+0x84>)
 8002c1a:	f001 faa3 	bl	8004164 <HAL_GPIO_Init>
 8002c1e:	e000      	b.n	8002c22 <HAL_FSMC_MspInit+0x72>
    return;
 8002c20:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	200061bc 	.word	0x200061bc
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40011800 	.word	0x40011800
 8002c34:	40011400 	.word	0x40011400

08002c38 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002c40:	f7ff ffb6 	bl	8002bb0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c50:	bf00      	nop
 8002c52:	e7fd      	b.n	8002c50 <NMI_Handler+0x4>

08002c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c58:	bf00      	nop
 8002c5a:	e7fd      	b.n	8002c58 <HardFault_Handler+0x4>

08002c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c60:	bf00      	nop
 8002c62:	e7fd      	b.n	8002c60 <MemManage_Handler+0x4>

08002c64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c68:	bf00      	nop
 8002c6a:	e7fd      	b.n	8002c68 <BusFault_Handler+0x4>

08002c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c70:	bf00      	nop
 8002c72:	e7fd      	b.n	8002c70 <UsageFault_Handler+0x4>

08002c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c9c:	f000 f8be 	bl	8002e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ca8:	4802      	ldr	r0, [pc, #8]	@ (8002cb4 <DMA1_Channel1_IRQHandler+0x10>)
 8002caa:	f000 ffe5 	bl	8003c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200020c4 	.word	0x200020c4

08002cb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cbc:	4802      	ldr	r0, [pc, #8]	@ (8002cc8 <TIM3_IRQHandler+0x10>)
 8002cbe:	f002 fa93 	bl	80051e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20002108 	.word	0x20002108

08002ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cd4:	4a14      	ldr	r2, [pc, #80]	@ (8002d28 <_sbrk+0x5c>)
 8002cd6:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <_sbrk+0x60>)
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ce0:	4b13      	ldr	r3, [pc, #76]	@ (8002d30 <_sbrk+0x64>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ce8:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <_sbrk+0x64>)
 8002cea:	4a12      	ldr	r2, [pc, #72]	@ (8002d34 <_sbrk+0x68>)
 8002cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cee:	4b10      	ldr	r3, [pc, #64]	@ (8002d30 <_sbrk+0x64>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d207      	bcs.n	8002d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cfc:	f004 fb20 	bl	8007340 <__errno>
 8002d00:	4603      	mov	r3, r0
 8002d02:	220c      	movs	r2, #12
 8002d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0a:	e009      	b.n	8002d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d0c:	4b08      	ldr	r3, [pc, #32]	@ (8002d30 <_sbrk+0x64>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d12:	4b07      	ldr	r3, [pc, #28]	@ (8002d30 <_sbrk+0x64>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	4a05      	ldr	r2, [pc, #20]	@ (8002d30 <_sbrk+0x64>)
 8002d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20010000 	.word	0x20010000
 8002d2c:	00000400 	.word	0x00000400
 8002d30:	200061c0 	.word	0x200061c0
 8002d34:	20006310 	.word	0x20006310

08002d38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d44:	f7ff fff8 	bl	8002d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d48:	480b      	ldr	r0, [pc, #44]	@ (8002d78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d4a:	490c      	ldr	r1, [pc, #48]	@ (8002d7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d50:	e002      	b.n	8002d58 <LoopCopyDataInit>

08002d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d56:	3304      	adds	r3, #4

08002d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d5c:	d3f9      	bcc.n	8002d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5e:	4a09      	ldr	r2, [pc, #36]	@ (8002d84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d60:	4c09      	ldr	r4, [pc, #36]	@ (8002d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d64:	e001      	b.n	8002d6a <LoopFillZerobss>

08002d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d68:	3204      	adds	r2, #4

08002d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d6c:	d3fb      	bcc.n	8002d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d6e:	f004 faed 	bl	800734c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d72:	f7ff f8e5 	bl	8001f40 <main>
  bx lr
 8002d76:	4770      	bx	lr
  ldr r0, =_sdata
 8002d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d7c:	20002078 	.word	0x20002078
  ldr r2, =_sidata
 8002d80:	0801c20c 	.word	0x0801c20c
  ldr r2, =_sbss
 8002d84:	20002078 	.word	0x20002078
  ldr r4, =_ebss
 8002d88:	20006310 	.word	0x20006310

08002d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d8c:	e7fe      	b.n	8002d8c <ADC1_2_IRQHandler>
	...

08002d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d94:	4b08      	ldr	r3, [pc, #32]	@ (8002db8 <HAL_Init+0x28>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a07      	ldr	r2, [pc, #28]	@ (8002db8 <HAL_Init+0x28>)
 8002d9a:	f043 0310 	orr.w	r3, r3, #16
 8002d9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da0:	2003      	movs	r0, #3
 8002da2:	f000 fe15 	bl	80039d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002da6:	200f      	movs	r0, #15
 8002da8:	f000 f808 	bl	8002dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dac:	f7ff fe3e 	bl	8002a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40022000 	.word	0x40022000

08002dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dc4:	4b12      	ldr	r3, [pc, #72]	@ (8002e10 <HAL_InitTick+0x54>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b12      	ldr	r3, [pc, #72]	@ (8002e14 <HAL_InitTick+0x58>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fe2d 	bl	8003a3a <HAL_SYSTICK_Config>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e00e      	b.n	8002e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b0f      	cmp	r3, #15
 8002dee:	d80a      	bhi.n	8002e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df0:	2200      	movs	r2, #0
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	f04f 30ff 	mov.w	r0, #4294967295
 8002df8:	f000 fdf5 	bl	80039e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dfc:	4a06      	ldr	r2, [pc, #24]	@ (8002e18 <HAL_InitTick+0x5c>)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	e000      	b.n	8002e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	2000201c 	.word	0x2000201c
 8002e14:	20002024 	.word	0x20002024
 8002e18:	20002020 	.word	0x20002020

08002e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e20:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <HAL_IncTick+0x1c>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <HAL_IncTick+0x20>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	4a03      	ldr	r2, [pc, #12]	@ (8002e3c <HAL_IncTick+0x20>)
 8002e2e:	6013      	str	r3, [r2, #0]
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	20002024 	.word	0x20002024
 8002e3c:	200061c4 	.word	0x200061c4

08002e40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return uwTick;
 8002e44:	4b02      	ldr	r3, [pc, #8]	@ (8002e50 <HAL_GetTick+0x10>)
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr
 8002e50:	200061c4 	.word	0x200061c4

08002e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff fff0 	bl	8002e40 <HAL_GetTick>
 8002e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d005      	beq.n	8002e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e98 <HAL_Delay+0x44>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e7a:	bf00      	nop
 8002e7c:	f7ff ffe0 	bl	8002e40 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d8f7      	bhi.n	8002e7c <HAL_Delay+0x28>
  {
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20002024 	.word	0x20002024

08002e9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e0ce      	b.n	800305c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d109      	bne.n	8002ee0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff fdd8 	bl	8002a90 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fb53 	bl	800358c <ADC_ConversionStop_Disable>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 80a9 	bne.w	800304a <HAL_ADC_Init+0x1ae>
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 80a5 	bne.w	800304a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f08:	f023 0302 	bic.w	r3, r3, #2
 8002f0c:	f043 0202 	orr.w	r2, r3, #2
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4951      	ldr	r1, [pc, #324]	@ (8003064 <HAL_ADC_Init+0x1c8>)
 8002f1e:	428b      	cmp	r3, r1
 8002f20:	d10a      	bne.n	8002f38 <HAL_ADC_Init+0x9c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f2a:	d002      	beq.n	8002f32 <HAL_ADC_Init+0x96>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	e004      	b.n	8002f3c <HAL_ADC_Init+0xa0>
 8002f32:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f36:	e001      	b.n	8002f3c <HAL_ADC_Init+0xa0>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7b1b      	ldrb	r3, [r3, #12]
 8002f42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f54:	d003      	beq.n	8002f5e <HAL_ADC_Init+0xc2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d102      	bne.n	8002f64 <HAL_ADC_Init+0xc8>
 8002f5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f62:	e000      	b.n	8002f66 <HAL_ADC_Init+0xca>
 8002f64:	2300      	movs	r3, #0
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	7d1b      	ldrb	r3, [r3, #20]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d119      	bne.n	8002fa8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	7b1b      	ldrb	r3, [r3, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d109      	bne.n	8002f90 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	035a      	lsls	r2, r3, #13
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f94:	f043 0220 	orr.w	r2, r3, #32
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa0:	f043 0201 	orr.w	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	4b29      	ldr	r3, [pc, #164]	@ (8003068 <HAL_ADC_Init+0x1cc>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fd8:	d003      	beq.n	8002fe2 <HAL_ADC_Init+0x146>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d104      	bne.n	8002fec <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	051b      	lsls	r3, r3, #20
 8002fea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	4b19      	ldr	r3, [pc, #100]	@ (800306c <HAL_ADC_Init+0x1d0>)
 8003008:	4013      	ands	r3, r2
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	429a      	cmp	r2, r3
 800300e:	d10b      	bne.n	8003028 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003026:	e018      	b.n	800305a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	f023 0312 	bic.w	r3, r3, #18
 8003030:	f043 0210 	orr.w	r2, r3, #16
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003048:	e007      	b.n	800305a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304e:	f043 0210 	orr.w	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800305a:	7dfb      	ldrb	r3, [r7, #23]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40013c00 	.word	0x40013c00
 8003068:	ffe1f7fd 	.word	0xffe1f7fd
 800306c:	ff1f0efe 	.word	0xff1f0efe

08003070 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a64      	ldr	r2, [pc, #400]	@ (8003218 <HAL_ADC_Start_DMA+0x1a8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d004      	beq.n	8003094 <HAL_ADC_Start_DMA+0x24>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a63      	ldr	r2, [pc, #396]	@ (800321c <HAL_ADC_Start_DMA+0x1ac>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d106      	bne.n	80030a2 <HAL_ADC_Start_DMA+0x32>
 8003094:	4b60      	ldr	r3, [pc, #384]	@ (8003218 <HAL_ADC_Start_DMA+0x1a8>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800309c:	2b00      	cmp	r3, #0
 800309e:	f040 80b3 	bne.w	8003208 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_Start_DMA+0x40>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e0ae      	b.n	800320e <HAL_ADC_Start_DMA+0x19e>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fa0d 	bl	80034d8 <ADC_Enable>
 80030be:	4603      	mov	r3, r0
 80030c0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f040 809a 	bne.w	80031fe <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a4e      	ldr	r2, [pc, #312]	@ (800321c <HAL_ADC_Start_DMA+0x1ac>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d105      	bne.n	80030f4 <HAL_ADC_Start_DMA+0x84>
 80030e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003218 <HAL_ADC_Start_DMA+0x1a8>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d115      	bne.n	8003120 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800310a:	2b00      	cmp	r3, #0
 800310c:	d026      	beq.n	800315c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003112:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003116:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800311e:	e01d      	b.n	800315c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003124:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a39      	ldr	r2, [pc, #228]	@ (8003218 <HAL_ADC_Start_DMA+0x1a8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d004      	beq.n	8003140 <HAL_ADC_Start_DMA+0xd0>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a38      	ldr	r2, [pc, #224]	@ (800321c <HAL_ADC_Start_DMA+0x1ac>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d10d      	bne.n	800315c <HAL_ADC_Start_DMA+0xec>
 8003140:	4b35      	ldr	r3, [pc, #212]	@ (8003218 <HAL_ADC_Start_DMA+0x1a8>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003150:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003154:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d006      	beq.n	8003176 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316c:	f023 0206 	bic.w	r2, r3, #6
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003174:	e002      	b.n	800317c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	4a25      	ldr	r2, [pc, #148]	@ (8003220 <HAL_ADC_Start_DMA+0x1b0>)
 800318a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4a24      	ldr	r2, [pc, #144]	@ (8003224 <HAL_ADC_Start_DMA+0x1b4>)
 8003192:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	4a23      	ldr	r2, [pc, #140]	@ (8003228 <HAL_ADC_Start_DMA+0x1b8>)
 800319a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0202 	mvn.w	r2, #2
 80031a4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031b4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a18      	ldr	r0, [r3, #32]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	334c      	adds	r3, #76	@ 0x4c
 80031c0:	4619      	mov	r1, r3
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f000 fcbb 	bl	8003b40 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80031d4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80031d8:	d108      	bne.n	80031ec <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80031e8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80031ea:	e00f      	b.n	800320c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80031fa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80031fc:	e006      	b.n	800320c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8003206:	e001      	b.n	800320c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800320c:	7dfb      	ldrb	r3, [r7, #23]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40012400 	.word	0x40012400
 800321c:	40012800 	.word	0x40012800
 8003220:	0800360f 	.word	0x0800360f
 8003224:	0800368b 	.word	0x0800368b
 8003228:	080036a7 	.word	0x080036a7

0800322c <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_ADC_Stop_DMA+0x1a>
 8003242:	2302      	movs	r3, #2
 8003244:	e03a      	b.n	80032bc <HAL_ADC_Stop_DMA+0x90>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f99c 	bl	800358c <ADC_ConversionStop_Disable>
 8003254:	4603      	mov	r3, r0
 8003256:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d129      	bne.n	80032b2 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800326c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d11a      	bne.n	80032b2 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fcbd 	bl	8003c00 <HAL_DMA_Abort>
 8003286:	4603      	mov	r3, r0
 8003288:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10a      	bne.n	80032a6 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003294:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003298:	f023 0301 	bic.w	r3, r3, #1
 800329c:	f043 0201 	orr.w	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80032a4:	e005      	b.n	80032b2 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr

080032d6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x20>
 8003304:	2302      	movs	r3, #2
 8003306:	e0dc      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x1da>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b06      	cmp	r3, #6
 8003316:	d81c      	bhi.n	8003352 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	3b05      	subs	r3, #5
 800332a:	221f      	movs	r2, #31
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	4019      	ands	r1, r3
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	3b05      	subs	r3, #5
 8003344:	fa00 f203 	lsl.w	r2, r0, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003350:	e03c      	b.n	80033cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b0c      	cmp	r3, #12
 8003358:	d81c      	bhi.n	8003394 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	3b23      	subs	r3, #35	@ 0x23
 800336c:	221f      	movs	r2, #31
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	4019      	ands	r1, r3
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	3b23      	subs	r3, #35	@ 0x23
 8003386:	fa00 f203 	lsl.w	r2, r0, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	631a      	str	r2, [r3, #48]	@ 0x30
 8003392:	e01b      	b.n	80033cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	3b41      	subs	r3, #65	@ 0x41
 80033a6:	221f      	movs	r2, #31
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	4019      	ands	r1, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	3b41      	subs	r3, #65	@ 0x41
 80033c0:	fa00 f203 	lsl.w	r2, r0, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b09      	cmp	r3, #9
 80033d2:	d91c      	bls.n	800340e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68d9      	ldr	r1, [r3, #12]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	3b1e      	subs	r3, #30
 80033e6:	2207      	movs	r2, #7
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	4019      	ands	r1, r3
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	6898      	ldr	r0, [r3, #8]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4613      	mov	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4413      	add	r3, r2
 80033fe:	3b1e      	subs	r3, #30
 8003400:	fa00 f203 	lsl.w	r2, r0, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	60da      	str	r2, [r3, #12]
 800340c:	e019      	b.n	8003442 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6919      	ldr	r1, [r3, #16]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	2207      	movs	r2, #7
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	4019      	ands	r1, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	6898      	ldr	r0, [r3, #8]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	fa00 f203 	lsl.w	r2, r0, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b10      	cmp	r3, #16
 8003448:	d003      	beq.n	8003452 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800344e:	2b11      	cmp	r3, #17
 8003450:	d132      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1d      	ldr	r2, [pc, #116]	@ (80034cc <HAL_ADC_ConfigChannel+0x1e4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d125      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d126      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003478:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b10      	cmp	r3, #16
 8003480:	d11a      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003482:	4b13      	ldr	r3, [pc, #76]	@ (80034d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a13      	ldr	r2, [pc, #76]	@ (80034d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	0c9a      	lsrs	r2, r3, #18
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003498:	e002      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	3b01      	subs	r3, #1
 800349e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f9      	bne.n	800349a <HAL_ADC_ConfigChannel+0x1b2>
 80034a6:	e007      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ac:	f043 0220 	orr.w	r2, r3, #32
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr
 80034cc:	40012400 	.word	0x40012400
 80034d0:	2000201c 	.word	0x2000201c
 80034d4:	431bde83 	.word	0x431bde83

080034d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d040      	beq.n	8003578 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0201 	orr.w	r2, r2, #1
 8003504:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003506:	4b1f      	ldr	r3, [pc, #124]	@ (8003584 <ADC_Enable+0xac>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1f      	ldr	r2, [pc, #124]	@ (8003588 <ADC_Enable+0xb0>)
 800350c:	fba2 2303 	umull	r2, r3, r2, r3
 8003510:	0c9b      	lsrs	r3, r3, #18
 8003512:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003514:	e002      	b.n	800351c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	3b01      	subs	r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f9      	bne.n	8003516 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003522:	f7ff fc8d 	bl	8002e40 <HAL_GetTick>
 8003526:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003528:	e01f      	b.n	800356a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800352a:	f7ff fc89 	bl	8002e40 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d918      	bls.n	800356a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b01      	cmp	r3, #1
 8003544:	d011      	beq.n	800356a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354a:	f043 0210 	orr.w	r2, r3, #16
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003556:	f043 0201 	orr.w	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e007      	b.n	800357a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d1d8      	bne.n	800352a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	2000201c 	.word	0x2000201c
 8003588:	431bde83 	.word	0x431bde83

0800358c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d12e      	bne.n	8003604 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035b6:	f7ff fc43 	bl	8002e40 <HAL_GetTick>
 80035ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035bc:	e01b      	b.n	80035f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035be:	f7ff fc3f 	bl	8002e40 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d914      	bls.n	80035f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d10d      	bne.n	80035f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035de:	f043 0210 	orr.w	r2, r3, #16
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	f043 0201 	orr.w	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e007      	b.n	8003606 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	d0dc      	beq.n	80035be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003620:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003624:	2b00      	cmp	r3, #0
 8003626:	d127      	bne.n	8003678 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800363e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003642:	d115      	bne.n	8003670 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003648:	2b00      	cmp	r3, #0
 800364a:	d111      	bne.n	8003670 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003650:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7ff f95f 	bl	8002934 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003676:	e004      	b.n	8003682 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	4798      	blx	r3
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f7ff fe13 	bl	80032c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800369e:	bf00      	nop
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	f043 0204 	orr.w	r2, r3, #4
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f7ff fe02 	bl	80032d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_ADCEx_Calibration_Start+0x1e>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e097      	b.n	800382a <HAL_ADCEx_Calibration_Start+0x14e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ff42 	bl	800358c <ADC_ConversionStop_Disable>
 8003708:	4603      	mov	r3, r0
 800370a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff fee3 	bl	80034d8 <ADC_Enable>
 8003712:	4603      	mov	r3, r0
 8003714:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003716:	7dfb      	ldrb	r3, [r7, #23]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 8081 	bne.w	8003820 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003722:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003726:	f023 0302 	bic.w	r3, r3, #2
 800372a:	f043 0202 	orr.w	r2, r3, #2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003732:	4b40      	ldr	r3, [pc, #256]	@ (8003834 <HAL_ADCEx_Calibration_Start+0x158>)
 8003734:	681c      	ldr	r4, [r3, #0]
 8003736:	2002      	movs	r0, #2
 8003738:	f001 fb8a 	bl	8004e50 <HAL_RCCEx_GetPeriphCLKFreq>
 800373c:	4603      	mov	r3, r0
 800373e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003742:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003744:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003746:	e002      	b.n	800374e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	3b01      	subs	r3, #1
 800374c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f9      	bne.n	8003748 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0208 	orr.w	r2, r2, #8
 8003762:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003764:	f7ff fb6c 	bl	8002e40 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800376a:	e01b      	b.n	80037a4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800376c:	f7ff fb68 	bl	8002e40 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b0a      	cmp	r3, #10
 8003778:	d914      	bls.n	80037a4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00d      	beq.n	80037a4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378c:	f023 0312 	bic.w	r3, r3, #18
 8003790:	f043 0210 	orr.w	r2, r3, #16
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e042      	b.n	800382a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1dc      	bne.n	800376c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0204 	orr.w	r2, r2, #4
 80037c0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80037c2:	f7ff fb3d 	bl	8002e40 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80037c8:	e01b      	b.n	8003802 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80037ca:	f7ff fb39 	bl	8002e40 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b0a      	cmp	r3, #10
 80037d6:	d914      	bls.n	8003802 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00d      	beq.n	8003802 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ea:	f023 0312 	bic.w	r3, r3, #18
 80037ee:	f043 0210 	orr.w	r2, r3, #16
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e013      	b.n	800382a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1dc      	bne.n	80037ca <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003814:	f023 0303 	bic.w	r3, r3, #3
 8003818:	f043 0201 	orr.w	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003828:	7dfb      	ldrb	r3, [r7, #23]
}
 800382a:	4618      	mov	r0, r3
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	bd90      	pop	{r4, r7, pc}
 8003832:	bf00      	nop
 8003834:	2000201c 	.word	0x2000201c

08003838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003848:	4b0c      	ldr	r3, [pc, #48]	@ (800387c <__NVIC_SetPriorityGrouping+0x44>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003854:	4013      	ands	r3, r2
 8003856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003860:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800386a:	4a04      	ldr	r2, [pc, #16]	@ (800387c <__NVIC_SetPriorityGrouping+0x44>)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	60d3      	str	r3, [r2, #12]
}
 8003870:	bf00      	nop
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003884:	4b04      	ldr	r3, [pc, #16]	@ (8003898 <__NVIC_GetPriorityGrouping+0x18>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	0a1b      	lsrs	r3, r3, #8
 800388a:	f003 0307 	and.w	r3, r3, #7
}
 800388e:	4618      	mov	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	db0b      	blt.n	80038c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	f003 021f 	and.w	r2, r3, #31
 80038b4:	4906      	ldr	r1, [pc, #24]	@ (80038d0 <__NVIC_EnableIRQ+0x34>)
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	2001      	movs	r0, #1
 80038be:	fa00 f202 	lsl.w	r2, r0, r2
 80038c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	e000e100 	.word	0xe000e100

080038d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	6039      	str	r1, [r7, #0]
 80038de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	db0a      	blt.n	80038fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	490c      	ldr	r1, [pc, #48]	@ (8003920 <__NVIC_SetPriority+0x4c>)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	0112      	lsls	r2, r2, #4
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	440b      	add	r3, r1
 80038f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038fc:	e00a      	b.n	8003914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	4908      	ldr	r1, [pc, #32]	@ (8003924 <__NVIC_SetPriority+0x50>)
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	3b04      	subs	r3, #4
 800390c:	0112      	lsls	r2, r2, #4
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	440b      	add	r3, r1
 8003912:	761a      	strb	r2, [r3, #24]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000e100 	.word	0xe000e100
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003928:	b480      	push	{r7}
 800392a:	b089      	sub	sp, #36	@ 0x24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f1c3 0307 	rsb	r3, r3, #7
 8003942:	2b04      	cmp	r3, #4
 8003944:	bf28      	it	cs
 8003946:	2304      	movcs	r3, #4
 8003948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3304      	adds	r3, #4
 800394e:	2b06      	cmp	r3, #6
 8003950:	d902      	bls.n	8003958 <NVIC_EncodePriority+0x30>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3b03      	subs	r3, #3
 8003956:	e000      	b.n	800395a <NVIC_EncodePriority+0x32>
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800395c:	f04f 32ff 	mov.w	r2, #4294967295
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43da      	mvns	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	401a      	ands	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003970:	f04f 31ff 	mov.w	r1, #4294967295
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	43d9      	mvns	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	4313      	orrs	r3, r2
         );
}
 8003982:	4618      	mov	r0, r3
 8003984:	3724      	adds	r7, #36	@ 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3b01      	subs	r3, #1
 8003998:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800399c:	d301      	bcc.n	80039a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800399e:	2301      	movs	r3, #1
 80039a0:	e00f      	b.n	80039c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a2:	4a0a      	ldr	r2, [pc, #40]	@ (80039cc <SysTick_Config+0x40>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039aa:	210f      	movs	r1, #15
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295
 80039b0:	f7ff ff90 	bl	80038d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <SysTick_Config+0x40>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ba:	4b04      	ldr	r3, [pc, #16]	@ (80039cc <SysTick_Config+0x40>)
 80039bc:	2207      	movs	r2, #7
 80039be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	e000e010 	.word	0xe000e010

080039d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ff2d 	bl	8003838 <__NVIC_SetPriorityGrouping>
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b086      	sub	sp, #24
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	4603      	mov	r3, r0
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039f8:	f7ff ff42 	bl	8003880 <__NVIC_GetPriorityGrouping>
 80039fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	6978      	ldr	r0, [r7, #20]
 8003a04:	f7ff ff90 	bl	8003928 <NVIC_EncodePriority>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff5f 	bl	80038d4 <__NVIC_SetPriority>
}
 8003a16:	bf00      	nop
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	4603      	mov	r3, r0
 8003a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff35 	bl	800389c <__NVIC_EnableIRQ>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff ffa2 	bl	800398c <SysTick_Config>
 8003a48:	4603      	mov	r3, r0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e059      	b.n	8003b1e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	4b2d      	ldr	r3, [pc, #180]	@ (8003b28 <HAL_DMA_Init+0xd4>)
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d80f      	bhi.n	8003a96 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b2c <HAL_DMA_Init+0xd8>)
 8003a7e:	4413      	add	r3, r2
 8003a80:	4a2b      	ldr	r2, [pc, #172]	@ (8003b30 <HAL_DMA_Init+0xdc>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	091b      	lsrs	r3, r3, #4
 8003a88:	009a      	lsls	r2, r3, #2
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a28      	ldr	r2, [pc, #160]	@ (8003b34 <HAL_DMA_Init+0xe0>)
 8003a92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a94:	e00e      	b.n	8003ab4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4b26      	ldr	r3, [pc, #152]	@ (8003b38 <HAL_DMA_Init+0xe4>)
 8003a9e:	4413      	add	r3, r2
 8003aa0:	4a23      	ldr	r2, [pc, #140]	@ (8003b30 <HAL_DMA_Init+0xdc>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	009a      	lsls	r2, r3, #2
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a22      	ldr	r2, [pc, #136]	@ (8003b3c <HAL_DMA_Init+0xe8>)
 8003ab2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003aca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003ace:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr
 8003b28:	40020407 	.word	0x40020407
 8003b2c:	bffdfff8 	.word	0xbffdfff8
 8003b30:	cccccccd 	.word	0xcccccccd
 8003b34:	40020000 	.word	0x40020000
 8003b38:	bffdfbf8 	.word	0xbffdfbf8
 8003b3c:	40020400 	.word	0x40020400

08003b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_DMA_Start_IT+0x20>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e04b      	b.n	8003bf8 <HAL_DMA_Start_IT+0xb8>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d13a      	bne.n	8003bea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fab6 	bl	800410a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 020e 	orr.w	r2, r2, #14
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e00f      	b.n	8003bd8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0204 	bic.w	r2, r2, #4
 8003bc6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 020a 	orr.w	r2, r2, #10
 8003bd6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	e005      	b.n	8003bf6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d008      	beq.n	8003c2a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e020      	b.n	8003c6c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 020e 	bic.w	r2, r2, #14
 8003c38:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0201 	bic.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c52:	2101      	movs	r1, #1
 8003c54:	fa01 f202 	lsl.w	r2, r1, r2
 8003c58:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr
	...

08003c78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	2204      	movs	r2, #4
 8003c96:	409a      	lsls	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80f1 	beq.w	8003e84 <HAL_DMA_IRQHandler+0x20c>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80eb 	beq.w	8003e84 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d107      	bne.n	8003ccc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0204 	bic.w	r2, r2, #4
 8003cca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b5f      	ldr	r3, [pc, #380]	@ (8003e50 <HAL_DMA_IRQHandler+0x1d8>)
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d958      	bls.n	8003d8a <HAL_DMA_IRQHandler+0x112>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a5d      	ldr	r2, [pc, #372]	@ (8003e54 <HAL_DMA_IRQHandler+0x1dc>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d04f      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x10a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a5c      	ldr	r2, [pc, #368]	@ (8003e58 <HAL_DMA_IRQHandler+0x1e0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d048      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x106>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a5a      	ldr	r2, [pc, #360]	@ (8003e5c <HAL_DMA_IRQHandler+0x1e4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d040      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x100>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a59      	ldr	r2, [pc, #356]	@ (8003e60 <HAL_DMA_IRQHandler+0x1e8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d038      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xfa>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a57      	ldr	r2, [pc, #348]	@ (8003e64 <HAL_DMA_IRQHandler+0x1ec>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d030      	beq.n	8003d6c <HAL_DMA_IRQHandler+0xf4>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a56      	ldr	r2, [pc, #344]	@ (8003e68 <HAL_DMA_IRQHandler+0x1f0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d028      	beq.n	8003d66 <HAL_DMA_IRQHandler+0xee>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a4d      	ldr	r2, [pc, #308]	@ (8003e50 <HAL_DMA_IRQHandler+0x1d8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d020      	beq.n	8003d60 <HAL_DMA_IRQHandler+0xe8>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a52      	ldr	r2, [pc, #328]	@ (8003e6c <HAL_DMA_IRQHandler+0x1f4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d019      	beq.n	8003d5c <HAL_DMA_IRQHandler+0xe4>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a50      	ldr	r2, [pc, #320]	@ (8003e70 <HAL_DMA_IRQHandler+0x1f8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d012      	beq.n	8003d58 <HAL_DMA_IRQHandler+0xe0>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a4f      	ldr	r2, [pc, #316]	@ (8003e74 <HAL_DMA_IRQHandler+0x1fc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00a      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xda>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a4d      	ldr	r2, [pc, #308]	@ (8003e78 <HAL_DMA_IRQHandler+0x200>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d102      	bne.n	8003d4c <HAL_DMA_IRQHandler+0xd4>
 8003d46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d4a:	e01b      	b.n	8003d84 <HAL_DMA_IRQHandler+0x10c>
 8003d4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003d50:	e018      	b.n	8003d84 <HAL_DMA_IRQHandler+0x10c>
 8003d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d56:	e015      	b.n	8003d84 <HAL_DMA_IRQHandler+0x10c>
 8003d58:	2340      	movs	r3, #64	@ 0x40
 8003d5a:	e013      	b.n	8003d84 <HAL_DMA_IRQHandler+0x10c>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	e011      	b.n	8003d84 <HAL_DMA_IRQHandler+0x10c>
 8003d60:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003d64:	e00e      	b.n	8003d84 <HAL_DMA_IRQHandler+0x10c>
 8003d66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003d6a:	e00b      	b.n	8003d84 <HAL_DMA_IRQHandler+0x10c>
 8003d6c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003d70:	e008      	b.n	8003d84 <HAL_DMA_IRQHandler+0x10c>
 8003d72:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d76:	e005      	b.n	8003d84 <HAL_DMA_IRQHandler+0x10c>
 8003d78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d7c:	e002      	b.n	8003d84 <HAL_DMA_IRQHandler+0x10c>
 8003d7e:	2340      	movs	r3, #64	@ 0x40
 8003d80:	e000      	b.n	8003d84 <HAL_DMA_IRQHandler+0x10c>
 8003d82:	2304      	movs	r3, #4
 8003d84:	4a3d      	ldr	r2, [pc, #244]	@ (8003e7c <HAL_DMA_IRQHandler+0x204>)
 8003d86:	6053      	str	r3, [r2, #4]
 8003d88:	e057      	b.n	8003e3a <HAL_DMA_IRQHandler+0x1c2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a31      	ldr	r2, [pc, #196]	@ (8003e54 <HAL_DMA_IRQHandler+0x1dc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d04f      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x1bc>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a2f      	ldr	r2, [pc, #188]	@ (8003e58 <HAL_DMA_IRQHandler+0x1e0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d048      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x1b8>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a2e      	ldr	r2, [pc, #184]	@ (8003e5c <HAL_DMA_IRQHandler+0x1e4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d040      	beq.n	8003e2a <HAL_DMA_IRQHandler+0x1b2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2c      	ldr	r2, [pc, #176]	@ (8003e60 <HAL_DMA_IRQHandler+0x1e8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d038      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x1ac>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a2b      	ldr	r2, [pc, #172]	@ (8003e64 <HAL_DMA_IRQHandler+0x1ec>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d030      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x1a6>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a29      	ldr	r2, [pc, #164]	@ (8003e68 <HAL_DMA_IRQHandler+0x1f0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d028      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x1a0>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a21      	ldr	r2, [pc, #132]	@ (8003e50 <HAL_DMA_IRQHandler+0x1d8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d020      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x19a>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a25      	ldr	r2, [pc, #148]	@ (8003e6c <HAL_DMA_IRQHandler+0x1f4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d019      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x196>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a24      	ldr	r2, [pc, #144]	@ (8003e70 <HAL_DMA_IRQHandler+0x1f8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d012      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x192>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a22      	ldr	r2, [pc, #136]	@ (8003e74 <HAL_DMA_IRQHandler+0x1fc>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00a      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x18c>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a21      	ldr	r2, [pc, #132]	@ (8003e78 <HAL_DMA_IRQHandler+0x200>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d102      	bne.n	8003dfe <HAL_DMA_IRQHandler+0x186>
 8003df8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003dfc:	e01b      	b.n	8003e36 <HAL_DMA_IRQHandler+0x1be>
 8003dfe:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003e02:	e018      	b.n	8003e36 <HAL_DMA_IRQHandler+0x1be>
 8003e04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e08:	e015      	b.n	8003e36 <HAL_DMA_IRQHandler+0x1be>
 8003e0a:	2340      	movs	r3, #64	@ 0x40
 8003e0c:	e013      	b.n	8003e36 <HAL_DMA_IRQHandler+0x1be>
 8003e0e:	2304      	movs	r3, #4
 8003e10:	e011      	b.n	8003e36 <HAL_DMA_IRQHandler+0x1be>
 8003e12:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003e16:	e00e      	b.n	8003e36 <HAL_DMA_IRQHandler+0x1be>
 8003e18:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003e1c:	e00b      	b.n	8003e36 <HAL_DMA_IRQHandler+0x1be>
 8003e1e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003e22:	e008      	b.n	8003e36 <HAL_DMA_IRQHandler+0x1be>
 8003e24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e28:	e005      	b.n	8003e36 <HAL_DMA_IRQHandler+0x1be>
 8003e2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e2e:	e002      	b.n	8003e36 <HAL_DMA_IRQHandler+0x1be>
 8003e30:	2340      	movs	r3, #64	@ 0x40
 8003e32:	e000      	b.n	8003e36 <HAL_DMA_IRQHandler+0x1be>
 8003e34:	2304      	movs	r3, #4
 8003e36:	4a12      	ldr	r2, [pc, #72]	@ (8003e80 <HAL_DMA_IRQHandler+0x208>)
 8003e38:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 8136 	beq.w	80040b0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003e4c:	e130      	b.n	80040b0 <HAL_DMA_IRQHandler+0x438>
 8003e4e:	bf00      	nop
 8003e50:	40020080 	.word	0x40020080
 8003e54:	40020008 	.word	0x40020008
 8003e58:	4002001c 	.word	0x4002001c
 8003e5c:	40020030 	.word	0x40020030
 8003e60:	40020044 	.word	0x40020044
 8003e64:	40020058 	.word	0x40020058
 8003e68:	4002006c 	.word	0x4002006c
 8003e6c:	40020408 	.word	0x40020408
 8003e70:	4002041c 	.word	0x4002041c
 8003e74:	40020430 	.word	0x40020430
 8003e78:	40020444 	.word	0x40020444
 8003e7c:	40020400 	.word	0x40020400
 8003e80:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	2202      	movs	r2, #2
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80dd 	beq.w	8004050 <HAL_DMA_IRQHandler+0x3d8>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80d7 	beq.w	8004050 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10b      	bne.n	8003ec8 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 020a 	bic.w	r2, r2, #10
 8003ebe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4b7b      	ldr	r3, [pc, #492]	@ (80040bc <HAL_DMA_IRQHandler+0x444>)
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d958      	bls.n	8003f86 <HAL_DMA_IRQHandler+0x30e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a79      	ldr	r2, [pc, #484]	@ (80040c0 <HAL_DMA_IRQHandler+0x448>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d04f      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x306>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a78      	ldr	r2, [pc, #480]	@ (80040c4 <HAL_DMA_IRQHandler+0x44c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d048      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x302>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a76      	ldr	r2, [pc, #472]	@ (80040c8 <HAL_DMA_IRQHandler+0x450>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d040      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x2fc>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a75      	ldr	r2, [pc, #468]	@ (80040cc <HAL_DMA_IRQHandler+0x454>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d038      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2f6>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a73      	ldr	r2, [pc, #460]	@ (80040d0 <HAL_DMA_IRQHandler+0x458>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d030      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x2f0>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a72      	ldr	r2, [pc, #456]	@ (80040d4 <HAL_DMA_IRQHandler+0x45c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d028      	beq.n	8003f62 <HAL_DMA_IRQHandler+0x2ea>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a69      	ldr	r2, [pc, #420]	@ (80040bc <HAL_DMA_IRQHandler+0x444>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d020      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x2e4>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a6e      	ldr	r2, [pc, #440]	@ (80040d8 <HAL_DMA_IRQHandler+0x460>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d019      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x2e0>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6c      	ldr	r2, [pc, #432]	@ (80040dc <HAL_DMA_IRQHandler+0x464>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d012      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x2dc>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a6b      	ldr	r2, [pc, #428]	@ (80040e0 <HAL_DMA_IRQHandler+0x468>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00a      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x2d6>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a69      	ldr	r2, [pc, #420]	@ (80040e4 <HAL_DMA_IRQHandler+0x46c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d102      	bne.n	8003f48 <HAL_DMA_IRQHandler+0x2d0>
 8003f42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f46:	e01b      	b.n	8003f80 <HAL_DMA_IRQHandler+0x308>
 8003f48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f4c:	e018      	b.n	8003f80 <HAL_DMA_IRQHandler+0x308>
 8003f4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f52:	e015      	b.n	8003f80 <HAL_DMA_IRQHandler+0x308>
 8003f54:	2320      	movs	r3, #32
 8003f56:	e013      	b.n	8003f80 <HAL_DMA_IRQHandler+0x308>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e011      	b.n	8003f80 <HAL_DMA_IRQHandler+0x308>
 8003f5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f60:	e00e      	b.n	8003f80 <HAL_DMA_IRQHandler+0x308>
 8003f62:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f66:	e00b      	b.n	8003f80 <HAL_DMA_IRQHandler+0x308>
 8003f68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f6c:	e008      	b.n	8003f80 <HAL_DMA_IRQHandler+0x308>
 8003f6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f72:	e005      	b.n	8003f80 <HAL_DMA_IRQHandler+0x308>
 8003f74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f78:	e002      	b.n	8003f80 <HAL_DMA_IRQHandler+0x308>
 8003f7a:	2320      	movs	r3, #32
 8003f7c:	e000      	b.n	8003f80 <HAL_DMA_IRQHandler+0x308>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	4a59      	ldr	r2, [pc, #356]	@ (80040e8 <HAL_DMA_IRQHandler+0x470>)
 8003f82:	6053      	str	r3, [r2, #4]
 8003f84:	e057      	b.n	8004036 <HAL_DMA_IRQHandler+0x3be>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a4d      	ldr	r2, [pc, #308]	@ (80040c0 <HAL_DMA_IRQHandler+0x448>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d04f      	beq.n	8004030 <HAL_DMA_IRQHandler+0x3b8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a4b      	ldr	r2, [pc, #300]	@ (80040c4 <HAL_DMA_IRQHandler+0x44c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d048      	beq.n	800402c <HAL_DMA_IRQHandler+0x3b4>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a4a      	ldr	r2, [pc, #296]	@ (80040c8 <HAL_DMA_IRQHandler+0x450>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d040      	beq.n	8004026 <HAL_DMA_IRQHandler+0x3ae>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a48      	ldr	r2, [pc, #288]	@ (80040cc <HAL_DMA_IRQHandler+0x454>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d038      	beq.n	8004020 <HAL_DMA_IRQHandler+0x3a8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a47      	ldr	r2, [pc, #284]	@ (80040d0 <HAL_DMA_IRQHandler+0x458>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d030      	beq.n	800401a <HAL_DMA_IRQHandler+0x3a2>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a45      	ldr	r2, [pc, #276]	@ (80040d4 <HAL_DMA_IRQHandler+0x45c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d028      	beq.n	8004014 <HAL_DMA_IRQHandler+0x39c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a3d      	ldr	r2, [pc, #244]	@ (80040bc <HAL_DMA_IRQHandler+0x444>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d020      	beq.n	800400e <HAL_DMA_IRQHandler+0x396>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a41      	ldr	r2, [pc, #260]	@ (80040d8 <HAL_DMA_IRQHandler+0x460>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d019      	beq.n	800400a <HAL_DMA_IRQHandler+0x392>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a40      	ldr	r2, [pc, #256]	@ (80040dc <HAL_DMA_IRQHandler+0x464>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d012      	beq.n	8004006 <HAL_DMA_IRQHandler+0x38e>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a3e      	ldr	r2, [pc, #248]	@ (80040e0 <HAL_DMA_IRQHandler+0x468>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00a      	beq.n	8004000 <HAL_DMA_IRQHandler+0x388>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a3d      	ldr	r2, [pc, #244]	@ (80040e4 <HAL_DMA_IRQHandler+0x46c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d102      	bne.n	8003ffa <HAL_DMA_IRQHandler+0x382>
 8003ff4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ff8:	e01b      	b.n	8004032 <HAL_DMA_IRQHandler+0x3ba>
 8003ffa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ffe:	e018      	b.n	8004032 <HAL_DMA_IRQHandler+0x3ba>
 8004000:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004004:	e015      	b.n	8004032 <HAL_DMA_IRQHandler+0x3ba>
 8004006:	2320      	movs	r3, #32
 8004008:	e013      	b.n	8004032 <HAL_DMA_IRQHandler+0x3ba>
 800400a:	2302      	movs	r3, #2
 800400c:	e011      	b.n	8004032 <HAL_DMA_IRQHandler+0x3ba>
 800400e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004012:	e00e      	b.n	8004032 <HAL_DMA_IRQHandler+0x3ba>
 8004014:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004018:	e00b      	b.n	8004032 <HAL_DMA_IRQHandler+0x3ba>
 800401a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800401e:	e008      	b.n	8004032 <HAL_DMA_IRQHandler+0x3ba>
 8004020:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004024:	e005      	b.n	8004032 <HAL_DMA_IRQHandler+0x3ba>
 8004026:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800402a:	e002      	b.n	8004032 <HAL_DMA_IRQHandler+0x3ba>
 800402c:	2320      	movs	r3, #32
 800402e:	e000      	b.n	8004032 <HAL_DMA_IRQHandler+0x3ba>
 8004030:	2302      	movs	r3, #2
 8004032:	4a2e      	ldr	r2, [pc, #184]	@ (80040ec <HAL_DMA_IRQHandler+0x474>)
 8004034:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004042:	2b00      	cmp	r3, #0
 8004044:	d034      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800404e:	e02f      	b.n	80040b0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004054:	2208      	movs	r2, #8
 8004056:	409a      	lsls	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d028      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x43a>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d023      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 020e 	bic.w	r2, r2, #14
 8004078:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004082:	2101      	movs	r1, #1
 8004084:	fa01 f202 	lsl.w	r2, r1, r2
 8004088:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d004      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	4798      	blx	r3
    }
  }
  return;
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
}
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40020080 	.word	0x40020080
 80040c0:	40020008 	.word	0x40020008
 80040c4:	4002001c 	.word	0x4002001c
 80040c8:	40020030 	.word	0x40020030
 80040cc:	40020044 	.word	0x40020044
 80040d0:	40020058 	.word	0x40020058
 80040d4:	4002006c 	.word	0x4002006c
 80040d8:	40020408 	.word	0x40020408
 80040dc:	4002041c 	.word	0x4002041c
 80040e0:	40020430 	.word	0x40020430
 80040e4:	40020444 	.word	0x40020444
 80040e8:	40020400 	.word	0x40020400
 80040ec:	40020000 	.word	0x40020000

080040f0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80040fe:	b2db      	uxtb	r3, r3
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr

0800410a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004120:	2101      	movs	r1, #1
 8004122:	fa01 f202 	lsl.w	r2, r1, r2
 8004126:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b10      	cmp	r3, #16
 8004136:	d108      	bne.n	800414a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004148:	e007      	b.n	800415a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	60da      	str	r2, [r3, #12]
}
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004164:	b480      	push	{r7}
 8004166:	b08b      	sub	sp, #44	@ 0x2c
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800416e:	2300      	movs	r3, #0
 8004170:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004172:	2300      	movs	r3, #0
 8004174:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004176:	e179      	b.n	800446c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004178:	2201      	movs	r2, #1
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	4013      	ands	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	429a      	cmp	r2, r3
 8004192:	f040 8168 	bne.w	8004466 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4a96      	ldr	r2, [pc, #600]	@ (80043f4 <HAL_GPIO_Init+0x290>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d05e      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041a0:	4a94      	ldr	r2, [pc, #592]	@ (80043f4 <HAL_GPIO_Init+0x290>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d875      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041a6:	4a94      	ldr	r2, [pc, #592]	@ (80043f8 <HAL_GPIO_Init+0x294>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d058      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041ac:	4a92      	ldr	r2, [pc, #584]	@ (80043f8 <HAL_GPIO_Init+0x294>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d86f      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041b2:	4a92      	ldr	r2, [pc, #584]	@ (80043fc <HAL_GPIO_Init+0x298>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d052      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041b8:	4a90      	ldr	r2, [pc, #576]	@ (80043fc <HAL_GPIO_Init+0x298>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d869      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041be:	4a90      	ldr	r2, [pc, #576]	@ (8004400 <HAL_GPIO_Init+0x29c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d04c      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041c4:	4a8e      	ldr	r2, [pc, #568]	@ (8004400 <HAL_GPIO_Init+0x29c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d863      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041ca:	4a8e      	ldr	r2, [pc, #568]	@ (8004404 <HAL_GPIO_Init+0x2a0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d046      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041d0:	4a8c      	ldr	r2, [pc, #560]	@ (8004404 <HAL_GPIO_Init+0x2a0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d85d      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041d6:	2b12      	cmp	r3, #18
 80041d8:	d82a      	bhi.n	8004230 <HAL_GPIO_Init+0xcc>
 80041da:	2b12      	cmp	r3, #18
 80041dc:	d859      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041de:	a201      	add	r2, pc, #4	@ (adr r2, 80041e4 <HAL_GPIO_Init+0x80>)
 80041e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e4:	0800425f 	.word	0x0800425f
 80041e8:	08004239 	.word	0x08004239
 80041ec:	0800424b 	.word	0x0800424b
 80041f0:	0800428d 	.word	0x0800428d
 80041f4:	08004293 	.word	0x08004293
 80041f8:	08004293 	.word	0x08004293
 80041fc:	08004293 	.word	0x08004293
 8004200:	08004293 	.word	0x08004293
 8004204:	08004293 	.word	0x08004293
 8004208:	08004293 	.word	0x08004293
 800420c:	08004293 	.word	0x08004293
 8004210:	08004293 	.word	0x08004293
 8004214:	08004293 	.word	0x08004293
 8004218:	08004293 	.word	0x08004293
 800421c:	08004293 	.word	0x08004293
 8004220:	08004293 	.word	0x08004293
 8004224:	08004293 	.word	0x08004293
 8004228:	08004241 	.word	0x08004241
 800422c:	08004255 	.word	0x08004255
 8004230:	4a75      	ldr	r2, [pc, #468]	@ (8004408 <HAL_GPIO_Init+0x2a4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004236:	e02c      	b.n	8004292 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	623b      	str	r3, [r7, #32]
          break;
 800423e:	e029      	b.n	8004294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	3304      	adds	r3, #4
 8004246:	623b      	str	r3, [r7, #32]
          break;
 8004248:	e024      	b.n	8004294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	3308      	adds	r3, #8
 8004250:	623b      	str	r3, [r7, #32]
          break;
 8004252:	e01f      	b.n	8004294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	330c      	adds	r3, #12
 800425a:	623b      	str	r3, [r7, #32]
          break;
 800425c:	e01a      	b.n	8004294 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004266:	2304      	movs	r3, #4
 8004268:	623b      	str	r3, [r7, #32]
          break;
 800426a:	e013      	b.n	8004294 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d105      	bne.n	8004280 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004274:	2308      	movs	r3, #8
 8004276:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	611a      	str	r2, [r3, #16]
          break;
 800427e:	e009      	b.n	8004294 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004280:	2308      	movs	r3, #8
 8004282:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	615a      	str	r2, [r3, #20]
          break;
 800428a:	e003      	b.n	8004294 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800428c:	2300      	movs	r3, #0
 800428e:	623b      	str	r3, [r7, #32]
          break;
 8004290:	e000      	b.n	8004294 <HAL_GPIO_Init+0x130>
          break;
 8004292:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	2bff      	cmp	r3, #255	@ 0xff
 8004298:	d801      	bhi.n	800429e <HAL_GPIO_Init+0x13a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	e001      	b.n	80042a2 <HAL_GPIO_Init+0x13e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2bff      	cmp	r3, #255	@ 0xff
 80042a8:	d802      	bhi.n	80042b0 <HAL_GPIO_Init+0x14c>
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	e002      	b.n	80042b6 <HAL_GPIO_Init+0x152>
 80042b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b2:	3b08      	subs	r3, #8
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	210f      	movs	r1, #15
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	401a      	ands	r2, r3
 80042c8:	6a39      	ldr	r1, [r7, #32]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	431a      	orrs	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80c1 	beq.w	8004466 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80042e4:	4b49      	ldr	r3, [pc, #292]	@ (800440c <HAL_GPIO_Init+0x2a8>)
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	4a48      	ldr	r2, [pc, #288]	@ (800440c <HAL_GPIO_Init+0x2a8>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	6193      	str	r3, [r2, #24]
 80042f0:	4b46      	ldr	r3, [pc, #280]	@ (800440c <HAL_GPIO_Init+0x2a8>)
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80042fc:	4a44      	ldr	r2, [pc, #272]	@ (8004410 <HAL_GPIO_Init+0x2ac>)
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	089b      	lsrs	r3, r3, #2
 8004302:	3302      	adds	r3, #2
 8004304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004308:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	220f      	movs	r2, #15
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4013      	ands	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a3c      	ldr	r2, [pc, #240]	@ (8004414 <HAL_GPIO_Init+0x2b0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d01f      	beq.n	8004368 <HAL_GPIO_Init+0x204>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a3b      	ldr	r2, [pc, #236]	@ (8004418 <HAL_GPIO_Init+0x2b4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d019      	beq.n	8004364 <HAL_GPIO_Init+0x200>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a3a      	ldr	r2, [pc, #232]	@ (800441c <HAL_GPIO_Init+0x2b8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d013      	beq.n	8004360 <HAL_GPIO_Init+0x1fc>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a39      	ldr	r2, [pc, #228]	@ (8004420 <HAL_GPIO_Init+0x2bc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00d      	beq.n	800435c <HAL_GPIO_Init+0x1f8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a38      	ldr	r2, [pc, #224]	@ (8004424 <HAL_GPIO_Init+0x2c0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d007      	beq.n	8004358 <HAL_GPIO_Init+0x1f4>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a37      	ldr	r2, [pc, #220]	@ (8004428 <HAL_GPIO_Init+0x2c4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_GPIO_Init+0x1f0>
 8004350:	2305      	movs	r3, #5
 8004352:	e00a      	b.n	800436a <HAL_GPIO_Init+0x206>
 8004354:	2306      	movs	r3, #6
 8004356:	e008      	b.n	800436a <HAL_GPIO_Init+0x206>
 8004358:	2304      	movs	r3, #4
 800435a:	e006      	b.n	800436a <HAL_GPIO_Init+0x206>
 800435c:	2303      	movs	r3, #3
 800435e:	e004      	b.n	800436a <HAL_GPIO_Init+0x206>
 8004360:	2302      	movs	r3, #2
 8004362:	e002      	b.n	800436a <HAL_GPIO_Init+0x206>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <HAL_GPIO_Init+0x206>
 8004368:	2300      	movs	r3, #0
 800436a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800436c:	f002 0203 	and.w	r2, r2, #3
 8004370:	0092      	lsls	r2, r2, #2
 8004372:	4093      	lsls	r3, r2
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800437a:	4925      	ldr	r1, [pc, #148]	@ (8004410 <HAL_GPIO_Init+0x2ac>)
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	3302      	adds	r3, #2
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d006      	beq.n	80043a2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004394:	4b25      	ldr	r3, [pc, #148]	@ (800442c <HAL_GPIO_Init+0x2c8>)
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	4924      	ldr	r1, [pc, #144]	@ (800442c <HAL_GPIO_Init+0x2c8>)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]
 80043a0:	e006      	b.n	80043b0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80043a2:	4b22      	ldr	r3, [pc, #136]	@ (800442c <HAL_GPIO_Init+0x2c8>)
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	43db      	mvns	r3, r3
 80043aa:	4920      	ldr	r1, [pc, #128]	@ (800442c <HAL_GPIO_Init+0x2c8>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d006      	beq.n	80043ca <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80043bc:	4b1b      	ldr	r3, [pc, #108]	@ (800442c <HAL_GPIO_Init+0x2c8>)
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	491a      	ldr	r1, [pc, #104]	@ (800442c <HAL_GPIO_Init+0x2c8>)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60cb      	str	r3, [r1, #12]
 80043c8:	e006      	b.n	80043d8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043ca:	4b18      	ldr	r3, [pc, #96]	@ (800442c <HAL_GPIO_Init+0x2c8>)
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	43db      	mvns	r3, r3
 80043d2:	4916      	ldr	r1, [pc, #88]	@ (800442c <HAL_GPIO_Init+0x2c8>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d025      	beq.n	8004430 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80043e4:	4b11      	ldr	r3, [pc, #68]	@ (800442c <HAL_GPIO_Init+0x2c8>)
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	4910      	ldr	r1, [pc, #64]	@ (800442c <HAL_GPIO_Init+0x2c8>)
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	604b      	str	r3, [r1, #4]
 80043f0:	e025      	b.n	800443e <HAL_GPIO_Init+0x2da>
 80043f2:	bf00      	nop
 80043f4:	10320000 	.word	0x10320000
 80043f8:	10310000 	.word	0x10310000
 80043fc:	10220000 	.word	0x10220000
 8004400:	10210000 	.word	0x10210000
 8004404:	10120000 	.word	0x10120000
 8004408:	10110000 	.word	0x10110000
 800440c:	40021000 	.word	0x40021000
 8004410:	40010000 	.word	0x40010000
 8004414:	40010800 	.word	0x40010800
 8004418:	40010c00 	.word	0x40010c00
 800441c:	40011000 	.word	0x40011000
 8004420:	40011400 	.word	0x40011400
 8004424:	40011800 	.word	0x40011800
 8004428:	40011c00 	.word	0x40011c00
 800442c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004430:	4b15      	ldr	r3, [pc, #84]	@ (8004488 <HAL_GPIO_Init+0x324>)
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	43db      	mvns	r3, r3
 8004438:	4913      	ldr	r1, [pc, #76]	@ (8004488 <HAL_GPIO_Init+0x324>)
 800443a:	4013      	ands	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d006      	beq.n	8004458 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800444a:	4b0f      	ldr	r3, [pc, #60]	@ (8004488 <HAL_GPIO_Init+0x324>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	490e      	ldr	r1, [pc, #56]	@ (8004488 <HAL_GPIO_Init+0x324>)
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	4313      	orrs	r3, r2
 8004454:	600b      	str	r3, [r1, #0]
 8004456:	e006      	b.n	8004466 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004458:	4b0b      	ldr	r3, [pc, #44]	@ (8004488 <HAL_GPIO_Init+0x324>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	43db      	mvns	r3, r3
 8004460:	4909      	ldr	r1, [pc, #36]	@ (8004488 <HAL_GPIO_Init+0x324>)
 8004462:	4013      	ands	r3, r2
 8004464:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	3301      	adds	r3, #1
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	fa22 f303 	lsr.w	r3, r2, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	f47f ae7e 	bne.w	8004178 <HAL_GPIO_Init+0x14>
  }
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	372c      	adds	r7, #44	@ 0x2c
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr
 8004488:	40010400 	.word	0x40010400

0800448c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	887b      	ldrh	r3, [r7, #2]
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044a4:	2301      	movs	r3, #1
 80044a6:	73fb      	strb	r3, [r7, #15]
 80044a8:	e001      	b.n	80044ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr

080044ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	460b      	mov	r3, r1
 80044c4:	807b      	strh	r3, [r7, #2]
 80044c6:	4613      	mov	r3, r2
 80044c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044ca:	787b      	ldrb	r3, [r7, #1]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044d0:	887a      	ldrh	r2, [r7, #2]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80044d6:	e003      	b.n	80044e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044d8:	887b      	ldrh	r3, [r7, #2]
 80044da:	041a      	lsls	r2, r3, #16
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	611a      	str	r2, [r3, #16]
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr
	...

080044ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e272      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 8087 	beq.w	800461a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800450c:	4b92      	ldr	r3, [pc, #584]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	2b04      	cmp	r3, #4
 8004516:	d00c      	beq.n	8004532 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004518:	4b8f      	ldr	r3, [pc, #572]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 030c 	and.w	r3, r3, #12
 8004520:	2b08      	cmp	r3, #8
 8004522:	d112      	bne.n	800454a <HAL_RCC_OscConfig+0x5e>
 8004524:	4b8c      	ldr	r3, [pc, #560]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800452c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004530:	d10b      	bne.n	800454a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004532:	4b89      	ldr	r3, [pc, #548]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d06c      	beq.n	8004618 <HAL_RCC_OscConfig+0x12c>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d168      	bne.n	8004618 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e24c      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004552:	d106      	bne.n	8004562 <HAL_RCC_OscConfig+0x76>
 8004554:	4b80      	ldr	r3, [pc, #512]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a7f      	ldr	r2, [pc, #508]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 800455a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	e02e      	b.n	80045c0 <HAL_RCC_OscConfig+0xd4>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10c      	bne.n	8004584 <HAL_RCC_OscConfig+0x98>
 800456a:	4b7b      	ldr	r3, [pc, #492]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a7a      	ldr	r2, [pc, #488]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 8004570:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b78      	ldr	r3, [pc, #480]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a77      	ldr	r2, [pc, #476]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 800457c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e01d      	b.n	80045c0 <HAL_RCC_OscConfig+0xd4>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800458c:	d10c      	bne.n	80045a8 <HAL_RCC_OscConfig+0xbc>
 800458e:	4b72      	ldr	r3, [pc, #456]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a71      	ldr	r2, [pc, #452]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 8004594:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	4b6f      	ldr	r3, [pc, #444]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a6e      	ldr	r2, [pc, #440]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 80045a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	e00b      	b.n	80045c0 <HAL_RCC_OscConfig+0xd4>
 80045a8:	4b6b      	ldr	r3, [pc, #428]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a6a      	ldr	r2, [pc, #424]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 80045ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	4b68      	ldr	r3, [pc, #416]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a67      	ldr	r2, [pc, #412]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 80045ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d013      	beq.n	80045f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c8:	f7fe fc3a 	bl	8002e40 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d0:	f7fe fc36 	bl	8002e40 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b64      	cmp	r3, #100	@ 0x64
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e200      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0xe4>
 80045ee:	e014      	b.n	800461a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f0:	f7fe fc26 	bl	8002e40 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f8:	f7fe fc22 	bl	8002e40 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b64      	cmp	r3, #100	@ 0x64
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e1ec      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460a:	4b53      	ldr	r3, [pc, #332]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x10c>
 8004616:	e000      	b.n	800461a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d063      	beq.n	80046ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004626:	4b4c      	ldr	r3, [pc, #304]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f003 030c 	and.w	r3, r3, #12
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00b      	beq.n	800464a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004632:	4b49      	ldr	r3, [pc, #292]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f003 030c 	and.w	r3, r3, #12
 800463a:	2b08      	cmp	r3, #8
 800463c:	d11c      	bne.n	8004678 <HAL_RCC_OscConfig+0x18c>
 800463e:	4b46      	ldr	r3, [pc, #280]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d116      	bne.n	8004678 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464a:	4b43      	ldr	r3, [pc, #268]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_RCC_OscConfig+0x176>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d001      	beq.n	8004662 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e1c0      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004662:	4b3d      	ldr	r3, [pc, #244]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	4939      	ldr	r1, [pc, #228]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 8004672:	4313      	orrs	r3, r2
 8004674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004676:	e03a      	b.n	80046ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d020      	beq.n	80046c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004680:	4b36      	ldr	r3, [pc, #216]	@ (800475c <HAL_RCC_OscConfig+0x270>)
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004686:	f7fe fbdb 	bl	8002e40 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800468e:	f7fe fbd7 	bl	8002e40 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e1a1      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	4927      	ldr	r1, [pc, #156]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	600b      	str	r3, [r1, #0]
 80046c0:	e015      	b.n	80046ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c2:	4b26      	ldr	r3, [pc, #152]	@ (800475c <HAL_RCC_OscConfig+0x270>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fe fbba 	bl	8002e40 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d0:	f7fe fbb6 	bl	8002e40 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e180      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d03a      	beq.n	8004770 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d019      	beq.n	8004736 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004702:	4b17      	ldr	r3, [pc, #92]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004704:	2201      	movs	r2, #1
 8004706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004708:	f7fe fb9a 	bl	8002e40 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004710:	f7fe fb96 	bl	8002e40 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e160      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004722:	4b0d      	ldr	r3, [pc, #52]	@ (8004758 <HAL_RCC_OscConfig+0x26c>)
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f0      	beq.n	8004710 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800472e:	2001      	movs	r0, #1
 8004730:	f000 faba 	bl	8004ca8 <RCC_Delay>
 8004734:	e01c      	b.n	8004770 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004736:	4b0a      	ldr	r3, [pc, #40]	@ (8004760 <HAL_RCC_OscConfig+0x274>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473c:	f7fe fb80 	bl	8002e40 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004742:	e00f      	b.n	8004764 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004744:	f7fe fb7c 	bl	8002e40 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d908      	bls.n	8004764 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e146      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>
 8004756:	bf00      	nop
 8004758:	40021000 	.word	0x40021000
 800475c:	42420000 	.word	0x42420000
 8004760:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004764:	4b92      	ldr	r3, [pc, #584]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e9      	bne.n	8004744 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80a6 	beq.w	80048ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477e:	2300      	movs	r3, #0
 8004780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004782:	4b8b      	ldr	r3, [pc, #556]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10d      	bne.n	80047aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478e:	4b88      	ldr	r3, [pc, #544]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	4a87      	ldr	r2, [pc, #540]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004798:	61d3      	str	r3, [r2, #28]
 800479a:	4b85      	ldr	r3, [pc, #532]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a6:	2301      	movs	r3, #1
 80047a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047aa:	4b82      	ldr	r3, [pc, #520]	@ (80049b4 <HAL_RCC_OscConfig+0x4c8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d118      	bne.n	80047e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047b6:	4b7f      	ldr	r3, [pc, #508]	@ (80049b4 <HAL_RCC_OscConfig+0x4c8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a7e      	ldr	r2, [pc, #504]	@ (80049b4 <HAL_RCC_OscConfig+0x4c8>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c2:	f7fe fb3d 	bl	8002e40 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ca:	f7fe fb39 	bl	8002e40 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b64      	cmp	r3, #100	@ 0x64
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e103      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047dc:	4b75      	ldr	r3, [pc, #468]	@ (80049b4 <HAL_RCC_OscConfig+0x4c8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d106      	bne.n	80047fe <HAL_RCC_OscConfig+0x312>
 80047f0:	4b6f      	ldr	r3, [pc, #444]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	4a6e      	ldr	r2, [pc, #440]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6213      	str	r3, [r2, #32]
 80047fc:	e02d      	b.n	800485a <HAL_RCC_OscConfig+0x36e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0x334>
 8004806:	4b6a      	ldr	r3, [pc, #424]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	4a69      	ldr	r2, [pc, #420]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	6213      	str	r3, [r2, #32]
 8004812:	4b67      	ldr	r3, [pc, #412]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	4a66      	ldr	r2, [pc, #408]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004818:	f023 0304 	bic.w	r3, r3, #4
 800481c:	6213      	str	r3, [r2, #32]
 800481e:	e01c      	b.n	800485a <HAL_RCC_OscConfig+0x36e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b05      	cmp	r3, #5
 8004826:	d10c      	bne.n	8004842 <HAL_RCC_OscConfig+0x356>
 8004828:	4b61      	ldr	r3, [pc, #388]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	4a60      	ldr	r2, [pc, #384]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 800482e:	f043 0304 	orr.w	r3, r3, #4
 8004832:	6213      	str	r3, [r2, #32]
 8004834:	4b5e      	ldr	r3, [pc, #376]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	4a5d      	ldr	r2, [pc, #372]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	6213      	str	r3, [r2, #32]
 8004840:	e00b      	b.n	800485a <HAL_RCC_OscConfig+0x36e>
 8004842:	4b5b      	ldr	r3, [pc, #364]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	4a5a      	ldr	r2, [pc, #360]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004848:	f023 0301 	bic.w	r3, r3, #1
 800484c:	6213      	str	r3, [r2, #32]
 800484e:	4b58      	ldr	r3, [pc, #352]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	4a57      	ldr	r2, [pc, #348]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004854:	f023 0304 	bic.w	r3, r3, #4
 8004858:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d015      	beq.n	800488e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004862:	f7fe faed 	bl	8002e40 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004868:	e00a      	b.n	8004880 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486a:	f7fe fae9 	bl	8002e40 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004878:	4293      	cmp	r3, r2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e0b1      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004880:	4b4b      	ldr	r3, [pc, #300]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ee      	beq.n	800486a <HAL_RCC_OscConfig+0x37e>
 800488c:	e014      	b.n	80048b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488e:	f7fe fad7 	bl	8002e40 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004894:	e00a      	b.n	80048ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004896:	f7fe fad3 	bl	8002e40 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e09b      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ac:	4b40      	ldr	r3, [pc, #256]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1ee      	bne.n	8004896 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d105      	bne.n	80048ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048be:	4b3c      	ldr	r3, [pc, #240]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	4a3b      	ldr	r2, [pc, #236]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 80048c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8087 	beq.w	80049e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048d4:	4b36      	ldr	r3, [pc, #216]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 030c 	and.w	r3, r3, #12
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d061      	beq.n	80049a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d146      	bne.n	8004976 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e8:	4b33      	ldr	r3, [pc, #204]	@ (80049b8 <HAL_RCC_OscConfig+0x4cc>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ee:	f7fe faa7 	bl	8002e40 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f6:	f7fe faa3 	bl	8002e40 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e06d      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004908:	4b29      	ldr	r3, [pc, #164]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f0      	bne.n	80048f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800491c:	d108      	bne.n	8004930 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800491e:	4b24      	ldr	r3, [pc, #144]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	4921      	ldr	r1, [pc, #132]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 800492c:	4313      	orrs	r3, r2
 800492e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004930:	4b1f      	ldr	r3, [pc, #124]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a19      	ldr	r1, [r3, #32]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004940:	430b      	orrs	r3, r1
 8004942:	491b      	ldr	r1, [pc, #108]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004944:	4313      	orrs	r3, r2
 8004946:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004948:	4b1b      	ldr	r3, [pc, #108]	@ (80049b8 <HAL_RCC_OscConfig+0x4cc>)
 800494a:	2201      	movs	r2, #1
 800494c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494e:	f7fe fa77 	bl	8002e40 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004956:	f7fe fa73 	bl	8002e40 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e03d      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004968:	4b11      	ldr	r3, [pc, #68]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <HAL_RCC_OscConfig+0x46a>
 8004974:	e035      	b.n	80049e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004976:	4b10      	ldr	r3, [pc, #64]	@ (80049b8 <HAL_RCC_OscConfig+0x4cc>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497c:	f7fe fa60 	bl	8002e40 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004984:	f7fe fa5c 	bl	8002e40 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e026      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004996:	4b06      	ldr	r3, [pc, #24]	@ (80049b0 <HAL_RCC_OscConfig+0x4c4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x498>
 80049a2:	e01e      	b.n	80049e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d107      	bne.n	80049bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e019      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>
 80049b0:	40021000 	.word	0x40021000
 80049b4:	40007000 	.word	0x40007000
 80049b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049bc:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <HAL_RCC_OscConfig+0x500>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d106      	bne.n	80049de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d001      	beq.n	80049e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40021000 	.word	0x40021000

080049f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0d0      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a04:	4b6a      	ldr	r3, [pc, #424]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d910      	bls.n	8004a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	4b67      	ldr	r3, [pc, #412]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 0207 	bic.w	r2, r3, #7
 8004a1a:	4965      	ldr	r1, [pc, #404]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b63      	ldr	r3, [pc, #396]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0b8      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d020      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a4c:	4b59      	ldr	r3, [pc, #356]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	4a58      	ldr	r2, [pc, #352]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a64:	4b53      	ldr	r3, [pc, #332]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	4a52      	ldr	r2, [pc, #328]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004a6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a70:	4b50      	ldr	r3, [pc, #320]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	494d      	ldr	r1, [pc, #308]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d040      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d107      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a96:	4b47      	ldr	r3, [pc, #284]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d115      	bne.n	8004ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e07f      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d107      	bne.n	8004abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aae:	4b41      	ldr	r3, [pc, #260]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e073      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004abe:	4b3d      	ldr	r3, [pc, #244]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e06b      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ace:	4b39      	ldr	r3, [pc, #228]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f023 0203 	bic.w	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4936      	ldr	r1, [pc, #216]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ae0:	f7fe f9ae 	bl	8002e40 <HAL_GetTick>
 8004ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae6:	e00a      	b.n	8004afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae8:	f7fe f9aa 	bl	8002e40 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e053      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afe:	4b2d      	ldr	r3, [pc, #180]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 020c 	and.w	r2, r3, #12
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d1eb      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b10:	4b27      	ldr	r3, [pc, #156]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d210      	bcs.n	8004b40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1e:	4b24      	ldr	r3, [pc, #144]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f023 0207 	bic.w	r2, r3, #7
 8004b26:	4922      	ldr	r1, [pc, #136]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2e:	4b20      	ldr	r3, [pc, #128]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d001      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e032      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b4c:	4b19      	ldr	r3, [pc, #100]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4916      	ldr	r1, [pc, #88]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d009      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b6a:	4b12      	ldr	r3, [pc, #72]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	490e      	ldr	r1, [pc, #56]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b7e:	f000 f821 	bl	8004bc4 <HAL_RCC_GetSysClockFreq>
 8004b82:	4602      	mov	r2, r0
 8004b84:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	091b      	lsrs	r3, r3, #4
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	490a      	ldr	r1, [pc, #40]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b90:	5ccb      	ldrb	r3, [r1, r3]
 8004b92:	fa22 f303 	lsr.w	r3, r2, r3
 8004b96:	4a09      	ldr	r2, [pc, #36]	@ (8004bbc <HAL_RCC_ClockConfig+0x1cc>)
 8004b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b9a:	4b09      	ldr	r3, [pc, #36]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1d0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fe f90c 	bl	8002dbc <HAL_InitTick>

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40022000 	.word	0x40022000
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	08008524 	.word	0x08008524
 8004bbc:	2000201c 	.word	0x2000201c
 8004bc0:	20002020 	.word	0x20002020

08004bc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60bb      	str	r3, [r7, #8]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bde:	4b1e      	ldr	r3, [pc, #120]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x94>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 030c 	and.w	r3, r3, #12
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d002      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x30>
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCC_GetSysClockFreq+0x36>
 8004bf2:	e027      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bf4:	4b19      	ldr	r3, [pc, #100]	@ (8004c5c <HAL_RCC_GetSysClockFreq+0x98>)
 8004bf6:	613b      	str	r3, [r7, #16]
      break;
 8004bf8:	e027      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	0c9b      	lsrs	r3, r3, #18
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	4a17      	ldr	r2, [pc, #92]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c04:	5cd3      	ldrb	r3, [r2, r3]
 8004c06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d010      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c12:	4b11      	ldr	r3, [pc, #68]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	0c5b      	lsrs	r3, r3, #17
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	4a11      	ldr	r2, [pc, #68]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c1e:	5cd3      	ldrb	r3, [r2, r3]
 8004c20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a0d      	ldr	r2, [pc, #52]	@ (8004c5c <HAL_RCC_GetSysClockFreq+0x98>)
 8004c26:	fb03 f202 	mul.w	r2, r3, r2
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	e004      	b.n	8004c3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a0c      	ldr	r2, [pc, #48]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c38:	fb02 f303 	mul.w	r3, r2, r3
 8004c3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	613b      	str	r3, [r7, #16]
      break;
 8004c42:	e002      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c44:	4b05      	ldr	r3, [pc, #20]	@ (8004c5c <HAL_RCC_GetSysClockFreq+0x98>)
 8004c46:	613b      	str	r3, [r7, #16]
      break;
 8004c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c4a:	693b      	ldr	r3, [r7, #16]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	007a1200 	.word	0x007a1200
 8004c60:	0800853c 	.word	0x0800853c
 8004c64:	0800854c 	.word	0x0800854c
 8004c68:	003d0900 	.word	0x003d0900

08004c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c70:	4b02      	ldr	r3, [pc, #8]	@ (8004c7c <HAL_RCC_GetHCLKFreq+0x10>)
 8004c72:	681b      	ldr	r3, [r3, #0]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bc80      	pop	{r7}
 8004c7a:	4770      	bx	lr
 8004c7c:	2000201c 	.word	0x2000201c

08004c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c84:	f7ff fff2 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	0adb      	lsrs	r3, r3, #11
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	4903      	ldr	r1, [pc, #12]	@ (8004ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c96:	5ccb      	ldrb	r3, [r1, r3]
 8004c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	08008534 	.word	0x08008534

08004ca8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004cdc <RCC_Delay+0x34>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce0 <RCC_Delay+0x38>)
 8004cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cba:	0a5b      	lsrs	r3, r3, #9
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	fb02 f303 	mul.w	r3, r2, r3
 8004cc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004cc4:	bf00      	nop
  }
  while (Delay --);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1e5a      	subs	r2, r3, #1
 8004cca:	60fa      	str	r2, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f9      	bne.n	8004cc4 <RCC_Delay+0x1c>
}
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr
 8004cdc:	2000201c 	.word	0x2000201c
 8004ce0:	10624dd3 	.word	0x10624dd3

08004ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d07d      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d00:	2300      	movs	r3, #0
 8004d02:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d04:	4b4f      	ldr	r3, [pc, #316]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10d      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d10:	4b4c      	ldr	r3, [pc, #304]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	4a4b      	ldr	r2, [pc, #300]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d1a:	61d3      	str	r3, [r2, #28]
 8004d1c:	4b49      	ldr	r3, [pc, #292]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d24:	60bb      	str	r3, [r7, #8]
 8004d26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2c:	4b46      	ldr	r3, [pc, #280]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d118      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d38:	4b43      	ldr	r3, [pc, #268]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a42      	ldr	r2, [pc, #264]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d44:	f7fe f87c 	bl	8002e40 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4a:	e008      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d4c:	f7fe f878 	bl	8002e40 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	@ 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e06d      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d6a:	4b36      	ldr	r3, [pc, #216]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d02e      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d027      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d88:	4b2e      	ldr	r3, [pc, #184]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d92:	4b2e      	ldr	r3, [pc, #184]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d98:	4b2c      	ldr	r3, [pc, #176]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d9e:	4a29      	ldr	r2, [pc, #164]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d014      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dae:	f7fe f847 	bl	8002e40 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db4:	e00a      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db6:	f7fe f843 	bl	8002e40 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e036      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0ee      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	4917      	ldr	r1, [pc, #92]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d105      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df0:	4b14      	ldr	r3, [pc, #80]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	4a13      	ldr	r2, [pc, #76]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e08:	4b0e      	ldr	r3, [pc, #56]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	490b      	ldr	r1, [pc, #44]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e26:	4b07      	ldr	r3, [pc, #28]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	4904      	ldr	r1, [pc, #16]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40021000 	.word	0x40021000
 8004e48:	40007000 	.word	0x40007000
 8004e4c:	42420440 	.word	0x42420440

08004e50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61fb      	str	r3, [r7, #28]
 8004e60:	2300      	movs	r3, #0
 8004e62:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	2b0f      	cmp	r3, #15
 8004e72:	f200 80af 	bhi.w	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8004e76:	a201      	add	r2, pc, #4	@ (adr r2, 8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004f53 	.word	0x08004f53
 8004e80:	08004fb9 	.word	0x08004fb9
 8004e84:	08004fd5 	.word	0x08004fd5
 8004e88:	08004f43 	.word	0x08004f43
 8004e8c:	08004fd5 	.word	0x08004fd5
 8004e90:	08004fd5 	.word	0x08004fd5
 8004e94:	08004fd5 	.word	0x08004fd5
 8004e98:	08004f4b 	.word	0x08004f4b
 8004e9c:	08004fd5 	.word	0x08004fd5
 8004ea0:	08004fd5 	.word	0x08004fd5
 8004ea4:	08004fd5 	.word	0x08004fd5
 8004ea8:	08004fd5 	.word	0x08004fd5
 8004eac:	08004fd5 	.word	0x08004fd5
 8004eb0:	08004fd5 	.word	0x08004fd5
 8004eb4:	08004fd5 	.word	0x08004fd5
 8004eb8:	08004ebd 	.word	0x08004ebd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004ec2:	4b49      	ldr	r3, [pc, #292]	@ (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 8084 	beq.w	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	0c9b      	lsrs	r3, r3, #18
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	4a44      	ldr	r2, [pc, #272]	@ (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8004eda:	5cd3      	ldrb	r3, [r2, r3]
 8004edc:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d015      	beq.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	0c5b      	lsrs	r3, r3, #17
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8004ef4:	5cd3      	ldrb	r3, [r2, r3]
 8004ef6:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00d      	beq.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004f02:	4a3c      	ldr	r2, [pc, #240]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	fb02 f303 	mul.w	r3, r2, r3
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	e004      	b.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	4a38      	ldr	r2, [pc, #224]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8004f18:	fb02 f303 	mul.w	r3, r2, r3
 8004f1c:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004f1e:	4b32      	ldr	r3, [pc, #200]	@ (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f2a:	d102      	bne.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004f30:	e052      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	4a31      	ldr	r2, [pc, #196]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8004f38:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	61bb      	str	r3, [r7, #24]
      break;
 8004f40:	e04a      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004f42:	f7ff fe3f 	bl	8004bc4 <HAL_RCC_GetSysClockFreq>
 8004f46:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004f48:	e049      	b.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004f4a:	f7ff fe3b 	bl	8004bc4 <HAL_RCC_GetSysClockFreq>
 8004f4e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004f50:	e045      	b.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004f52:	4b25      	ldr	r3, [pc, #148]	@ (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f62:	d108      	bne.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8004f6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f72:	61bb      	str	r3, [r7, #24]
 8004f74:	e01f      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f80:	d109      	bne.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004f82:	4b19      	ldr	r3, [pc, #100]	@ (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8004f8e:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004f92:	61bb      	str	r3, [r7, #24]
 8004f94:	e00f      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fa0:	d11c      	bne.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8004fa2:	4b11      	ldr	r3, [pc, #68]	@ (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d016      	beq.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8004fae:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004fb2:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004fb4:	e012      	b.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8004fb6:	e011      	b.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004fb8:	f7ff fe62 	bl	8004c80 <HAL_RCC_GetPCLK2Freq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	0b9b      	lsrs	r3, r3, #14
 8004fc4:	f003 0303 	and.w	r3, r3, #3
 8004fc8:	3301      	adds	r3, #1
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	61bb      	str	r3, [r7, #24]
      break;
 8004fd2:	e004      	b.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8004fd4:	bf00      	nop
 8004fd6:	e002      	b.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8004fd8:	bf00      	nop
 8004fda:	e000      	b.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8004fdc:	bf00      	nop
    }
  }
  return (frequency);
 8004fde:	69bb      	ldr	r3, [r7, #24]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3720      	adds	r7, #32
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	08008550 	.word	0x08008550
 8004ff0:	08008560 	.word	0x08008560
 8004ff4:	007a1200 	.word	0x007a1200
 8004ff8:	003d0900 	.word	0x003d0900
 8004ffc:	aaaaaaab 	.word	0xaaaaaaab

08005000 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d004      	beq.n	800501c <HAL_SRAM_Init+0x1c>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800501a:	d101      	bne.n	8005020 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e038      	b.n	8005092 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f7fd fdff 	bl	8002c38 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3308      	adds	r3, #8
 8005042:	4619      	mov	r1, r3
 8005044:	4610      	mov	r0, r2
 8005046:	f000 fc4d 	bl	80058e4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	461a      	mov	r2, r3
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	f000 fcaf 	bl	80059b8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6858      	ldr	r0, [r3, #4]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	f000 fcd4 	bl	8005a14 <FSMC_NORSRAM_Extended_Timing_Init>
                                          hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	6892      	ldr	r2, [r2, #8]
 8005074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	6892      	ldr	r2, [r2, #8]
 8005080:	f041 0101 	orr.w	r1, r1, #1
 8005084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e041      	b.n	8005130 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d106      	bne.n	80050c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7fd fd4f 	bl	8002b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2202      	movs	r2, #2
 80050ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3304      	adds	r3, #4
 80050d6:	4619      	mov	r1, r3
 80050d8:	4610      	mov	r0, r2
 80050da:	f000 fa69 	bl	80055b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	d001      	beq.n	8005150 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e03c      	b.n	80051ca <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1d      	ldr	r2, [pc, #116]	@ (80051d4 <HAL_TIM_Base_Start+0x9c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d018      	beq.n	8005194 <HAL_TIM_Base_Start+0x5c>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1c      	ldr	r2, [pc, #112]	@ (80051d8 <HAL_TIM_Base_Start+0xa0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d013      	beq.n	8005194 <HAL_TIM_Base_Start+0x5c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005174:	d00e      	beq.n	8005194 <HAL_TIM_Base_Start+0x5c>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a18      	ldr	r2, [pc, #96]	@ (80051dc <HAL_TIM_Base_Start+0xa4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d009      	beq.n	8005194 <HAL_TIM_Base_Start+0x5c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a16      	ldr	r2, [pc, #88]	@ (80051e0 <HAL_TIM_Base_Start+0xa8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_TIM_Base_Start+0x5c>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a15      	ldr	r2, [pc, #84]	@ (80051e4 <HAL_TIM_Base_Start+0xac>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d111      	bne.n	80051b8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b06      	cmp	r3, #6
 80051a4:	d010      	beq.n	80051c8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0201 	orr.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b6:	e007      	b.n	80051c8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr
 80051d4:	40012c00 	.word	0x40012c00
 80051d8:	40013400 	.word	0x40013400
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800
 80051e4:	40000c00 	.word	0x40000c00

080051e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d020      	beq.n	800524c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01b      	beq.n	800524c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0202 	mvn.w	r2, #2
 800521c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f9a1 	bl	800557a <HAL_TIM_IC_CaptureCallback>
 8005238:	e005      	b.n	8005246 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f994 	bl	8005568 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f9a3 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	d020      	beq.n	8005298 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01b      	beq.n	8005298 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0204 	mvn.w	r2, #4
 8005268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2202      	movs	r2, #2
 800526e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f97b 	bl	800557a <HAL_TIM_IC_CaptureCallback>
 8005284:	e005      	b.n	8005292 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f96e 	bl	8005568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f97d 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d020      	beq.n	80052e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01b      	beq.n	80052e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0208 	mvn.w	r2, #8
 80052b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2204      	movs	r2, #4
 80052ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f955 	bl	800557a <HAL_TIM_IC_CaptureCallback>
 80052d0:	e005      	b.n	80052de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f948 	bl	8005568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f957 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d020      	beq.n	8005330 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01b      	beq.n	8005330 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0210 	mvn.w	r2, #16
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2208      	movs	r2, #8
 8005306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f92f 	bl	800557a <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f922 	bl	8005568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f931 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00c      	beq.n	8005354 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0201 	mvn.w	r2, #1
 800534c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f901 	bl	8005556 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00c      	beq.n	8005378 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 faad 	bl	80058d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00c      	beq.n	800539c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f901 	bl	800559e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00c      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0220 	mvn.w	r2, #32
 80053b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fa80 	bl	80058c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053c0:	bf00      	nop
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_TIM_ConfigClockSource+0x1c>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e0b4      	b.n	800554e <HAL_TIM_ConfigClockSource+0x186>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800540a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800541c:	d03e      	beq.n	800549c <HAL_TIM_ConfigClockSource+0xd4>
 800541e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005422:	f200 8087 	bhi.w	8005534 <HAL_TIM_ConfigClockSource+0x16c>
 8005426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800542a:	f000 8086 	beq.w	800553a <HAL_TIM_ConfigClockSource+0x172>
 800542e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005432:	d87f      	bhi.n	8005534 <HAL_TIM_ConfigClockSource+0x16c>
 8005434:	2b70      	cmp	r3, #112	@ 0x70
 8005436:	d01a      	beq.n	800546e <HAL_TIM_ConfigClockSource+0xa6>
 8005438:	2b70      	cmp	r3, #112	@ 0x70
 800543a:	d87b      	bhi.n	8005534 <HAL_TIM_ConfigClockSource+0x16c>
 800543c:	2b60      	cmp	r3, #96	@ 0x60
 800543e:	d050      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x11a>
 8005440:	2b60      	cmp	r3, #96	@ 0x60
 8005442:	d877      	bhi.n	8005534 <HAL_TIM_ConfigClockSource+0x16c>
 8005444:	2b50      	cmp	r3, #80	@ 0x50
 8005446:	d03c      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0xfa>
 8005448:	2b50      	cmp	r3, #80	@ 0x50
 800544a:	d873      	bhi.n	8005534 <HAL_TIM_ConfigClockSource+0x16c>
 800544c:	2b40      	cmp	r3, #64	@ 0x40
 800544e:	d058      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x13a>
 8005450:	2b40      	cmp	r3, #64	@ 0x40
 8005452:	d86f      	bhi.n	8005534 <HAL_TIM_ConfigClockSource+0x16c>
 8005454:	2b30      	cmp	r3, #48	@ 0x30
 8005456:	d064      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0x15a>
 8005458:	2b30      	cmp	r3, #48	@ 0x30
 800545a:	d86b      	bhi.n	8005534 <HAL_TIM_ConfigClockSource+0x16c>
 800545c:	2b20      	cmp	r3, #32
 800545e:	d060      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0x15a>
 8005460:	2b20      	cmp	r3, #32
 8005462:	d867      	bhi.n	8005534 <HAL_TIM_ConfigClockSource+0x16c>
 8005464:	2b00      	cmp	r3, #0
 8005466:	d05c      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0x15a>
 8005468:	2b10      	cmp	r3, #16
 800546a:	d05a      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0x15a>
 800546c:	e062      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800547e:	f000 f994 	bl	80057aa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005490:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	609a      	str	r2, [r3, #8]
      break;
 800549a:	e04f      	b.n	800553c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054ac:	f000 f97d 	bl	80057aa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054be:	609a      	str	r2, [r3, #8]
      break;
 80054c0:	e03c      	b.n	800553c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ce:	461a      	mov	r2, r3
 80054d0:	f000 f8f4 	bl	80056bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2150      	movs	r1, #80	@ 0x50
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 f94b 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 80054e0:	e02c      	b.n	800553c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ee:	461a      	mov	r2, r3
 80054f0:	f000 f912 	bl	8005718 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2160      	movs	r1, #96	@ 0x60
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 f93b 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 8005500:	e01c      	b.n	800553c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800550e:	461a      	mov	r2, r3
 8005510:	f000 f8d4 	bl	80056bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2140      	movs	r1, #64	@ 0x40
 800551a:	4618      	mov	r0, r3
 800551c:	f000 f92b 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 8005520:	e00c      	b.n	800553c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4619      	mov	r1, r3
 800552c:	4610      	mov	r0, r2
 800552e:	f000 f922 	bl	8005776 <TIM_ITRx_SetConfig>
      break;
 8005532:	e003      	b.n	800553c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
      break;
 8005538:	e000      	b.n	800553c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800553a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	bc80      	pop	{r7}
 8005578:	4770      	bx	lr

0800557a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr

0800558c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr

0800559e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr

080055b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a39      	ldr	r2, [pc, #228]	@ (80056a8 <TIM_Base_SetConfig+0xf8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d013      	beq.n	80055f0 <TIM_Base_SetConfig+0x40>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a38      	ldr	r2, [pc, #224]	@ (80056ac <TIM_Base_SetConfig+0xfc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00f      	beq.n	80055f0 <TIM_Base_SetConfig+0x40>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055d6:	d00b      	beq.n	80055f0 <TIM_Base_SetConfig+0x40>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a35      	ldr	r2, [pc, #212]	@ (80056b0 <TIM_Base_SetConfig+0x100>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d007      	beq.n	80055f0 <TIM_Base_SetConfig+0x40>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a34      	ldr	r2, [pc, #208]	@ (80056b4 <TIM_Base_SetConfig+0x104>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a33      	ldr	r2, [pc, #204]	@ (80056b8 <TIM_Base_SetConfig+0x108>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d108      	bne.n	8005602 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a28      	ldr	r2, [pc, #160]	@ (80056a8 <TIM_Base_SetConfig+0xf8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d013      	beq.n	8005632 <TIM_Base_SetConfig+0x82>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a27      	ldr	r2, [pc, #156]	@ (80056ac <TIM_Base_SetConfig+0xfc>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00f      	beq.n	8005632 <TIM_Base_SetConfig+0x82>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005618:	d00b      	beq.n	8005632 <TIM_Base_SetConfig+0x82>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a24      	ldr	r2, [pc, #144]	@ (80056b0 <TIM_Base_SetConfig+0x100>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d007      	beq.n	8005632 <TIM_Base_SetConfig+0x82>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a23      	ldr	r2, [pc, #140]	@ (80056b4 <TIM_Base_SetConfig+0x104>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d003      	beq.n	8005632 <TIM_Base_SetConfig+0x82>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a22      	ldr	r2, [pc, #136]	@ (80056b8 <TIM_Base_SetConfig+0x108>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d108      	bne.n	8005644 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a0f      	ldr	r2, [pc, #60]	@ (80056a8 <TIM_Base_SetConfig+0xf8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d003      	beq.n	8005678 <TIM_Base_SetConfig+0xc8>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a0e      	ldr	r2, [pc, #56]	@ (80056ac <TIM_Base_SetConfig+0xfc>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d103      	bne.n	8005680 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d005      	beq.n	800569e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f023 0201 	bic.w	r2, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	611a      	str	r2, [r3, #16]
  }
}
 800569e:	bf00      	nop
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr
 80056a8:	40012c00 	.word	0x40012c00
 80056ac:	40013400 	.word	0x40013400
 80056b0:	40000400 	.word	0x40000400
 80056b4:	40000800 	.word	0x40000800
 80056b8:	40000c00 	.word	0x40000c00

080056bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f023 0201 	bic.w	r2, r3, #1
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f023 030a 	bic.w	r3, r3, #10
 80056f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr

08005718 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f023 0210 	bic.w	r2, r3, #16
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	031b      	lsls	r3, r3, #12
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005754:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	621a      	str	r2, [r3, #32]
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	bc80      	pop	{r7}
 8005774:	4770      	bx	lr

08005776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005776:	b480      	push	{r7}
 8005778:	b085      	sub	sp, #20
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800578c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	f043 0307 	orr.w	r3, r3, #7
 8005798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	609a      	str	r2, [r3, #8]
}
 80057a0:	bf00      	nop
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bc80      	pop	{r7}
 80057a8:	4770      	bx	lr

080057aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b087      	sub	sp, #28
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
 80057b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	021a      	lsls	r2, r3, #8
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	431a      	orrs	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	609a      	str	r2, [r3, #8]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e050      	b.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a1b      	ldr	r2, [pc, #108]	@ (80058ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d018      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a19      	ldr	r2, [pc, #100]	@ (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d013      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005856:	d00e      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a15      	ldr	r2, [pc, #84]	@ (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d009      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a14      	ldr	r2, [pc, #80]	@ (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d004      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a12      	ldr	r2, [pc, #72]	@ (80058bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d10c      	bne.n	8005890 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800587c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	4313      	orrs	r3, r2
 8005886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr
 80058ac:	40012c00 	.word	0x40012c00
 80058b0:	40013400 	.word	0x40013400
 80058b4:	40000400 	.word	0x40000400
 80058b8:	40000800 	.word	0x40000800
 80058bc:	40000c00 	.word	0x40000c00

080058c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bc80      	pop	{r7}
 80058d0:	4770      	bx	lr

080058d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	bc80      	pop	{r7}
 80058e2:	4770      	bx	lr

080058e4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	6812      	ldr	r2, [r2, #0]
 80058fc:	f023 0101 	bic.w	r1, r3, #1
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	2b08      	cmp	r3, #8
 800590c:	d102      	bne.n	8005914 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800590e:	2340      	movs	r3, #64	@ 0x40
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	e001      	b.n	8005918 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005924:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800592a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005930:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005936:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800593c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005942:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8005948:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800594e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8005954:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8005972:	4b10      	ldr	r3, [pc, #64]	@ (80059b4 <FSMC_NORSRAM_Init+0xd0>)
 8005974:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800597c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8005984:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	43db      	mvns	r3, r3
 8005994:	ea02 0103 	and.w	r1, r2, r3
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	4319      	orrs	r1, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	0008fb7f 	.word	0x0008fb7f

080059b8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 80059ce:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 80059d6:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 80059de:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 80059e8:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	3b02      	subs	r3, #2
 80059f0:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 80059f2:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 80059fe:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bc80      	pop	{r7}
 8005a10:	4770      	bx	lr
	...

08005a14 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a28:	d11d      	bne.n	8005a66 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a32:	4b13      	ldr	r3, [pc, #76]	@ (8005a80 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	6811      	ldr	r1, [r2, #0]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	6852      	ldr	r2, [r2, #4]
 8005a3e:	0112      	lsls	r2, r2, #4
 8005a40:	4311      	orrs	r1, r2
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	6892      	ldr	r2, [r2, #8]
 8005a46:	0212      	lsls	r2, r2, #8
 8005a48:	4311      	orrs	r1, r2
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	6992      	ldr	r2, [r2, #24]
 8005a4e:	4311      	orrs	r1, r2
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	68d2      	ldr	r2, [r2, #12]
 8005a54:	0412      	lsls	r2, r2, #16
 8005a56:	430a      	orrs	r2, r1
 8005a58:	ea43 0102 	orr.w	r1, r3, r2
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005a64:	e005      	b.n	8005a72 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8005a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bc80      	pop	{r7}
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	cff00000 	.word	0xcff00000

08005a84 <arm_rfft_fast_init_f32>:
 8005a84:	084b      	lsrs	r3, r1, #1
 8005a86:	2b80      	cmp	r3, #128	@ 0x80
 8005a88:	b410      	push	{r4}
 8005a8a:	8201      	strh	r1, [r0, #16]
 8005a8c:	8003      	strh	r3, [r0, #0]
 8005a8e:	d044      	beq.n	8005b1a <arm_rfft_fast_init_f32+0x96>
 8005a90:	d915      	bls.n	8005abe <arm_rfft_fast_init_f32+0x3a>
 8005a92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a96:	d03a      	beq.n	8005b0e <arm_rfft_fast_init_f32+0x8a>
 8005a98:	d926      	bls.n	8005ae8 <arm_rfft_fast_init_f32+0x64>
 8005a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a9e:	d01d      	beq.n	8005adc <arm_rfft_fast_init_f32+0x58>
 8005aa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aa4:	d111      	bne.n	8005aca <arm_rfft_fast_init_f32+0x46>
 8005aa6:	4c1f      	ldr	r4, [pc, #124]	@ (8005b24 <arm_rfft_fast_init_f32+0xa0>)
 8005aa8:	491f      	ldr	r1, [pc, #124]	@ (8005b28 <arm_rfft_fast_init_f32+0xa4>)
 8005aaa:	4a20      	ldr	r2, [pc, #128]	@ (8005b2c <arm_rfft_fast_init_f32+0xa8>)
 8005aac:	f44f 636e 	mov.w	r3, #3808	@ 0xee0
 8005ab0:	6084      	str	r4, [r0, #8]
 8005ab2:	6041      	str	r1, [r0, #4]
 8005ab4:	6142      	str	r2, [r0, #20]
 8005ab6:	8183      	strh	r3, [r0, #12]
 8005ab8:	bc10      	pop	{r4}
 8005aba:	2000      	movs	r0, #0
 8005abc:	4770      	bx	lr
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	d01b      	beq.n	8005afa <arm_rfft_fast_init_f32+0x76>
 8005ac2:	2b40      	cmp	r3, #64	@ 0x40
 8005ac4:	d005      	beq.n	8005ad2 <arm_rfft_fast_init_f32+0x4e>
 8005ac6:	2b10      	cmp	r3, #16
 8005ac8:	d01c      	beq.n	8005b04 <arm_rfft_fast_init_f32+0x80>
 8005aca:	f04f 30ff 	mov.w	r0, #4294967295
 8005ace:	bc10      	pop	{r4}
 8005ad0:	4770      	bx	lr
 8005ad2:	4c17      	ldr	r4, [pc, #92]	@ (8005b30 <arm_rfft_fast_init_f32+0xac>)
 8005ad4:	4917      	ldr	r1, [pc, #92]	@ (8005b34 <arm_rfft_fast_init_f32+0xb0>)
 8005ad6:	4a18      	ldr	r2, [pc, #96]	@ (8005b38 <arm_rfft_fast_init_f32+0xb4>)
 8005ad8:	2338      	movs	r3, #56	@ 0x38
 8005ada:	e7e9      	b.n	8005ab0 <arm_rfft_fast_init_f32+0x2c>
 8005adc:	4c17      	ldr	r4, [pc, #92]	@ (8005b3c <arm_rfft_fast_init_f32+0xb8>)
 8005ade:	4918      	ldr	r1, [pc, #96]	@ (8005b40 <arm_rfft_fast_init_f32+0xbc>)
 8005ae0:	4a18      	ldr	r2, [pc, #96]	@ (8005b44 <arm_rfft_fast_init_f32+0xc0>)
 8005ae2:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8005ae6:	e7e3      	b.n	8005ab0 <arm_rfft_fast_init_f32+0x2c>
 8005ae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aec:	d1ed      	bne.n	8005aca <arm_rfft_fast_init_f32+0x46>
 8005aee:	4c16      	ldr	r4, [pc, #88]	@ (8005b48 <arm_rfft_fast_init_f32+0xc4>)
 8005af0:	4916      	ldr	r1, [pc, #88]	@ (8005b4c <arm_rfft_fast_init_f32+0xc8>)
 8005af2:	4a17      	ldr	r2, [pc, #92]	@ (8005b50 <arm_rfft_fast_init_f32+0xcc>)
 8005af4:	f44f 73dc 	mov.w	r3, #440	@ 0x1b8
 8005af8:	e7da      	b.n	8005ab0 <arm_rfft_fast_init_f32+0x2c>
 8005afa:	4c16      	ldr	r4, [pc, #88]	@ (8005b54 <arm_rfft_fast_init_f32+0xd0>)
 8005afc:	4916      	ldr	r1, [pc, #88]	@ (8005b58 <arm_rfft_fast_init_f32+0xd4>)
 8005afe:	4a17      	ldr	r2, [pc, #92]	@ (8005b5c <arm_rfft_fast_init_f32+0xd8>)
 8005b00:	2330      	movs	r3, #48	@ 0x30
 8005b02:	e7d5      	b.n	8005ab0 <arm_rfft_fast_init_f32+0x2c>
 8005b04:	4c16      	ldr	r4, [pc, #88]	@ (8005b60 <arm_rfft_fast_init_f32+0xdc>)
 8005b06:	4917      	ldr	r1, [pc, #92]	@ (8005b64 <arm_rfft_fast_init_f32+0xe0>)
 8005b08:	4a17      	ldr	r2, [pc, #92]	@ (8005b68 <arm_rfft_fast_init_f32+0xe4>)
 8005b0a:	2314      	movs	r3, #20
 8005b0c:	e7d0      	b.n	8005ab0 <arm_rfft_fast_init_f32+0x2c>
 8005b0e:	4c17      	ldr	r4, [pc, #92]	@ (8005b6c <arm_rfft_fast_init_f32+0xe8>)
 8005b10:	4917      	ldr	r1, [pc, #92]	@ (8005b70 <arm_rfft_fast_init_f32+0xec>)
 8005b12:	4a18      	ldr	r2, [pc, #96]	@ (8005b74 <arm_rfft_fast_init_f32+0xf0>)
 8005b14:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8005b18:	e7ca      	b.n	8005ab0 <arm_rfft_fast_init_f32+0x2c>
 8005b1a:	4c17      	ldr	r4, [pc, #92]	@ (8005b78 <arm_rfft_fast_init_f32+0xf4>)
 8005b1c:	4917      	ldr	r1, [pc, #92]	@ (8005b7c <arm_rfft_fast_init_f32+0xf8>)
 8005b1e:	4a18      	ldr	r2, [pc, #96]	@ (8005b80 <arm_rfft_fast_init_f32+0xfc>)
 8005b20:	23d0      	movs	r3, #208	@ 0xd0
 8005b22:	e7c5      	b.n	8005ab0 <arm_rfft_fast_init_f32+0x2c>
 8005b24:	08017b70 	.word	0x08017b70
 8005b28:	08008564 	.word	0x08008564
 8005b2c:	0800e6d4 	.word	0x0800e6d4
 8005b30:	0800c664 	.word	0x0800c664
 8005b34:	08019930 	.word	0x08019930
 8005b38:	0801be20 	.word	0x0801be20
 8005b3c:	08015054 	.word	0x08015054
 8005b40:	08012f54 	.word	0x08012f54
 8005b44:	0800c6d4 	.word	0x0800c6d4
 8005b48:	0801bab0 	.word	0x0801bab0
 8005b4c:	080126d4 	.word	0x080126d4
 8005b50:	08019b30 	.word	0x08019b30
 8005b54:	08015f0c 	.word	0x08015f0c
 8005b58:	08014f54 	.word	0x08014f54
 8005b5c:	0800c564 	.word	0x0800c564
 8005b60:	08015e64 	.word	0x08015e64
 8005b64:	08012ed4 	.word	0x08012ed4
 8005b68:	08015e8c 	.word	0x08015e8c
 8005b6c:	0801a330 	.word	0x0801a330
 8005b70:	08016b70 	.word	0x08016b70
 8005b74:	0801a6b0 	.word	0x0801a6b0
 8005b78:	0801c020 	.word	0x0801c020
 8005b7c:	08016770 	.word	0x08016770
 8005b80:	0801b6b0 	.word	0x0801b6b0

08005b84 <arm_rfft_fast_f32>:
 8005b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b88:	8a04      	ldrh	r4, [r0, #16]
 8005b8a:	b089      	sub	sp, #36	@ 0x24
 8005b8c:	9205      	str	r2, [sp, #20]
 8005b8e:	0862      	lsrs	r2, r4, #1
 8005b90:	9006      	str	r0, [sp, #24]
 8005b92:	8002      	strh	r2, [r0, #0]
 8005b94:	460e      	mov	r6, r1
 8005b96:	9307      	str	r3, [sp, #28]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f040 8096 	bne.w	8005cca <arm_rfft_fast_f32+0x146>
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f000 fe09 	bl	80067b8 <arm_cfft_f32>
 8005ba6:	9c06      	ldr	r4, [sp, #24]
 8005ba8:	6831      	ldr	r1, [r6, #0]
 8005baa:	8823      	ldrh	r3, [r4, #0]
 8005bac:	4608      	mov	r0, r1
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	9301      	str	r3, [sp, #4]
 8005bb2:	f7fa ffff 	bl	8000bb4 <__addsf3>
 8005bb6:	6871      	ldr	r1, [r6, #4]
 8005bb8:	4605      	mov	r5, r0
 8005bba:	4608      	mov	r0, r1
 8005bbc:	f7fa fffa 	bl	8000bb4 <__addsf3>
 8005bc0:	4607      	mov	r7, r0
 8005bc2:	4601      	mov	r1, r0
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f7fa fff5 	bl	8000bb4 <__addsf3>
 8005bca:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005bce:	f7fb f8f9 	bl	8000dc4 <__aeabi_fmul>
 8005bd2:	4639      	mov	r1, r7
 8005bd4:	9f05      	ldr	r7, [sp, #20]
 8005bd6:	6964      	ldr	r4, [r4, #20]
 8005bd8:	6038      	str	r0, [r7, #0]
 8005bda:	4628      	mov	r0, r5
 8005bdc:	f7fa ffe8 	bl	8000bb0 <__aeabi_fsub>
 8005be0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005be4:	f7fb f8ee 	bl	8000dc4 <__aeabi_fmul>
 8005be8:	9b01      	ldr	r3, [sp, #4]
 8005bea:	f106 0210 	add.w	r2, r6, #16
 8005bee:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8005bf2:	3b08      	subs	r3, #8
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	f107 0510 	add.w	r5, r7, #16
 8005bfa:	461e      	mov	r6, r3
 8005bfc:	4617      	mov	r7, r2
 8005bfe:	3410      	adds	r4, #16
 8005c00:	f857 3c08 	ldr.w	r3, [r7, #-8]
 8005c04:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	9305      	str	r3, [sp, #20]
 8005c0c:	68f3      	ldr	r3, [r6, #12]
 8005c0e:	4650      	mov	r0, sl
 8005c10:	4698      	mov	r8, r3
 8005c12:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8005c16:	3e08      	subs	r6, #8
 8005c18:	4699      	mov	r9, r3
 8005c1a:	f7fa ffc9 	bl	8000bb0 <__aeabi_fsub>
 8005c1e:	4649      	mov	r1, r9
 8005c20:	4683      	mov	fp, r0
 8005c22:	4640      	mov	r0, r8
 8005c24:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c28:	f8cd 8008 	str.w	r8, [sp, #8]
 8005c2c:	f7fa ffc2 	bl	8000bb4 <__addsf3>
 8005c30:	f854 8c08 	ldr.w	r8, [r4, #-8]
 8005c34:	4681      	mov	r9, r0
 8005c36:	4659      	mov	r1, fp
 8005c38:	4640      	mov	r0, r8
 8005c3a:	f7fb f8c3 	bl	8000dc4 <__aeabi_fmul>
 8005c3e:	9b05      	ldr	r3, [sp, #20]
 8005c40:	9004      	str	r0, [sp, #16]
 8005c42:	4619      	mov	r1, r3
 8005c44:	4650      	mov	r0, sl
 8005c46:	f7fa ffb5 	bl	8000bb4 <__addsf3>
 8005c4a:	9a04      	ldr	r2, [sp, #16]
 8005c4c:	4601      	mov	r1, r0
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f7fa ffb0 	bl	8000bb4 <__addsf3>
 8005c54:	f854 ac04 	ldr.w	sl, [r4, #-4]
 8005c58:	9004      	str	r0, [sp, #16]
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	f7fb f8b1 	bl	8000dc4 <__aeabi_fmul>
 8005c62:	9b04      	ldr	r3, [sp, #16]
 8005c64:	4601      	mov	r1, r0
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fa ffa4 	bl	8000bb4 <__addsf3>
 8005c6c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005c70:	f7fb f8a8 	bl	8000dc4 <__aeabi_fmul>
 8005c74:	4659      	mov	r1, fp
 8005c76:	f845 0c08 	str.w	r0, [r5, #-8]
 8005c7a:	4650      	mov	r0, sl
 8005c7c:	f7fb f8a2 	bl	8000dc4 <__aeabi_fmul>
 8005c80:	9902      	ldr	r1, [sp, #8]
 8005c82:	4682      	mov	sl, r0
 8005c84:	9803      	ldr	r0, [sp, #12]
 8005c86:	f7fa ff93 	bl	8000bb0 <__aeabi_fsub>
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	4650      	mov	r0, sl
 8005c8e:	f7fa ff91 	bl	8000bb4 <__addsf3>
 8005c92:	4649      	mov	r1, r9
 8005c94:	4682      	mov	sl, r0
 8005c96:	4640      	mov	r0, r8
 8005c98:	f7fb f894 	bl	8000dc4 <__aeabi_fmul>
 8005c9c:	4601      	mov	r1, r0
 8005c9e:	4650      	mov	r0, sl
 8005ca0:	f7fa ff86 	bl	8000bb0 <__aeabi_fsub>
 8005ca4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005ca8:	f7fb f88c 	bl	8000dc4 <__aeabi_fmul>
 8005cac:	9b01      	ldr	r3, [sp, #4]
 8005cae:	f845 0c04 	str.w	r0, [r5, #-4]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	f107 0708 	add.w	r7, r7, #8
 8005cb8:	f104 0408 	add.w	r4, r4, #8
 8005cbc:	f105 0508 	add.w	r5, r5, #8
 8005cc0:	9301      	str	r3, [sp, #4]
 8005cc2:	d19d      	bne.n	8005c00 <arm_rfft_fast_f32+0x7c>
 8005cc4:	b009      	add	sp, #36	@ 0x24
 8005cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cca:	680c      	ldr	r4, [r1, #0]
 8005ccc:	684f      	ldr	r7, [r1, #4]
 8005cce:	3a01      	subs	r2, #1
 8005cd0:	4639      	mov	r1, r7
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	9201      	str	r2, [sp, #4]
 8005cd6:	f7fa ff6d 	bl	8000bb4 <__addsf3>
 8005cda:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005cde:	f7fb f871 	bl	8000dc4 <__aeabi_fmul>
 8005ce2:	9b06      	ldr	r3, [sp, #24]
 8005ce4:	4639      	mov	r1, r7
 8005ce6:	9f05      	ldr	r7, [sp, #20]
 8005ce8:	695d      	ldr	r5, [r3, #20]
 8005cea:	6038      	str	r0, [r7, #0]
 8005cec:	4620      	mov	r0, r4
 8005cee:	f7fa ff5f 	bl	8000bb0 <__aeabi_fsub>
 8005cf2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005cf6:	f7fb f865 	bl	8000dc4 <__aeabi_fmul>
 8005cfa:	9a01      	ldr	r2, [sp, #4]
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	00d3      	lsls	r3, r2, #3
 8005d00:	2a00      	cmp	r2, #0
 8005d02:	d063      	beq.n	8005dcc <arm_rfft_fast_f32+0x248>
 8005d04:	3b08      	subs	r3, #8
 8005d06:	4433      	add	r3, r6
 8005d08:	3710      	adds	r7, #16
 8005d0a:	f106 0410 	add.w	r4, r6, #16
 8005d0e:	46b9      	mov	r9, r7
 8005d10:	461e      	mov	r6, r3
 8005d12:	3510      	adds	r5, #16
 8005d14:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8005d18:	f854 bc08 	ldr.w	fp, [r4, #-8]
 8005d1c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005d20:	4641      	mov	r1, r8
 8005d22:	4658      	mov	r0, fp
 8005d24:	9204      	str	r2, [sp, #16]
 8005d26:	9301      	str	r3, [sp, #4]
 8005d28:	f7fa ff42 	bl	8000bb0 <__aeabi_fsub>
 8005d2c:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8005d30:	4607      	mov	r7, r0
 8005d32:	9901      	ldr	r1, [sp, #4]
 8005d34:	4650      	mov	r0, sl
 8005d36:	f7fa ff3d 	bl	8000bb4 <__addsf3>
 8005d3a:	4659      	mov	r1, fp
 8005d3c:	9002      	str	r0, [sp, #8]
 8005d3e:	4640      	mov	r0, r8
 8005d40:	f7fa ff38 	bl	8000bb4 <__addsf3>
 8005d44:	f855 8c08 	ldr.w	r8, [r5, #-8]
 8005d48:	4683      	mov	fp, r0
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	f7fb f839 	bl	8000dc4 <__aeabi_fmul>
 8005d52:	4601      	mov	r1, r0
 8005d54:	4658      	mov	r0, fp
 8005d56:	f7fa ff2b 	bl	8000bb0 <__aeabi_fsub>
 8005d5a:	f855 bc04 	ldr.w	fp, [r5, #-4]
 8005d5e:	9003      	str	r0, [sp, #12]
 8005d60:	9902      	ldr	r1, [sp, #8]
 8005d62:	4658      	mov	r0, fp
 8005d64:	f7fb f82e 	bl	8000dc4 <__aeabi_fmul>
 8005d68:	9b03      	ldr	r3, [sp, #12]
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fa ff1f 	bl	8000bb0 <__aeabi_fsub>
 8005d72:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005d76:	f7fb f825 	bl	8000dc4 <__aeabi_fmul>
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	f849 0c08 	str.w	r0, [r9, #-8]
 8005d80:	4658      	mov	r0, fp
 8005d82:	f7fb f81f 	bl	8000dc4 <__aeabi_fmul>
 8005d86:	4651      	mov	r1, sl
 8005d88:	4607      	mov	r7, r0
 8005d8a:	9801      	ldr	r0, [sp, #4]
 8005d8c:	f7fa ff10 	bl	8000bb0 <__aeabi_fsub>
 8005d90:	4601      	mov	r1, r0
 8005d92:	4638      	mov	r0, r7
 8005d94:	f7fa ff0e 	bl	8000bb4 <__addsf3>
 8005d98:	9902      	ldr	r1, [sp, #8]
 8005d9a:	4607      	mov	r7, r0
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	f7fb f811 	bl	8000dc4 <__aeabi_fmul>
 8005da2:	4601      	mov	r1, r0
 8005da4:	4638      	mov	r0, r7
 8005da6:	f7fa ff03 	bl	8000bb0 <__aeabi_fsub>
 8005daa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005dae:	f7fb f809 	bl	8000dc4 <__aeabi_fmul>
 8005db2:	9a04      	ldr	r2, [sp, #16]
 8005db4:	f849 0c04 	str.w	r0, [r9, #-4]
 8005db8:	3a01      	subs	r2, #1
 8005dba:	f1a6 0608 	sub.w	r6, r6, #8
 8005dbe:	f104 0408 	add.w	r4, r4, #8
 8005dc2:	f105 0508 	add.w	r5, r5, #8
 8005dc6:	f109 0908 	add.w	r9, r9, #8
 8005dca:	d1a3      	bne.n	8005d14 <arm_rfft_fast_f32+0x190>
 8005dcc:	9a07      	ldr	r2, [sp, #28]
 8005dce:	9905      	ldr	r1, [sp, #20]
 8005dd0:	9806      	ldr	r0, [sp, #24]
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	b009      	add	sp, #36	@ 0x24
 8005dd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dda:	f000 bced 	b.w	80067b8 <arm_cfft_f32>
 8005dde:	bf00      	nop

08005de0 <arm_cfft_radix8by2_f32>:
 8005de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de4:	460c      	mov	r4, r1
 8005de6:	8803      	ldrh	r3, [r0, #0]
 8005de8:	b093      	sub	sp, #76	@ 0x4c
 8005dea:	900e      	str	r0, [sp, #56]	@ 0x38
 8005dec:	6842      	ldr	r2, [r0, #4]
 8005dee:	0858      	lsrs	r0, r3, #1
 8005df0:	9111      	str	r1, [sp, #68]	@ 0x44
 8005df2:	9010      	str	r0, [sp, #64]	@ 0x40
 8005df4:	0081      	lsls	r1, r0, #2
 8005df6:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8005dfa:	08db      	lsrs	r3, r3, #3
 8005dfc:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005dfe:	9308      	str	r3, [sp, #32]
 8005e00:	f000 8131 	beq.w	8006066 <arm_cfft_radix8by2_f32+0x286>
 8005e04:	f101 0310 	add.w	r3, r1, #16
 8005e08:	18c7      	adds	r7, r0, r3
 8005e0a:	46bb      	mov	fp, r7
 8005e0c:	3210      	adds	r2, #16
 8005e0e:	9200      	str	r2, [sp, #0]
 8005e10:	eb04 0803 	add.w	r8, r4, r3
 8005e14:	f104 0610 	add.w	r6, r4, #16
 8005e18:	f100 0910 	add.w	r9, r0, #16
 8005e1c:	f859 2c10 	ldr.w	r2, [r9, #-16]
 8005e20:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8005e24:	4611      	mov	r1, r2
 8005e26:	4618      	mov	r0, r3
 8005e28:	930d      	str	r3, [sp, #52]	@ 0x34
 8005e2a:	9206      	str	r2, [sp, #24]
 8005e2c:	f7fa fec2 	bl	8000bb4 <__addsf3>
 8005e30:	f859 2c08 	ldr.w	r2, [r9, #-8]
 8005e34:	f858 1c0c 	ldr.w	r1, [r8, #-12]
 8005e38:	f858 ec04 	ldr.w	lr, [r8, #-4]
 8005e3c:	4614      	mov	r4, r2
 8005e3e:	f858 2c10 	ldr.w	r2, [r8, #-16]
 8005e42:	f859 3c0c 	ldr.w	r3, [r9, #-12]
 8005e46:	f856 ac0c 	ldr.w	sl, [r6, #-12]
 8005e4a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005e4c:	f85b 1c08 	ldr.w	r1, [fp, #-8]
 8005e50:	f85b cc10 	ldr.w	ip, [fp, #-16]
 8005e54:	f858 7c08 	ldr.w	r7, [r8, #-8]
 8005e58:	920a      	str	r2, [sp, #40]	@ 0x28
 8005e5a:	f8cd e008 	str.w	lr, [sp, #8]
 8005e5e:	f85b 2c0c 	ldr.w	r2, [fp, #-12]
 8005e62:	f85b ec04 	ldr.w	lr, [fp, #-4]
 8005e66:	f859 5c04 	ldr.w	r5, [r9, #-4]
 8005e6a:	9104      	str	r1, [sp, #16]
 8005e6c:	f846 0c10 	str.w	r0, [r6, #-16]
 8005e70:	4619      	mov	r1, r3
 8005e72:	4650      	mov	r0, sl
 8005e74:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
 8005e78:	f8cd e014 	str.w	lr, [sp, #20]
 8005e7c:	9203      	str	r2, [sp, #12]
 8005e7e:	9307      	str	r3, [sp, #28]
 8005e80:	9701      	str	r7, [sp, #4]
 8005e82:	f7fa fe97 	bl	8000bb4 <__addsf3>
 8005e86:	f856 7c08 	ldr.w	r7, [r6, #-8]
 8005e8a:	f846 0c0c 	str.w	r0, [r6, #-12]
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4638      	mov	r0, r7
 8005e92:	9409      	str	r4, [sp, #36]	@ 0x24
 8005e94:	f7fa fe8e 	bl	8000bb4 <__addsf3>
 8005e98:	f856 4c04 	ldr.w	r4, [r6, #-4]
 8005e9c:	f846 0c08 	str.w	r0, [r6, #-8]
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f7fa fe86 	bl	8000bb4 <__addsf3>
 8005ea8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005eaa:	9a06      	ldr	r2, [sp, #24]
 8005eac:	f846 0c04 	str.w	r0, [r6, #-4]
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fa fe7c 	bl	8000bb0 <__aeabi_fsub>
 8005eb8:	9907      	ldr	r1, [sp, #28]
 8005eba:	9006      	str	r0, [sp, #24]
 8005ebc:	4650      	mov	r0, sl
 8005ebe:	f7fa fe77 	bl	8000bb0 <__aeabi_fsub>
 8005ec2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ec4:	4682      	mov	sl, r0
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	f7fa fe72 	bl	8000bb0 <__aeabi_fsub>
 8005ecc:	4629      	mov	r1, r5
 8005ece:	9007      	str	r0, [sp, #28]
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f7fa fe6d 	bl	8000bb0 <__aeabi_fsub>
 8005ed6:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8005ed8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005eda:	4639      	mov	r1, r7
 8005edc:	9009      	str	r0, [sp, #36]	@ 0x24
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f7fa fe68 	bl	8000bb4 <__addsf3>
 8005ee4:	9903      	ldr	r1, [sp, #12]
 8005ee6:	f848 0c10 	str.w	r0, [r8, #-16]
 8005eea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005eec:	3610      	adds	r6, #16
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f7fa fe60 	bl	8000bb4 <__addsf3>
 8005ef4:	9904      	ldr	r1, [sp, #16]
 8005ef6:	f848 0c0c 	str.w	r0, [r8, #-12]
 8005efa:	9801      	ldr	r0, [sp, #4]
 8005efc:	f7fa fe5a 	bl	8000bb4 <__addsf3>
 8005f00:	9905      	ldr	r1, [sp, #20]
 8005f02:	f848 0c08 	str.w	r0, [r8, #-8]
 8005f06:	9802      	ldr	r0, [sp, #8]
 8005f08:	f7fa fe54 	bl	8000bb4 <__addsf3>
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	f848 0c04 	str.w	r0, [r8, #-4]
 8005f12:	4638      	mov	r0, r7
 8005f14:	f7fa fe4c 	bl	8000bb0 <__aeabi_fsub>
 8005f18:	4629      	mov	r1, r5
 8005f1a:	4607      	mov	r7, r0
 8005f1c:	9803      	ldr	r0, [sp, #12]
 8005f1e:	f7fa fe47 	bl	8000bb0 <__aeabi_fsub>
 8005f22:	9901      	ldr	r1, [sp, #4]
 8005f24:	9003      	str	r0, [sp, #12]
 8005f26:	9804      	ldr	r0, [sp, #16]
 8005f28:	f7fa fe42 	bl	8000bb0 <__aeabi_fsub>
 8005f2c:	9902      	ldr	r1, [sp, #8]
 8005f2e:	9001      	str	r0, [sp, #4]
 8005f30:	9805      	ldr	r0, [sp, #20]
 8005f32:	f7fa fe3d 	bl	8000bb0 <__aeabi_fsub>
 8005f36:	9a00      	ldr	r2, [sp, #0]
 8005f38:	9002      	str	r0, [sp, #8]
 8005f3a:	f852 4c10 	ldr.w	r4, [r2, #-16]
 8005f3e:	9806      	ldr	r0, [sp, #24]
 8005f40:	4621      	mov	r1, r4
 8005f42:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 8005f46:	f7fa ff3d 	bl	8000dc4 <__aeabi_fmul>
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	9004      	str	r0, [sp, #16]
 8005f4e:	4650      	mov	r0, sl
 8005f50:	f7fa ff38 	bl	8000dc4 <__aeabi_fmul>
 8005f54:	9b04      	ldr	r3, [sp, #16]
 8005f56:	4601      	mov	r1, r0
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fa fe2b 	bl	8000bb4 <__addsf3>
 8005f5e:	4621      	mov	r1, r4
 8005f60:	f849 0c10 	str.w	r0, [r9, #-16]
 8005f64:	4650      	mov	r0, sl
 8005f66:	f7fa ff2d 	bl	8000dc4 <__aeabi_fmul>
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	4682      	mov	sl, r0
 8005f6e:	9806      	ldr	r0, [sp, #24]
 8005f70:	f7fa ff28 	bl	8000dc4 <__aeabi_fmul>
 8005f74:	4601      	mov	r1, r0
 8005f76:	4650      	mov	r0, sl
 8005f78:	f7fa fe1a 	bl	8000bb0 <__aeabi_fsub>
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	f849 0c0c 	str.w	r0, [r9, #-12]
 8005f82:	4638      	mov	r0, r7
 8005f84:	f7fa ff1e 	bl	8000dc4 <__aeabi_fmul>
 8005f88:	4621      	mov	r1, r4
 8005f8a:	4682      	mov	sl, r0
 8005f8c:	9803      	ldr	r0, [sp, #12]
 8005f8e:	f7fa ff19 	bl	8000dc4 <__aeabi_fmul>
 8005f92:	4601      	mov	r1, r0
 8005f94:	4650      	mov	r0, sl
 8005f96:	f7fa fe0b 	bl	8000bb0 <__aeabi_fsub>
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	f84b 0c10 	str.w	r0, [fp, #-16]
 8005fa0:	9803      	ldr	r0, [sp, #12]
 8005fa2:	f7fa ff0f 	bl	8000dc4 <__aeabi_fmul>
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4605      	mov	r5, r0
 8005faa:	4638      	mov	r0, r7
 8005fac:	f7fa ff0a 	bl	8000dc4 <__aeabi_fmul>
 8005fb0:	4601      	mov	r1, r0
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f7fa fdfe 	bl	8000bb4 <__addsf3>
 8005fb8:	9a00      	ldr	r2, [sp, #0]
 8005fba:	f84b 0c0c 	str.w	r0, [fp, #-12]
 8005fbe:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8005fc2:	9807      	ldr	r0, [sp, #28]
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8005fca:	f7fa fefb 	bl	8000dc4 <__aeabi_fmul>
 8005fce:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8005fd2:	4607      	mov	r7, r0
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	4650      	mov	r0, sl
 8005fd8:	f7fa fef4 	bl	8000dc4 <__aeabi_fmul>
 8005fdc:	4601      	mov	r1, r0
 8005fde:	4638      	mov	r0, r7
 8005fe0:	f7fa fde8 	bl	8000bb4 <__addsf3>
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	f849 0c08 	str.w	r0, [r9, #-8]
 8005fea:	4650      	mov	r0, sl
 8005fec:	f7fa feea 	bl	8000dc4 <__aeabi_fmul>
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	4607      	mov	r7, r0
 8005ff4:	9807      	ldr	r0, [sp, #28]
 8005ff6:	f7fa fee5 	bl	8000dc4 <__aeabi_fmul>
 8005ffa:	4601      	mov	r1, r0
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	f7fa fdd7 	bl	8000bb0 <__aeabi_fsub>
 8006002:	4629      	mov	r1, r5
 8006004:	f849 0c04 	str.w	r0, [r9, #-4]
 8006008:	9801      	ldr	r0, [sp, #4]
 800600a:	f7fa fedb 	bl	8000dc4 <__aeabi_fmul>
 800600e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8006012:	4607      	mov	r7, r0
 8006014:	4621      	mov	r1, r4
 8006016:	4650      	mov	r0, sl
 8006018:	f7fa fed4 	bl	8000dc4 <__aeabi_fmul>
 800601c:	4601      	mov	r1, r0
 800601e:	4638      	mov	r0, r7
 8006020:	f7fa fdc6 	bl	8000bb0 <__aeabi_fsub>
 8006024:	4629      	mov	r1, r5
 8006026:	f84b 0c08 	str.w	r0, [fp, #-8]
 800602a:	4650      	mov	r0, sl
 800602c:	f7fa feca 	bl	8000dc4 <__aeabi_fmul>
 8006030:	4621      	mov	r1, r4
 8006032:	4605      	mov	r5, r0
 8006034:	9801      	ldr	r0, [sp, #4]
 8006036:	f7fa fec5 	bl	8000dc4 <__aeabi_fmul>
 800603a:	4601      	mov	r1, r0
 800603c:	4628      	mov	r0, r5
 800603e:	f7fa fdb9 	bl	8000bb4 <__addsf3>
 8006042:	9b00      	ldr	r3, [sp, #0]
 8006044:	f84b 0c04 	str.w	r0, [fp, #-4]
 8006048:	3310      	adds	r3, #16
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	9b08      	ldr	r3, [sp, #32]
 800604e:	f108 0810 	add.w	r8, r8, #16
 8006052:	3b01      	subs	r3, #1
 8006054:	f109 0910 	add.w	r9, r9, #16
 8006058:	f10b 0b10 	add.w	fp, fp, #16
 800605c:	9308      	str	r3, [sp, #32]
 800605e:	f47f aedd 	bne.w	8005e1c <arm_cfft_radix8by2_f32+0x3c>
 8006062:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	f8bd 4040 	ldrh.w	r4, [sp, #64]	@ 0x40
 800606a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800606c:	4621      	mov	r1, r4
 800606e:	2302      	movs	r3, #2
 8006070:	f000 fc64 	bl	800693c <arm_radix8_butterfly_f32>
 8006074:	4621      	mov	r1, r4
 8006076:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006078:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	2302      	movs	r3, #2
 800607e:	b013      	add	sp, #76	@ 0x4c
 8006080:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	f000 bc5a 	b.w	800693c <arm_radix8_butterfly_f32>

08006088 <arm_cfft_radix8by4_f32>:
 8006088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608c:	8804      	ldrh	r4, [r0, #0]
 800608e:	b0a7      	sub	sp, #156	@ 0x9c
 8006090:	0864      	lsrs	r4, r4, #1
 8006092:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8006096:	680d      	ldr	r5, [r1, #0]
 8006098:	911a      	str	r1, [sp, #104]	@ 0x68
 800609a:	4451      	add	r1, sl
 800609c:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
 80060a0:	460f      	mov	r7, r1
 80060a2:	9023      	str	r0, [sp, #140]	@ 0x8c
 80060a4:	4631      	mov	r1, r6
 80060a6:	4628      	mov	r0, r5
 80060a8:	f7fa fd84 	bl	8000bb4 <__addsf3>
 80060ac:	4631      	mov	r1, r6
 80060ae:	4683      	mov	fp, r0
 80060b0:	4628      	mov	r0, r5
 80060b2:	9718      	str	r7, [sp, #96]	@ 0x60
 80060b4:	f7fa fd7c 	bl	8000bb0 <__aeabi_fsub>
 80060b8:	eb07 060a 	add.w	r6, r7, sl
 80060bc:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80060be:	961b      	str	r6, [sp, #108]	@ 0x6c
 80060c0:	687d      	ldr	r5, [r7, #4]
 80060c2:	6876      	ldr	r6, [r6, #4]
 80060c4:	9000      	str	r0, [sp, #0]
 80060c6:	4631      	mov	r1, r6
 80060c8:	4628      	mov	r0, r5
 80060ca:	f7fa fd73 	bl	8000bb4 <__addsf3>
 80060ce:	4631      	mov	r1, r6
 80060d0:	9001      	str	r0, [sp, #4]
 80060d2:	4628      	mov	r0, r5
 80060d4:	f7fa fd6c 	bl	8000bb0 <__aeabi_fsub>
 80060d8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80060da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80060dc:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
 80060e0:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 80060e4:	4639      	mov	r1, r7
 80060e6:	9002      	str	r0, [sp, #8]
 80060e8:	4658      	mov	r0, fp
 80060ea:	f7fa fd63 	bl	8000bb4 <__addsf3>
 80060ee:	4631      	mov	r1, r6
 80060f0:	f7fa fd60 	bl	8000bb4 <__addsf3>
 80060f4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80060f6:	46ae      	mov	lr, r5
 80060f8:	4619      	mov	r1, r3
 80060fa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80060fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80060fe:	44d6      	add	lr, sl
 8006100:	f8de 8004 	ldr.w	r8, [lr, #4]
 8006104:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8006108:	951b      	str	r5, [sp, #108]	@ 0x6c
 800610a:	685d      	ldr	r5, [r3, #4]
 800610c:	f841 0b08 	str.w	r0, [r1], #8
 8006110:	911d      	str	r1, [sp, #116]	@ 0x74
 8006112:	9801      	ldr	r0, [sp, #4]
 8006114:	6851      	ldr	r1, [r2, #4]
 8006116:	f8cd e064 	str.w	lr, [sp, #100]	@ 0x64
 800611a:	f7fa fd4b 	bl	8000bb4 <__addsf3>
 800611e:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8006120:	6849      	ldr	r1, [r1, #4]
 8006122:	f7fa fd47 	bl	8000bb4 <__addsf3>
 8006126:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006128:	4649      	mov	r1, r9
 800612a:	6050      	str	r0, [r2, #4]
 800612c:	9800      	ldr	r0, [sp, #0]
 800612e:	f7fa fd41 	bl	8000bb4 <__addsf3>
 8006132:	4641      	mov	r1, r8
 8006134:	f7fa fd3c 	bl	8000bb0 <__aeabi_fsub>
 8006138:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800613a:	4639      	mov	r1, r7
 800613c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8006140:	9802      	ldr	r0, [sp, #8]
 8006142:	f7fa fd35 	bl	8000bb0 <__aeabi_fsub>
 8006146:	4631      	mov	r1, r6
 8006148:	f7fa fd34 	bl	8000bb4 <__addsf3>
 800614c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800614e:	4639      	mov	r1, r7
 8006150:	6058      	str	r0, [r3, #4]
 8006152:	4658      	mov	r0, fp
 8006154:	f7fa fd2c 	bl	8000bb0 <__aeabi_fsub>
 8006158:	4631      	mov	r1, r6
 800615a:	f7fa fd29 	bl	8000bb0 <__aeabi_fsub>
 800615e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8006160:	4649      	mov	r1, r9
 8006162:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8006166:	9801      	ldr	r0, [sp, #4]
 8006168:	f7fa fd22 	bl	8000bb0 <__aeabi_fsub>
 800616c:	4641      	mov	r1, r8
 800616e:	f7fa fd1f 	bl	8000bb0 <__aeabi_fsub>
 8006172:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006174:	4649      	mov	r1, r9
 8006176:	6058      	str	r0, [r3, #4]
 8006178:	9800      	ldr	r0, [sp, #0]
 800617a:	f7fa fd19 	bl	8000bb0 <__aeabi_fsub>
 800617e:	4641      	mov	r1, r8
 8006180:	f7fa fd18 	bl	8000bb4 <__addsf3>
 8006184:	4639      	mov	r1, r7
 8006186:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8006188:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 800618c:	9802      	ldr	r0, [sp, #8]
 800618e:	f7fa fd11 	bl	8000bb4 <__addsf3>
 8006192:	4631      	mov	r1, r6
 8006194:	f7fa fd0c 	bl	8000bb0 <__aeabi_fsub>
 8006198:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800619a:	0864      	lsrs	r4, r4, #1
 800619c:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 800619e:	6048      	str	r0, [r1, #4]
 80061a0:	1ea3      	subs	r3, r4, #2
 80061a2:	9424      	str	r4, [sp, #144]	@ 0x90
 80061a4:	460c      	mov	r4, r1
 80061a6:	3108      	adds	r1, #8
 80061a8:	911c      	str	r1, [sp, #112]	@ 0x70
 80061aa:	4639      	mov	r1, r7
 80061ac:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80061ae:	3108      	adds	r1, #8
 80061b0:	911e      	str	r1, [sp, #120]	@ 0x78
 80061b2:	4611      	mov	r1, r2
 80061b4:	3108      	adds	r1, #8
 80061b6:	f105 0018 	add.w	r0, r5, #24
 80061ba:	911f      	str	r1, [sp, #124]	@ 0x7c
 80061bc:	f105 0108 	add.w	r1, r5, #8
 80061c0:	9121      	str	r1, [sp, #132]	@ 0x84
 80061c2:	9020      	str	r0, [sp, #128]	@ 0x80
 80061c4:	f105 0110 	add.w	r1, r5, #16
 80061c8:	0858      	lsrs	r0, r3, #1
 80061ca:	9122      	str	r1, [sp, #136]	@ 0x88
 80061cc:	9025      	str	r0, [sp, #148]	@ 0x94
 80061ce:	f000 8207 	beq.w	80065e0 <arm_cfft_radix8by4_f32+0x558>
 80061d2:	f1aa 030c 	sub.w	r3, sl, #12
 80061d6:	9105      	str	r1, [sp, #20]
 80061d8:	18e1      	adds	r1, r4, r3
 80061da:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80061dc:	f1a7 0b0c 	sub.w	fp, r7, #12
 80061e0:	3310      	adds	r3, #16
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	f102 0310 	add.w	r3, r2, #16
 80061e8:	461a      	mov	r2, r3
 80061ea:	f105 0320 	add.w	r3, r5, #32
 80061ee:	9304      	str	r3, [sp, #16]
 80061f0:	f105 0330 	add.w	r3, r5, #48	@ 0x30
 80061f4:	9303      	str	r3, [sp, #12]
 80061f6:	463b      	mov	r3, r7
 80061f8:	46d8      	mov	r8, fp
 80061fa:	4691      	mov	r9, r2
 80061fc:	3310      	adds	r3, #16
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	2300      	movs	r3, #0
 8006202:	9014      	str	r0, [sp, #80]	@ 0x50
 8006204:	9102      	str	r1, [sp, #8]
 8006206:	f104 0a10 	add.w	sl, r4, #16
 800620a:	9306      	str	r3, [sp, #24]
 800620c:	9e01      	ldr	r6, [sp, #4]
 800620e:	9f00      	ldr	r7, [sp, #0]
 8006210:	f856 4c08 	ldr.w	r4, [r6, #-8]
 8006214:	f857 5c08 	ldr.w	r5, [r7, #-8]
 8006218:	4620      	mov	r0, r4
 800621a:	4629      	mov	r1, r5
 800621c:	f7fa fcca 	bl	8000bb4 <__addsf3>
 8006220:	4629      	mov	r1, r5
 8006222:	9007      	str	r0, [sp, #28]
 8006224:	4620      	mov	r0, r4
 8006226:	f7fa fcc3 	bl	8000bb0 <__aeabi_fsub>
 800622a:	f856 4c04 	ldr.w	r4, [r6, #-4]
 800622e:	f857 5c04 	ldr.w	r5, [r7, #-4]
 8006232:	9008      	str	r0, [sp, #32]
 8006234:	4629      	mov	r1, r5
 8006236:	4620      	mov	r0, r4
 8006238:	9601      	str	r6, [sp, #4]
 800623a:	9700      	str	r7, [sp, #0]
 800623c:	f7fa fcba 	bl	8000bb4 <__addsf3>
 8006240:	4629      	mov	r1, r5
 8006242:	4607      	mov	r7, r0
 8006244:	4620      	mov	r0, r4
 8006246:	f7fa fcb3 	bl	8000bb0 <__aeabi_fsub>
 800624a:	f859 bc04 	ldr.w	fp, [r9, #-4]
 800624e:	f85a 6c04 	ldr.w	r6, [sl, #-4]
 8006252:	4604      	mov	r4, r0
 8006254:	4659      	mov	r1, fp
 8006256:	9808      	ldr	r0, [sp, #32]
 8006258:	f7fa fcac 	bl	8000bb4 <__addsf3>
 800625c:	4631      	mov	r1, r6
 800625e:	f7fa fca7 	bl	8000bb0 <__aeabi_fsub>
 8006262:	f859 5c08 	ldr.w	r5, [r9, #-8]
 8006266:	9009      	str	r0, [sp, #36]	@ 0x24
 8006268:	940d      	str	r4, [sp, #52]	@ 0x34
 800626a:	4620      	mov	r0, r4
 800626c:	f85a 4c08 	ldr.w	r4, [sl, #-8]
 8006270:	4629      	mov	r1, r5
 8006272:	f7fa fc9d 	bl	8000bb0 <__aeabi_fsub>
 8006276:	4621      	mov	r1, r4
 8006278:	f7fa fc9c 	bl	8000bb4 <__addsf3>
 800627c:	4629      	mov	r1, r5
 800627e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006280:	9807      	ldr	r0, [sp, #28]
 8006282:	f7fa fc95 	bl	8000bb0 <__aeabi_fsub>
 8006286:	4621      	mov	r1, r4
 8006288:	f7fa fc92 	bl	8000bb0 <__aeabi_fsub>
 800628c:	4659      	mov	r1, fp
 800628e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006290:	4638      	mov	r0, r7
 8006292:	f7fa fc8d 	bl	8000bb0 <__aeabi_fsub>
 8006296:	4631      	mov	r1, r6
 8006298:	f7fa fc8a 	bl	8000bb0 <__aeabi_fsub>
 800629c:	4659      	mov	r1, fp
 800629e:	900c      	str	r0, [sp, #48]	@ 0x30
 80062a0:	9808      	ldr	r0, [sp, #32]
 80062a2:	f7fa fc85 	bl	8000bb0 <__aeabi_fsub>
 80062a6:	4631      	mov	r1, r6
 80062a8:	f7fa fc84 	bl	8000bb4 <__addsf3>
 80062ac:	4629      	mov	r1, r5
 80062ae:	9008      	str	r0, [sp, #32]
 80062b0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80062b2:	f7fa fc7f 	bl	8000bb4 <__addsf3>
 80062b6:	4621      	mov	r1, r4
 80062b8:	f7fa fc7a 	bl	8000bb0 <__aeabi_fsub>
 80062bc:	4629      	mov	r1, r5
 80062be:	900d      	str	r0, [sp, #52]	@ 0x34
 80062c0:	9807      	ldr	r0, [sp, #28]
 80062c2:	f7fa fc77 	bl	8000bb4 <__addsf3>
 80062c6:	4621      	mov	r1, r4
 80062c8:	f7fa fc74 	bl	8000bb4 <__addsf3>
 80062cc:	9d01      	ldr	r5, [sp, #4]
 80062ce:	f109 0908 	add.w	r9, r9, #8
 80062d2:	f845 0c08 	str.w	r0, [r5, #-8]
 80062d6:	f859 1c0c 	ldr.w	r1, [r9, #-12]
 80062da:	4638      	mov	r0, r7
 80062dc:	f7fa fc6a 	bl	8000bb4 <__addsf3>
 80062e0:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 80062e4:	f7fa fc66 	bl	8000bb4 <__addsf3>
 80062e8:	9a06      	ldr	r2, [sp, #24]
 80062ea:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 80062ec:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80062ee:	f845 0c04 	str.w	r0, [r5, #-4]
 80062f2:	4414      	add	r4, r2
 80062f4:	18b2      	adds	r2, r6, r2
 80062f6:	f852 6c08 	ldr.w	r6, [r2, #-8]
 80062fa:	9501      	str	r5, [sp, #4]
 80062fc:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8006300:	4631      	mov	r1, r6
 8006302:	4628      	mov	r0, r5
 8006304:	4617      	mov	r7, r2
 8006306:	f7fa fc55 	bl	8000bb4 <__addsf3>
 800630a:	4631      	mov	r1, r6
 800630c:	9007      	str	r0, [sp, #28]
 800630e:	4628      	mov	r0, r5
 8006310:	f7fa fc4e 	bl	8000bb0 <__aeabi_fsub>
 8006314:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8006318:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800631c:	4683      	mov	fp, r0
 800631e:	4631      	mov	r1, r6
 8006320:	4628      	mov	r0, r5
 8006322:	9715      	str	r7, [sp, #84]	@ 0x54
 8006324:	f7fa fc46 	bl	8000bb4 <__addsf3>
 8006328:	4631      	mov	r1, r6
 800632a:	900e      	str	r0, [sp, #56]	@ 0x38
 800632c:	4628      	mov	r0, r5
 800632e:	f7fa fc3f 	bl	8000bb0 <__aeabi_fsub>
 8006332:	9f02      	ldr	r7, [sp, #8]
 8006334:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8006338:	68bd      	ldr	r5, [r7, #8]
 800633a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800633c:	4629      	mov	r1, r5
 800633e:	4630      	mov	r0, r6
 8006340:	f7fa fc36 	bl	8000bb0 <__aeabi_fsub>
 8006344:	4601      	mov	r1, r0
 8006346:	9017      	str	r0, [sp, #92]	@ 0x5c
 8006348:	4658      	mov	r0, fp
 800634a:	f7fa fc33 	bl	8000bb4 <__addsf3>
 800634e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006352:	9702      	str	r7, [sp, #8]
 8006354:	687f      	ldr	r7, [r7, #4]
 8006356:	4619      	mov	r1, r3
 8006358:	9010      	str	r0, [sp, #64]	@ 0x40
 800635a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800635c:	9312      	str	r3, [sp, #72]	@ 0x48
 800635e:	f7fa fc27 	bl	8000bb0 <__aeabi_fsub>
 8006362:	4639      	mov	r1, r7
 8006364:	f7fa fc26 	bl	8000bb4 <__addsf3>
 8006368:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800636a:	9011      	str	r0, [sp, #68]	@ 0x44
 800636c:	4619      	mov	r1, r3
 800636e:	9807      	ldr	r0, [sp, #28]
 8006370:	9316      	str	r3, [sp, #88]	@ 0x58
 8006372:	f7fa fc1d 	bl	8000bb0 <__aeabi_fsub>
 8006376:	4639      	mov	r1, r7
 8006378:	f7fa fc1a 	bl	8000bb0 <__aeabi_fsub>
 800637c:	4631      	mov	r1, r6
 800637e:	9012      	str	r0, [sp, #72]	@ 0x48
 8006380:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8006382:	f7fa fc15 	bl	8000bb0 <__aeabi_fsub>
 8006386:	4629      	mov	r1, r5
 8006388:	f7fa fc12 	bl	8000bb0 <__aeabi_fsub>
 800638c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800638e:	4659      	mov	r1, fp
 8006390:	9013      	str	r0, [sp, #76]	@ 0x4c
 8006392:	4610      	mov	r0, r2
 8006394:	f7fa fc0c 	bl	8000bb0 <__aeabi_fsub>
 8006398:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800639a:	4683      	mov	fp, r0
 800639c:	4619      	mov	r1, r3
 800639e:	4638      	mov	r0, r7
 80063a0:	f7fa fc06 	bl	8000bb0 <__aeabi_fsub>
 80063a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80063a6:	f7fa fc03 	bl	8000bb0 <__aeabi_fsub>
 80063aa:	4631      	mov	r1, r6
 80063ac:	4607      	mov	r7, r0
 80063ae:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80063b0:	f7fa fc00 	bl	8000bb4 <__addsf3>
 80063b4:	4629      	mov	r1, r5
 80063b6:	f7fa fbfd 	bl	8000bb4 <__addsf3>
 80063ba:	f844 0c04 	str.w	r0, [r4, #-4]
 80063be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80063c2:	9807      	ldr	r0, [sp, #28]
 80063c4:	f7fa fbf6 	bl	8000bb4 <__addsf3>
 80063c8:	9902      	ldr	r1, [sp, #8]
 80063ca:	f1a8 0808 	sub.w	r8, r8, #8
 80063ce:	6849      	ldr	r1, [r1, #4]
 80063d0:	f7fa fbf0 	bl	8000bb4 <__addsf3>
 80063d4:	9d05      	ldr	r5, [sp, #20]
 80063d6:	f844 0c08 	str.w	r0, [r4, #-8]
 80063da:	f855 4c08 	ldr.w	r4, [r5, #-8]
 80063de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063e0:	4621      	mov	r1, r4
 80063e2:	f7fa fcef 	bl	8000dc4 <__aeabi_fmul>
 80063e6:	f855 5c04 	ldr.w	r5, [r5, #-4]
 80063ea:	4606      	mov	r6, r0
 80063ec:	4629      	mov	r1, r5
 80063ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80063f0:	f7fa fce8 	bl	8000dc4 <__aeabi_fmul>
 80063f4:	4601      	mov	r1, r0
 80063f6:	4630      	mov	r0, r6
 80063f8:	f7fa fbdc 	bl	8000bb4 <__addsf3>
 80063fc:	4621      	mov	r1, r4
 80063fe:	f849 0c10 	str.w	r0, [r9, #-16]
 8006402:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006404:	f7fa fcde 	bl	8000dc4 <__aeabi_fmul>
 8006408:	4629      	mov	r1, r5
 800640a:	4606      	mov	r6, r0
 800640c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800640e:	f7fa fcd9 	bl	8000dc4 <__aeabi_fmul>
 8006412:	4601      	mov	r1, r0
 8006414:	4630      	mov	r0, r6
 8006416:	f7fa fbcb 	bl	8000bb0 <__aeabi_fsub>
 800641a:	4629      	mov	r1, r5
 800641c:	f849 0c0c 	str.w	r0, [r9, #-12]
 8006420:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8006422:	f7fa fccf 	bl	8000dc4 <__aeabi_fmul>
 8006426:	4621      	mov	r1, r4
 8006428:	4606      	mov	r6, r0
 800642a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800642c:	f7fa fcca 	bl	8000dc4 <__aeabi_fmul>
 8006430:	4601      	mov	r1, r0
 8006432:	4630      	mov	r0, r6
 8006434:	f7fa fbbc 	bl	8000bb0 <__aeabi_fsub>
 8006438:	4629      	mov	r1, r5
 800643a:	f8c8 0010 	str.w	r0, [r8, #16]
 800643e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006440:	f7fa fcc0 	bl	8000dc4 <__aeabi_fmul>
 8006444:	4621      	mov	r1, r4
 8006446:	4605      	mov	r5, r0
 8006448:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800644a:	f7fa fcbb 	bl	8000dc4 <__aeabi_fmul>
 800644e:	4601      	mov	r1, r0
 8006450:	4628      	mov	r0, r5
 8006452:	f7fa fbaf 	bl	8000bb4 <__addsf3>
 8006456:	9904      	ldr	r1, [sp, #16]
 8006458:	f8c8 000c 	str.w	r0, [r8, #12]
 800645c:	f851 4c10 	ldr.w	r4, [r1, #-16]
 8006460:	f851 5c0c 	ldr.w	r5, [r1, #-12]
 8006464:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006466:	4621      	mov	r1, r4
 8006468:	f7fa fcac 	bl	8000dc4 <__aeabi_fmul>
 800646c:	4629      	mov	r1, r5
 800646e:	4606      	mov	r6, r0
 8006470:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006472:	f7fa fca7 	bl	8000dc4 <__aeabi_fmul>
 8006476:	4601      	mov	r1, r0
 8006478:	4630      	mov	r0, r6
 800647a:	f7fa fb9b 	bl	8000bb4 <__addsf3>
 800647e:	9a00      	ldr	r2, [sp, #0]
 8006480:	4621      	mov	r1, r4
 8006482:	f842 0c08 	str.w	r0, [r2, #-8]
 8006486:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006488:	f7fa fc9c 	bl	8000dc4 <__aeabi_fmul>
 800648c:	4629      	mov	r1, r5
 800648e:	4606      	mov	r6, r0
 8006490:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006492:	f7fa fc97 	bl	8000dc4 <__aeabi_fmul>
 8006496:	4601      	mov	r1, r0
 8006498:	4630      	mov	r0, r6
 800649a:	f7fa fb89 	bl	8000bb0 <__aeabi_fsub>
 800649e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80064a0:	9a00      	ldr	r2, [sp, #0]
 80064a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80064a6:	f842 0c04 	str.w	r0, [r2, #-4]
 80064aa:	4621      	mov	r1, r4
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fa fc89 	bl	8000dc4 <__aeabi_fmul>
 80064b2:	4629      	mov	r1, r5
 80064b4:	4606      	mov	r6, r0
 80064b6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80064b8:	f7fa fc84 	bl	8000dc4 <__aeabi_fmul>
 80064bc:	4601      	mov	r1, r0
 80064be:	4630      	mov	r0, r6
 80064c0:	f7fa fb76 	bl	8000bb0 <__aeabi_fsub>
 80064c4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80064c6:	4629      	mov	r1, r5
 80064c8:	f846 0c04 	str.w	r0, [r6, #-4]
 80064cc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80064ce:	f7fa fc79 	bl	8000dc4 <__aeabi_fmul>
 80064d2:	4621      	mov	r1, r4
 80064d4:	4605      	mov	r5, r0
 80064d6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80064d8:	f7fa fc74 	bl	8000dc4 <__aeabi_fmul>
 80064dc:	4601      	mov	r1, r0
 80064de:	4628      	mov	r0, r5
 80064e0:	f7fa fb66 	bl	8000bb0 <__aeabi_fsub>
 80064e4:	f846 0c08 	str.w	r0, [r6, #-8]
 80064e8:	9e03      	ldr	r6, [sp, #12]
 80064ea:	9808      	ldr	r0, [sp, #32]
 80064ec:	f856 4c18 	ldr.w	r4, [r6, #-24]
 80064f0:	f856 5c14 	ldr.w	r5, [r6, #-20]
 80064f4:	4621      	mov	r1, r4
 80064f6:	f7fa fc65 	bl	8000dc4 <__aeabi_fmul>
 80064fa:	4629      	mov	r1, r5
 80064fc:	4606      	mov	r6, r0
 80064fe:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006500:	f7fa fc60 	bl	8000dc4 <__aeabi_fmul>
 8006504:	4601      	mov	r1, r0
 8006506:	4630      	mov	r0, r6
 8006508:	f7fa fb54 	bl	8000bb4 <__addsf3>
 800650c:	4621      	mov	r1, r4
 800650e:	f84a 0c08 	str.w	r0, [sl, #-8]
 8006512:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006514:	f7fa fc56 	bl	8000dc4 <__aeabi_fmul>
 8006518:	4629      	mov	r1, r5
 800651a:	4606      	mov	r6, r0
 800651c:	9808      	ldr	r0, [sp, #32]
 800651e:	f7fa fc51 	bl	8000dc4 <__aeabi_fmul>
 8006522:	4601      	mov	r1, r0
 8006524:	4630      	mov	r0, r6
 8006526:	f7fa fb43 	bl	8000bb0 <__aeabi_fsub>
 800652a:	4629      	mov	r1, r5
 800652c:	f84a 0c04 	str.w	r0, [sl, #-4]
 8006530:	4638      	mov	r0, r7
 8006532:	f7fa fc47 	bl	8000dc4 <__aeabi_fmul>
 8006536:	4621      	mov	r1, r4
 8006538:	4606      	mov	r6, r0
 800653a:	4658      	mov	r0, fp
 800653c:	f7fa fc42 	bl	8000dc4 <__aeabi_fmul>
 8006540:	4601      	mov	r1, r0
 8006542:	4630      	mov	r0, r6
 8006544:	f7fa fb34 	bl	8000bb0 <__aeabi_fsub>
 8006548:	9e02      	ldr	r6, [sp, #8]
 800654a:	4629      	mov	r1, r5
 800654c:	60b0      	str	r0, [r6, #8]
 800654e:	4658      	mov	r0, fp
 8006550:	f7fa fc38 	bl	8000dc4 <__aeabi_fmul>
 8006554:	4621      	mov	r1, r4
 8006556:	4605      	mov	r5, r0
 8006558:	4638      	mov	r0, r7
 800655a:	f7fa fc33 	bl	8000dc4 <__aeabi_fmul>
 800655e:	4601      	mov	r1, r0
 8006560:	4628      	mov	r0, r5
 8006562:	f7fa fb27 	bl	8000bb4 <__addsf3>
 8006566:	9b01      	ldr	r3, [sp, #4]
 8006568:	9d05      	ldr	r5, [sp, #20]
 800656a:	461f      	mov	r7, r3
 800656c:	9b06      	ldr	r3, [sp, #24]
 800656e:	9904      	ldr	r1, [sp, #16]
 8006570:	3b08      	subs	r3, #8
 8006572:	9306      	str	r3, [sp, #24]
 8006574:	f105 0308 	add.w	r3, r5, #8
 8006578:	9305      	str	r3, [sp, #20]
 800657a:	3708      	adds	r7, #8
 800657c:	f101 0310 	add.w	r3, r1, #16
 8006580:	9701      	str	r7, [sp, #4]
 8006582:	9304      	str	r3, [sp, #16]
 8006584:	9a00      	ldr	r2, [sp, #0]
 8006586:	9c03      	ldr	r4, [sp, #12]
 8006588:	f102 0308 	add.w	r3, r2, #8
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	f104 0318 	add.w	r3, r4, #24
 8006592:	9303      	str	r3, [sp, #12]
 8006594:	f1a6 0308 	sub.w	r3, r6, #8
 8006598:	9302      	str	r3, [sp, #8]
 800659a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800659c:	f10a 0a08 	add.w	sl, sl, #8
 80065a0:	3b01      	subs	r3, #1
 80065a2:	6070      	str	r0, [r6, #4]
 80065a4:	9314      	str	r3, [sp, #80]	@ 0x50
 80065a6:	f47f ae31 	bne.w	800620c <arm_cfft_radix8by4_f32+0x184>
 80065aa:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80065ac:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80065ae:	00cb      	lsls	r3, r1, #3
 80065b0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80065b4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80065b8:	9122      	str	r1, [sp, #136]	@ 0x88
 80065ba:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80065bc:	4419      	add	r1, r3
 80065be:	911d      	str	r1, [sp, #116]	@ 0x74
 80065c0:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80065c2:	4419      	add	r1, r3
 80065c4:	9121      	str	r1, [sp, #132]	@ 0x84
 80065c6:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 80065c8:	4419      	add	r1, r3
 80065ca:	911f      	str	r1, [sp, #124]	@ 0x7c
 80065cc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80065ce:	4419      	add	r1, r3
 80065d0:	911e      	str	r1, [sp, #120]	@ 0x78
 80065d2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80065d4:	4419      	add	r1, r3
 80065d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065d8:	911c      	str	r1, [sp, #112]	@ 0x70
 80065da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065de:	9320      	str	r3, [sp, #128]	@ 0x80
 80065e0:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 80065e2:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 80065e4:	6834      	ldr	r4, [r6, #0]
 80065e6:	683d      	ldr	r5, [r7, #0]
 80065e8:	4620      	mov	r0, r4
 80065ea:	4629      	mov	r1, r5
 80065ec:	f7fa fae2 	bl	8000bb4 <__addsf3>
 80065f0:	4629      	mov	r1, r5
 80065f2:	4681      	mov	r9, r0
 80065f4:	4620      	mov	r0, r4
 80065f6:	f7fa fadb 	bl	8000bb0 <__aeabi_fsub>
 80065fa:	6874      	ldr	r4, [r6, #4]
 80065fc:	687d      	ldr	r5, [r7, #4]
 80065fe:	4683      	mov	fp, r0
 8006600:	4629      	mov	r1, r5
 8006602:	4620      	mov	r0, r4
 8006604:	961d      	str	r6, [sp, #116]	@ 0x74
 8006606:	971e      	str	r7, [sp, #120]	@ 0x78
 8006608:	f7fa fad4 	bl	8000bb4 <__addsf3>
 800660c:	4629      	mov	r1, r5
 800660e:	4680      	mov	r8, r0
 8006610:	4620      	mov	r0, r4
 8006612:	f7fa facd 	bl	8000bb0 <__aeabi_fsub>
 8006616:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 8006618:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800661a:	6867      	ldr	r7, [r4, #4]
 800661c:	685e      	ldr	r6, [r3, #4]
 800661e:	4682      	mov	sl, r0
 8006620:	4639      	mov	r1, r7
 8006622:	4658      	mov	r0, fp
 8006624:	f7fa fac6 	bl	8000bb4 <__addsf3>
 8006628:	4631      	mov	r1, r6
 800662a:	f7fa fac1 	bl	8000bb0 <__aeabi_fsub>
 800662e:	6825      	ldr	r5, [r4, #0]
 8006630:	941f      	str	r4, [sp, #124]	@ 0x7c
 8006632:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8006634:	9000      	str	r0, [sp, #0]
 8006636:	6824      	ldr	r4, [r4, #0]
 8006638:	4629      	mov	r1, r5
 800663a:	4650      	mov	r0, sl
 800663c:	f7fa fab8 	bl	8000bb0 <__aeabi_fsub>
 8006640:	4621      	mov	r1, r4
 8006642:	f7fa fab7 	bl	8000bb4 <__addsf3>
 8006646:	4629      	mov	r1, r5
 8006648:	9001      	str	r0, [sp, #4]
 800664a:	4648      	mov	r0, r9
 800664c:	f7fa fab0 	bl	8000bb0 <__aeabi_fsub>
 8006650:	4621      	mov	r1, r4
 8006652:	f7fa faad 	bl	8000bb0 <__aeabi_fsub>
 8006656:	4639      	mov	r1, r7
 8006658:	9002      	str	r0, [sp, #8]
 800665a:	4640      	mov	r0, r8
 800665c:	f7fa faa8 	bl	8000bb0 <__aeabi_fsub>
 8006660:	4631      	mov	r1, r6
 8006662:	f7fa faa5 	bl	8000bb0 <__aeabi_fsub>
 8006666:	4639      	mov	r1, r7
 8006668:	9003      	str	r0, [sp, #12]
 800666a:	4658      	mov	r0, fp
 800666c:	f7fa faa0 	bl	8000bb0 <__aeabi_fsub>
 8006670:	4631      	mov	r1, r6
 8006672:	f7fa fa9f 	bl	8000bb4 <__addsf3>
 8006676:	4629      	mov	r1, r5
 8006678:	4606      	mov	r6, r0
 800667a:	4650      	mov	r0, sl
 800667c:	f7fa fa9a 	bl	8000bb4 <__addsf3>
 8006680:	4621      	mov	r1, r4
 8006682:	f7fa fa95 	bl	8000bb0 <__aeabi_fsub>
 8006686:	4629      	mov	r1, r5
 8006688:	4682      	mov	sl, r0
 800668a:	4648      	mov	r0, r9
 800668c:	f7fa fa92 	bl	8000bb4 <__addsf3>
 8006690:	4621      	mov	r1, r4
 8006692:	f7fa fa8f 	bl	8000bb4 <__addsf3>
 8006696:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8006698:	6028      	str	r0, [r5, #0]
 800669a:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 800669c:	4640      	mov	r0, r8
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	f7fa fa88 	bl	8000bb4 <__addsf3>
 80066a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80066a6:	6851      	ldr	r1, [r2, #4]
 80066a8:	f7fa fa84 	bl	8000bb4 <__addsf3>
 80066ac:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 80066ae:	6068      	str	r0, [r5, #4]
 80066b0:	6825      	ldr	r5, [r4, #0]
 80066b2:	f8dd 9000 	ldr.w	r9, [sp]
 80066b6:	4629      	mov	r1, r5
 80066b8:	4648      	mov	r0, r9
 80066ba:	f7fa fb83 	bl	8000dc4 <__aeabi_fmul>
 80066be:	6864      	ldr	r4, [r4, #4]
 80066c0:	f8dd b004 	ldr.w	fp, [sp, #4]
 80066c4:	4680      	mov	r8, r0
 80066c6:	4621      	mov	r1, r4
 80066c8:	4658      	mov	r0, fp
 80066ca:	f7fa fb7b 	bl	8000dc4 <__aeabi_fmul>
 80066ce:	4601      	mov	r1, r0
 80066d0:	4640      	mov	r0, r8
 80066d2:	f7fa fa6f 	bl	8000bb4 <__addsf3>
 80066d6:	4629      	mov	r1, r5
 80066d8:	6038      	str	r0, [r7, #0]
 80066da:	4658      	mov	r0, fp
 80066dc:	f7fa fb72 	bl	8000dc4 <__aeabi_fmul>
 80066e0:	4621      	mov	r1, r4
 80066e2:	4605      	mov	r5, r0
 80066e4:	4648      	mov	r0, r9
 80066e6:	f7fa fb6d 	bl	8000dc4 <__aeabi_fmul>
 80066ea:	4601      	mov	r1, r0
 80066ec:	4628      	mov	r0, r5
 80066ee:	f7fa fa5f 	bl	8000bb0 <__aeabi_fsub>
 80066f2:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	6825      	ldr	r5, [r4, #0]
 80066f8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80066fc:	4629      	mov	r1, r5
 80066fe:	4648      	mov	r0, r9
 8006700:	f7fa fb60 	bl	8000dc4 <__aeabi_fmul>
 8006704:	6864      	ldr	r4, [r4, #4]
 8006706:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800670a:	4607      	mov	r7, r0
 800670c:	4621      	mov	r1, r4
 800670e:	4640      	mov	r0, r8
 8006710:	f7fa fb58 	bl	8000dc4 <__aeabi_fmul>
 8006714:	4601      	mov	r1, r0
 8006716:	4638      	mov	r0, r7
 8006718:	f7fa fa4c 	bl	8000bb4 <__addsf3>
 800671c:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 800671e:	4629      	mov	r1, r5
 8006720:	6038      	str	r0, [r7, #0]
 8006722:	4640      	mov	r0, r8
 8006724:	f7fa fb4e 	bl	8000dc4 <__aeabi_fmul>
 8006728:	4621      	mov	r1, r4
 800672a:	4605      	mov	r5, r0
 800672c:	4648      	mov	r0, r9
 800672e:	f7fa fb49 	bl	8000dc4 <__aeabi_fmul>
 8006732:	4601      	mov	r1, r0
 8006734:	4628      	mov	r0, r5
 8006736:	f7fa fa3b 	bl	8000bb0 <__aeabi_fsub>
 800673a:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	680d      	ldr	r5, [r1, #0]
 8006740:	4630      	mov	r0, r6
 8006742:	684c      	ldr	r4, [r1, #4]
 8006744:	4629      	mov	r1, r5
 8006746:	f7fa fb3d 	bl	8000dc4 <__aeabi_fmul>
 800674a:	4621      	mov	r1, r4
 800674c:	4607      	mov	r7, r0
 800674e:	4650      	mov	r0, sl
 8006750:	f7fa fb38 	bl	8000dc4 <__aeabi_fmul>
 8006754:	4601      	mov	r1, r0
 8006756:	4638      	mov	r0, r7
 8006758:	f7fa fa2c 	bl	8000bb4 <__addsf3>
 800675c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 800675e:	4629      	mov	r1, r5
 8006760:	6038      	str	r0, [r7, #0]
 8006762:	4650      	mov	r0, sl
 8006764:	f7fa fb2e 	bl	8000dc4 <__aeabi_fmul>
 8006768:	4621      	mov	r1, r4
 800676a:	4605      	mov	r5, r0
 800676c:	4630      	mov	r0, r6
 800676e:	f7fa fb29 	bl	8000dc4 <__aeabi_fmul>
 8006772:	4601      	mov	r1, r0
 8006774:	4628      	mov	r0, r5
 8006776:	f7fa fa1b 	bl	8000bb0 <__aeabi_fsub>
 800677a:	f8bd 4090 	ldrh.w	r4, [sp, #144]	@ 0x90
 800677e:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6872      	ldr	r2, [r6, #4]
 8006784:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8006786:	4621      	mov	r1, r4
 8006788:	2304      	movs	r3, #4
 800678a:	f000 f8d7 	bl	800693c <arm_radix8_butterfly_f32>
 800678e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8006790:	4621      	mov	r1, r4
 8006792:	6872      	ldr	r2, [r6, #4]
 8006794:	2304      	movs	r3, #4
 8006796:	f000 f8d1 	bl	800693c <arm_radix8_butterfly_f32>
 800679a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 800679c:	4621      	mov	r1, r4
 800679e:	6872      	ldr	r2, [r6, #4]
 80067a0:	2304      	movs	r3, #4
 80067a2:	f000 f8cb 	bl	800693c <arm_radix8_butterfly_f32>
 80067a6:	4621      	mov	r1, r4
 80067a8:	6872      	ldr	r2, [r6, #4]
 80067aa:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80067ac:	2304      	movs	r3, #4
 80067ae:	b027      	add	sp, #156	@ 0x9c
 80067b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b4:	f000 b8c2 	b.w	800693c <arm_radix8_butterfly_f32>

080067b8 <arm_cfft_f32>:
 80067b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067bc:	2a01      	cmp	r2, #1
 80067be:	4606      	mov	r6, r0
 80067c0:	4617      	mov	r7, r2
 80067c2:	460c      	mov	r4, r1
 80067c4:	4698      	mov	r8, r3
 80067c6:	8805      	ldrh	r5, [r0, #0]
 80067c8:	d058      	beq.n	800687c <arm_cfft_f32+0xc4>
 80067ca:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80067ce:	d050      	beq.n	8006872 <arm_cfft_f32+0xba>
 80067d0:	d916      	bls.n	8006800 <arm_cfft_f32+0x48>
 80067d2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80067d6:	d01a      	beq.n	800680e <arm_cfft_f32+0x56>
 80067d8:	d960      	bls.n	800689c <arm_cfft_f32+0xe4>
 80067da:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80067de:	d048      	beq.n	8006872 <arm_cfft_f32+0xba>
 80067e0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80067e4:	d105      	bne.n	80067f2 <arm_cfft_f32+0x3a>
 80067e6:	2301      	movs	r3, #1
 80067e8:	6872      	ldr	r2, [r6, #4]
 80067ea:	4629      	mov	r1, r5
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 f8a5 	bl	800693c <arm_radix8_butterfly_f32>
 80067f2:	f1b8 0f00 	cmp.w	r8, #0
 80067f6:	d111      	bne.n	800681c <arm_cfft_f32+0x64>
 80067f8:	2f01      	cmp	r7, #1
 80067fa:	d016      	beq.n	800682a <arm_cfft_f32+0x72>
 80067fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006800:	2d20      	cmp	r5, #32
 8006802:	d036      	beq.n	8006872 <arm_cfft_f32+0xba>
 8006804:	d94e      	bls.n	80068a4 <arm_cfft_f32+0xec>
 8006806:	2d40      	cmp	r5, #64	@ 0x40
 8006808:	d0ed      	beq.n	80067e6 <arm_cfft_f32+0x2e>
 800680a:	2d80      	cmp	r5, #128	@ 0x80
 800680c:	d1f1      	bne.n	80067f2 <arm_cfft_f32+0x3a>
 800680e:	4621      	mov	r1, r4
 8006810:	4630      	mov	r0, r6
 8006812:	f7ff fae5 	bl	8005de0 <arm_cfft_radix8by2_f32>
 8006816:	f1b8 0f00 	cmp.w	r8, #0
 800681a:	d0ed      	beq.n	80067f8 <arm_cfft_f32+0x40>
 800681c:	68b2      	ldr	r2, [r6, #8]
 800681e:	89b1      	ldrh	r1, [r6, #12]
 8006820:	4620      	mov	r0, r4
 8006822:	f7f9 fd01 	bl	8000228 <arm_bitreversal_32>
 8006826:	2f01      	cmp	r7, #1
 8006828:	d1e8      	bne.n	80067fc <arm_cfft_f32+0x44>
 800682a:	4628      	mov	r0, r5
 800682c:	f7fa fa72 	bl	8000d14 <__aeabi_ui2f>
 8006830:	4601      	mov	r1, r0
 8006832:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006836:	f7fa fb79 	bl	8000f2c <__aeabi_fdiv>
 800683a:	4607      	mov	r7, r0
 800683c:	2d00      	cmp	r5, #0
 800683e:	d0dd      	beq.n	80067fc <arm_cfft_f32+0x44>
 8006840:	3408      	adds	r4, #8
 8006842:	2600      	movs	r6, #0
 8006844:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8006848:	4639      	mov	r1, r7
 800684a:	f7fa fabb 	bl	8000dc4 <__aeabi_fmul>
 800684e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006852:	f844 0c08 	str.w	r0, [r4, #-8]
 8006856:	4639      	mov	r1, r7
 8006858:	f103 4000 	add.w	r0, r3, #2147483648	@ 0x80000000
 800685c:	f7fa fab2 	bl	8000dc4 <__aeabi_fmul>
 8006860:	3601      	adds	r6, #1
 8006862:	42b5      	cmp	r5, r6
 8006864:	f844 0c04 	str.w	r0, [r4, #-4]
 8006868:	f104 0408 	add.w	r4, r4, #8
 800686c:	d1ea      	bne.n	8006844 <arm_cfft_f32+0x8c>
 800686e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006872:	4621      	mov	r1, r4
 8006874:	4630      	mov	r0, r6
 8006876:	f7ff fc07 	bl	8006088 <arm_cfft_radix8by4_f32>
 800687a:	e7ba      	b.n	80067f2 <arm_cfft_f32+0x3a>
 800687c:	b1ad      	cbz	r5, 80068aa <arm_cfft_f32+0xf2>
 800687e:	f101 030c 	add.w	r3, r1, #12
 8006882:	2100      	movs	r1, #0
 8006884:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8006888:	3101      	adds	r1, #1
 800688a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800688e:	428d      	cmp	r5, r1
 8006890:	f843 2c08 	str.w	r2, [r3, #-8]
 8006894:	f103 0308 	add.w	r3, r3, #8
 8006898:	d1f4      	bne.n	8006884 <arm_cfft_f32+0xcc>
 800689a:	e796      	b.n	80067ca <arm_cfft_f32+0x12>
 800689c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80068a0:	d0a1      	beq.n	80067e6 <arm_cfft_f32+0x2e>
 80068a2:	e7a6      	b.n	80067f2 <arm_cfft_f32+0x3a>
 80068a4:	2d10      	cmp	r5, #16
 80068a6:	d0b2      	beq.n	800680e <arm_cfft_f32+0x56>
 80068a8:	e7a3      	b.n	80067f2 <arm_cfft_f32+0x3a>
 80068aa:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80068ae:	d890      	bhi.n	80067d2 <arm_cfft_f32+0x1a>
 80068b0:	e7a6      	b.n	8006800 <arm_cfft_f32+0x48>
 80068b2:	bf00      	nop

080068b4 <arm_cos_f32>:
 80068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b6:	491f      	ldr	r1, [pc, #124]	@ (8006934 <arm_cos_f32+0x80>)
 80068b8:	f7fa fa84 	bl	8000dc4 <__aeabi_fmul>
 80068bc:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 80068c0:	f7fa f978 	bl	8000bb4 <__addsf3>
 80068c4:	4604      	mov	r4, r0
 80068c6:	f7fa fc59 	bl	800117c <__aeabi_f2iz>
 80068ca:	2100      	movs	r1, #0
 80068cc:	4605      	mov	r5, r0
 80068ce:	4620      	mov	r0, r4
 80068d0:	f7fa fc16 	bl	8001100 <__aeabi_fcmplt>
 80068d4:	b100      	cbz	r0, 80068d8 <arm_cos_f32+0x24>
 80068d6:	3d01      	subs	r5, #1
 80068d8:	4628      	mov	r0, r5
 80068da:	f7fa fa1f 	bl	8000d1c <__aeabi_i2f>
 80068de:	4601      	mov	r1, r0
 80068e0:	4620      	mov	r0, r4
 80068e2:	f7fa f965 	bl	8000bb0 <__aeabi_fsub>
 80068e6:	f04f 4188 	mov.w	r1, #1140850688	@ 0x44000000
 80068ea:	f7fa fa6b 	bl	8000dc4 <__aeabi_fmul>
 80068ee:	4605      	mov	r5, r0
 80068f0:	f7fa fc6a 	bl	80011c8 <__aeabi_f2uiz>
 80068f4:	f3c0 0408 	ubfx	r4, r0, #0, #9
 80068f8:	4620      	mov	r0, r4
 80068fa:	f7fa fa0b 	bl	8000d14 <__aeabi_ui2f>
 80068fe:	4601      	mov	r1, r0
 8006900:	4628      	mov	r0, r5
 8006902:	f7fa f955 	bl	8000bb0 <__aeabi_fsub>
 8006906:	4e0c      	ldr	r6, [pc, #48]	@ (8006938 <arm_cos_f32+0x84>)
 8006908:	4605      	mov	r5, r0
 800690a:	4601      	mov	r1, r0
 800690c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006910:	f7fa f94e 	bl	8000bb0 <__aeabi_fsub>
 8006914:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8006918:	f7fa fa54 	bl	8000dc4 <__aeabi_fmul>
 800691c:	3401      	adds	r4, #1
 800691e:	4607      	mov	r7, r0
 8006920:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8006924:	4628      	mov	r0, r5
 8006926:	f7fa fa4d 	bl	8000dc4 <__aeabi_fmul>
 800692a:	4601      	mov	r1, r0
 800692c:	4638      	mov	r0, r7
 800692e:	f7fa f941 	bl	8000bb4 <__addsf3>
 8006932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006934:	3e22f983 	.word	0x3e22f983
 8006938:	08015f6c 	.word	0x08015f6c

0800693c <arm_radix8_butterfly_f32>:
 800693c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006940:	b0b9      	sub	sp, #228	@ 0xe4
 8006942:	9314      	str	r3, [sp, #80]	@ 0x50
 8006944:	4605      	mov	r5, r0
 8006946:	460b      	mov	r3, r1
 8006948:	9118      	str	r1, [sp, #96]	@ 0x60
 800694a:	902b      	str	r0, [sp, #172]	@ 0xac
 800694c:	9237      	str	r2, [sp, #220]	@ 0xdc
 800694e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8006950:	08db      	lsrs	r3, r3, #3
 8006952:	00d9      	lsls	r1, r3, #3
 8006954:	460e      	mov	r6, r1
 8006956:	9116      	str	r1, [sp, #88]	@ 0x58
 8006958:	4629      	mov	r1, r5
 800695a:	461f      	mov	r7, r3
 800695c:	4431      	add	r1, r6
 800695e:	9112      	str	r1, [sp, #72]	@ 0x48
 8006960:	005a      	lsls	r2, r3, #1
 8006962:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006964:	9215      	str	r2, [sp, #84]	@ 0x54
 8006966:	441a      	add	r2, r3
 8006968:	1986      	adds	r6, r0, r6
 800696a:	9323      	str	r3, [sp, #140]	@ 0x8c
 800696c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8006970:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8006974:	960a      	str	r6, [sp, #40]	@ 0x28
 8006976:	1d16      	adds	r6, r2, #4
 8006978:	46b3      	mov	fp, r6
 800697a:	ebc7 7147 	rsb	r1, r7, r7, lsl #29
 800697e:	eb03 0447 	add.w	r4, r3, r7, lsl #1
 8006982:	00c9      	lsls	r1, r1, #3
 8006984:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8006988:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800698a:	1d1a      	adds	r2, r3, #4
 800698c:	9103      	str	r1, [sp, #12]
 800698e:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006992:	9202      	str	r2, [sp, #8]
 8006994:	9c03      	ldr	r4, [sp, #12]
 8006996:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006998:	eba7 0087 	sub.w	r0, r7, r7, lsl #2
 800699c:	4422      	add	r2, r4
 800699e:	ebc7 7107 	rsb	r1, r7, r7, lsl #28
 80069a2:	9213      	str	r2, [sp, #76]	@ 0x4c
 80069a4:	00c2      	lsls	r2, r0, #3
 80069a6:	9204      	str	r2, [sp, #16]
 80069a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80069aa:	010a      	lsls	r2, r1, #4
 80069ac:	9507      	str	r5, [sp, #28]
 80069ae:	9206      	str	r2, [sp, #24]
 80069b0:	013a      	lsls	r2, r7, #4
 80069b2:	9205      	str	r2, [sp, #20]
 80069b4:	00db      	lsls	r3, r3, #3
 80069b6:	2200      	movs	r2, #0
 80069b8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80069bc:	9330      	str	r3, [sp, #192]	@ 0xc0
 80069be:	9201      	str	r2, [sp, #4]
 80069c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80069c2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80069c4:	9f01      	ldr	r7, [sp, #4]
 80069c6:	461a      	mov	r2, r3
 80069c8:	9b04      	ldr	r3, [sp, #16]
 80069ca:	f852 5037 	ldr.w	r5, [r2, r7, lsl #3]
 80069ce:	f85a 6003 	ldr.w	r6, [sl, r3]
 80069d2:	4628      	mov	r0, r5
 80069d4:	4631      	mov	r1, r6
 80069d6:	f7fa f8ed 	bl	8000bb4 <__addsf3>
 80069da:	4631      	mov	r1, r6
 80069dc:	4604      	mov	r4, r0
 80069de:	4628      	mov	r0, r5
 80069e0:	f7fa f8e6 	bl	8000bb0 <__aeabi_fsub>
 80069e4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80069e6:	9b02      	ldr	r3, [sp, #8]
 80069e8:	4611      	mov	r1, r2
 80069ea:	9701      	str	r7, [sp, #4]
 80069ec:	f851 6037 	ldr.w	r6, [r1, r7, lsl #3]
 80069f0:	f853 7c04 	ldr.w	r7, [r3, #-4]
 80069f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80069f6:	4639      	mov	r1, r7
 80069f8:	4630      	mov	r0, r6
 80069fa:	f7fa f8db 	bl	8000bb4 <__addsf3>
 80069fe:	4639      	mov	r1, r7
 8006a00:	4605      	mov	r5, r0
 8006a02:	4630      	mov	r0, r6
 8006a04:	f7fa f8d4 	bl	8000bb0 <__aeabi_fsub>
 8006a08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a0a:	9f03      	ldr	r7, [sp, #12]
 8006a0c:	468e      	mov	lr, r1
 8006a0e:	9901      	ldr	r1, [sp, #4]
 8006a10:	f85a 8007 	ldr.w	r8, [sl, r7]
 8006a14:	f85e 6031 	ldr.w	r6, [lr, r1, lsl #3]
 8006a18:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006a1a:	4641      	mov	r1, r8
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f7fa f8c9 	bl	8000bb4 <__addsf3>
 8006a22:	4641      	mov	r1, r8
 8006a24:	4607      	mov	r7, r0
 8006a26:	4630      	mov	r0, r6
 8006a28:	f7fa f8c2 	bl	8000bb0 <__aeabi_fsub>
 8006a2c:	f85b 8c04 	ldr.w	r8, [fp, #-4]
 8006a30:	f8da 9000 	ldr.w	r9, [sl]
 8006a34:	900c      	str	r0, [sp, #48]	@ 0x30
 8006a36:	4649      	mov	r1, r9
 8006a38:	4640      	mov	r0, r8
 8006a3a:	f7fa f8bb 	bl	8000bb4 <__addsf3>
 8006a3e:	4649      	mov	r1, r9
 8006a40:	4606      	mov	r6, r0
 8006a42:	4640      	mov	r0, r8
 8006a44:	f7fa f8b4 	bl	8000bb0 <__aeabi_fsub>
 8006a48:	4639      	mov	r1, r7
 8006a4a:	900d      	str	r0, [sp, #52]	@ 0x34
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f7fa f8af 	bl	8000bb0 <__aeabi_fsub>
 8006a52:	4639      	mov	r1, r7
 8006a54:	900e      	str	r0, [sp, #56]	@ 0x38
 8006a56:	4620      	mov	r0, r4
 8006a58:	f7fa f8ac 	bl	8000bb4 <__addsf3>
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4604      	mov	r4, r0
 8006a60:	4628      	mov	r0, r5
 8006a62:	f7fa f8a5 	bl	8000bb0 <__aeabi_fsub>
 8006a66:	4631      	mov	r1, r6
 8006a68:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f7fa f8a2 	bl	8000bb4 <__addsf3>
 8006a70:	4605      	mov	r5, r0
 8006a72:	4601      	mov	r1, r0
 8006a74:	4620      	mov	r0, r4
 8006a76:	f7fa f89d 	bl	8000bb4 <__addsf3>
 8006a7a:	9b01      	ldr	r3, [sp, #4]
 8006a7c:	9e2b      	ldr	r6, [sp, #172]	@ 0xac
 8006a7e:	4629      	mov	r1, r5
 8006a80:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
 8006a84:	4620      	mov	r0, r4
 8006a86:	f7fa f893 	bl	8000bb0 <__aeabi_fsub>
 8006a8a:	9d04      	ldr	r5, [sp, #16]
 8006a8c:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8006a8e:	f84a 0005 	str.w	r0, [sl, r5]
 8006a92:	f85b 4005 	ldr.w	r4, [fp, r5]
 8006a96:	f85b 5031 	ldr.w	r5, [fp, r1, lsl #3]
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	f7fa f889 	bl	8000bb4 <__addsf3>
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f7fa f882 	bl	8000bb0 <__aeabi_fsub>
 8006aac:	9e05      	ldr	r6, [sp, #20]
 8006aae:	9c06      	ldr	r4, [sp, #24]
 8006ab0:	f85b 5006 	ldr.w	r5, [fp, r6]
 8006ab4:	f85b 4004 	ldr.w	r4, [fp, r4]
 8006ab8:	4629      	mov	r1, r5
 8006aba:	9010      	str	r0, [sp, #64]	@ 0x40
 8006abc:	4620      	mov	r0, r4
 8006abe:	f7fa f879 	bl	8000bb4 <__addsf3>
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	4681      	mov	r9, r0
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f7fa f872 	bl	8000bb0 <__aeabi_fsub>
 8006acc:	9a02      	ldr	r2, [sp, #8]
 8006ace:	9e03      	ldr	r6, [sp, #12]
 8006ad0:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8006ad2:	f85b 5006 	ldr.w	r5, [fp, r6]
 8006ad6:	f852 6031 	ldr.w	r6, [r2, r1, lsl #3]
 8006ada:	4604      	mov	r4, r0
 8006adc:	4631      	mov	r1, r6
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f7fa f868 	bl	8000bb4 <__addsf3>
 8006ae4:	4631      	mov	r1, r6
 8006ae6:	4680      	mov	r8, r0
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f7fa f861 	bl	8000bb0 <__aeabi_fsub>
 8006aee:	9e06      	ldr	r6, [sp, #24]
 8006af0:	9d02      	ldr	r5, [sp, #8]
 8006af2:	9007      	str	r0, [sp, #28]
 8006af4:	59ad      	ldr	r5, [r5, r6]
 8006af6:	f8da 6004 	ldr.w	r6, [sl, #4]
 8006afa:	4628      	mov	r0, r5
 8006afc:	4631      	mov	r1, r6
 8006afe:	f7fa f859 	bl	8000bb4 <__addsf3>
 8006b02:	4631      	mov	r1, r6
 8006b04:	9008      	str	r0, [sp, #32]
 8006b06:	4628      	mov	r0, r5
 8006b08:	f7fa f852 	bl	8000bb0 <__aeabi_fsub>
 8006b0c:	4641      	mov	r1, r8
 8006b0e:	4606      	mov	r6, r0
 8006b10:	4638      	mov	r0, r7
 8006b12:	f7fa f84d 	bl	8000bb0 <__aeabi_fsub>
 8006b16:	4641      	mov	r1, r8
 8006b18:	4605      	mov	r5, r0
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	f7fa f84a 	bl	8000bb4 <__addsf3>
 8006b20:	9908      	ldr	r1, [sp, #32]
 8006b22:	4680      	mov	r8, r0
 8006b24:	4648      	mov	r0, r9
 8006b26:	f7fa f843 	bl	8000bb0 <__aeabi_fsub>
 8006b2a:	9908      	ldr	r1, [sp, #32]
 8006b2c:	4607      	mov	r7, r0
 8006b2e:	4648      	mov	r0, r9
 8006b30:	f7fa f840 	bl	8000bb4 <__addsf3>
 8006b34:	4681      	mov	r9, r0
 8006b36:	4601      	mov	r1, r0
 8006b38:	4640      	mov	r0, r8
 8006b3a:	f7fa f83b 	bl	8000bb4 <__addsf3>
 8006b3e:	9a04      	ldr	r2, [sp, #16]
 8006b40:	4649      	mov	r1, r9
 8006b42:	f84b 0002 	str.w	r0, [fp, r2]
 8006b46:	4640      	mov	r0, r8
 8006b48:	f7fa f832 	bl	8000bb0 <__aeabi_fsub>
 8006b4c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b4e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 8006b52:	f84b 0032 	str.w	r0, [fp, r2, lsl #3]
 8006b56:	4639      	mov	r1, r7
 8006b58:	4640      	mov	r0, r8
 8006b5a:	f7fa f82b 	bl	8000bb4 <__addsf3>
 8006b5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b60:	9a01      	ldr	r2, [sp, #4]
 8006b62:	469e      	mov	lr, r3
 8006b64:	4639      	mov	r1, r7
 8006b66:	f84e 0032 	str.w	r0, [lr, r2, lsl #3]
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	f7fa f820 	bl	8000bb0 <__aeabi_fsub>
 8006b70:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 8006b74:	9f03      	ldr	r7, [sp, #12]
 8006b76:	4641      	mov	r1, r8
 8006b78:	f84a 0007 	str.w	r0, [sl, r7]
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f7fa f817 	bl	8000bb0 <__aeabi_fsub>
 8006b82:	9f03      	ldr	r7, [sp, #12]
 8006b84:	4629      	mov	r1, r5
 8006b86:	f84b 0007 	str.w	r0, [fp, r7]
 8006b8a:	4640      	mov	r0, r8
 8006b8c:	f7fa f812 	bl	8000bb4 <__addsf3>
 8006b90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b92:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006b94:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 8006b98:	9f02      	ldr	r7, [sp, #8]
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	f847 0032 	str.w	r0, [r7, r2, lsl #3]
 8006ba0:	4640      	mov	r0, r8
 8006ba2:	f7fa f805 	bl	8000bb0 <__aeabi_fsub>
 8006ba6:	4986      	ldr	r1, [pc, #536]	@ (8006dc0 <arm_radix8_butterfly_f32+0x484>)
 8006ba8:	f7fa f90c 	bl	8000dc4 <__aeabi_fmul>
 8006bac:	4629      	mov	r1, r5
 8006bae:	4681      	mov	r9, r0
 8006bb0:	4640      	mov	r0, r8
 8006bb2:	f7f9 ffff 	bl	8000bb4 <__addsf3>
 8006bb6:	4982      	ldr	r1, [pc, #520]	@ (8006dc0 <arm_radix8_butterfly_f32+0x484>)
 8006bb8:	f7fa f904 	bl	8000dc4 <__aeabi_fmul>
 8006bbc:	4631      	mov	r1, r6
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f7f9 fff5 	bl	8000bb0 <__aeabi_fsub>
 8006bc6:	497e      	ldr	r1, [pc, #504]	@ (8006dc0 <arm_radix8_butterfly_f32+0x484>)
 8006bc8:	f7fa f8fc 	bl	8000dc4 <__aeabi_fmul>
 8006bcc:	4631      	mov	r1, r6
 8006bce:	4607      	mov	r7, r0
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f7f9 ffef 	bl	8000bb4 <__addsf3>
 8006bd6:	497a      	ldr	r1, [pc, #488]	@ (8006dc0 <arm_radix8_butterfly_f32+0x484>)
 8006bd8:	f7fa f8f4 	bl	8000dc4 <__aeabi_fmul>
 8006bdc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8006bde:	4649      	mov	r1, r9
 8006be0:	9008      	str	r0, [sp, #32]
 8006be2:	4620      	mov	r0, r4
 8006be4:	f7f9 ffe4 	bl	8000bb0 <__aeabi_fsub>
 8006be8:	4649      	mov	r1, r9
 8006bea:	4680      	mov	r8, r0
 8006bec:	4620      	mov	r0, r4
 8006bee:	f7f9 ffe1 	bl	8000bb4 <__addsf3>
 8006bf2:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	9009      	str	r0, [sp, #36]	@ 0x24
 8006bfa:	4648      	mov	r0, r9
 8006bfc:	f7f9 ffd8 	bl	8000bb0 <__aeabi_fsub>
 8006c00:	4629      	mov	r1, r5
 8006c02:	4604      	mov	r4, r0
 8006c04:	4648      	mov	r0, r9
 8006c06:	f7f9 ffd5 	bl	8000bb4 <__addsf3>
 8006c0a:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 8006c0e:	4606      	mov	r6, r0
 8006c10:	4639      	mov	r1, r7
 8006c12:	4648      	mov	r0, r9
 8006c14:	f7f9 ffcc 	bl	8000bb0 <__aeabi_fsub>
 8006c18:	4639      	mov	r1, r7
 8006c1a:	4605      	mov	r5, r0
 8006c1c:	4648      	mov	r0, r9
 8006c1e:	f7f9 ffc9 	bl	8000bb4 <__addsf3>
 8006c22:	9908      	ldr	r1, [sp, #32]
 8006c24:	4607      	mov	r7, r0
 8006c26:	9807      	ldr	r0, [sp, #28]
 8006c28:	f7f9 ffc2 	bl	8000bb0 <__aeabi_fsub>
 8006c2c:	9908      	ldr	r1, [sp, #32]
 8006c2e:	4681      	mov	r9, r0
 8006c30:	9807      	ldr	r0, [sp, #28]
 8006c32:	f7f9 ffbf 	bl	8000bb4 <__addsf3>
 8006c36:	4601      	mov	r1, r0
 8006c38:	9007      	str	r0, [sp, #28]
 8006c3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c3c:	f7f9 ffba 	bl	8000bb4 <__addsf3>
 8006c40:	9a07      	ldr	r2, [sp, #28]
 8006c42:	9b01      	ldr	r3, [sp, #4]
 8006c44:	4611      	mov	r1, r2
 8006c46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006c48:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
 8006c4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c4e:	f7f9 ffaf 	bl	8000bb0 <__aeabi_fsub>
 8006c52:	4649      	mov	r1, r9
 8006c54:	f8ca 0000 	str.w	r0, [sl]
 8006c58:	4640      	mov	r0, r8
 8006c5a:	f7f9 ffab 	bl	8000bb4 <__addsf3>
 8006c5e:	9a02      	ldr	r2, [sp, #8]
 8006c60:	4649      	mov	r1, r9
 8006c62:	f842 0c04 	str.w	r0, [r2, #-4]
 8006c66:	4640      	mov	r0, r8
 8006c68:	f7f9 ffa2 	bl	8000bb0 <__aeabi_fsub>
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	f84b 0c04 	str.w	r0, [fp, #-4]
 8006c72:	4638      	mov	r0, r7
 8006c74:	f7f9 ff9c 	bl	8000bb0 <__aeabi_fsub>
 8006c78:	4639      	mov	r1, r7
 8006c7a:	9f06      	ldr	r7, [sp, #24]
 8006c7c:	f84b 0007 	str.w	r0, [fp, r7]
 8006c80:	4630      	mov	r0, r6
 8006c82:	f7f9 ff97 	bl	8000bb4 <__addsf3>
 8006c86:	4621      	mov	r1, r4
 8006c88:	f8ca 0004 	str.w	r0, [sl, #4]
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f7f9 ff8f 	bl	8000bb0 <__aeabi_fsub>
 8006c92:	4629      	mov	r1, r5
 8006c94:	9d05      	ldr	r5, [sp, #20]
 8006c96:	f84b 0005 	str.w	r0, [fp, r5]
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f7f9 ff8a 	bl	8000bb4 <__addsf3>
 8006ca0:	9b01      	ldr	r3, [sp, #4]
 8006ca2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8006ca4:	9a02      	ldr	r2, [sp, #8]
 8006ca6:	440b      	add	r3, r1
 8006ca8:	461c      	mov	r4, r3
 8006caa:	9301      	str	r3, [sp, #4]
 8006cac:	9f06      	ldr	r7, [sp, #24]
 8006cae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006cb0:	51d0      	str	r0, [r2, r7]
 8006cb2:	441a      	add	r2, r3
 8006cb4:	9202      	str	r2, [sp, #8]
 8006cb6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8006cb8:	449a      	add	sl, r3
 8006cba:	4611      	mov	r1, r2
 8006cbc:	42a1      	cmp	r1, r4
 8006cbe:	449b      	add	fp, r3
 8006cc0:	f63f ae7e 	bhi.w	80069c0 <arm_radix8_butterfly_f32+0x84>
 8006cc4:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 8006cc6:	2c07      	cmp	r4, #7
 8006cc8:	f240 830b 	bls.w	80072e2 <arm_radix8_butterfly_f32+0x9a6>
 8006ccc:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8006cce:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 8006cd2:	00cb      	lsls	r3, r1, #3
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	460a      	mov	r2, r1
 8006cd8:	9336      	str	r3, [sp, #216]	@ 0xd8
 8006cda:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8006cdc:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 8006ce0:	4403      	add	r3, r0
 8006ce2:	187d      	adds	r5, r7, r1
 8006ce4:	1818      	adds	r0, r3, r0
 8006ce6:	902e      	str	r0, [sp, #184]	@ 0xb8
 8006ce8:	9026      	str	r0, [sp, #152]	@ 0x98
 8006cea:	1868      	adds	r0, r5, r1
 8006cec:	1841      	adds	r1, r0, r1
 8006cee:	eb01 0c02 	add.w	ip, r1, r2
 8006cf2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006cf4:	00c9      	lsls	r1, r1, #3
 8006cf6:	4616      	mov	r6, r2
 8006cf8:	4426      	add	r6, r4
 8006cfa:	4632      	mov	r2, r6
 8006cfc:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8006cfe:	912f      	str	r1, [sp, #188]	@ 0xbc
 8006d00:	ebc4 0e06 	rsb	lr, r4, r6
 8006d04:	ea4f 06cc 	mov.w	r6, ip, lsl #3
 8006d08:	4634      	mov	r4, r6
 8006d0a:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8006d0c:	9634      	str	r6, [sp, #208]	@ 0xd0
 8006d0e:	0116      	lsls	r6, r2, #4
 8006d10:	9608      	str	r6, [sp, #32]
 8006d12:	ea4f 06ce 	mov.w	r6, lr, lsl #3
 8006d16:	9607      	str	r6, [sp, #28]
 8006d18:	190e      	adds	r6, r1, r4
 8006d1a:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
 8006d1c:	00c0      	lsls	r0, r0, #3
 8006d1e:	00ed      	lsls	r5, r5, #3
 8006d20:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006d22:	f8dd 90ac 	ldr.w	r9, [sp, #172]	@ 0xac
 8006d26:	9035      	str	r0, [sp, #212]	@ 0xd4
 8006d28:	9624      	str	r6, [sp, #144]	@ 0x90
 8006d2a:	1808      	adds	r0, r1, r0
 8006d2c:	190e      	adds	r6, r1, r4
 8006d2e:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 8006d30:	9028      	str	r0, [sp, #160]	@ 0xa0
 8006d32:	1948      	adds	r0, r1, r5
 8006d34:	962a      	str	r6, [sp, #168]	@ 0xa8
 8006d36:	9029      	str	r0, [sp, #164]	@ 0xa4
 8006d38:	4646      	mov	r6, r8
 8006d3a:	0110      	lsls	r0, r2, #4
 8006d3c:	0162      	lsls	r2, r4, #5
 8006d3e:	464c      	mov	r4, r9
 8006d40:	00ff      	lsls	r7, r7, #3
 8006d42:	4439      	add	r1, r7
 8006d44:	9204      	str	r2, [sp, #16]
 8006d46:	2201      	movs	r2, #1
 8006d48:	9733      	str	r7, [sp, #204]	@ 0xcc
 8006d4a:	9532      	str	r5, [sp, #200]	@ 0xc8
 8006d4c:	9031      	str	r0, [sp, #196]	@ 0xc4
 8006d4e:	9127      	str	r1, [sp, #156]	@ 0x9c
 8006d50:	9225      	str	r2, [sp, #148]	@ 0x94
 8006d52:	f104 0208 	add.w	r2, r4, #8
 8006d56:	922d      	str	r2, [sp, #180]	@ 0xb4
 8006d58:	9201      	str	r2, [sp, #4]
 8006d5a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8006d5c:	f106 0108 	add.w	r1, r6, #8
 8006d60:	920a      	str	r2, [sp, #40]	@ 0x28
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006d68:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006d6a:	912c      	str	r1, [sp, #176]	@ 0xb0
 8006d6c:	9103      	str	r1, [sp, #12]
 8006d6e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d70:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8006d72:	6813      	ldr	r3, [r2, #0]
 8006d74:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8006d76:	9319      	str	r3, [sp, #100]	@ 0x64
 8006d78:	680b      	ldr	r3, [r1, #0]
 8006d7a:	9d28      	ldr	r5, [sp, #160]	@ 0xa0
 8006d7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d7e:	6803      	ldr	r3, [r0, #0]
 8006d80:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 8006d82:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	6852      	ldr	r2, [r2, #4]
 8006d88:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	921d      	str	r2, [sp, #116]	@ 0x74
 8006d8e:	931c      	str	r3, [sp, #112]	@ 0x70
 8006d90:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d92:	684a      	ldr	r2, [r1, #4]
 8006d94:	f8d3 e000 	ldr.w	lr, [r3]
 8006d98:	921e      	str	r2, [sp, #120]	@ 0x78
 8006d9a:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8006d9e:	6842      	ldr	r2, [r0, #4]
 8006da0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006da2:	921f      	str	r2, [sp, #124]	@ 0x7c
 8006da4:	686a      	ldr	r2, [r5, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	9220      	str	r2, [sp, #128]	@ 0x80
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	9322      	str	r3, [sp, #136]	@ 0x88
 8006dae:	f104 030c 	add.w	r3, r4, #12
 8006db2:	9221      	str	r2, [sp, #132]	@ 0x84
 8006db4:	9302      	str	r3, [sp, #8]
 8006db6:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 8006db8:	f106 030c 	add.w	r3, r6, #12
 8006dbc:	9306      	str	r3, [sp, #24]
 8006dbe:	e001      	b.n	8006dc4 <arm_radix8_butterfly_f32+0x488>
 8006dc0:	3f3504f3 	.word	0x3f3504f3
 8006dc4:	9b02      	ldr	r3, [sp, #8]
 8006dc6:	9f04      	ldr	r7, [sp, #16]
 8006dc8:	9216      	str	r2, [sp, #88]	@ 0x58
 8006dca:	9a01      	ldr	r2, [sp, #4]
 8006dcc:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8006dd0:	59d6      	ldr	r6, [r2, r7]
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	4631      	mov	r1, r6
 8006dd6:	f7f9 feed 	bl	8000bb4 <__addsf3>
 8006dda:	4631      	mov	r1, r6
 8006ddc:	4604      	mov	r4, r0
 8006dde:	4628      	mov	r0, r5
 8006de0:	f7f9 fee6 	bl	8000bb0 <__aeabi_fsub>
 8006de4:	9d06      	ldr	r5, [sp, #24]
 8006de6:	9903      	ldr	r1, [sp, #12]
 8006de8:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8006dec:	9704      	str	r7, [sp, #16]
 8006dee:	59cf      	ldr	r7, [r1, r7]
 8006df0:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006df2:	4639      	mov	r1, r7
 8006df4:	4630      	mov	r0, r6
 8006df6:	f7f9 fedd 	bl	8000bb4 <__addsf3>
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	4630      	mov	r0, r6
 8006e00:	f7f9 fed6 	bl	8000bb0 <__aeabi_fsub>
 8006e04:	9a01      	ldr	r2, [sp, #4]
 8006e06:	9e05      	ldr	r6, [sp, #20]
 8006e08:	9010      	str	r0, [sp, #64]	@ 0x40
 8006e0a:	5997      	ldr	r7, [r2, r6]
 8006e0c:	4616      	mov	r6, r2
 8006e0e:	9a08      	ldr	r2, [sp, #32]
 8006e10:	4638      	mov	r0, r7
 8006e12:	f856 8002 	ldr.w	r8, [r6, r2]
 8006e16:	4641      	mov	r1, r8
 8006e18:	f7f9 fecc 	bl	8000bb4 <__addsf3>
 8006e1c:	4641      	mov	r1, r8
 8006e1e:	4606      	mov	r6, r0
 8006e20:	4638      	mov	r0, r7
 8006e22:	f7f9 fec5 	bl	8000bb0 <__aeabi_fsub>
 8006e26:	9903      	ldr	r1, [sp, #12]
 8006e28:	9a01      	ldr	r2, [sp, #4]
 8006e2a:	468e      	mov	lr, r1
 8006e2c:	9b07      	ldr	r3, [sp, #28]
 8006e2e:	9905      	ldr	r1, [sp, #20]
 8006e30:	f852 9003 	ldr.w	r9, [r2, r3]
 8006e34:	f85e 8001 	ldr.w	r8, [lr, r1]
 8006e38:	9011      	str	r0, [sp, #68]	@ 0x44
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	f7f9 feb9 	bl	8000bb4 <__addsf3>
 8006e42:	4649      	mov	r1, r9
 8006e44:	4607      	mov	r7, r0
 8006e46:	4640      	mov	r0, r8
 8006e48:	f7f9 feb2 	bl	8000bb0 <__aeabi_fsub>
 8006e4c:	4631      	mov	r1, r6
 8006e4e:	9012      	str	r0, [sp, #72]	@ 0x48
 8006e50:	4620      	mov	r0, r4
 8006e52:	f7f9 fead 	bl	8000bb0 <__aeabi_fsub>
 8006e56:	4631      	mov	r1, r6
 8006e58:	4682      	mov	sl, r0
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f7f9 feaa 	bl	8000bb4 <__addsf3>
 8006e60:	4639      	mov	r1, r7
 8006e62:	4604      	mov	r4, r0
 8006e64:	4628      	mov	r0, r5
 8006e66:	f7f9 fea3 	bl	8000bb0 <__aeabi_fsub>
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	4628      	mov	r0, r5
 8006e70:	f7f9 fea0 	bl	8000bb4 <__addsf3>
 8006e74:	4605      	mov	r5, r0
 8006e76:	4601      	mov	r1, r0
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f7f9 fe9b 	bl	8000bb4 <__addsf3>
 8006e7e:	9f02      	ldr	r7, [sp, #8]
 8006e80:	4629      	mov	r1, r5
 8006e82:	f847 0c04 	str.w	r0, [r7, #-4]
 8006e86:	4620      	mov	r0, r4
 8006e88:	f7f9 fe92 	bl	8000bb0 <__aeabi_fsub>
 8006e8c:	4639      	mov	r1, r7
 8006e8e:	9b01      	ldr	r3, [sp, #4]
 8006e90:	9702      	str	r7, [sp, #8]
 8006e92:	9f04      	ldr	r7, [sp, #16]
 8006e94:	685c      	ldr	r4, [r3, #4]
 8006e96:	59cf      	ldr	r7, [r1, r7]
 8006e98:	4605      	mov	r5, r0
 8006e9a:	4639      	mov	r1, r7
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f7f9 fe89 	bl	8000bb4 <__addsf3>
 8006ea2:	4639      	mov	r1, r7
 8006ea4:	4680      	mov	r8, r0
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f7f9 fe82 	bl	8000bb0 <__aeabi_fsub>
 8006eac:	9c03      	ldr	r4, [sp, #12]
 8006eae:	9013      	str	r0, [sp, #76]	@ 0x4c
 8006eb0:	6867      	ldr	r7, [r4, #4]
 8006eb2:	9c06      	ldr	r4, [sp, #24]
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	46a6      	mov	lr, r4
 8006eb8:	9c04      	ldr	r4, [sp, #16]
 8006eba:	f85e 9004 	ldr.w	r9, [lr, r4]
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	f7f9 fe78 	bl	8000bb4 <__addsf3>
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	4638      	mov	r0, r7
 8006eca:	f7f9 fe71 	bl	8000bb0 <__aeabi_fsub>
 8006ece:	9b08      	ldr	r3, [sp, #32]
 8006ed0:	9902      	ldr	r1, [sp, #8]
 8006ed2:	9f05      	ldr	r7, [sp, #20]
 8006ed4:	f851 9003 	ldr.w	r9, [r1, r3]
 8006ed8:	59cf      	ldr	r7, [r1, r7]
 8006eda:	9014      	str	r0, [sp, #80]	@ 0x50
 8006edc:	4649      	mov	r1, r9
 8006ede:	4638      	mov	r0, r7
 8006ee0:	f7f9 fe68 	bl	8000bb4 <__addsf3>
 8006ee4:	4649      	mov	r1, r9
 8006ee6:	4683      	mov	fp, r0
 8006ee8:	4638      	mov	r0, r7
 8006eea:	f7f9 fe61 	bl	8000bb0 <__aeabi_fsub>
 8006eee:	9a07      	ldr	r2, [sp, #28]
 8006ef0:	9b06      	ldr	r3, [sp, #24]
 8006ef2:	9902      	ldr	r1, [sp, #8]
 8006ef4:	9f05      	ldr	r7, [sp, #20]
 8006ef6:	9009      	str	r0, [sp, #36]	@ 0x24
 8006ef8:	59df      	ldr	r7, [r3, r7]
 8006efa:	588b      	ldr	r3, [r1, r2]
 8006efc:	4638      	mov	r0, r7
 8006efe:	4619      	mov	r1, r3
 8006f00:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f02:	f7f9 fe57 	bl	8000bb4 <__addsf3>
 8006f06:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006f08:	4681      	mov	r9, r0
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	f7f9 fe4f 	bl	8000bb0 <__aeabi_fsub>
 8006f12:	4659      	mov	r1, fp
 8006f14:	9015      	str	r0, [sp, #84]	@ 0x54
 8006f16:	4640      	mov	r0, r8
 8006f18:	f7f9 fe4a 	bl	8000bb0 <__aeabi_fsub>
 8006f1c:	4659      	mov	r1, fp
 8006f1e:	4607      	mov	r7, r0
 8006f20:	4640      	mov	r0, r8
 8006f22:	f7f9 fe47 	bl	8000bb4 <__addsf3>
 8006f26:	4649      	mov	r1, r9
 8006f28:	4680      	mov	r8, r0
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f7f9 fe40 	bl	8000bb0 <__aeabi_fsub>
 8006f30:	4649      	mov	r1, r9
 8006f32:	4683      	mov	fp, r0
 8006f34:	4620      	mov	r0, r4
 8006f36:	f7f9 fe3d 	bl	8000bb4 <__addsf3>
 8006f3a:	4659      	mov	r1, fp
 8006f3c:	4681      	mov	r9, r0
 8006f3e:	4650      	mov	r0, sl
 8006f40:	f7f9 fe38 	bl	8000bb4 <__addsf3>
 8006f44:	4659      	mov	r1, fp
 8006f46:	4604      	mov	r4, r0
 8006f48:	4650      	mov	r0, sl
 8006f4a:	f7f9 fe31 	bl	8000bb0 <__aeabi_fsub>
 8006f4e:	4649      	mov	r1, r9
 8006f50:	4682      	mov	sl, r0
 8006f52:	4640      	mov	r0, r8
 8006f54:	f7f9 fe2e 	bl	8000bb4 <__addsf3>
 8006f58:	9a01      	ldr	r2, [sp, #4]
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	6050      	str	r0, [r2, #4]
 8006f5e:	4640      	mov	r0, r8
 8006f60:	f7f9 fe26 	bl	8000bb0 <__aeabi_fsub>
 8006f64:	4631      	mov	r1, r6
 8006f66:	4681      	mov	r9, r0
 8006f68:	4638      	mov	r0, r7
 8006f6a:	f7f9 fe21 	bl	8000bb0 <__aeabi_fsub>
 8006f6e:	4639      	mov	r1, r7
 8006f70:	4680      	mov	r8, r0
 8006f72:	4630      	mov	r0, r6
 8006f74:	f7f9 fe1e 	bl	8000bb4 <__addsf3>
 8006f78:	4629      	mov	r1, r5
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006f7e:	f7f9 ff21 	bl	8000dc4 <__aeabi_fmul>
 8006f82:	f8dd b07c 	ldr.w	fp, [sp, #124]	@ 0x7c
 8006f86:	4607      	mov	r7, r0
 8006f88:	4649      	mov	r1, r9
 8006f8a:	4658      	mov	r0, fp
 8006f8c:	f7f9 ff1a 	bl	8000dc4 <__aeabi_fmul>
 8006f90:	4601      	mov	r1, r0
 8006f92:	4638      	mov	r0, r7
 8006f94:	f7f9 fe0e 	bl	8000bb4 <__addsf3>
 8006f98:	9b01      	ldr	r3, [sp, #4]
 8006f9a:	9a04      	ldr	r2, [sp, #16]
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	5098      	str	r0, [r3, r2]
 8006fa0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006fa2:	f7f9 ff0f 	bl	8000dc4 <__aeabi_fmul>
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	4607      	mov	r7, r0
 8006faa:	4658      	mov	r0, fp
 8006fac:	f7f9 ff0a 	bl	8000dc4 <__aeabi_fmul>
 8006fb0:	4601      	mov	r1, r0
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	f7f9 fdfc 	bl	8000bb0 <__aeabi_fsub>
 8006fb8:	9f02      	ldr	r7, [sp, #8]
 8006fba:	f8dd b064 	ldr.w	fp, [sp, #100]	@ 0x64
 8006fbe:	9d04      	ldr	r5, [sp, #16]
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	5178      	str	r0, [r7, r5]
 8006fc4:	4658      	mov	r0, fp
 8006fc6:	f7f9 fefd 	bl	8000dc4 <__aeabi_fmul>
 8006fca:	f8dd 9074 	ldr.w	r9, [sp, #116]	@ 0x74
 8006fce:	4605      	mov	r5, r0
 8006fd0:	4641      	mov	r1, r8
 8006fd2:	4648      	mov	r0, r9
 8006fd4:	f7f9 fef6 	bl	8000dc4 <__aeabi_fmul>
 8006fd8:	4601      	mov	r1, r0
 8006fda:	4628      	mov	r0, r5
 8006fdc:	f7f9 fdea 	bl	8000bb4 <__addsf3>
 8006fe0:	9a05      	ldr	r2, [sp, #20]
 8006fe2:	9d01      	ldr	r5, [sp, #4]
 8006fe4:	4641      	mov	r1, r8
 8006fe6:	50a8      	str	r0, [r5, r2]
 8006fe8:	4658      	mov	r0, fp
 8006fea:	f7f9 feeb 	bl	8000dc4 <__aeabi_fmul>
 8006fee:	4621      	mov	r1, r4
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	4648      	mov	r0, r9
 8006ff4:	f7f9 fee6 	bl	8000dc4 <__aeabi_fmul>
 8006ff8:	4601      	mov	r1, r0
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f7f9 fdd8 	bl	8000bb0 <__aeabi_fsub>
 8007000:	9c05      	ldr	r4, [sp, #20]
 8007002:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 8007006:	5138      	str	r0, [r7, r4]
 8007008:	4651      	mov	r1, sl
 800700a:	4658      	mov	r0, fp
 800700c:	f7f9 feda 	bl	8000dc4 <__aeabi_fmul>
 8007010:	f8dd 9084 	ldr.w	r9, [sp, #132]	@ 0x84
 8007014:	4604      	mov	r4, r0
 8007016:	4631      	mov	r1, r6
 8007018:	4648      	mov	r0, r9
 800701a:	f7f9 fed3 	bl	8000dc4 <__aeabi_fmul>
 800701e:	4601      	mov	r1, r0
 8007020:	4620      	mov	r0, r4
 8007022:	f7f9 fdc7 	bl	8000bb4 <__addsf3>
 8007026:	463d      	mov	r5, r7
 8007028:	9a01      	ldr	r2, [sp, #4]
 800702a:	9f08      	ldr	r7, [sp, #32]
 800702c:	4631      	mov	r1, r6
 800702e:	51d0      	str	r0, [r2, r7]
 8007030:	4658      	mov	r0, fp
 8007032:	f7f9 fec7 	bl	8000dc4 <__aeabi_fmul>
 8007036:	4651      	mov	r1, sl
 8007038:	4604      	mov	r4, r0
 800703a:	4648      	mov	r0, r9
 800703c:	f7f9 fec2 	bl	8000dc4 <__aeabi_fmul>
 8007040:	4601      	mov	r1, r0
 8007042:	4620      	mov	r0, r4
 8007044:	f7f9 fdb4 	bl	8000bb0 <__aeabi_fsub>
 8007048:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 800704c:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 8007050:	51e8      	str	r0, [r5, r7]
 8007052:	4651      	mov	r1, sl
 8007054:	4648      	mov	r0, r9
 8007056:	9502      	str	r5, [sp, #8]
 8007058:	f7f9 fdaa 	bl	8000bb0 <__aeabi_fsub>
 800705c:	49a2      	ldr	r1, [pc, #648]	@ (80072e8 <arm_radix8_butterfly_f32+0x9ac>)
 800705e:	f7f9 feb1 	bl	8000dc4 <__aeabi_fmul>
 8007062:	4651      	mov	r1, sl
 8007064:	4604      	mov	r4, r0
 8007066:	4648      	mov	r0, r9
 8007068:	f7f9 fda4 	bl	8000bb4 <__addsf3>
 800706c:	499e      	ldr	r1, [pc, #632]	@ (80072e8 <arm_radix8_butterfly_f32+0x9ac>)
 800706e:	f7f9 fea9 	bl	8000dc4 <__aeabi_fmul>
 8007072:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 8007076:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800707a:	4607      	mov	r7, r0
 800707c:	4641      	mov	r1, r8
 800707e:	4650      	mov	r0, sl
 8007080:	f7f9 fd96 	bl	8000bb0 <__aeabi_fsub>
 8007084:	4998      	ldr	r1, [pc, #608]	@ (80072e8 <arm_radix8_butterfly_f32+0x9ac>)
 8007086:	f7f9 fe9d 	bl	8000dc4 <__aeabi_fmul>
 800708a:	4641      	mov	r1, r8
 800708c:	4681      	mov	r9, r0
 800708e:	4650      	mov	r0, sl
 8007090:	f7f9 fd90 	bl	8000bb4 <__addsf3>
 8007094:	4994      	ldr	r1, [pc, #592]	@ (80072e8 <arm_radix8_butterfly_f32+0x9ac>)
 8007096:	f7f9 fe95 	bl	8000dc4 <__aeabi_fmul>
 800709a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800709c:	4605      	mov	r5, r0
 800709e:	4621      	mov	r1, r4
 80070a0:	4630      	mov	r0, r6
 80070a2:	f7f9 fd85 	bl	8000bb0 <__aeabi_fsub>
 80070a6:	4621      	mov	r1, r4
 80070a8:	4682      	mov	sl, r0
 80070aa:	4630      	mov	r0, r6
 80070ac:	f7f9 fd82 	bl	8000bb4 <__addsf3>
 80070b0:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80070b4:	4604      	mov	r4, r0
 80070b6:	4639      	mov	r1, r7
 80070b8:	4640      	mov	r0, r8
 80070ba:	f7f9 fd79 	bl	8000bb0 <__aeabi_fsub>
 80070be:	4639      	mov	r1, r7
 80070c0:	4606      	mov	r6, r0
 80070c2:	4640      	mov	r0, r8
 80070c4:	f7f9 fd76 	bl	8000bb4 <__addsf3>
 80070c8:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
 80070cc:	4680      	mov	r8, r0
 80070ce:	4649      	mov	r1, r9
 80070d0:	4658      	mov	r0, fp
 80070d2:	f7f9 fd6d 	bl	8000bb0 <__aeabi_fsub>
 80070d6:	4649      	mov	r1, r9
 80070d8:	4607      	mov	r7, r0
 80070da:	4658      	mov	r0, fp
 80070dc:	f7f9 fd6a 	bl	8000bb4 <__addsf3>
 80070e0:	4629      	mov	r1, r5
 80070e2:	4681      	mov	r9, r0
 80070e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070e6:	f7f9 fd63 	bl	8000bb0 <__aeabi_fsub>
 80070ea:	4629      	mov	r1, r5
 80070ec:	4683      	mov	fp, r0
 80070ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070f0:	f7f9 fd60 	bl	8000bb4 <__addsf3>
 80070f4:	4601      	mov	r1, r0
 80070f6:	9009      	str	r0, [sp, #36]	@ 0x24
 80070f8:	4620      	mov	r0, r4
 80070fa:	f7f9 fd5b 	bl	8000bb4 <__addsf3>
 80070fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007100:	4605      	mov	r5, r0
 8007102:	4619      	mov	r1, r3
 8007104:	4620      	mov	r0, r4
 8007106:	f7f9 fd53 	bl	8000bb0 <__aeabi_fsub>
 800710a:	4659      	mov	r1, fp
 800710c:	4604      	mov	r4, r0
 800710e:	4650      	mov	r0, sl
 8007110:	f7f9 fd50 	bl	8000bb4 <__addsf3>
 8007114:	4659      	mov	r1, fp
 8007116:	9009      	str	r0, [sp, #36]	@ 0x24
 8007118:	4650      	mov	r0, sl
 800711a:	f7f9 fd49 	bl	8000bb0 <__aeabi_fsub>
 800711e:	4641      	mov	r1, r8
 8007120:	4683      	mov	fp, r0
 8007122:	4648      	mov	r0, r9
 8007124:	f7f9 fd44 	bl	8000bb0 <__aeabi_fsub>
 8007128:	4649      	mov	r1, r9
 800712a:	4682      	mov	sl, r0
 800712c:	4640      	mov	r0, r8
 800712e:	f7f9 fd41 	bl	8000bb4 <__addsf3>
 8007132:	4631      	mov	r1, r6
 8007134:	4681      	mov	r9, r0
 8007136:	4638      	mov	r0, r7
 8007138:	f7f9 fd3a 	bl	8000bb0 <__aeabi_fsub>
 800713c:	4639      	mov	r1, r7
 800713e:	4680      	mov	r8, r0
 8007140:	4630      	mov	r0, r6
 8007142:	f7f9 fd37 	bl	8000bb4 <__addsf3>
 8007146:	4629      	mov	r1, r5
 8007148:	4606      	mov	r6, r0
 800714a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800714c:	f7f9 fe3a 	bl	8000dc4 <__aeabi_fmul>
 8007150:	4651      	mov	r1, sl
 8007152:	4607      	mov	r7, r0
 8007154:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8007156:	f7f9 fe35 	bl	8000dc4 <__aeabi_fmul>
 800715a:	4601      	mov	r1, r0
 800715c:	4638      	mov	r0, r7
 800715e:	f7f9 fd29 	bl	8000bb4 <__addsf3>
 8007162:	9b06      	ldr	r3, [sp, #24]
 8007164:	4651      	mov	r1, sl
 8007166:	f843 0c04 	str.w	r0, [r3, #-4]
 800716a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800716c:	f7f9 fe2a 	bl	8000dc4 <__aeabi_fmul>
 8007170:	4629      	mov	r1, r5
 8007172:	4607      	mov	r7, r0
 8007174:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8007176:	f7f9 fe25 	bl	8000dc4 <__aeabi_fmul>
 800717a:	4601      	mov	r1, r0
 800717c:	4638      	mov	r0, r7
 800717e:	f7f9 fd17 	bl	8000bb0 <__aeabi_fsub>
 8007182:	9f03      	ldr	r7, [sp, #12]
 8007184:	4621      	mov	r1, r4
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800718a:	f7f9 fe1b 	bl	8000dc4 <__aeabi_fmul>
 800718e:	f8dd a088 	ldr.w	sl, [sp, #136]	@ 0x88
 8007192:	4605      	mov	r5, r0
 8007194:	4649      	mov	r1, r9
 8007196:	4650      	mov	r0, sl
 8007198:	f7f9 fe14 	bl	8000dc4 <__aeabi_fmul>
 800719c:	4601      	mov	r1, r0
 800719e:	4628      	mov	r0, r5
 80071a0:	f7f9 fd08 	bl	8000bb4 <__addsf3>
 80071a4:	9a07      	ldr	r2, [sp, #28]
 80071a6:	9f01      	ldr	r7, [sp, #4]
 80071a8:	4649      	mov	r1, r9
 80071aa:	50b8      	str	r0, [r7, r2]
 80071ac:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80071ae:	f7f9 fe09 	bl	8000dc4 <__aeabi_fmul>
 80071b2:	4621      	mov	r1, r4
 80071b4:	4605      	mov	r5, r0
 80071b6:	4650      	mov	r0, sl
 80071b8:	f7f9 fe04 	bl	8000dc4 <__aeabi_fmul>
 80071bc:	4601      	mov	r1, r0
 80071be:	4628      	mov	r0, r5
 80071c0:	f7f9 fcf6 	bl	8000bb0 <__aeabi_fsub>
 80071c4:	9a07      	ldr	r2, [sp, #28]
 80071c6:	9d02      	ldr	r5, [sp, #8]
 80071c8:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
 80071cc:	50a8      	str	r0, [r5, r2]
 80071ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071d0:	4650      	mov	r0, sl
 80071d2:	f7f9 fdf7 	bl	8000dc4 <__aeabi_fmul>
 80071d6:	f8dd 9080 	ldr.w	r9, [sp, #128]	@ 0x80
 80071da:	4604      	mov	r4, r0
 80071dc:	4641      	mov	r1, r8
 80071de:	4648      	mov	r0, r9
 80071e0:	f7f9 fdf0 	bl	8000dc4 <__aeabi_fmul>
 80071e4:	4601      	mov	r1, r0
 80071e6:	4620      	mov	r0, r4
 80071e8:	f7f9 fce4 	bl	8000bb4 <__addsf3>
 80071ec:	9a03      	ldr	r2, [sp, #12]
 80071ee:	9b04      	ldr	r3, [sp, #16]
 80071f0:	4641      	mov	r1, r8
 80071f2:	50d0      	str	r0, [r2, r3]
 80071f4:	4650      	mov	r0, sl
 80071f6:	f7f9 fde5 	bl	8000dc4 <__aeabi_fmul>
 80071fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071fc:	4604      	mov	r4, r0
 80071fe:	4648      	mov	r0, r9
 8007200:	f7f9 fde0 	bl	8000dc4 <__aeabi_fmul>
 8007204:	4601      	mov	r1, r0
 8007206:	4620      	mov	r0, r4
 8007208:	f7f9 fcd2 	bl	8000bb0 <__aeabi_fsub>
 800720c:	9a06      	ldr	r2, [sp, #24]
 800720e:	9b04      	ldr	r3, [sp, #16]
 8007210:	f8dd 9068 	ldr.w	r9, [sp, #104]	@ 0x68
 8007214:	50d0      	str	r0, [r2, r3]
 8007216:	4659      	mov	r1, fp
 8007218:	4648      	mov	r0, r9
 800721a:	f7f9 fdd3 	bl	8000dc4 <__aeabi_fmul>
 800721e:	f8dd 8078 	ldr.w	r8, [sp, #120]	@ 0x78
 8007222:	4604      	mov	r4, r0
 8007224:	4631      	mov	r1, r6
 8007226:	4640      	mov	r0, r8
 8007228:	f7f9 fdcc 	bl	8000dc4 <__aeabi_fmul>
 800722c:	4601      	mov	r1, r0
 800722e:	4620      	mov	r0, r4
 8007230:	f7f9 fcc0 	bl	8000bb4 <__addsf3>
 8007234:	9b03      	ldr	r3, [sp, #12]
 8007236:	4631      	mov	r1, r6
 8007238:	469e      	mov	lr, r3
 800723a:	9e05      	ldr	r6, [sp, #20]
 800723c:	f84e 0006 	str.w	r0, [lr, r6]
 8007240:	4648      	mov	r0, r9
 8007242:	f7f9 fdbf 	bl	8000dc4 <__aeabi_fmul>
 8007246:	4659      	mov	r1, fp
 8007248:	4604      	mov	r4, r0
 800724a:	4640      	mov	r0, r8
 800724c:	f7f9 fdba 	bl	8000dc4 <__aeabi_fmul>
 8007250:	4601      	mov	r1, r0
 8007252:	4620      	mov	r0, r4
 8007254:	f7f9 fcac 	bl	8000bb0 <__aeabi_fsub>
 8007258:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800725a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 800725c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800725e:	4421      	add	r1, r4
 8007260:	460c      	mov	r4, r1
 8007262:	9b03      	ldr	r3, [sp, #12]
 8007264:	910a      	str	r1, [sp, #40]	@ 0x28
 8007266:	18b9      	adds	r1, r7, r2
 8007268:	9101      	str	r1, [sp, #4]
 800726a:	18a9      	adds	r1, r5, r2
 800726c:	9d06      	ldr	r5, [sp, #24]
 800726e:	4413      	add	r3, r2
 8007270:	9303      	str	r3, [sp, #12]
 8007272:	18ab      	adds	r3, r5, r2
 8007274:	9306      	str	r3, [sp, #24]
 8007276:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8007278:	9102      	str	r1, [sp, #8]
 800727a:	42a3      	cmp	r3, r4
 800727c:	51a8      	str	r0, [r5, r6]
 800727e:	f63f ada1 	bhi.w	8006dc4 <arm_radix8_butterfly_f32+0x488>
 8007282:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8007284:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 8007286:	3301      	adds	r3, #1
 8007288:	461a      	mov	r2, r3
 800728a:	9325      	str	r3, [sp, #148]	@ 0x94
 800728c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800728e:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8007290:	440b      	add	r3, r1
 8007292:	9326      	str	r3, [sp, #152]	@ 0x98
 8007294:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 8007296:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8007298:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 800729a:	440b      	add	r3, r1
 800729c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800729e:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 80072a0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80072a2:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 80072a4:	440b      	add	r3, r1
 80072a6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80072a8:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 80072aa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80072ac:	440b      	add	r3, r1
 80072ae:	9328      	str	r3, [sp, #160]	@ 0xa0
 80072b0:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 80072b2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80072b4:	440b      	add	r3, r1
 80072b6:	932a      	str	r3, [sp, #168]	@ 0xa8
 80072b8:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80072ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072bc:	440b      	add	r3, r1
 80072be:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 80072c0:	9324      	str	r3, [sp, #144]	@ 0x90
 80072c2:	4291      	cmp	r1, r2
 80072c4:	4603      	mov	r3, r0
 80072c6:	d004      	beq.n	80072d2 <arm_radix8_butterfly_f32+0x996>
 80072c8:	4602      	mov	r2, r0
 80072ca:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 80072cc:	440a      	add	r2, r1
 80072ce:	922e      	str	r2, [sp, #184]	@ 0xb8
 80072d0:	e53f      	b.n	8006d52 <arm_radix8_butterfly_f32+0x416>
 80072d2:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	@ 0xd8
 80072d6:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 80072d8:	9314      	str	r3, [sp, #80]	@ 0x50
 80072da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072dc:	9317      	str	r3, [sp, #92]	@ 0x5c
 80072de:	f7ff bb37 	b.w	8006950 <arm_radix8_butterfly_f32+0x14>
 80072e2:	b039      	add	sp, #228	@ 0xe4
 80072e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e8:	3f3504f3 	.word	0x3f3504f3

080072ec <siprintf>:
 80072ec:	b40e      	push	{r1, r2, r3}
 80072ee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80072f2:	b510      	push	{r4, lr}
 80072f4:	2400      	movs	r4, #0
 80072f6:	b09d      	sub	sp, #116	@ 0x74
 80072f8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80072fa:	9002      	str	r0, [sp, #8]
 80072fc:	9006      	str	r0, [sp, #24]
 80072fe:	9107      	str	r1, [sp, #28]
 8007300:	9104      	str	r1, [sp, #16]
 8007302:	4809      	ldr	r0, [pc, #36]	@ (8007328 <siprintf+0x3c>)
 8007304:	4909      	ldr	r1, [pc, #36]	@ (800732c <siprintf+0x40>)
 8007306:	f853 2b04 	ldr.w	r2, [r3], #4
 800730a:	9105      	str	r1, [sp, #20]
 800730c:	6800      	ldr	r0, [r0, #0]
 800730e:	a902      	add	r1, sp, #8
 8007310:	9301      	str	r3, [sp, #4]
 8007312:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007314:	f000 f99a 	bl	800764c <_svfiprintf_r>
 8007318:	9b02      	ldr	r3, [sp, #8]
 800731a:	701c      	strb	r4, [r3, #0]
 800731c:	b01d      	add	sp, #116	@ 0x74
 800731e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007322:	b003      	add	sp, #12
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	20002028 	.word	0x20002028
 800732c:	ffff0208 	.word	0xffff0208

08007330 <memset>:
 8007330:	4603      	mov	r3, r0
 8007332:	4402      	add	r2, r0
 8007334:	4293      	cmp	r3, r2
 8007336:	d100      	bne.n	800733a <memset+0xa>
 8007338:	4770      	bx	lr
 800733a:	f803 1b01 	strb.w	r1, [r3], #1
 800733e:	e7f9      	b.n	8007334 <memset+0x4>

08007340 <__errno>:
 8007340:	4b01      	ldr	r3, [pc, #4]	@ (8007348 <__errno+0x8>)
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	20002028 	.word	0x20002028

0800734c <__libc_init_array>:
 800734c:	b570      	push	{r4, r5, r6, lr}
 800734e:	2600      	movs	r6, #0
 8007350:	4d0c      	ldr	r5, [pc, #48]	@ (8007384 <__libc_init_array+0x38>)
 8007352:	4c0d      	ldr	r4, [pc, #52]	@ (8007388 <__libc_init_array+0x3c>)
 8007354:	1b64      	subs	r4, r4, r5
 8007356:	10a4      	asrs	r4, r4, #2
 8007358:	42a6      	cmp	r6, r4
 800735a:	d109      	bne.n	8007370 <__libc_init_array+0x24>
 800735c:	f000 fd08 	bl	8007d70 <_init>
 8007360:	2600      	movs	r6, #0
 8007362:	4d0a      	ldr	r5, [pc, #40]	@ (800738c <__libc_init_array+0x40>)
 8007364:	4c0a      	ldr	r4, [pc, #40]	@ (8007390 <__libc_init_array+0x44>)
 8007366:	1b64      	subs	r4, r4, r5
 8007368:	10a4      	asrs	r4, r4, #2
 800736a:	42a6      	cmp	r6, r4
 800736c:	d105      	bne.n	800737a <__libc_init_array+0x2e>
 800736e:	bd70      	pop	{r4, r5, r6, pc}
 8007370:	f855 3b04 	ldr.w	r3, [r5], #4
 8007374:	4798      	blx	r3
 8007376:	3601      	adds	r6, #1
 8007378:	e7ee      	b.n	8007358 <__libc_init_array+0xc>
 800737a:	f855 3b04 	ldr.w	r3, [r5], #4
 800737e:	4798      	blx	r3
 8007380:	3601      	adds	r6, #1
 8007382:	e7f2      	b.n	800736a <__libc_init_array+0x1e>
 8007384:	0801c204 	.word	0x0801c204
 8007388:	0801c204 	.word	0x0801c204
 800738c:	0801c204 	.word	0x0801c204
 8007390:	0801c208 	.word	0x0801c208

08007394 <__retarget_lock_acquire_recursive>:
 8007394:	4770      	bx	lr

08007396 <__retarget_lock_release_recursive>:
 8007396:	4770      	bx	lr

08007398 <strcpy>:
 8007398:	4603      	mov	r3, r0
 800739a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800739e:	f803 2b01 	strb.w	r2, [r3], #1
 80073a2:	2a00      	cmp	r2, #0
 80073a4:	d1f9      	bne.n	800739a <strcpy+0x2>
 80073a6:	4770      	bx	lr

080073a8 <_free_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4605      	mov	r5, r0
 80073ac:	2900      	cmp	r1, #0
 80073ae:	d040      	beq.n	8007432 <_free_r+0x8a>
 80073b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073b4:	1f0c      	subs	r4, r1, #4
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	bfb8      	it	lt
 80073ba:	18e4      	addlt	r4, r4, r3
 80073bc:	f000 f8de 	bl	800757c <__malloc_lock>
 80073c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007434 <_free_r+0x8c>)
 80073c2:	6813      	ldr	r3, [r2, #0]
 80073c4:	b933      	cbnz	r3, 80073d4 <_free_r+0x2c>
 80073c6:	6063      	str	r3, [r4, #4]
 80073c8:	6014      	str	r4, [r2, #0]
 80073ca:	4628      	mov	r0, r5
 80073cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073d0:	f000 b8da 	b.w	8007588 <__malloc_unlock>
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	d908      	bls.n	80073ea <_free_r+0x42>
 80073d8:	6820      	ldr	r0, [r4, #0]
 80073da:	1821      	adds	r1, r4, r0
 80073dc:	428b      	cmp	r3, r1
 80073de:	bf01      	itttt	eq
 80073e0:	6819      	ldreq	r1, [r3, #0]
 80073e2:	685b      	ldreq	r3, [r3, #4]
 80073e4:	1809      	addeq	r1, r1, r0
 80073e6:	6021      	streq	r1, [r4, #0]
 80073e8:	e7ed      	b.n	80073c6 <_free_r+0x1e>
 80073ea:	461a      	mov	r2, r3
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	b10b      	cbz	r3, 80073f4 <_free_r+0x4c>
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	d9fa      	bls.n	80073ea <_free_r+0x42>
 80073f4:	6811      	ldr	r1, [r2, #0]
 80073f6:	1850      	adds	r0, r2, r1
 80073f8:	42a0      	cmp	r0, r4
 80073fa:	d10b      	bne.n	8007414 <_free_r+0x6c>
 80073fc:	6820      	ldr	r0, [r4, #0]
 80073fe:	4401      	add	r1, r0
 8007400:	1850      	adds	r0, r2, r1
 8007402:	4283      	cmp	r3, r0
 8007404:	6011      	str	r1, [r2, #0]
 8007406:	d1e0      	bne.n	80073ca <_free_r+0x22>
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	4408      	add	r0, r1
 800740e:	6010      	str	r0, [r2, #0]
 8007410:	6053      	str	r3, [r2, #4]
 8007412:	e7da      	b.n	80073ca <_free_r+0x22>
 8007414:	d902      	bls.n	800741c <_free_r+0x74>
 8007416:	230c      	movs	r3, #12
 8007418:	602b      	str	r3, [r5, #0]
 800741a:	e7d6      	b.n	80073ca <_free_r+0x22>
 800741c:	6820      	ldr	r0, [r4, #0]
 800741e:	1821      	adds	r1, r4, r0
 8007420:	428b      	cmp	r3, r1
 8007422:	bf01      	itttt	eq
 8007424:	6819      	ldreq	r1, [r3, #0]
 8007426:	685b      	ldreq	r3, [r3, #4]
 8007428:	1809      	addeq	r1, r1, r0
 800742a:	6021      	streq	r1, [r4, #0]
 800742c:	6063      	str	r3, [r4, #4]
 800742e:	6054      	str	r4, [r2, #4]
 8007430:	e7cb      	b.n	80073ca <_free_r+0x22>
 8007432:	bd38      	pop	{r3, r4, r5, pc}
 8007434:	2000630c 	.word	0x2000630c

08007438 <sbrk_aligned>:
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	4e0f      	ldr	r6, [pc, #60]	@ (8007478 <sbrk_aligned+0x40>)
 800743c:	460c      	mov	r4, r1
 800743e:	6831      	ldr	r1, [r6, #0]
 8007440:	4605      	mov	r5, r0
 8007442:	b911      	cbnz	r1, 800744a <sbrk_aligned+0x12>
 8007444:	f000 fba8 	bl	8007b98 <_sbrk_r>
 8007448:	6030      	str	r0, [r6, #0]
 800744a:	4621      	mov	r1, r4
 800744c:	4628      	mov	r0, r5
 800744e:	f000 fba3 	bl	8007b98 <_sbrk_r>
 8007452:	1c43      	adds	r3, r0, #1
 8007454:	d103      	bne.n	800745e <sbrk_aligned+0x26>
 8007456:	f04f 34ff 	mov.w	r4, #4294967295
 800745a:	4620      	mov	r0, r4
 800745c:	bd70      	pop	{r4, r5, r6, pc}
 800745e:	1cc4      	adds	r4, r0, #3
 8007460:	f024 0403 	bic.w	r4, r4, #3
 8007464:	42a0      	cmp	r0, r4
 8007466:	d0f8      	beq.n	800745a <sbrk_aligned+0x22>
 8007468:	1a21      	subs	r1, r4, r0
 800746a:	4628      	mov	r0, r5
 800746c:	f000 fb94 	bl	8007b98 <_sbrk_r>
 8007470:	3001      	adds	r0, #1
 8007472:	d1f2      	bne.n	800745a <sbrk_aligned+0x22>
 8007474:	e7ef      	b.n	8007456 <sbrk_aligned+0x1e>
 8007476:	bf00      	nop
 8007478:	20006308 	.word	0x20006308

0800747c <_malloc_r>:
 800747c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007480:	1ccd      	adds	r5, r1, #3
 8007482:	f025 0503 	bic.w	r5, r5, #3
 8007486:	3508      	adds	r5, #8
 8007488:	2d0c      	cmp	r5, #12
 800748a:	bf38      	it	cc
 800748c:	250c      	movcc	r5, #12
 800748e:	2d00      	cmp	r5, #0
 8007490:	4606      	mov	r6, r0
 8007492:	db01      	blt.n	8007498 <_malloc_r+0x1c>
 8007494:	42a9      	cmp	r1, r5
 8007496:	d904      	bls.n	80074a2 <_malloc_r+0x26>
 8007498:	230c      	movs	r3, #12
 800749a:	6033      	str	r3, [r6, #0]
 800749c:	2000      	movs	r0, #0
 800749e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007578 <_malloc_r+0xfc>
 80074a6:	f000 f869 	bl	800757c <__malloc_lock>
 80074aa:	f8d8 3000 	ldr.w	r3, [r8]
 80074ae:	461c      	mov	r4, r3
 80074b0:	bb44      	cbnz	r4, 8007504 <_malloc_r+0x88>
 80074b2:	4629      	mov	r1, r5
 80074b4:	4630      	mov	r0, r6
 80074b6:	f7ff ffbf 	bl	8007438 <sbrk_aligned>
 80074ba:	1c43      	adds	r3, r0, #1
 80074bc:	4604      	mov	r4, r0
 80074be:	d158      	bne.n	8007572 <_malloc_r+0xf6>
 80074c0:	f8d8 4000 	ldr.w	r4, [r8]
 80074c4:	4627      	mov	r7, r4
 80074c6:	2f00      	cmp	r7, #0
 80074c8:	d143      	bne.n	8007552 <_malloc_r+0xd6>
 80074ca:	2c00      	cmp	r4, #0
 80074cc:	d04b      	beq.n	8007566 <_malloc_r+0xea>
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	4639      	mov	r1, r7
 80074d2:	4630      	mov	r0, r6
 80074d4:	eb04 0903 	add.w	r9, r4, r3
 80074d8:	f000 fb5e 	bl	8007b98 <_sbrk_r>
 80074dc:	4581      	cmp	r9, r0
 80074de:	d142      	bne.n	8007566 <_malloc_r+0xea>
 80074e0:	6821      	ldr	r1, [r4, #0]
 80074e2:	4630      	mov	r0, r6
 80074e4:	1a6d      	subs	r5, r5, r1
 80074e6:	4629      	mov	r1, r5
 80074e8:	f7ff ffa6 	bl	8007438 <sbrk_aligned>
 80074ec:	3001      	adds	r0, #1
 80074ee:	d03a      	beq.n	8007566 <_malloc_r+0xea>
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	442b      	add	r3, r5
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	f8d8 3000 	ldr.w	r3, [r8]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	bb62      	cbnz	r2, 8007558 <_malloc_r+0xdc>
 80074fe:	f8c8 7000 	str.w	r7, [r8]
 8007502:	e00f      	b.n	8007524 <_malloc_r+0xa8>
 8007504:	6822      	ldr	r2, [r4, #0]
 8007506:	1b52      	subs	r2, r2, r5
 8007508:	d420      	bmi.n	800754c <_malloc_r+0xd0>
 800750a:	2a0b      	cmp	r2, #11
 800750c:	d917      	bls.n	800753e <_malloc_r+0xc2>
 800750e:	1961      	adds	r1, r4, r5
 8007510:	42a3      	cmp	r3, r4
 8007512:	6025      	str	r5, [r4, #0]
 8007514:	bf18      	it	ne
 8007516:	6059      	strne	r1, [r3, #4]
 8007518:	6863      	ldr	r3, [r4, #4]
 800751a:	bf08      	it	eq
 800751c:	f8c8 1000 	streq.w	r1, [r8]
 8007520:	5162      	str	r2, [r4, r5]
 8007522:	604b      	str	r3, [r1, #4]
 8007524:	4630      	mov	r0, r6
 8007526:	f000 f82f 	bl	8007588 <__malloc_unlock>
 800752a:	f104 000b 	add.w	r0, r4, #11
 800752e:	1d23      	adds	r3, r4, #4
 8007530:	f020 0007 	bic.w	r0, r0, #7
 8007534:	1ac2      	subs	r2, r0, r3
 8007536:	bf1c      	itt	ne
 8007538:	1a1b      	subne	r3, r3, r0
 800753a:	50a3      	strne	r3, [r4, r2]
 800753c:	e7af      	b.n	800749e <_malloc_r+0x22>
 800753e:	6862      	ldr	r2, [r4, #4]
 8007540:	42a3      	cmp	r3, r4
 8007542:	bf0c      	ite	eq
 8007544:	f8c8 2000 	streq.w	r2, [r8]
 8007548:	605a      	strne	r2, [r3, #4]
 800754a:	e7eb      	b.n	8007524 <_malloc_r+0xa8>
 800754c:	4623      	mov	r3, r4
 800754e:	6864      	ldr	r4, [r4, #4]
 8007550:	e7ae      	b.n	80074b0 <_malloc_r+0x34>
 8007552:	463c      	mov	r4, r7
 8007554:	687f      	ldr	r7, [r7, #4]
 8007556:	e7b6      	b.n	80074c6 <_malloc_r+0x4a>
 8007558:	461a      	mov	r2, r3
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	42a3      	cmp	r3, r4
 800755e:	d1fb      	bne.n	8007558 <_malloc_r+0xdc>
 8007560:	2300      	movs	r3, #0
 8007562:	6053      	str	r3, [r2, #4]
 8007564:	e7de      	b.n	8007524 <_malloc_r+0xa8>
 8007566:	230c      	movs	r3, #12
 8007568:	4630      	mov	r0, r6
 800756a:	6033      	str	r3, [r6, #0]
 800756c:	f000 f80c 	bl	8007588 <__malloc_unlock>
 8007570:	e794      	b.n	800749c <_malloc_r+0x20>
 8007572:	6005      	str	r5, [r0, #0]
 8007574:	e7d6      	b.n	8007524 <_malloc_r+0xa8>
 8007576:	bf00      	nop
 8007578:	2000630c 	.word	0x2000630c

0800757c <__malloc_lock>:
 800757c:	4801      	ldr	r0, [pc, #4]	@ (8007584 <__malloc_lock+0x8>)
 800757e:	f7ff bf09 	b.w	8007394 <__retarget_lock_acquire_recursive>
 8007582:	bf00      	nop
 8007584:	20006304 	.word	0x20006304

08007588 <__malloc_unlock>:
 8007588:	4801      	ldr	r0, [pc, #4]	@ (8007590 <__malloc_unlock+0x8>)
 800758a:	f7ff bf04 	b.w	8007396 <__retarget_lock_release_recursive>
 800758e:	bf00      	nop
 8007590:	20006304 	.word	0x20006304

08007594 <__ssputs_r>:
 8007594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007598:	461f      	mov	r7, r3
 800759a:	688e      	ldr	r6, [r1, #8]
 800759c:	4682      	mov	sl, r0
 800759e:	42be      	cmp	r6, r7
 80075a0:	460c      	mov	r4, r1
 80075a2:	4690      	mov	r8, r2
 80075a4:	680b      	ldr	r3, [r1, #0]
 80075a6:	d82d      	bhi.n	8007604 <__ssputs_r+0x70>
 80075a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80075b0:	d026      	beq.n	8007600 <__ssputs_r+0x6c>
 80075b2:	6965      	ldr	r5, [r4, #20]
 80075b4:	6909      	ldr	r1, [r1, #16]
 80075b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075ba:	eba3 0901 	sub.w	r9, r3, r1
 80075be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075c2:	1c7b      	adds	r3, r7, #1
 80075c4:	444b      	add	r3, r9
 80075c6:	106d      	asrs	r5, r5, #1
 80075c8:	429d      	cmp	r5, r3
 80075ca:	bf38      	it	cc
 80075cc:	461d      	movcc	r5, r3
 80075ce:	0553      	lsls	r3, r2, #21
 80075d0:	d527      	bpl.n	8007622 <__ssputs_r+0x8e>
 80075d2:	4629      	mov	r1, r5
 80075d4:	f7ff ff52 	bl	800747c <_malloc_r>
 80075d8:	4606      	mov	r6, r0
 80075da:	b360      	cbz	r0, 8007636 <__ssputs_r+0xa2>
 80075dc:	464a      	mov	r2, r9
 80075de:	6921      	ldr	r1, [r4, #16]
 80075e0:	f000 faf8 	bl	8007bd4 <memcpy>
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80075ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ee:	81a3      	strh	r3, [r4, #12]
 80075f0:	6126      	str	r6, [r4, #16]
 80075f2:	444e      	add	r6, r9
 80075f4:	6026      	str	r6, [r4, #0]
 80075f6:	463e      	mov	r6, r7
 80075f8:	6165      	str	r5, [r4, #20]
 80075fa:	eba5 0509 	sub.w	r5, r5, r9
 80075fe:	60a5      	str	r5, [r4, #8]
 8007600:	42be      	cmp	r6, r7
 8007602:	d900      	bls.n	8007606 <__ssputs_r+0x72>
 8007604:	463e      	mov	r6, r7
 8007606:	4632      	mov	r2, r6
 8007608:	4641      	mov	r1, r8
 800760a:	6820      	ldr	r0, [r4, #0]
 800760c:	f000 faaa 	bl	8007b64 <memmove>
 8007610:	2000      	movs	r0, #0
 8007612:	68a3      	ldr	r3, [r4, #8]
 8007614:	1b9b      	subs	r3, r3, r6
 8007616:	60a3      	str	r3, [r4, #8]
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	4433      	add	r3, r6
 800761c:	6023      	str	r3, [r4, #0]
 800761e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007622:	462a      	mov	r2, r5
 8007624:	f000 fae4 	bl	8007bf0 <_realloc_r>
 8007628:	4606      	mov	r6, r0
 800762a:	2800      	cmp	r0, #0
 800762c:	d1e0      	bne.n	80075f0 <__ssputs_r+0x5c>
 800762e:	4650      	mov	r0, sl
 8007630:	6921      	ldr	r1, [r4, #16]
 8007632:	f7ff feb9 	bl	80073a8 <_free_r>
 8007636:	230c      	movs	r3, #12
 8007638:	f8ca 3000 	str.w	r3, [sl]
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	f04f 30ff 	mov.w	r0, #4294967295
 8007642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007646:	81a3      	strh	r3, [r4, #12]
 8007648:	e7e9      	b.n	800761e <__ssputs_r+0x8a>
	...

0800764c <_svfiprintf_r>:
 800764c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007650:	4698      	mov	r8, r3
 8007652:	898b      	ldrh	r3, [r1, #12]
 8007654:	4607      	mov	r7, r0
 8007656:	061b      	lsls	r3, r3, #24
 8007658:	460d      	mov	r5, r1
 800765a:	4614      	mov	r4, r2
 800765c:	b09d      	sub	sp, #116	@ 0x74
 800765e:	d510      	bpl.n	8007682 <_svfiprintf_r+0x36>
 8007660:	690b      	ldr	r3, [r1, #16]
 8007662:	b973      	cbnz	r3, 8007682 <_svfiprintf_r+0x36>
 8007664:	2140      	movs	r1, #64	@ 0x40
 8007666:	f7ff ff09 	bl	800747c <_malloc_r>
 800766a:	6028      	str	r0, [r5, #0]
 800766c:	6128      	str	r0, [r5, #16]
 800766e:	b930      	cbnz	r0, 800767e <_svfiprintf_r+0x32>
 8007670:	230c      	movs	r3, #12
 8007672:	603b      	str	r3, [r7, #0]
 8007674:	f04f 30ff 	mov.w	r0, #4294967295
 8007678:	b01d      	add	sp, #116	@ 0x74
 800767a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767e:	2340      	movs	r3, #64	@ 0x40
 8007680:	616b      	str	r3, [r5, #20]
 8007682:	2300      	movs	r3, #0
 8007684:	9309      	str	r3, [sp, #36]	@ 0x24
 8007686:	2320      	movs	r3, #32
 8007688:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800768c:	2330      	movs	r3, #48	@ 0x30
 800768e:	f04f 0901 	mov.w	r9, #1
 8007692:	f8cd 800c 	str.w	r8, [sp, #12]
 8007696:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007830 <_svfiprintf_r+0x1e4>
 800769a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800769e:	4623      	mov	r3, r4
 80076a0:	469a      	mov	sl, r3
 80076a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076a6:	b10a      	cbz	r2, 80076ac <_svfiprintf_r+0x60>
 80076a8:	2a25      	cmp	r2, #37	@ 0x25
 80076aa:	d1f9      	bne.n	80076a0 <_svfiprintf_r+0x54>
 80076ac:	ebba 0b04 	subs.w	fp, sl, r4
 80076b0:	d00b      	beq.n	80076ca <_svfiprintf_r+0x7e>
 80076b2:	465b      	mov	r3, fp
 80076b4:	4622      	mov	r2, r4
 80076b6:	4629      	mov	r1, r5
 80076b8:	4638      	mov	r0, r7
 80076ba:	f7ff ff6b 	bl	8007594 <__ssputs_r>
 80076be:	3001      	adds	r0, #1
 80076c0:	f000 80a7 	beq.w	8007812 <_svfiprintf_r+0x1c6>
 80076c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076c6:	445a      	add	r2, fp
 80076c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80076ca:	f89a 3000 	ldrb.w	r3, [sl]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 809f 	beq.w	8007812 <_svfiprintf_r+0x1c6>
 80076d4:	2300      	movs	r3, #0
 80076d6:	f04f 32ff 	mov.w	r2, #4294967295
 80076da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076de:	f10a 0a01 	add.w	sl, sl, #1
 80076e2:	9304      	str	r3, [sp, #16]
 80076e4:	9307      	str	r3, [sp, #28]
 80076e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80076ec:	4654      	mov	r4, sl
 80076ee:	2205      	movs	r2, #5
 80076f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f4:	484e      	ldr	r0, [pc, #312]	@ (8007830 <_svfiprintf_r+0x1e4>)
 80076f6:	f000 fa5f 	bl	8007bb8 <memchr>
 80076fa:	9a04      	ldr	r2, [sp, #16]
 80076fc:	b9d8      	cbnz	r0, 8007736 <_svfiprintf_r+0xea>
 80076fe:	06d0      	lsls	r0, r2, #27
 8007700:	bf44      	itt	mi
 8007702:	2320      	movmi	r3, #32
 8007704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007708:	0711      	lsls	r1, r2, #28
 800770a:	bf44      	itt	mi
 800770c:	232b      	movmi	r3, #43	@ 0x2b
 800770e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007712:	f89a 3000 	ldrb.w	r3, [sl]
 8007716:	2b2a      	cmp	r3, #42	@ 0x2a
 8007718:	d015      	beq.n	8007746 <_svfiprintf_r+0xfa>
 800771a:	4654      	mov	r4, sl
 800771c:	2000      	movs	r0, #0
 800771e:	f04f 0c0a 	mov.w	ip, #10
 8007722:	9a07      	ldr	r2, [sp, #28]
 8007724:	4621      	mov	r1, r4
 8007726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800772a:	3b30      	subs	r3, #48	@ 0x30
 800772c:	2b09      	cmp	r3, #9
 800772e:	d94b      	bls.n	80077c8 <_svfiprintf_r+0x17c>
 8007730:	b1b0      	cbz	r0, 8007760 <_svfiprintf_r+0x114>
 8007732:	9207      	str	r2, [sp, #28]
 8007734:	e014      	b.n	8007760 <_svfiprintf_r+0x114>
 8007736:	eba0 0308 	sub.w	r3, r0, r8
 800773a:	fa09 f303 	lsl.w	r3, r9, r3
 800773e:	4313      	orrs	r3, r2
 8007740:	46a2      	mov	sl, r4
 8007742:	9304      	str	r3, [sp, #16]
 8007744:	e7d2      	b.n	80076ec <_svfiprintf_r+0xa0>
 8007746:	9b03      	ldr	r3, [sp, #12]
 8007748:	1d19      	adds	r1, r3, #4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	9103      	str	r1, [sp, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	bfbb      	ittet	lt
 8007752:	425b      	neglt	r3, r3
 8007754:	f042 0202 	orrlt.w	r2, r2, #2
 8007758:	9307      	strge	r3, [sp, #28]
 800775a:	9307      	strlt	r3, [sp, #28]
 800775c:	bfb8      	it	lt
 800775e:	9204      	strlt	r2, [sp, #16]
 8007760:	7823      	ldrb	r3, [r4, #0]
 8007762:	2b2e      	cmp	r3, #46	@ 0x2e
 8007764:	d10a      	bne.n	800777c <_svfiprintf_r+0x130>
 8007766:	7863      	ldrb	r3, [r4, #1]
 8007768:	2b2a      	cmp	r3, #42	@ 0x2a
 800776a:	d132      	bne.n	80077d2 <_svfiprintf_r+0x186>
 800776c:	9b03      	ldr	r3, [sp, #12]
 800776e:	3402      	adds	r4, #2
 8007770:	1d1a      	adds	r2, r3, #4
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	9203      	str	r2, [sp, #12]
 8007776:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800777a:	9305      	str	r3, [sp, #20]
 800777c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007834 <_svfiprintf_r+0x1e8>
 8007780:	2203      	movs	r2, #3
 8007782:	4650      	mov	r0, sl
 8007784:	7821      	ldrb	r1, [r4, #0]
 8007786:	f000 fa17 	bl	8007bb8 <memchr>
 800778a:	b138      	cbz	r0, 800779c <_svfiprintf_r+0x150>
 800778c:	2240      	movs	r2, #64	@ 0x40
 800778e:	9b04      	ldr	r3, [sp, #16]
 8007790:	eba0 000a 	sub.w	r0, r0, sl
 8007794:	4082      	lsls	r2, r0
 8007796:	4313      	orrs	r3, r2
 8007798:	3401      	adds	r4, #1
 800779a:	9304      	str	r3, [sp, #16]
 800779c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077a0:	2206      	movs	r2, #6
 80077a2:	4825      	ldr	r0, [pc, #148]	@ (8007838 <_svfiprintf_r+0x1ec>)
 80077a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077a8:	f000 fa06 	bl	8007bb8 <memchr>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d036      	beq.n	800781e <_svfiprintf_r+0x1d2>
 80077b0:	4b22      	ldr	r3, [pc, #136]	@ (800783c <_svfiprintf_r+0x1f0>)
 80077b2:	bb1b      	cbnz	r3, 80077fc <_svfiprintf_r+0x1b0>
 80077b4:	9b03      	ldr	r3, [sp, #12]
 80077b6:	3307      	adds	r3, #7
 80077b8:	f023 0307 	bic.w	r3, r3, #7
 80077bc:	3308      	adds	r3, #8
 80077be:	9303      	str	r3, [sp, #12]
 80077c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077c2:	4433      	add	r3, r6
 80077c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80077c6:	e76a      	b.n	800769e <_svfiprintf_r+0x52>
 80077c8:	460c      	mov	r4, r1
 80077ca:	2001      	movs	r0, #1
 80077cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80077d0:	e7a8      	b.n	8007724 <_svfiprintf_r+0xd8>
 80077d2:	2300      	movs	r3, #0
 80077d4:	f04f 0c0a 	mov.w	ip, #10
 80077d8:	4619      	mov	r1, r3
 80077da:	3401      	adds	r4, #1
 80077dc:	9305      	str	r3, [sp, #20]
 80077de:	4620      	mov	r0, r4
 80077e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077e4:	3a30      	subs	r2, #48	@ 0x30
 80077e6:	2a09      	cmp	r2, #9
 80077e8:	d903      	bls.n	80077f2 <_svfiprintf_r+0x1a6>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0c6      	beq.n	800777c <_svfiprintf_r+0x130>
 80077ee:	9105      	str	r1, [sp, #20]
 80077f0:	e7c4      	b.n	800777c <_svfiprintf_r+0x130>
 80077f2:	4604      	mov	r4, r0
 80077f4:	2301      	movs	r3, #1
 80077f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80077fa:	e7f0      	b.n	80077de <_svfiprintf_r+0x192>
 80077fc:	ab03      	add	r3, sp, #12
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	462a      	mov	r2, r5
 8007802:	4638      	mov	r0, r7
 8007804:	4b0e      	ldr	r3, [pc, #56]	@ (8007840 <_svfiprintf_r+0x1f4>)
 8007806:	a904      	add	r1, sp, #16
 8007808:	f3af 8000 	nop.w
 800780c:	1c42      	adds	r2, r0, #1
 800780e:	4606      	mov	r6, r0
 8007810:	d1d6      	bne.n	80077c0 <_svfiprintf_r+0x174>
 8007812:	89ab      	ldrh	r3, [r5, #12]
 8007814:	065b      	lsls	r3, r3, #25
 8007816:	f53f af2d 	bmi.w	8007674 <_svfiprintf_r+0x28>
 800781a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800781c:	e72c      	b.n	8007678 <_svfiprintf_r+0x2c>
 800781e:	ab03      	add	r3, sp, #12
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	462a      	mov	r2, r5
 8007824:	4638      	mov	r0, r7
 8007826:	4b06      	ldr	r3, [pc, #24]	@ (8007840 <_svfiprintf_r+0x1f4>)
 8007828:	a904      	add	r1, sp, #16
 800782a:	f000 f87d 	bl	8007928 <_printf_i>
 800782e:	e7ed      	b.n	800780c <_svfiprintf_r+0x1c0>
 8007830:	0801c1c0 	.word	0x0801c1c0
 8007834:	0801c1c6 	.word	0x0801c1c6
 8007838:	0801c1ca 	.word	0x0801c1ca
 800783c:	00000000 	.word	0x00000000
 8007840:	08007595 	.word	0x08007595

08007844 <_printf_common>:
 8007844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007848:	4616      	mov	r6, r2
 800784a:	4698      	mov	r8, r3
 800784c:	688a      	ldr	r2, [r1, #8]
 800784e:	690b      	ldr	r3, [r1, #16]
 8007850:	4607      	mov	r7, r0
 8007852:	4293      	cmp	r3, r2
 8007854:	bfb8      	it	lt
 8007856:	4613      	movlt	r3, r2
 8007858:	6033      	str	r3, [r6, #0]
 800785a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800785e:	460c      	mov	r4, r1
 8007860:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007864:	b10a      	cbz	r2, 800786a <_printf_common+0x26>
 8007866:	3301      	adds	r3, #1
 8007868:	6033      	str	r3, [r6, #0]
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	0699      	lsls	r1, r3, #26
 800786e:	bf42      	ittt	mi
 8007870:	6833      	ldrmi	r3, [r6, #0]
 8007872:	3302      	addmi	r3, #2
 8007874:	6033      	strmi	r3, [r6, #0]
 8007876:	6825      	ldr	r5, [r4, #0]
 8007878:	f015 0506 	ands.w	r5, r5, #6
 800787c:	d106      	bne.n	800788c <_printf_common+0x48>
 800787e:	f104 0a19 	add.w	sl, r4, #25
 8007882:	68e3      	ldr	r3, [r4, #12]
 8007884:	6832      	ldr	r2, [r6, #0]
 8007886:	1a9b      	subs	r3, r3, r2
 8007888:	42ab      	cmp	r3, r5
 800788a:	dc2b      	bgt.n	80078e4 <_printf_common+0xa0>
 800788c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007890:	6822      	ldr	r2, [r4, #0]
 8007892:	3b00      	subs	r3, #0
 8007894:	bf18      	it	ne
 8007896:	2301      	movne	r3, #1
 8007898:	0692      	lsls	r2, r2, #26
 800789a:	d430      	bmi.n	80078fe <_printf_common+0xba>
 800789c:	4641      	mov	r1, r8
 800789e:	4638      	mov	r0, r7
 80078a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078a4:	47c8      	blx	r9
 80078a6:	3001      	adds	r0, #1
 80078a8:	d023      	beq.n	80078f2 <_printf_common+0xae>
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	6922      	ldr	r2, [r4, #16]
 80078ae:	f003 0306 	and.w	r3, r3, #6
 80078b2:	2b04      	cmp	r3, #4
 80078b4:	bf14      	ite	ne
 80078b6:	2500      	movne	r5, #0
 80078b8:	6833      	ldreq	r3, [r6, #0]
 80078ba:	f04f 0600 	mov.w	r6, #0
 80078be:	bf08      	it	eq
 80078c0:	68e5      	ldreq	r5, [r4, #12]
 80078c2:	f104 041a 	add.w	r4, r4, #26
 80078c6:	bf08      	it	eq
 80078c8:	1aed      	subeq	r5, r5, r3
 80078ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80078ce:	bf08      	it	eq
 80078d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078d4:	4293      	cmp	r3, r2
 80078d6:	bfc4      	itt	gt
 80078d8:	1a9b      	subgt	r3, r3, r2
 80078da:	18ed      	addgt	r5, r5, r3
 80078dc:	42b5      	cmp	r5, r6
 80078de:	d11a      	bne.n	8007916 <_printf_common+0xd2>
 80078e0:	2000      	movs	r0, #0
 80078e2:	e008      	b.n	80078f6 <_printf_common+0xb2>
 80078e4:	2301      	movs	r3, #1
 80078e6:	4652      	mov	r2, sl
 80078e8:	4641      	mov	r1, r8
 80078ea:	4638      	mov	r0, r7
 80078ec:	47c8      	blx	r9
 80078ee:	3001      	adds	r0, #1
 80078f0:	d103      	bne.n	80078fa <_printf_common+0xb6>
 80078f2:	f04f 30ff 	mov.w	r0, #4294967295
 80078f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fa:	3501      	adds	r5, #1
 80078fc:	e7c1      	b.n	8007882 <_printf_common+0x3e>
 80078fe:	2030      	movs	r0, #48	@ 0x30
 8007900:	18e1      	adds	r1, r4, r3
 8007902:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007906:	1c5a      	adds	r2, r3, #1
 8007908:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800790c:	4422      	add	r2, r4
 800790e:	3302      	adds	r3, #2
 8007910:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007914:	e7c2      	b.n	800789c <_printf_common+0x58>
 8007916:	2301      	movs	r3, #1
 8007918:	4622      	mov	r2, r4
 800791a:	4641      	mov	r1, r8
 800791c:	4638      	mov	r0, r7
 800791e:	47c8      	blx	r9
 8007920:	3001      	adds	r0, #1
 8007922:	d0e6      	beq.n	80078f2 <_printf_common+0xae>
 8007924:	3601      	adds	r6, #1
 8007926:	e7d9      	b.n	80078dc <_printf_common+0x98>

08007928 <_printf_i>:
 8007928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800792c:	7e0f      	ldrb	r7, [r1, #24]
 800792e:	4691      	mov	r9, r2
 8007930:	2f78      	cmp	r7, #120	@ 0x78
 8007932:	4680      	mov	r8, r0
 8007934:	460c      	mov	r4, r1
 8007936:	469a      	mov	sl, r3
 8007938:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800793a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800793e:	d807      	bhi.n	8007950 <_printf_i+0x28>
 8007940:	2f62      	cmp	r7, #98	@ 0x62
 8007942:	d80a      	bhi.n	800795a <_printf_i+0x32>
 8007944:	2f00      	cmp	r7, #0
 8007946:	f000 80d1 	beq.w	8007aec <_printf_i+0x1c4>
 800794a:	2f58      	cmp	r7, #88	@ 0x58
 800794c:	f000 80b8 	beq.w	8007ac0 <_printf_i+0x198>
 8007950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007954:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007958:	e03a      	b.n	80079d0 <_printf_i+0xa8>
 800795a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800795e:	2b15      	cmp	r3, #21
 8007960:	d8f6      	bhi.n	8007950 <_printf_i+0x28>
 8007962:	a101      	add	r1, pc, #4	@ (adr r1, 8007968 <_printf_i+0x40>)
 8007964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007968:	080079c1 	.word	0x080079c1
 800796c:	080079d5 	.word	0x080079d5
 8007970:	08007951 	.word	0x08007951
 8007974:	08007951 	.word	0x08007951
 8007978:	08007951 	.word	0x08007951
 800797c:	08007951 	.word	0x08007951
 8007980:	080079d5 	.word	0x080079d5
 8007984:	08007951 	.word	0x08007951
 8007988:	08007951 	.word	0x08007951
 800798c:	08007951 	.word	0x08007951
 8007990:	08007951 	.word	0x08007951
 8007994:	08007ad3 	.word	0x08007ad3
 8007998:	080079ff 	.word	0x080079ff
 800799c:	08007a8d 	.word	0x08007a8d
 80079a0:	08007951 	.word	0x08007951
 80079a4:	08007951 	.word	0x08007951
 80079a8:	08007af5 	.word	0x08007af5
 80079ac:	08007951 	.word	0x08007951
 80079b0:	080079ff 	.word	0x080079ff
 80079b4:	08007951 	.word	0x08007951
 80079b8:	08007951 	.word	0x08007951
 80079bc:	08007a95 	.word	0x08007a95
 80079c0:	6833      	ldr	r3, [r6, #0]
 80079c2:	1d1a      	adds	r2, r3, #4
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6032      	str	r2, [r6, #0]
 80079c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079d0:	2301      	movs	r3, #1
 80079d2:	e09c      	b.n	8007b0e <_printf_i+0x1e6>
 80079d4:	6833      	ldr	r3, [r6, #0]
 80079d6:	6820      	ldr	r0, [r4, #0]
 80079d8:	1d19      	adds	r1, r3, #4
 80079da:	6031      	str	r1, [r6, #0]
 80079dc:	0606      	lsls	r6, r0, #24
 80079de:	d501      	bpl.n	80079e4 <_printf_i+0xbc>
 80079e0:	681d      	ldr	r5, [r3, #0]
 80079e2:	e003      	b.n	80079ec <_printf_i+0xc4>
 80079e4:	0645      	lsls	r5, r0, #25
 80079e6:	d5fb      	bpl.n	80079e0 <_printf_i+0xb8>
 80079e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079ec:	2d00      	cmp	r5, #0
 80079ee:	da03      	bge.n	80079f8 <_printf_i+0xd0>
 80079f0:	232d      	movs	r3, #45	@ 0x2d
 80079f2:	426d      	negs	r5, r5
 80079f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079f8:	230a      	movs	r3, #10
 80079fa:	4858      	ldr	r0, [pc, #352]	@ (8007b5c <_printf_i+0x234>)
 80079fc:	e011      	b.n	8007a22 <_printf_i+0xfa>
 80079fe:	6821      	ldr	r1, [r4, #0]
 8007a00:	6833      	ldr	r3, [r6, #0]
 8007a02:	0608      	lsls	r0, r1, #24
 8007a04:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a08:	d402      	bmi.n	8007a10 <_printf_i+0xe8>
 8007a0a:	0649      	lsls	r1, r1, #25
 8007a0c:	bf48      	it	mi
 8007a0e:	b2ad      	uxthmi	r5, r5
 8007a10:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a12:	6033      	str	r3, [r6, #0]
 8007a14:	bf14      	ite	ne
 8007a16:	230a      	movne	r3, #10
 8007a18:	2308      	moveq	r3, #8
 8007a1a:	4850      	ldr	r0, [pc, #320]	@ (8007b5c <_printf_i+0x234>)
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a22:	6866      	ldr	r6, [r4, #4]
 8007a24:	2e00      	cmp	r6, #0
 8007a26:	60a6      	str	r6, [r4, #8]
 8007a28:	db05      	blt.n	8007a36 <_printf_i+0x10e>
 8007a2a:	6821      	ldr	r1, [r4, #0]
 8007a2c:	432e      	orrs	r6, r5
 8007a2e:	f021 0104 	bic.w	r1, r1, #4
 8007a32:	6021      	str	r1, [r4, #0]
 8007a34:	d04b      	beq.n	8007ace <_printf_i+0x1a6>
 8007a36:	4616      	mov	r6, r2
 8007a38:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a3c:	fb03 5711 	mls	r7, r3, r1, r5
 8007a40:	5dc7      	ldrb	r7, [r0, r7]
 8007a42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a46:	462f      	mov	r7, r5
 8007a48:	42bb      	cmp	r3, r7
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	d9f4      	bls.n	8007a38 <_printf_i+0x110>
 8007a4e:	2b08      	cmp	r3, #8
 8007a50:	d10b      	bne.n	8007a6a <_printf_i+0x142>
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	07df      	lsls	r7, r3, #31
 8007a56:	d508      	bpl.n	8007a6a <_printf_i+0x142>
 8007a58:	6923      	ldr	r3, [r4, #16]
 8007a5a:	6861      	ldr	r1, [r4, #4]
 8007a5c:	4299      	cmp	r1, r3
 8007a5e:	bfde      	ittt	le
 8007a60:	2330      	movle	r3, #48	@ 0x30
 8007a62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a6a:	1b92      	subs	r2, r2, r6
 8007a6c:	6122      	str	r2, [r4, #16]
 8007a6e:	464b      	mov	r3, r9
 8007a70:	4621      	mov	r1, r4
 8007a72:	4640      	mov	r0, r8
 8007a74:	f8cd a000 	str.w	sl, [sp]
 8007a78:	aa03      	add	r2, sp, #12
 8007a7a:	f7ff fee3 	bl	8007844 <_printf_common>
 8007a7e:	3001      	adds	r0, #1
 8007a80:	d14a      	bne.n	8007b18 <_printf_i+0x1f0>
 8007a82:	f04f 30ff 	mov.w	r0, #4294967295
 8007a86:	b004      	add	sp, #16
 8007a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	f043 0320 	orr.w	r3, r3, #32
 8007a92:	6023      	str	r3, [r4, #0]
 8007a94:	2778      	movs	r7, #120	@ 0x78
 8007a96:	4832      	ldr	r0, [pc, #200]	@ (8007b60 <_printf_i+0x238>)
 8007a98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	6831      	ldr	r1, [r6, #0]
 8007aa0:	061f      	lsls	r7, r3, #24
 8007aa2:	f851 5b04 	ldr.w	r5, [r1], #4
 8007aa6:	d402      	bmi.n	8007aae <_printf_i+0x186>
 8007aa8:	065f      	lsls	r7, r3, #25
 8007aaa:	bf48      	it	mi
 8007aac:	b2ad      	uxthmi	r5, r5
 8007aae:	6031      	str	r1, [r6, #0]
 8007ab0:	07d9      	lsls	r1, r3, #31
 8007ab2:	bf44      	itt	mi
 8007ab4:	f043 0320 	orrmi.w	r3, r3, #32
 8007ab8:	6023      	strmi	r3, [r4, #0]
 8007aba:	b11d      	cbz	r5, 8007ac4 <_printf_i+0x19c>
 8007abc:	2310      	movs	r3, #16
 8007abe:	e7ad      	b.n	8007a1c <_printf_i+0xf4>
 8007ac0:	4826      	ldr	r0, [pc, #152]	@ (8007b5c <_printf_i+0x234>)
 8007ac2:	e7e9      	b.n	8007a98 <_printf_i+0x170>
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	f023 0320 	bic.w	r3, r3, #32
 8007aca:	6023      	str	r3, [r4, #0]
 8007acc:	e7f6      	b.n	8007abc <_printf_i+0x194>
 8007ace:	4616      	mov	r6, r2
 8007ad0:	e7bd      	b.n	8007a4e <_printf_i+0x126>
 8007ad2:	6833      	ldr	r3, [r6, #0]
 8007ad4:	6825      	ldr	r5, [r4, #0]
 8007ad6:	1d18      	adds	r0, r3, #4
 8007ad8:	6961      	ldr	r1, [r4, #20]
 8007ada:	6030      	str	r0, [r6, #0]
 8007adc:	062e      	lsls	r6, r5, #24
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	d501      	bpl.n	8007ae6 <_printf_i+0x1be>
 8007ae2:	6019      	str	r1, [r3, #0]
 8007ae4:	e002      	b.n	8007aec <_printf_i+0x1c4>
 8007ae6:	0668      	lsls	r0, r5, #25
 8007ae8:	d5fb      	bpl.n	8007ae2 <_printf_i+0x1ba>
 8007aea:	8019      	strh	r1, [r3, #0]
 8007aec:	2300      	movs	r3, #0
 8007aee:	4616      	mov	r6, r2
 8007af0:	6123      	str	r3, [r4, #16]
 8007af2:	e7bc      	b.n	8007a6e <_printf_i+0x146>
 8007af4:	6833      	ldr	r3, [r6, #0]
 8007af6:	2100      	movs	r1, #0
 8007af8:	1d1a      	adds	r2, r3, #4
 8007afa:	6032      	str	r2, [r6, #0]
 8007afc:	681e      	ldr	r6, [r3, #0]
 8007afe:	6862      	ldr	r2, [r4, #4]
 8007b00:	4630      	mov	r0, r6
 8007b02:	f000 f859 	bl	8007bb8 <memchr>
 8007b06:	b108      	cbz	r0, 8007b0c <_printf_i+0x1e4>
 8007b08:	1b80      	subs	r0, r0, r6
 8007b0a:	6060      	str	r0, [r4, #4]
 8007b0c:	6863      	ldr	r3, [r4, #4]
 8007b0e:	6123      	str	r3, [r4, #16]
 8007b10:	2300      	movs	r3, #0
 8007b12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b16:	e7aa      	b.n	8007a6e <_printf_i+0x146>
 8007b18:	4632      	mov	r2, r6
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	6923      	ldr	r3, [r4, #16]
 8007b20:	47d0      	blx	sl
 8007b22:	3001      	adds	r0, #1
 8007b24:	d0ad      	beq.n	8007a82 <_printf_i+0x15a>
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	079b      	lsls	r3, r3, #30
 8007b2a:	d413      	bmi.n	8007b54 <_printf_i+0x22c>
 8007b2c:	68e0      	ldr	r0, [r4, #12]
 8007b2e:	9b03      	ldr	r3, [sp, #12]
 8007b30:	4298      	cmp	r0, r3
 8007b32:	bfb8      	it	lt
 8007b34:	4618      	movlt	r0, r3
 8007b36:	e7a6      	b.n	8007a86 <_printf_i+0x15e>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	4632      	mov	r2, r6
 8007b3c:	4649      	mov	r1, r9
 8007b3e:	4640      	mov	r0, r8
 8007b40:	47d0      	blx	sl
 8007b42:	3001      	adds	r0, #1
 8007b44:	d09d      	beq.n	8007a82 <_printf_i+0x15a>
 8007b46:	3501      	adds	r5, #1
 8007b48:	68e3      	ldr	r3, [r4, #12]
 8007b4a:	9903      	ldr	r1, [sp, #12]
 8007b4c:	1a5b      	subs	r3, r3, r1
 8007b4e:	42ab      	cmp	r3, r5
 8007b50:	dcf2      	bgt.n	8007b38 <_printf_i+0x210>
 8007b52:	e7eb      	b.n	8007b2c <_printf_i+0x204>
 8007b54:	2500      	movs	r5, #0
 8007b56:	f104 0619 	add.w	r6, r4, #25
 8007b5a:	e7f5      	b.n	8007b48 <_printf_i+0x220>
 8007b5c:	0801c1d1 	.word	0x0801c1d1
 8007b60:	0801c1e2 	.word	0x0801c1e2

08007b64 <memmove>:
 8007b64:	4288      	cmp	r0, r1
 8007b66:	b510      	push	{r4, lr}
 8007b68:	eb01 0402 	add.w	r4, r1, r2
 8007b6c:	d902      	bls.n	8007b74 <memmove+0x10>
 8007b6e:	4284      	cmp	r4, r0
 8007b70:	4623      	mov	r3, r4
 8007b72:	d807      	bhi.n	8007b84 <memmove+0x20>
 8007b74:	1e43      	subs	r3, r0, #1
 8007b76:	42a1      	cmp	r1, r4
 8007b78:	d008      	beq.n	8007b8c <memmove+0x28>
 8007b7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b82:	e7f8      	b.n	8007b76 <memmove+0x12>
 8007b84:	4601      	mov	r1, r0
 8007b86:	4402      	add	r2, r0
 8007b88:	428a      	cmp	r2, r1
 8007b8a:	d100      	bne.n	8007b8e <memmove+0x2a>
 8007b8c:	bd10      	pop	{r4, pc}
 8007b8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b96:	e7f7      	b.n	8007b88 <memmove+0x24>

08007b98 <_sbrk_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	4d05      	ldr	r5, [pc, #20]	@ (8007bb4 <_sbrk_r+0x1c>)
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	4608      	mov	r0, r1
 8007ba2:	602b      	str	r3, [r5, #0]
 8007ba4:	f7fb f892 	bl	8002ccc <_sbrk>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d102      	bne.n	8007bb2 <_sbrk_r+0x1a>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	b103      	cbz	r3, 8007bb2 <_sbrk_r+0x1a>
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	20006300 	.word	0x20006300

08007bb8 <memchr>:
 8007bb8:	4603      	mov	r3, r0
 8007bba:	b510      	push	{r4, lr}
 8007bbc:	b2c9      	uxtb	r1, r1
 8007bbe:	4402      	add	r2, r0
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	d101      	bne.n	8007bca <memchr+0x12>
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	e003      	b.n	8007bd2 <memchr+0x1a>
 8007bca:	7804      	ldrb	r4, [r0, #0]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	428c      	cmp	r4, r1
 8007bd0:	d1f6      	bne.n	8007bc0 <memchr+0x8>
 8007bd2:	bd10      	pop	{r4, pc}

08007bd4 <memcpy>:
 8007bd4:	440a      	add	r2, r1
 8007bd6:	4291      	cmp	r1, r2
 8007bd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bdc:	d100      	bne.n	8007be0 <memcpy+0xc>
 8007bde:	4770      	bx	lr
 8007be0:	b510      	push	{r4, lr}
 8007be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007be6:	4291      	cmp	r1, r2
 8007be8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bec:	d1f9      	bne.n	8007be2 <memcpy+0xe>
 8007bee:	bd10      	pop	{r4, pc}

08007bf0 <_realloc_r>:
 8007bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf4:	4607      	mov	r7, r0
 8007bf6:	4614      	mov	r4, r2
 8007bf8:	460d      	mov	r5, r1
 8007bfa:	b921      	cbnz	r1, 8007c06 <_realloc_r+0x16>
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c02:	f7ff bc3b 	b.w	800747c <_malloc_r>
 8007c06:	b92a      	cbnz	r2, 8007c14 <_realloc_r+0x24>
 8007c08:	f7ff fbce 	bl	80073a8 <_free_r>
 8007c0c:	4625      	mov	r5, r4
 8007c0e:	4628      	mov	r0, r5
 8007c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c14:	f000 f81a 	bl	8007c4c <_malloc_usable_size_r>
 8007c18:	4284      	cmp	r4, r0
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	d802      	bhi.n	8007c24 <_realloc_r+0x34>
 8007c1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c22:	d8f4      	bhi.n	8007c0e <_realloc_r+0x1e>
 8007c24:	4621      	mov	r1, r4
 8007c26:	4638      	mov	r0, r7
 8007c28:	f7ff fc28 	bl	800747c <_malloc_r>
 8007c2c:	4680      	mov	r8, r0
 8007c2e:	b908      	cbnz	r0, 8007c34 <_realloc_r+0x44>
 8007c30:	4645      	mov	r5, r8
 8007c32:	e7ec      	b.n	8007c0e <_realloc_r+0x1e>
 8007c34:	42b4      	cmp	r4, r6
 8007c36:	4622      	mov	r2, r4
 8007c38:	4629      	mov	r1, r5
 8007c3a:	bf28      	it	cs
 8007c3c:	4632      	movcs	r2, r6
 8007c3e:	f7ff ffc9 	bl	8007bd4 <memcpy>
 8007c42:	4629      	mov	r1, r5
 8007c44:	4638      	mov	r0, r7
 8007c46:	f7ff fbaf 	bl	80073a8 <_free_r>
 8007c4a:	e7f1      	b.n	8007c30 <_realloc_r+0x40>

08007c4c <_malloc_usable_size_r>:
 8007c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c50:	1f18      	subs	r0, r3, #4
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	bfbc      	itt	lt
 8007c56:	580b      	ldrlt	r3, [r1, r0]
 8007c58:	18c0      	addlt	r0, r0, r3
 8007c5a:	4770      	bx	lr

08007c5c <sqrtf>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4605      	mov	r5, r0
 8007c60:	f000 f816 	bl	8007c90 <__ieee754_sqrtf>
 8007c64:	4629      	mov	r1, r5
 8007c66:	4604      	mov	r4, r0
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f7f9 fa71 	bl	8001150 <__aeabi_fcmpun>
 8007c6e:	b968      	cbnz	r0, 8007c8c <sqrtf+0x30>
 8007c70:	2100      	movs	r1, #0
 8007c72:	4628      	mov	r0, r5
 8007c74:	f7f9 fa44 	bl	8001100 <__aeabi_fcmplt>
 8007c78:	b140      	cbz	r0, 8007c8c <sqrtf+0x30>
 8007c7a:	f7ff fb61 	bl	8007340 <__errno>
 8007c7e:	2321      	movs	r3, #33	@ 0x21
 8007c80:	2100      	movs	r1, #0
 8007c82:	6003      	str	r3, [r0, #0]
 8007c84:	4608      	mov	r0, r1
 8007c86:	f7f9 f951 	bl	8000f2c <__aeabi_fdiv>
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}

08007c90 <__ieee754_sqrtf>:
 8007c90:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8007c94:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	d30a      	bcc.n	8007cb8 <__ieee754_sqrtf+0x28>
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	f7f9 f88e 	bl	8000dc4 <__aeabi_fmul>
 8007ca8:	4601      	mov	r1, r0
 8007caa:	4620      	mov	r0, r4
 8007cac:	f7f8 ff82 	bl	8000bb4 <__addsf3>
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb8:	2a00      	cmp	r2, #0
 8007cba:	d0fa      	beq.n	8007cb2 <__ieee754_sqrtf+0x22>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	da06      	bge.n	8007cce <__ieee754_sqrtf+0x3e>
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	f7f8 ff75 	bl	8000bb0 <__aeabi_fsub>
 8007cc6:	4601      	mov	r1, r0
 8007cc8:	f7f9 f930 	bl	8000f2c <__aeabi_fdiv>
 8007ccc:	e7f0      	b.n	8007cb0 <__ieee754_sqrtf+0x20>
 8007cce:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8007cd2:	d03c      	beq.n	8007d4e <__ieee754_sqrtf+0xbe>
 8007cd4:	15c2      	asrs	r2, r0, #23
 8007cd6:	2400      	movs	r4, #0
 8007cd8:	2019      	movs	r0, #25
 8007cda:	4626      	mov	r6, r4
 8007cdc:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8007ce0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007ce4:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8007ce8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007cec:	07d2      	lsls	r2, r2, #31
 8007cee:	bf58      	it	pl
 8007cf0:	005b      	lslpl	r3, r3, #1
 8007cf2:	106d      	asrs	r5, r5, #1
 8007cf4:	005b      	lsls	r3, r3, #1
 8007cf6:	1872      	adds	r2, r6, r1
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	bfcf      	iteee	gt
 8007cfc:	461a      	movgt	r2, r3
 8007cfe:	1856      	addle	r6, r2, r1
 8007d00:	1864      	addle	r4, r4, r1
 8007d02:	1a9a      	suble	r2, r3, r2
 8007d04:	3801      	subs	r0, #1
 8007d06:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8007d0a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007d0e:	d1f2      	bne.n	8007cf6 <__ieee754_sqrtf+0x66>
 8007d10:	b1ba      	cbz	r2, 8007d42 <__ieee754_sqrtf+0xb2>
 8007d12:	4e15      	ldr	r6, [pc, #84]	@ (8007d68 <__ieee754_sqrtf+0xd8>)
 8007d14:	4f15      	ldr	r7, [pc, #84]	@ (8007d6c <__ieee754_sqrtf+0xdc>)
 8007d16:	6830      	ldr	r0, [r6, #0]
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	f7f8 ff49 	bl	8000bb0 <__aeabi_fsub>
 8007d1e:	f8d6 8000 	ldr.w	r8, [r6]
 8007d22:	4601      	mov	r1, r0
 8007d24:	4640      	mov	r0, r8
 8007d26:	f7f9 f9f5 	bl	8001114 <__aeabi_fcmple>
 8007d2a:	b150      	cbz	r0, 8007d42 <__ieee754_sqrtf+0xb2>
 8007d2c:	6830      	ldr	r0, [r6, #0]
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	f7f8 ff40 	bl	8000bb4 <__addsf3>
 8007d34:	6836      	ldr	r6, [r6, #0]
 8007d36:	4601      	mov	r1, r0
 8007d38:	4630      	mov	r0, r6
 8007d3a:	f7f9 f9e1 	bl	8001100 <__aeabi_fcmplt>
 8007d3e:	b170      	cbz	r0, 8007d5e <__ieee754_sqrtf+0xce>
 8007d40:	3402      	adds	r4, #2
 8007d42:	1064      	asrs	r4, r4, #1
 8007d44:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8007d48:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8007d4c:	e7b1      	b.n	8007cb2 <__ieee754_sqrtf+0x22>
 8007d4e:	005b      	lsls	r3, r3, #1
 8007d50:	0218      	lsls	r0, r3, #8
 8007d52:	460a      	mov	r2, r1
 8007d54:	f101 0101 	add.w	r1, r1, #1
 8007d58:	d5f9      	bpl.n	8007d4e <__ieee754_sqrtf+0xbe>
 8007d5a:	4252      	negs	r2, r2
 8007d5c:	e7bb      	b.n	8007cd6 <__ieee754_sqrtf+0x46>
 8007d5e:	3401      	adds	r4, #1
 8007d60:	f024 0401 	bic.w	r4, r4, #1
 8007d64:	e7ed      	b.n	8007d42 <__ieee754_sqrtf+0xb2>
 8007d66:	bf00      	nop
 8007d68:	0801c1f8 	.word	0x0801c1f8
 8007d6c:	0801c1f4 	.word	0x0801c1f4

08007d70 <_init>:
 8007d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d72:	bf00      	nop
 8007d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d76:	bc08      	pop	{r3}
 8007d78:	469e      	mov	lr, r3
 8007d7a:	4770      	bx	lr

08007d7c <_fini>:
 8007d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7e:	bf00      	nop
 8007d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d82:	bc08      	pop	{r3}
 8007d84:	469e      	mov	lr, r3
 8007d86:	4770      	bx	lr
