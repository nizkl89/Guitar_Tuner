
ELEC3300_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e74  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014408  0800905c  0800905c  0000a05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d464  0801d464  00021118  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801d464  0801d464  0001e464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d46c  0801d46c  00021118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d46c  0801d46c  0001e46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d470  0801d470  0001e470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002118  20000000  0801d474  0001f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042dc  20002118  0801f58c  00021118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200063f4  0801f58c  000213f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00021118  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104a2  00000000  00000000  00021141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f2f  00000000  00000000  000315e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00034518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b4b  00000000  00000000  000354b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b58b  00000000  00000000  00036003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013402  00000000  00000000  0005158e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1697  00000000  00000000  00064990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00106027  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d0  00000000  00000000  001060d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0010a8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000037ff  00000000  00000000  0010a914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000070  00000000  00000000  0010e113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20002118 	.word	0x20002118
 8000204:	00000000 	.word	0x00000000
 8000208:	08009044 	.word	0x08009044

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000211c 	.word	0x2000211c
 8000224:	08009044 	.word	0x08009044

08000228 <arm_bitreversal_32>:
 8000228:	1c4b      	adds	r3, r1, #1
 800022a:	2b01      	cmp	r3, #1
 800022c:	bf98      	it	ls
 800022e:	4770      	bxls	lr
 8000230:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000234:	1c91      	adds	r1, r2, #2
 8000236:	089b      	lsrs	r3, r3, #2

08000238 <arm_bitreversal_32_0>:
 8000238:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800023c:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000240:	880a      	ldrh	r2, [r1, #0]
 8000242:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000246:	4480      	add	r8, r0
 8000248:	4481      	add	r9, r0
 800024a:	4402      	add	r2, r0
 800024c:	4484      	add	ip, r0
 800024e:	f8d9 7000 	ldr.w	r7, [r9]
 8000252:	f8d8 6000 	ldr.w	r6, [r8]
 8000256:	6815      	ldr	r5, [r2, #0]
 8000258:	f8dc 4000 	ldr.w	r4, [ip]
 800025c:	f8c9 6000 	str.w	r6, [r9]
 8000260:	f8c8 7000 	str.w	r7, [r8]
 8000264:	f8cc 5000 	str.w	r5, [ip]
 8000268:	6014      	str	r4, [r2, #0]
 800026a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800026e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000272:	6855      	ldr	r5, [r2, #4]
 8000274:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000278:	f8c9 6004 	str.w	r6, [r9, #4]
 800027c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000280:	f8cc 5004 	str.w	r5, [ip, #4]
 8000284:	6054      	str	r4, [r2, #4]
 8000286:	3108      	adds	r1, #8
 8000288:	3b01      	subs	r3, #1
 800028a:	d1d5      	bne.n	8000238 <arm_bitreversal_32_0>
 800028c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000290:	4770      	bx	lr

08000292 <arm_bitreversal_16>:
 8000292:	1c4b      	adds	r3, r1, #1
 8000294:	2b01      	cmp	r3, #1
 8000296:	bf98      	it	ls
 8000298:	4770      	bxls	lr
 800029a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	1c91      	adds	r1, r2, #2
 80002a0:	089b      	lsrs	r3, r3, #2

080002a2 <arm_bitreversal_16_0>:
 80002a2:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002a6:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002aa:	880a      	ldrh	r2, [r1, #0]
 80002ac:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002b0:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002b4:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002b8:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002bc:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002c0:	f8d9 7000 	ldr.w	r7, [r9]
 80002c4:	f8d8 6000 	ldr.w	r6, [r8]
 80002c8:	6815      	ldr	r5, [r2, #0]
 80002ca:	f8dc 4000 	ldr.w	r4, [ip]
 80002ce:	f8c9 6000 	str.w	r6, [r9]
 80002d2:	f8c8 7000 	str.w	r7, [r8]
 80002d6:	f8cc 5000 	str.w	r5, [ip]
 80002da:	6014      	str	r4, [r2, #0]
 80002dc:	3108      	adds	r1, #8
 80002de:	3b01      	subs	r3, #1
 80002e0:	d1df      	bne.n	80002a2 <arm_bitreversal_16_0>
 80002e2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002e6:	4770      	bx	lr

080002e8 <strcmp>:
 80002e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f0:	2a01      	cmp	r2, #1
 80002f2:	bf28      	it	cs
 80002f4:	429a      	cmpcs	r2, r3
 80002f6:	d0f7      	beq.n	80002e8 <strcmp>
 80002f8:	1ad0      	subs	r0, r2, r3
 80002fa:	4770      	bx	lr

080002fc <strlen>:
 80002fc:	4603      	mov	r3, r0
 80002fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000302:	2a00      	cmp	r2, #0
 8000304:	d1fb      	bne.n	80002fe <strlen+0x2>
 8000306:	1a18      	subs	r0, r3, r0
 8000308:	3801      	subs	r0, #1
 800030a:	4770      	bx	lr

0800030c <__aeabi_drsub>:
 800030c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000310:	e002      	b.n	8000318 <__adddf3>
 8000312:	bf00      	nop

08000314 <__aeabi_dsub>:
 8000314:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000318 <__adddf3>:
 8000318:	b530      	push	{r4, r5, lr}
 800031a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800031e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000322:	ea94 0f05 	teq	r4, r5
 8000326:	bf08      	it	eq
 8000328:	ea90 0f02 	teqeq	r0, r2
 800032c:	bf1f      	itttt	ne
 800032e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000332:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000336:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800033e:	f000 80e2 	beq.w	8000506 <__adddf3+0x1ee>
 8000342:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000346:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034a:	bfb8      	it	lt
 800034c:	426d      	neglt	r5, r5
 800034e:	dd0c      	ble.n	800036a <__adddf3+0x52>
 8000350:	442c      	add	r4, r5
 8000352:	ea80 0202 	eor.w	r2, r0, r2
 8000356:	ea81 0303 	eor.w	r3, r1, r3
 800035a:	ea82 0000 	eor.w	r0, r2, r0
 800035e:	ea83 0101 	eor.w	r1, r3, r1
 8000362:	ea80 0202 	eor.w	r2, r0, r2
 8000366:	ea81 0303 	eor.w	r3, r1, r3
 800036a:	2d36      	cmp	r5, #54	@ 0x36
 800036c:	bf88      	it	hi
 800036e:	bd30      	pophi	{r4, r5, pc}
 8000370:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000374:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000378:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800037c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000380:	d002      	beq.n	8000388 <__adddf3+0x70>
 8000382:	4240      	negs	r0, r0
 8000384:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000388:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800038c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000390:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x84>
 8000396:	4252      	negs	r2, r2
 8000398:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039c:	ea94 0f05 	teq	r4, r5
 80003a0:	f000 80a7 	beq.w	80004f2 <__adddf3+0x1da>
 80003a4:	f1a4 0401 	sub.w	r4, r4, #1
 80003a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80003ac:	db0d      	blt.n	80003ca <__adddf3+0xb2>
 80003ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b2:	fa22 f205 	lsr.w	r2, r2, r5
 80003b6:	1880      	adds	r0, r0, r2
 80003b8:	f141 0100 	adc.w	r1, r1, #0
 80003bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c0:	1880      	adds	r0, r0, r2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	4159      	adcs	r1, r3
 80003c8:	e00e      	b.n	80003e8 <__adddf3+0xd0>
 80003ca:	f1a5 0520 	sub.w	r5, r5, #32
 80003ce:	f10e 0e20 	add.w	lr, lr, #32
 80003d2:	2a01      	cmp	r2, #1
 80003d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003d8:	bf28      	it	cs
 80003da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003de:	fa43 f305 	asr.w	r3, r3, r5
 80003e2:	18c0      	adds	r0, r0, r3
 80003e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ec:	d507      	bpl.n	80003fe <__adddf3+0xe6>
 80003ee:	f04f 0e00 	mov.w	lr, #0
 80003f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80003fe:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000402:	d31b      	bcc.n	800043c <__adddf3+0x124>
 8000404:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000408:	d30c      	bcc.n	8000424 <__adddf3+0x10c>
 800040a:	0849      	lsrs	r1, r1, #1
 800040c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000410:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000414:	f104 0401 	add.w	r4, r4, #1
 8000418:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800041c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000420:	f080 809a 	bcs.w	8000558 <__adddf3+0x240>
 8000424:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000428:	bf08      	it	eq
 800042a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800042e:	f150 0000 	adcs.w	r0, r0, #0
 8000432:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000436:	ea41 0105 	orr.w	r1, r1, r5
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000440:	4140      	adcs	r0, r0
 8000442:	eb41 0101 	adc.w	r1, r1, r1
 8000446:	3c01      	subs	r4, #1
 8000448:	bf28      	it	cs
 800044a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800044e:	d2e9      	bcs.n	8000424 <__adddf3+0x10c>
 8000450:	f091 0f00 	teq	r1, #0
 8000454:	bf04      	itt	eq
 8000456:	4601      	moveq	r1, r0
 8000458:	2000      	moveq	r0, #0
 800045a:	fab1 f381 	clz	r3, r1
 800045e:	bf08      	it	eq
 8000460:	3320      	addeq	r3, #32
 8000462:	f1a3 030b 	sub.w	r3, r3, #11
 8000466:	f1b3 0220 	subs.w	r2, r3, #32
 800046a:	da0c      	bge.n	8000486 <__adddf3+0x16e>
 800046c:	320c      	adds	r2, #12
 800046e:	dd08      	ble.n	8000482 <__adddf3+0x16a>
 8000470:	f102 0c14 	add.w	ip, r2, #20
 8000474:	f1c2 020c 	rsb	r2, r2, #12
 8000478:	fa01 f00c 	lsl.w	r0, r1, ip
 800047c:	fa21 f102 	lsr.w	r1, r1, r2
 8000480:	e00c      	b.n	800049c <__adddf3+0x184>
 8000482:	f102 0214 	add.w	r2, r2, #20
 8000486:	bfd8      	it	le
 8000488:	f1c2 0c20 	rsble	ip, r2, #32
 800048c:	fa01 f102 	lsl.w	r1, r1, r2
 8000490:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000494:	bfdc      	itt	le
 8000496:	ea41 010c 	orrle.w	r1, r1, ip
 800049a:	4090      	lslle	r0, r2
 800049c:	1ae4      	subs	r4, r4, r3
 800049e:	bfa2      	ittt	ge
 80004a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a4:	4329      	orrge	r1, r5
 80004a6:	bd30      	popge	{r4, r5, pc}
 80004a8:	ea6f 0404 	mvn.w	r4, r4
 80004ac:	3c1f      	subs	r4, #31
 80004ae:	da1c      	bge.n	80004ea <__adddf3+0x1d2>
 80004b0:	340c      	adds	r4, #12
 80004b2:	dc0e      	bgt.n	80004d2 <__adddf3+0x1ba>
 80004b4:	f104 0414 	add.w	r4, r4, #20
 80004b8:	f1c4 0220 	rsb	r2, r4, #32
 80004bc:	fa20 f004 	lsr.w	r0, r0, r4
 80004c0:	fa01 f302 	lsl.w	r3, r1, r2
 80004c4:	ea40 0003 	orr.w	r0, r0, r3
 80004c8:	fa21 f304 	lsr.w	r3, r1, r4
 80004cc:	ea45 0103 	orr.w	r1, r5, r3
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	f1c4 040c 	rsb	r4, r4, #12
 80004d6:	f1c4 0220 	rsb	r2, r4, #32
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 f304 	lsl.w	r3, r1, r4
 80004e2:	ea40 0003 	orr.w	r0, r0, r3
 80004e6:	4629      	mov	r1, r5
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	fa21 f004 	lsr.w	r0, r1, r4
 80004ee:	4629      	mov	r1, r5
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	f094 0f00 	teq	r4, #0
 80004f6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004fa:	bf06      	itte	eq
 80004fc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000500:	3401      	addeq	r4, #1
 8000502:	3d01      	subne	r5, #1
 8000504:	e74e      	b.n	80003a4 <__adddf3+0x8c>
 8000506:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050a:	bf18      	it	ne
 800050c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000510:	d029      	beq.n	8000566 <__adddf3+0x24e>
 8000512:	ea94 0f05 	teq	r4, r5
 8000516:	bf08      	it	eq
 8000518:	ea90 0f02 	teqeq	r0, r2
 800051c:	d005      	beq.n	800052a <__adddf3+0x212>
 800051e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000522:	bf04      	itt	eq
 8000524:	4619      	moveq	r1, r3
 8000526:	4610      	moveq	r0, r2
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea91 0f03 	teq	r1, r3
 800052e:	bf1e      	ittt	ne
 8000530:	2100      	movne	r1, #0
 8000532:	2000      	movne	r0, #0
 8000534:	bd30      	popne	{r4, r5, pc}
 8000536:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053a:	d105      	bne.n	8000548 <__adddf3+0x230>
 800053c:	0040      	lsls	r0, r0, #1
 800053e:	4149      	adcs	r1, r1
 8000540:	bf28      	it	cs
 8000542:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000546:	bd30      	pop	{r4, r5, pc}
 8000548:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800054c:	bf3c      	itt	cc
 800054e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000552:	bd30      	popcc	{r4, r5, pc}
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000558:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800055c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000560:	f04f 0000 	mov.w	r0, #0
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056a:	bf1a      	itte	ne
 800056c:	4619      	movne	r1, r3
 800056e:	4610      	movne	r0, r2
 8000570:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000574:	bf1c      	itt	ne
 8000576:	460b      	movne	r3, r1
 8000578:	4602      	movne	r2, r0
 800057a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800057e:	bf06      	itte	eq
 8000580:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000584:	ea91 0f03 	teqeq	r1, r3
 8000588:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	bf00      	nop

08000590 <__aeabi_ui2d>:
 8000590:	f090 0f00 	teq	r0, #0
 8000594:	bf04      	itt	eq
 8000596:	2100      	moveq	r1, #0
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a4:	f04f 0500 	mov.w	r5, #0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e750      	b.n	8000450 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_i2d>:
 80005b0:	f090 0f00 	teq	r0, #0
 80005b4:	bf04      	itt	eq
 80005b6:	2100      	moveq	r1, #0
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005c8:	bf48      	it	mi
 80005ca:	4240      	negmi	r0, r0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e73e      	b.n	8000450 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_f2d>:
 80005d4:	0042      	lsls	r2, r0, #1
 80005d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005da:	ea4f 0131 	mov.w	r1, r1, rrx
 80005de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e2:	bf1f      	itttt	ne
 80005e4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005e8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005ec:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005f0:	4770      	bxne	lr
 80005f2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005f6:	bf08      	it	eq
 80005f8:	4770      	bxeq	lr
 80005fa:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005fe:	bf04      	itt	eq
 8000600:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000604:	4770      	bxeq	lr
 8000606:	b530      	push	{r4, r5, lr}
 8000608:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800060c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	e71c      	b.n	8000450 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_ul2d>:
 8000618:	ea50 0201 	orrs.w	r2, r0, r1
 800061c:	bf08      	it	eq
 800061e:	4770      	bxeq	lr
 8000620:	b530      	push	{r4, r5, lr}
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	e00a      	b.n	800063e <__aeabi_l2d+0x16>

08000628 <__aeabi_l2d>:
 8000628:	ea50 0201 	orrs.w	r2, r0, r1
 800062c:	bf08      	it	eq
 800062e:	4770      	bxeq	lr
 8000630:	b530      	push	{r4, r5, lr}
 8000632:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000636:	d502      	bpl.n	800063e <__aeabi_l2d+0x16>
 8000638:	4240      	negs	r0, r0
 800063a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800063e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000642:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000646:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064a:	f43f aed8 	beq.w	80003fe <__adddf3+0xe6>
 800064e:	f04f 0203 	mov.w	r2, #3
 8000652:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000656:	bf18      	it	ne
 8000658:	3203      	addne	r2, #3
 800065a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065e:	bf18      	it	ne
 8000660:	3203      	addne	r2, #3
 8000662:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000666:	f1c2 0320 	rsb	r3, r2, #32
 800066a:	fa00 fc03 	lsl.w	ip, r0, r3
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	fa01 fe03 	lsl.w	lr, r1, r3
 8000676:	ea40 000e 	orr.w	r0, r0, lr
 800067a:	fa21 f102 	lsr.w	r1, r1, r2
 800067e:	4414      	add	r4, r2
 8000680:	e6bd      	b.n	80003fe <__adddf3+0xe6>
 8000682:	bf00      	nop

08000684 <__aeabi_dmul>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800068a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800068e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000692:	bf1d      	ittte	ne
 8000694:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000698:	ea94 0f0c 	teqne	r4, ip
 800069c:	ea95 0f0c 	teqne	r5, ip
 80006a0:	f000 f8de 	bleq	8000860 <__aeabi_dmul+0x1dc>
 80006a4:	442c      	add	r4, r5
 80006a6:	ea81 0603 	eor.w	r6, r1, r3
 80006aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006b6:	bf18      	it	ne
 80006b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006c4:	d038      	beq.n	8000738 <__aeabi_dmul+0xb4>
 80006c6:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006d2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006d6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006da:	f04f 0600 	mov.w	r6, #0
 80006de:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006e2:	f09c 0f00 	teq	ip, #0
 80006e6:	bf18      	it	ne
 80006e8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006ec:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006f0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006f4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006f8:	d204      	bcs.n	8000704 <__aeabi_dmul+0x80>
 80006fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006fe:	416d      	adcs	r5, r5
 8000700:	eb46 0606 	adc.w	r6, r6, r6
 8000704:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000708:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800070c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000710:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000714:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000718:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800071c:	bf88      	it	hi
 800071e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000722:	d81e      	bhi.n	8000762 <__aeabi_dmul+0xde>
 8000724:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000728:	bf08      	it	eq
 800072a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800072e:	f150 0000 	adcs.w	r0, r0, #0
 8000732:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800073c:	ea46 0101 	orr.w	r1, r6, r1
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800074c:	bfc2      	ittt	gt
 800074e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000752:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000756:	bd70      	popgt	{r4, r5, r6, pc}
 8000758:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800075c:	f04f 0e00 	mov.w	lr, #0
 8000760:	3c01      	subs	r4, #1
 8000762:	f300 80ab 	bgt.w	80008bc <__aeabi_dmul+0x238>
 8000766:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800076a:	bfde      	ittt	le
 800076c:	2000      	movle	r0, #0
 800076e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000772:	bd70      	pople	{r4, r5, r6, pc}
 8000774:	f1c4 0400 	rsb	r4, r4, #0
 8000778:	3c20      	subs	r4, #32
 800077a:	da35      	bge.n	80007e8 <__aeabi_dmul+0x164>
 800077c:	340c      	adds	r4, #12
 800077e:	dc1b      	bgt.n	80007b8 <__aeabi_dmul+0x134>
 8000780:	f104 0414 	add.w	r4, r4, #20
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f305 	lsl.w	r3, r0, r5
 800078c:	fa20 f004 	lsr.w	r0, r0, r4
 8000790:	fa01 f205 	lsl.w	r2, r1, r5
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800079c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	fa21 f604 	lsr.w	r6, r1, r4
 80007a8:	eb42 0106 	adc.w	r1, r2, r6
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f1c4 040c 	rsb	r4, r4, #12
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f304 	lsl.w	r3, r0, r4
 80007c4:	fa20 f005 	lsr.w	r0, r0, r5
 80007c8:	fa01 f204 	lsl.w	r2, r1, r4
 80007cc:	ea40 0002 	orr.w	r0, r0, r2
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	f141 0100 	adc.w	r1, r1, #0
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f205 	lsl.w	r2, r0, r5
 80007f0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007f4:	fa20 f304 	lsr.w	r3, r0, r4
 80007f8:	fa01 f205 	lsl.w	r2, r1, r5
 80007fc:	ea43 0302 	orr.w	r3, r3, r2
 8000800:	fa21 f004 	lsr.w	r0, r1, r4
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	fa21 f204 	lsr.w	r2, r1, r4
 800080c:	ea20 0002 	bic.w	r0, r0, r2
 8000810:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000814:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000818:	bf08      	it	eq
 800081a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	f094 0f00 	teq	r4, #0
 8000824:	d10f      	bne.n	8000846 <__aeabi_dmul+0x1c2>
 8000826:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800082a:	0040      	lsls	r0, r0, #1
 800082c:	eb41 0101 	adc.w	r1, r1, r1
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf08      	it	eq
 8000836:	3c01      	subeq	r4, #1
 8000838:	d0f7      	beq.n	800082a <__aeabi_dmul+0x1a6>
 800083a:	ea41 0106 	orr.w	r1, r1, r6
 800083e:	f095 0f00 	teq	r5, #0
 8000842:	bf18      	it	ne
 8000844:	4770      	bxne	lr
 8000846:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800084a:	0052      	lsls	r2, r2, #1
 800084c:	eb43 0303 	adc.w	r3, r3, r3
 8000850:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000854:	bf08      	it	eq
 8000856:	3d01      	subeq	r5, #1
 8000858:	d0f7      	beq.n	800084a <__aeabi_dmul+0x1c6>
 800085a:	ea43 0306 	orr.w	r3, r3, r6
 800085e:	4770      	bx	lr
 8000860:	ea94 0f0c 	teq	r4, ip
 8000864:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000868:	bf18      	it	ne
 800086a:	ea95 0f0c 	teqne	r5, ip
 800086e:	d00c      	beq.n	800088a <__aeabi_dmul+0x206>
 8000870:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000874:	bf18      	it	ne
 8000876:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087a:	d1d1      	bne.n	8000820 <__aeabi_dmul+0x19c>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800088e:	bf06      	itte	eq
 8000890:	4610      	moveq	r0, r2
 8000892:	4619      	moveq	r1, r3
 8000894:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000898:	d019      	beq.n	80008ce <__aeabi_dmul+0x24a>
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	d102      	bne.n	80008a6 <__aeabi_dmul+0x222>
 80008a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008a4:	d113      	bne.n	80008ce <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	d105      	bne.n	80008b8 <__aeabi_dmul+0x234>
 80008ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008b0:	bf1c      	itt	ne
 80008b2:	4610      	movne	r0, r2
 80008b4:	4619      	movne	r1, r3
 80008b6:	d10a      	bne.n	80008ce <__aeabi_dmul+0x24a>
 80008b8:	ea81 0103 	eor.w	r1, r1, r3
 80008bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008c0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008c8:	f04f 0000 	mov.w	r0, #0
 80008cc:	bd70      	pop	{r4, r5, r6, pc}
 80008ce:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008d2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008d6:	bd70      	pop	{r4, r5, r6, pc}

080008d8 <__aeabi_ddiv>:
 80008d8:	b570      	push	{r4, r5, r6, lr}
 80008da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008e6:	bf1d      	ittte	ne
 80008e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008ec:	ea94 0f0c 	teqne	r4, ip
 80008f0:	ea95 0f0c 	teqne	r5, ip
 80008f4:	f000 f8a7 	bleq	8000a46 <__aeabi_ddiv+0x16e>
 80008f8:	eba4 0405 	sub.w	r4, r4, r5
 80008fc:	ea81 0e03 	eor.w	lr, r1, r3
 8000900:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000904:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000908:	f000 8088 	beq.w	8000a1c <__aeabi_ddiv+0x144>
 800090c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000910:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000914:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000918:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800091c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000920:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000924:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000928:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800092c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000930:	429d      	cmp	r5, r3
 8000932:	bf08      	it	eq
 8000934:	4296      	cmpeq	r6, r2
 8000936:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800093a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800093e:	d202      	bcs.n	8000946 <__aeabi_ddiv+0x6e>
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	1ab6      	subs	r6, r6, r2
 8000948:	eb65 0503 	sbc.w	r5, r5, r3
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000956:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 000c 	orrcs.w	r0, r0, ip
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	ea4f 0232 	mov.w	r2, r2, rrx
 800098a:	ebb6 0e02 	subs.w	lr, r6, r2
 800098e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000992:	bf22      	ittt	cs
 8000994:	1ab6      	subcs	r6, r6, r2
 8000996:	4675      	movcs	r5, lr
 8000998:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800099c:	085b      	lsrs	r3, r3, #1
 800099e:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009aa:	bf22      	ittt	cs
 80009ac:	1ab6      	subcs	r6, r6, r2
 80009ae:	4675      	movcs	r5, lr
 80009b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009b4:	ea55 0e06 	orrs.w	lr, r5, r6
 80009b8:	d018      	beq.n	80009ec <__aeabi_ddiv+0x114>
 80009ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009d6:	d1c0      	bne.n	800095a <__aeabi_ddiv+0x82>
 80009d8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009dc:	d10b      	bne.n	80009f6 <__aeabi_ddiv+0x11e>
 80009de:	ea41 0100 	orr.w	r1, r1, r0
 80009e2:	f04f 0000 	mov.w	r0, #0
 80009e6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ea:	e7b6      	b.n	800095a <__aeabi_ddiv+0x82>
 80009ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009f0:	bf04      	itt	eq
 80009f2:	4301      	orreq	r1, r0
 80009f4:	2000      	moveq	r0, #0
 80009f6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009fa:	bf88      	it	hi
 80009fc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a00:	f63f aeaf 	bhi.w	8000762 <__aeabi_dmul+0xde>
 8000a04:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a08:	bf04      	itt	eq
 8000a0a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a12:	f150 0000 	adcs.w	r0, r0, #0
 8000a16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a28:	bfc2      	ittt	gt
 8000a2a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a32:	bd70      	popgt	{r4, r5, r6, pc}
 8000a34:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a38:	f04f 0e00 	mov.w	lr, #0
 8000a3c:	3c01      	subs	r4, #1
 8000a3e:	e690      	b.n	8000762 <__aeabi_dmul+0xde>
 8000a40:	ea45 0e06 	orr.w	lr, r5, r6
 8000a44:	e68d      	b.n	8000762 <__aeabi_dmul+0xde>
 8000a46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a4a:	ea94 0f0c 	teq	r4, ip
 8000a4e:	bf08      	it	eq
 8000a50:	ea95 0f0c 	teqeq	r5, ip
 8000a54:	f43f af3b 	beq.w	80008ce <__aeabi_dmul+0x24a>
 8000a58:	ea94 0f0c 	teq	r4, ip
 8000a5c:	d10a      	bne.n	8000a74 <__aeabi_ddiv+0x19c>
 8000a5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a62:	f47f af34 	bne.w	80008ce <__aeabi_dmul+0x24a>
 8000a66:	ea95 0f0c 	teq	r5, ip
 8000a6a:	f47f af25 	bne.w	80008b8 <__aeabi_dmul+0x234>
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4619      	mov	r1, r3
 8000a72:	e72c      	b.n	80008ce <__aeabi_dmul+0x24a>
 8000a74:	ea95 0f0c 	teq	r5, ip
 8000a78:	d106      	bne.n	8000a88 <__aeabi_ddiv+0x1b0>
 8000a7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a7e:	f43f aefd 	beq.w	800087c <__aeabi_dmul+0x1f8>
 8000a82:	4610      	mov	r0, r2
 8000a84:	4619      	mov	r1, r3
 8000a86:	e722      	b.n	80008ce <__aeabi_dmul+0x24a>
 8000a88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a8c:	bf18      	it	ne
 8000a8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a92:	f47f aec5 	bne.w	8000820 <__aeabi_dmul+0x19c>
 8000a96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a9a:	f47f af0d 	bne.w	80008b8 <__aeabi_dmul+0x234>
 8000a9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000aa2:	f47f aeeb 	bne.w	800087c <__aeabi_dmul+0x1f8>
 8000aa6:	e712      	b.n	80008ce <__aeabi_dmul+0x24a>

08000aa8 <__gedf2>:
 8000aa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000aac:	e006      	b.n	8000abc <__cmpdf2+0x4>
 8000aae:	bf00      	nop

08000ab0 <__ledf2>:
 8000ab0:	f04f 0c01 	mov.w	ip, #1
 8000ab4:	e002      	b.n	8000abc <__cmpdf2+0x4>
 8000ab6:	bf00      	nop

08000ab8 <__cmpdf2>:
 8000ab8:	f04f 0c01 	mov.w	ip, #1
 8000abc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ad2:	d01b      	beq.n	8000b0c <__cmpdf2+0x54>
 8000ad4:	b001      	add	sp, #4
 8000ad6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ada:	bf0c      	ite	eq
 8000adc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ae0:	ea91 0f03 	teqne	r1, r3
 8000ae4:	bf02      	ittt	eq
 8000ae6:	ea90 0f02 	teqeq	r0, r2
 8000aea:	2000      	moveq	r0, #0
 8000aec:	4770      	bxeq	lr
 8000aee:	f110 0f00 	cmn.w	r0, #0
 8000af2:	ea91 0f03 	teq	r1, r3
 8000af6:	bf58      	it	pl
 8000af8:	4299      	cmppl	r1, r3
 8000afa:	bf08      	it	eq
 8000afc:	4290      	cmpeq	r0, r2
 8000afe:	bf2c      	ite	cs
 8000b00:	17d8      	asrcs	r0, r3, #31
 8000b02:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b06:	f040 0001 	orr.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__cmpdf2+0x64>
 8000b16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1a:	d107      	bne.n	8000b2c <__cmpdf2+0x74>
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d1d6      	bne.n	8000ad4 <__cmpdf2+0x1c>
 8000b26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2a:	d0d3      	beq.n	8000ad4 <__cmpdf2+0x1c>
 8000b2c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_cdrcmple>:
 8000b34:	4684      	mov	ip, r0
 8000b36:	4610      	mov	r0, r2
 8000b38:	4662      	mov	r2, ip
 8000b3a:	468c      	mov	ip, r1
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4663      	mov	r3, ip
 8000b40:	e000      	b.n	8000b44 <__aeabi_cdcmpeq>
 8000b42:	bf00      	nop

08000b44 <__aeabi_cdcmpeq>:
 8000b44:	b501      	push	{r0, lr}
 8000b46:	f7ff ffb7 	bl	8000ab8 <__cmpdf2>
 8000b4a:	2800      	cmp	r0, #0
 8000b4c:	bf48      	it	mi
 8000b4e:	f110 0f00 	cmnmi.w	r0, #0
 8000b52:	bd01      	pop	{r0, pc}

08000b54 <__aeabi_dcmpeq>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff fff4 	bl	8000b44 <__aeabi_cdcmpeq>
 8000b5c:	bf0c      	ite	eq
 8000b5e:	2001      	moveq	r0, #1
 8000b60:	2000      	movne	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmplt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffea 	bl	8000b44 <__aeabi_cdcmpeq>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmple>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffe0 	bl	8000b44 <__aeabi_cdcmpeq>
 8000b84:	bf94      	ite	ls
 8000b86:	2001      	movls	r0, #1
 8000b88:	2000      	movhi	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmpge>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffce 	bl	8000b34 <__aeabi_cdrcmple>
 8000b98:	bf94      	ite	ls
 8000b9a:	2001      	movls	r0, #1
 8000b9c:	2000      	movhi	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_dcmpgt>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff ffc4 	bl	8000b34 <__aeabi_cdrcmple>
 8000bac:	bf34      	ite	cc
 8000bae:	2001      	movcc	r0, #1
 8000bb0:	2000      	movcs	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	@ 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_fmul>:
 8000e14:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e1c:	bf1e      	ittt	ne
 8000e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e22:	ea92 0f0c 	teqne	r2, ip
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d06f      	beq.n	8000f0c <__aeabi_fmul+0xf8>
 8000e2c:	441a      	add	r2, r3
 8000e2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e32:	0240      	lsls	r0, r0, #9
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e3a:	d01e      	beq.n	8000e7a <__aeabi_fmul+0x66>
 8000e3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e48:	fba0 3101 	umull	r3, r1, r0, r1
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e50:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e54:	bf3e      	ittt	cc
 8000e56:	0049      	lslcc	r1, r1, #1
 8000e58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	ea40 0001 	orr.w	r0, r0, r1
 8000e62:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e66:	2afd      	cmp	r2, #253	@ 0xfd
 8000e68:	d81d      	bhi.n	8000ea6 <__aeabi_fmul+0x92>
 8000e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e72:	bf08      	it	eq
 8000e74:	f020 0001 	biceq.w	r0, r0, #1
 8000e78:	4770      	bx	lr
 8000e7a:	f090 0f00 	teq	r0, #0
 8000e7e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e82:	bf08      	it	eq
 8000e84:	0249      	lsleq	r1, r1, #9
 8000e86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e90:	bfc2      	ittt	gt
 8000e92:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9a:	4770      	bxgt	lr
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	dc5d      	bgt.n	8000f64 <__aeabi_fmul+0x150>
 8000ea8:	f112 0f19 	cmn.w	r2, #25
 8000eac:	bfdc      	itt	le
 8000eae:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000eb2:	4770      	bxle	lr
 8000eb4:	f1c2 0200 	rsb	r2, r2, #0
 8000eb8:	0041      	lsls	r1, r0, #1
 8000eba:	fa21 f102 	lsr.w	r1, r1, r2
 8000ebe:	f1c2 0220 	rsb	r2, r2, #32
 8000ec2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eca:	f140 0000 	adc.w	r0, r0, #0
 8000ece:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ed2:	bf08      	it	eq
 8000ed4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed8:	4770      	bx	lr
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xce>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fmul+0xe6>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e78f      	b.n	8000e2c <__aeabi_fmul+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	bf18      	it	ne
 8000f16:	ea93 0f0c 	teqne	r3, ip
 8000f1a:	d00a      	beq.n	8000f32 <__aeabi_fmul+0x11e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	d1d8      	bne.n	8000eda <__aeabi_fmul+0xc6>
 8000f28:	ea80 0001 	eor.w	r0, r0, r1
 8000f2c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f090 0f00 	teq	r0, #0
 8000f36:	bf17      	itett	ne
 8000f38:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f3c:	4608      	moveq	r0, r1
 8000f3e:	f091 0f00 	teqne	r1, #0
 8000f42:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f46:	d014      	beq.n	8000f72 <__aeabi_fmul+0x15e>
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_fmul+0x13e>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	d10f      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f52:	ea93 0f0c 	teq	r3, ip
 8000f56:	d103      	bne.n	8000f60 <__aeabi_fmul+0x14c>
 8000f58:	024b      	lsls	r3, r1, #9
 8000f5a:	bf18      	it	ne
 8000f5c:	4608      	movne	r0, r1
 8000f5e:	d108      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f60:	ea80 0001 	eor.w	r0, r0, r1
 8000f64:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f70:	4770      	bx	lr
 8000f72:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f76:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f7a:	4770      	bx	lr

08000f7c <__aeabi_fdiv>:
 8000f7c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f84:	bf1e      	ittt	ne
 8000f86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f8a:	ea92 0f0c 	teqne	r2, ip
 8000f8e:	ea93 0f0c 	teqne	r3, ip
 8000f92:	d069      	beq.n	8001068 <__aeabi_fdiv+0xec>
 8000f94:	eba2 0203 	sub.w	r2, r2, r3
 8000f98:	ea80 0c01 	eor.w	ip, r0, r1
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fa2:	d037      	beq.n	8001014 <__aeabi_fdiv+0x98>
 8000fa4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	bf38      	it	cc
 8000fb8:	005b      	lslcc	r3, r3, #1
 8000fba:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000fbe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	bf24      	itt	cs
 8000fc6:	1a5b      	subcs	r3, r3, r1
 8000fc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd0:	bf24      	itt	cs
 8000fd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fde:	bf24      	itt	cs
 8000fe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fec:	bf24      	itt	cs
 8000fee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ff2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	bf18      	it	ne
 8000ffa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffe:	d1e0      	bne.n	8000fc2 <__aeabi_fdiv+0x46>
 8001000:	2afd      	cmp	r2, #253	@ 0xfd
 8001002:	f63f af50 	bhi.w	8000ea6 <__aeabi_fmul+0x92>
 8001006:	428b      	cmp	r3, r1
 8001008:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800100c:	bf08      	it	eq
 800100e:	f020 0001 	biceq.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001018:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800101c:	327f      	adds	r2, #127	@ 0x7f
 800101e:	bfc2      	ittt	gt
 8001020:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001024:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001028:	4770      	bxgt	lr
 800102a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	3a01      	subs	r2, #1
 8001034:	e737      	b.n	8000ea6 <__aeabi_fmul+0x92>
 8001036:	f092 0f00 	teq	r2, #0
 800103a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0040      	lsleq	r0, r0, #1
 8001042:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001046:	3a01      	subeq	r2, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xc2>
 800104a:	ea40 000c 	orr.w	r0, r0, ip
 800104e:	f093 0f00 	teq	r3, #0
 8001052:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001056:	bf02      	ittt	eq
 8001058:	0049      	lsleq	r1, r1, #1
 800105a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800105e:	3b01      	subeq	r3, #1
 8001060:	d0f9      	beq.n	8001056 <__aeabi_fdiv+0xda>
 8001062:	ea41 010c 	orr.w	r1, r1, ip
 8001066:	e795      	b.n	8000f94 <__aeabi_fdiv+0x18>
 8001068:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d108      	bne.n	8001084 <__aeabi_fdiv+0x108>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	f47f af7d 	bne.w	8000f72 <__aeabi_fmul+0x15e>
 8001078:	ea93 0f0c 	teq	r3, ip
 800107c:	f47f af70 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 8001080:	4608      	mov	r0, r1
 8001082:	e776      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	d104      	bne.n	8001094 <__aeabi_fdiv+0x118>
 800108a:	024b      	lsls	r3, r1, #9
 800108c:	f43f af4c 	beq.w	8000f28 <__aeabi_fmul+0x114>
 8001090:	4608      	mov	r0, r1
 8001092:	e76e      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001094:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001098:	bf18      	it	ne
 800109a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	d1ca      	bne.n	8001036 <__aeabi_fdiv+0xba>
 80010a0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010a4:	f47f af5c 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 80010a8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010ac:	f47f af3c 	bne.w	8000f28 <__aeabi_fmul+0x114>
 80010b0:	e75f      	b.n	8000f72 <__aeabi_fmul+0x15e>
 80010b2:	bf00      	nop

080010b4 <__gesf2>:
 80010b4:	f04f 3cff 	mov.w	ip, #4294967295
 80010b8:	e006      	b.n	80010c8 <__cmpsf2+0x4>
 80010ba:	bf00      	nop

080010bc <__lesf2>:
 80010bc:	f04f 0c01 	mov.w	ip, #1
 80010c0:	e002      	b.n	80010c8 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__cmpsf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d8:	bf18      	it	ne
 80010da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010de:	d011      	beq.n	8001104 <__cmpsf2+0x40>
 80010e0:	b001      	add	sp, #4
 80010e2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010e6:	bf18      	it	ne
 80010e8:	ea90 0f01 	teqne	r0, r1
 80010ec:	bf58      	it	pl
 80010ee:	ebb2 0003 	subspl.w	r0, r2, r3
 80010f2:	bf88      	it	hi
 80010f4:	17c8      	asrhi	r0, r1, #31
 80010f6:	bf38      	it	cc
 80010f8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010fc:	bf18      	it	ne
 80010fe:	f040 0001 	orrne.w	r0, r0, #1
 8001102:	4770      	bx	lr
 8001104:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001108:	d102      	bne.n	8001110 <__cmpsf2+0x4c>
 800110a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110e:	d105      	bne.n	800111c <__cmpsf2+0x58>
 8001110:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001114:	d1e4      	bne.n	80010e0 <__cmpsf2+0x1c>
 8001116:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111a:	d0e1      	beq.n	80010e0 <__cmpsf2+0x1c>
 800111c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <__aeabi_cfrcmple>:
 8001124:	4684      	mov	ip, r0
 8001126:	4608      	mov	r0, r1
 8001128:	4661      	mov	r1, ip
 800112a:	e7ff      	b.n	800112c <__aeabi_cfcmpeq>

0800112c <__aeabi_cfcmpeq>:
 800112c:	b50f      	push	{r0, r1, r2, r3, lr}
 800112e:	f7ff ffc9 	bl	80010c4 <__cmpsf2>
 8001132:	2800      	cmp	r0, #0
 8001134:	bf48      	it	mi
 8001136:	f110 0f00 	cmnmi.w	r0, #0
 800113a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800113c <__aeabi_fcmpeq>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff fff4 	bl	800112c <__aeabi_cfcmpeq>
 8001144:	bf0c      	ite	eq
 8001146:	2001      	moveq	r0, #1
 8001148:	2000      	movne	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_fcmplt>:
 8001150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001154:	f7ff ffea 	bl	800112c <__aeabi_cfcmpeq>
 8001158:	bf34      	ite	cc
 800115a:	2001      	movcc	r0, #1
 800115c:	2000      	movcs	r0, #0
 800115e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001162:	bf00      	nop

08001164 <__aeabi_fcmple>:
 8001164:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001168:	f7ff ffe0 	bl	800112c <__aeabi_cfcmpeq>
 800116c:	bf94      	ite	ls
 800116e:	2001      	movls	r0, #1
 8001170:	2000      	movhi	r0, #0
 8001172:	f85d fb08 	ldr.w	pc, [sp], #8
 8001176:	bf00      	nop

08001178 <__aeabi_fcmpge>:
 8001178:	f84d ed08 	str.w	lr, [sp, #-8]!
 800117c:	f7ff ffd2 	bl	8001124 <__aeabi_cfrcmple>
 8001180:	bf94      	ite	ls
 8001182:	2001      	movls	r0, #1
 8001184:	2000      	movhi	r0, #0
 8001186:	f85d fb08 	ldr.w	pc, [sp], #8
 800118a:	bf00      	nop

0800118c <__aeabi_fcmpgt>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff ffc8 	bl	8001124 <__aeabi_cfrcmple>
 8001194:	bf34      	ite	cc
 8001196:	2001      	movcc	r0, #1
 8001198:	2000      	movcs	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_fcmpun>:
 80011a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011ac:	d102      	bne.n	80011b4 <__aeabi_fcmpun+0x14>
 80011ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011b2:	d108      	bne.n	80011c6 <__aeabi_fcmpun+0x26>
 80011b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011b8:	d102      	bne.n	80011c0 <__aeabi_fcmpun+0x20>
 80011ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011be:	d102      	bne.n	80011c6 <__aeabi_fcmpun+0x26>
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	f04f 0001 	mov.w	r0, #1
 80011ca:	4770      	bx	lr

080011cc <__aeabi_f2iz>:
 80011cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011d4:	d30f      	bcc.n	80011f6 <__aeabi_f2iz+0x2a>
 80011d6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011de:	d90d      	bls.n	80011fc <__aeabi_f2iz+0x30>
 80011e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011e8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80011ec:	fa23 f002 	lsr.w	r0, r3, r2
 80011f0:	bf18      	it	ne
 80011f2:	4240      	negne	r0, r0
 80011f4:	4770      	bx	lr
 80011f6:	f04f 0000 	mov.w	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001200:	d101      	bne.n	8001206 <__aeabi_f2iz+0x3a>
 8001202:	0242      	lsls	r2, r0, #9
 8001204:	d105      	bne.n	8001212 <__aeabi_f2iz+0x46>
 8001206:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800120a:	bf08      	it	eq
 800120c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr

08001218 <__aeabi_f2uiz>:
 8001218:	0042      	lsls	r2, r0, #1
 800121a:	d20e      	bcs.n	800123a <__aeabi_f2uiz+0x22>
 800121c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001220:	d30b      	bcc.n	800123a <__aeabi_f2uiz+0x22>
 8001222:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001226:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800122a:	d409      	bmi.n	8001240 <__aeabi_f2uiz+0x28>
 800122c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001230:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001234:	fa23 f002 	lsr.w	r0, r3, r2
 8001238:	4770      	bx	lr
 800123a:	f04f 0000 	mov.w	r0, #0
 800123e:	4770      	bx	lr
 8001240:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001244:	d101      	bne.n	800124a <__aeabi_f2uiz+0x32>
 8001246:	0242      	lsls	r2, r0, #9
 8001248:	d102      	bne.n	8001250 <__aeabi_f2uiz+0x38>
 800124a:	f04f 30ff 	mov.w	r0, #4294967295
 800124e:	4770      	bx	lr
 8001250:	f04f 0000 	mov.w	r0, #0
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop

08001258 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	e002      	b.n	8001268 <Delay+0x10>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3b01      	subs	r3, #1
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f9      	bne.n	8001262 <Delay+0xa>
 800126e:	bf00      	nop
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr

0800127a <LCD_INIT>:

void LCD_INIT ( void )
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001280:	2001      	movs	r0, #1
 8001282:	f000 f829 	bl	80012d8 <LCD_BackLed_Control>
	LCD_Rst();
 8001286:	f000 f80f 	bl	80012a8 <LCD_Rst>
	LCD_REG_Config();
 800128a:	f000 f85f 	bl	800134c <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800128e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001298:	22f0      	movs	r2, #240	@ 0xf0
 800129a:	2100      	movs	r1, #0
 800129c:	2000      	movs	r0, #0
 800129e:	f000 f9e6 	bl	800166e <LCD_Clear>
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <LCD_Rst>:


void LCD_Rst ( void )
{			
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2102      	movs	r1, #2
 80012b0:	4807      	ldr	r0, [pc, #28]	@ (80012d0 <LCD_Rst+0x28>)
 80012b2:	f004 fa4a 	bl	800574a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80012b6:	4807      	ldr	r0, [pc, #28]	@ (80012d4 <LCD_Rst+0x2c>)
 80012b8:	f7ff ffce 	bl	8001258 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2102      	movs	r1, #2
 80012c0:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <LCD_Rst+0x28>)
 80012c2:	f004 fa42 	bl	800574a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80012c6:	4803      	ldr	r0, [pc, #12]	@ (80012d4 <LCD_Rst+0x2c>)
 80012c8:	f7ff ffc6 	bl	8001258 <Delay>
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40011800 	.word	0x40011800
 80012d4:	0002bffc 	.word	0x0002bffc

080012d8 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012ee:	4807      	ldr	r0, [pc, #28]	@ (800130c <LCD_BackLed_Control+0x34>)
 80012f0:	f004 fa2b 	bl	800574a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80012f4:	e005      	b.n	8001302 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012fc:	4803      	ldr	r0, [pc, #12]	@ (800130c <LCD_BackLed_Control+0x34>)
 80012fe:	f004 fa24 	bl	800574a <HAL_GPIO_WritePin>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40011400 	.word	0x40011400

08001310 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800131a:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	8013      	strh	r3, [r2, #0]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001336:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <LCD_Write_Data+0x1c>)
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	8013      	strh	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	60020000 	.word	0x60020000

0800134c <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001350:	20cf      	movs	r0, #207	@ 0xcf
 8001352:	f7ff ffdd 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff ffe8 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 800135c:	2081      	movs	r0, #129	@ 0x81
 800135e:	f7ff ffe5 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001362:	2030      	movs	r0, #48	@ 0x30
 8001364:	f7ff ffe2 	bl	800132c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001368:	20ed      	movs	r0, #237	@ 0xed
 800136a:	f7ff ffd1 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800136e:	2064      	movs	r0, #100	@ 0x64
 8001370:	f7ff ffdc 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001374:	2003      	movs	r0, #3
 8001376:	f7ff ffd9 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800137a:	2012      	movs	r0, #18
 800137c:	f7ff ffd6 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001380:	2081      	movs	r0, #129	@ 0x81
 8001382:	f7ff ffd3 	bl	800132c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001386:	20e8      	movs	r0, #232	@ 0xe8
 8001388:	f7ff ffc2 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800138c:	2085      	movs	r0, #133	@ 0x85
 800138e:	f7ff ffcd 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001392:	2010      	movs	r0, #16
 8001394:	f7ff ffca 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001398:	2078      	movs	r0, #120	@ 0x78
 800139a:	f7ff ffc7 	bl	800132c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800139e:	20cb      	movs	r0, #203	@ 0xcb
 80013a0:	f7ff ffb6 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80013a4:	2039      	movs	r0, #57	@ 0x39
 80013a6:	f7ff ffc1 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80013aa:	202c      	movs	r0, #44	@ 0x2c
 80013ac:	f7ff ffbe 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff ffbb 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80013b6:	2034      	movs	r0, #52	@ 0x34
 80013b8:	f7ff ffb8 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80013bc:	2002      	movs	r0, #2
 80013be:	f7ff ffb5 	bl	800132c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80013c2:	20f7      	movs	r0, #247	@ 0xf7
 80013c4:	f7ff ffa4 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80013c8:	2020      	movs	r0, #32
 80013ca:	f7ff ffaf 	bl	800132c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80013ce:	20ea      	movs	r0, #234	@ 0xea
 80013d0:	f7ff ff9e 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff ffa9 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff ffa6 	bl	800132c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80013e0:	20b1      	movs	r0, #177	@ 0xb1
 80013e2:	f7ff ff95 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80013e6:	2000      	movs	r0, #0
 80013e8:	f7ff ffa0 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80013ec:	201b      	movs	r0, #27
 80013ee:	f7ff ff9d 	bl	800132c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80013f2:	20b6      	movs	r0, #182	@ 0xb6
 80013f4:	f7ff ff8c 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80013f8:	200a      	movs	r0, #10
 80013fa:	f7ff ff97 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80013fe:	20a2      	movs	r0, #162	@ 0xa2
 8001400:	f7ff ff94 	bl	800132c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001404:	20c0      	movs	r0, #192	@ 0xc0
 8001406:	f7ff ff83 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800140a:	2035      	movs	r0, #53	@ 0x35
 800140c:	f7ff ff8e 	bl	800132c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001410:	20c1      	movs	r0, #193	@ 0xc1
 8001412:	f7ff ff7d 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001416:	2011      	movs	r0, #17
 8001418:	f7ff ff88 	bl	800132c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800141c:	20c5      	movs	r0, #197	@ 0xc5
 800141e:	f7ff ff77 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001422:	2045      	movs	r0, #69	@ 0x45
 8001424:	f7ff ff82 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001428:	2045      	movs	r0, #69	@ 0x45
 800142a:	f7ff ff7f 	bl	800132c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800142e:	20c7      	movs	r0, #199	@ 0xc7
 8001430:	f7ff ff6e 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001434:	20a2      	movs	r0, #162	@ 0xa2
 8001436:	f7ff ff79 	bl	800132c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800143a:	20f2      	movs	r0, #242	@ 0xf2
 800143c:	f7ff ff68 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff ff73 	bl	800132c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001446:	2026      	movs	r0, #38	@ 0x26
 8001448:	f7ff ff62 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 800144c:	2001      	movs	r0, #1
 800144e:	f7ff ff6d 	bl	800132c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001452:	20e0      	movs	r0, #224	@ 0xe0
 8001454:	f7ff ff5c 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001458:	200f      	movs	r0, #15
 800145a:	f7ff ff67 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800145e:	2026      	movs	r0, #38	@ 0x26
 8001460:	f7ff ff64 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001464:	2024      	movs	r0, #36	@ 0x24
 8001466:	f7ff ff61 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800146a:	200b      	movs	r0, #11
 800146c:	f7ff ff5e 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001470:	200e      	movs	r0, #14
 8001472:	f7ff ff5b 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001476:	2009      	movs	r0, #9
 8001478:	f7ff ff58 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 800147c:	2054      	movs	r0, #84	@ 0x54
 800147e:	f7ff ff55 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001482:	20a8      	movs	r0, #168	@ 0xa8
 8001484:	f7ff ff52 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001488:	2046      	movs	r0, #70	@ 0x46
 800148a:	f7ff ff4f 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800148e:	200c      	movs	r0, #12
 8001490:	f7ff ff4c 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001494:	2017      	movs	r0, #23
 8001496:	f7ff ff49 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800149a:	2009      	movs	r0, #9
 800149c:	f7ff ff46 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80014a0:	200f      	movs	r0, #15
 80014a2:	f7ff ff43 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80014a6:	2007      	movs	r0, #7
 80014a8:	f7ff ff40 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff ff3d 	bl	800132c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80014b2:	20e1      	movs	r0, #225	@ 0xe1
 80014b4:	f7ff ff2c 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff ff37 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80014be:	2019      	movs	r0, #25
 80014c0:	f7ff ff34 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80014c4:	201b      	movs	r0, #27
 80014c6:	f7ff ff31 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80014ca:	2004      	movs	r0, #4
 80014cc:	f7ff ff2e 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80014d0:	2010      	movs	r0, #16
 80014d2:	f7ff ff2b 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80014d6:	2007      	movs	r0, #7
 80014d8:	f7ff ff28 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80014dc:	202a      	movs	r0, #42	@ 0x2a
 80014de:	f7ff ff25 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80014e2:	2047      	movs	r0, #71	@ 0x47
 80014e4:	f7ff ff22 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80014e8:	2039      	movs	r0, #57	@ 0x39
 80014ea:	f7ff ff1f 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80014ee:	2003      	movs	r0, #3
 80014f0:	f7ff ff1c 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80014f4:	2006      	movs	r0, #6
 80014f6:	f7ff ff19 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80014fa:	2006      	movs	r0, #6
 80014fc:	f7ff ff16 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001500:	2030      	movs	r0, #48	@ 0x30
 8001502:	f7ff ff13 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001506:	2038      	movs	r0, #56	@ 0x38
 8001508:	f7ff ff10 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800150c:	200f      	movs	r0, #15
 800150e:	f7ff ff0d 	bl	800132c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001512:	2036      	movs	r0, #54	@ 0x36
 8001514:	f7ff fefc 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001518:	20c8      	movs	r0, #200	@ 0xc8
 800151a:	f7ff ff07 	bl	800132c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800151e:	202a      	movs	r0, #42	@ 0x2a
 8001520:	f7ff fef6 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff ff01 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff fefe 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff fefb 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001536:	20ef      	movs	r0, #239	@ 0xef
 8001538:	f7ff fef8 	bl	800132c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 800153c:	202b      	movs	r0, #43	@ 0x2b
 800153e:	f7ff fee7 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001542:	2000      	movs	r0, #0
 8001544:	f7ff fef2 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff feef 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800154e:	2001      	movs	r0, #1
 8001550:	f7ff feec 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001554:	203f      	movs	r0, #63	@ 0x3f
 8001556:	f7ff fee9 	bl	800132c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800155a:	203a      	movs	r0, #58	@ 0x3a
 800155c:	f7ff fed8 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001560:	2055      	movs	r0, #85	@ 0x55
 8001562:	f7ff fee3 	bl	800132c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001566:	2011      	movs	r0, #17
 8001568:	f7ff fed2 	bl	8001310 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 800156c:	4803      	ldr	r0, [pc, #12]	@ (800157c <LCD_REG_Config+0x230>)
 800156e:	f7ff fe73 	bl	8001258 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001572:	2029      	movs	r0, #41	@ 0x29
 8001574:	f7ff fecc 	bl	8001310 <LCD_Write_Cmd>
	
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	0002bffc 	.word	0x0002bffc

08001580 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4604      	mov	r4, r0
 8001588:	4608      	mov	r0, r1
 800158a:	4611      	mov	r1, r2
 800158c:	461a      	mov	r2, r3
 800158e:	4623      	mov	r3, r4
 8001590:	80fb      	strh	r3, [r7, #6]
 8001592:	4603      	mov	r3, r0
 8001594:	80bb      	strh	r3, [r7, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	807b      	strh	r3, [r7, #2]
 800159a:	4613      	mov	r3, r2
 800159c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800159e:	202a      	movs	r0, #42	@ 0x2a
 80015a0:	f7ff feb6 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	0a1b      	lsrs	r3, r3, #8
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff febe 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff feb8 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80015bc:	88fa      	ldrh	r2, [r7, #6]
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	4413      	add	r3, r2
 80015c2:	3b01      	subs	r3, #1
 80015c4:	121b      	asrs	r3, r3, #8
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff feaf 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80015ce:	88fa      	ldrh	r2, [r7, #6]
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	4413      	add	r3, r2
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3b01      	subs	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fea4 	bl	800132c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80015e4:	202b      	movs	r0, #43	@ 0x2b
 80015e6:	f7ff fe93 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80015ea:	88bb      	ldrh	r3, [r7, #4]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fe9b 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fe95 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001602:	88ba      	ldrh	r2, [r7, #4]
 8001604:	883b      	ldrh	r3, [r7, #0]
 8001606:	4413      	add	r3, r2
 8001608:	3b01      	subs	r3, #1
 800160a:	121b      	asrs	r3, r3, #8
 800160c:	b29b      	uxth	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fe8c 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001614:	88ba      	ldrh	r2, [r7, #4]
 8001616:	883b      	ldrh	r3, [r7, #0]
 8001618:	4413      	add	r3, r2
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b29b      	uxth	r3, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	b29b      	uxth	r3, r3
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fe81 	bl	800132c <LCD_Write_Data>
	
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bd90      	pop	{r4, r7, pc}

08001632 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	460b      	mov	r3, r1
 800163c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001642:	202c      	movs	r0, #44	@ 0x2c
 8001644:	f7ff fe64 	bl	8001310 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	e006      	b.n	800165c <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fe6b 	bl	800132c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3301      	adds	r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	d3f4      	bcc.n	800164e <LCD_FillColor+0x1c>
		
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800166e:	b590      	push	{r4, r7, lr}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	4604      	mov	r4, r0
 8001676:	4608      	mov	r0, r1
 8001678:	4611      	mov	r1, r2
 800167a:	461a      	mov	r2, r3
 800167c:	4623      	mov	r3, r4
 800167e:	80fb      	strh	r3, [r7, #6]
 8001680:	4603      	mov	r3, r0
 8001682:	80bb      	strh	r3, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
 8001688:	4613      	mov	r3, r2
 800168a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800168c:	883b      	ldrh	r3, [r7, #0]
 800168e:	887a      	ldrh	r2, [r7, #2]
 8001690:	88b9      	ldrh	r1, [r7, #4]
 8001692:	88f8      	ldrh	r0, [r7, #6]
 8001694:	f7ff ff74 	bl	8001580 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	883a      	ldrh	r2, [r7, #0]
 800169c:	fb02 f303 	mul.w	r3, r2, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	8b3b      	ldrh	r3, [r7, #24]
 80016a4:	4619      	mov	r1, r3
 80016a6:	4610      	mov	r0, r2
 80016a8:	f7ff ffc3 	bl	8001632 <LCD_FillColor>
	
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}

080016b4 <LCD_DrawLine>:
}



void LCD_DrawLine ( uint16_t usC1, uint16_t usP1, uint16_t usC2, uint16_t usP2, uint16_t usColor )
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b08d      	sub	sp, #52	@ 0x34
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4604      	mov	r4, r0
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4623      	mov	r3, r4
 80016c4:	80fb      	strh	r3, [r7, #6]
 80016c6:	4603      	mov	r3, r0
 80016c8:	80bb      	strh	r3, [r7, #4]
 80016ca:	460b      	mov	r3, r1
 80016cc:	807b      	strh	r3, [r7, #2]
 80016ce:	4613      	mov	r3, r2
 80016d0:	803b      	strh	r3, [r7, #0]
	uint16_t us; 
	uint16_t usC_Current, usP_Current;
	
	int32_t lError_C = 0, lError_P = 0, lDelta_C, lDelta_P, lDistance; 
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
	int32_t lIncrease_C, lIncrease_P; 	
	
	
	lDelta_C = usC2 - usC1;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	61fb      	str	r3, [r7, #28]
	lDelta_P = usP2 - usP1; 
 80016e2:	883a      	ldrh	r2, [r7, #0]
 80016e4:	88bb      	ldrh	r3, [r7, #4]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	61bb      	str	r3, [r7, #24]
	
	usC_Current = usC1; 
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	usP_Current = usP1; 
 80016ee:	88bb      	ldrh	r3, [r7, #4]
 80016f0:	857b      	strh	r3, [r7, #42]	@ 0x2a
	
	
	if ( lDelta_C > 0 ) 
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dd02      	ble.n	80016fe <LCD_DrawLine+0x4a>
		lIncrease_C = 1;  
 80016f8:	2301      	movs	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	e00b      	b.n	8001716 <LCD_DrawLine+0x62>
	
	else if ( lDelta_C == 0 ) 
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <LCD_DrawLine+0x56>
		lIncrease_C = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	e005      	b.n	8001716 <LCD_DrawLine+0x62>
	
	else 
  	{ 
    		lIncrease_C = -1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	613b      	str	r3, [r7, #16]
    		lDelta_C = - lDelta_C;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	425b      	negs	r3, r3
 8001714:	61fb      	str	r3, [r7, #28]
  	} 

	
	if ( lDelta_P > 0 )
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	dd02      	ble.n	8001722 <LCD_DrawLine+0x6e>
		lIncrease_P = 1; 
 800171c:	2301      	movs	r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e00b      	b.n	800173a <LCD_DrawLine+0x86>
	
	else if ( lDelta_P == 0 )
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <LCD_DrawLine+0x7a>
		lIncrease_P = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e005      	b.n	800173a <LCD_DrawLine+0x86>
	else 
	{
  		lIncrease_P = -1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	60fb      	str	r3, [r7, #12]
    		lDelta_P = - lDelta_P;
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	425b      	negs	r3, r3
 8001738:	61bb      	str	r3, [r7, #24]
 	} 

	if (  lDelta_C > lDelta_P )
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	429a      	cmp	r2, r3
 8001740:	dd02      	ble.n	8001748 <LCD_DrawLine+0x94>
		lDistance = lDelta_C; 
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e001      	b.n	800174c <LCD_DrawLine+0x98>
	
	else 
		lDistance = lDelta_P; 
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	617b      	str	r3, [r7, #20]
	
	
	for ( us = 0; us <= lDistance + 1; us ++ ) 
 800174c:	2300      	movs	r3, #0
 800174e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001750:	e02b      	b.n	80017aa <LCD_DrawLine+0xf6>
	{  
		LCD_DrawDot ( usC_Current, usP_Current, usColor );
 8001752:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001756:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8001758:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f8a5 	bl	80018aa <LCD_DrawDot>
		
		lError_C += lDelta_C ; 
 8001760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
		lError_P += lDelta_P ; 
 8001768:	6a3a      	ldr	r2, [r7, #32]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4413      	add	r3, r2
 800176e:	623b      	str	r3, [r7, #32]
		
		if ( lError_C > lDistance ) 
 8001770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	429a      	cmp	r2, r3
 8001776:	dd08      	ble.n	800178a <LCD_DrawLine+0xd6>
		{ 
			lError_C -= lDistance; 
 8001778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
			usC_Current += lIncrease_C; 
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	b29a      	uxth	r2, r3
 8001784:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001786:	4413      	add	r3, r2
 8001788:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		}  
		
		if ( lError_P > lDistance ) 
 800178a:	6a3a      	ldr	r2, [r7, #32]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	429a      	cmp	r2, r3
 8001790:	dd08      	ble.n	80017a4 <LCD_DrawLine+0xf0>
		{ 
			lError_P -= lDistance; 
 8001792:	6a3a      	ldr	r2, [r7, #32]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	623b      	str	r3, [r7, #32]
			usP_Current += lIncrease_P; 
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	b29a      	uxth	r2, r3
 800179e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80017a0:	4413      	add	r3, r2
 80017a2:	857b      	strh	r3, [r7, #42]	@ 0x2a
	for ( us = 0; us <= lDistance + 1; us ++ ) 
 80017a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017a6:	3301      	adds	r3, #1
 80017a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80017aa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3301      	adds	r3, #1
 80017b0:	429a      	cmp	r2, r3
 80017b2:	ddce      	ble.n	8001752 <LCD_DrawLine+0x9e>
		} 
		
	}  
	
	
}   
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3734      	adds	r7, #52	@ 0x34
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd90      	pop	{r4, r7, pc}
	...

080017c0 <LCD_DrawChar>:


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
 80017ca:	460b      	mov	r3, r1
 80017cc:	80bb      	strh	r3, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	3b20      	subs	r3, #32
 80017d6:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80017d8:	88b9      	ldrh	r1, [r7, #4]
 80017da:	88f8      	ldrh	r0, [r7, #6]
 80017dc:	2310      	movs	r3, #16
 80017de:	2208      	movs	r2, #8
 80017e0:	f7ff fece 	bl	8001580 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80017e4:	202c      	movs	r0, #44	@ 0x2c
 80017e6:	f7ff fd93 	bl	8001310 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80017ea:	2300      	movs	r3, #0
 80017ec:	73bb      	strb	r3, [r7, #14]
 80017ee:	e023      	b.n	8001838 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80017f0:	7b3a      	ldrb	r2, [r7, #12]
 80017f2:	7bbb      	ldrb	r3, [r7, #14]
 80017f4:	4914      	ldr	r1, [pc, #80]	@ (8001848 <LCD_DrawChar+0x88>)
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	440a      	add	r2, r1
 80017fa:	4413      	add	r3, r2
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001800:	2300      	movs	r3, #0
 8001802:	737b      	strb	r3, [r7, #13]
 8001804:	e012      	b.n	800182c <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001810:	201f      	movs	r0, #31
 8001812:	f7ff fd8b 	bl	800132c <LCD_Write_Data>
 8001816:	e003      	b.n	8001820 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001818:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800181c:	f7ff fd86 	bl	800132c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	085b      	lsrs	r3, r3, #1
 8001824:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001826:	7b7b      	ldrb	r3, [r7, #13]
 8001828:	3301      	adds	r3, #1
 800182a:	737b      	strb	r3, [r7, #13]
 800182c:	7b7b      	ldrb	r3, [r7, #13]
 800182e:	2b07      	cmp	r3, #7
 8001830:	d9e9      	bls.n	8001806 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001832:	7bbb      	ldrb	r3, [r7, #14]
 8001834:	3301      	adds	r3, #1
 8001836:	73bb      	strb	r3, [r7, #14]
 8001838:	7bbb      	ldrb	r3, [r7, #14]
 800183a:	2b0f      	cmp	r3, #15
 800183c:	d9d8      	bls.n	80017f0 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 800183e:	bf00      	nop
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	08009184 	.word	0x08009184

0800184c <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	603a      	str	r2, [r7, #0]
 8001856:	80fb      	strh	r3, [r7, #6]
 8001858:	460b      	mov	r3, r1
 800185a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 800185c:	e01c      	b.n	8001898 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	2be8      	cmp	r3, #232	@ 0xe8
 8001862:	d904      	bls.n	800186e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001864:	2300      	movs	r3, #0
 8001866:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001868:	88bb      	ldrh	r3, [r7, #4]
 800186a:	3310      	adds	r3, #16
 800186c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800186e:	88bb      	ldrh	r3, [r7, #4]
 8001870:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8001874:	d903      	bls.n	800187e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001876:	2300      	movs	r3, #0
 8001878:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800187a:	2300      	movs	r3, #0
 800187c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	781a      	ldrb	r2, [r3, #0]
 8001882:	88b9      	ldrh	r1, [r7, #4]
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff9a 	bl	80017c0 <LCD_DrawChar>
		
		pStr ++;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	3308      	adds	r3, #8
 8001896:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1de      	bne.n	800185e <LCD_DrawString+0x12>
		
	}
	
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <LCD_DrawDot>:




void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	80fb      	strh	r3, [r7, #6]
 80018b4:	460b      	mov	r3, r1
 80018b6:	80bb      	strh	r3, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	807b      	strh	r3, [r7, #2]
	if (( usCOLUMN < LCD_DispWindow_COLUMN ) && ( usPAGE < LCD_DispWindow_PAGE ))
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	2bef      	cmp	r3, #239	@ 0xef
 80018c0:	d809      	bhi.n	80018d6 <LCD_DrawDot+0x2c>
 80018c2:	88bb      	ldrh	r3, [r7, #4]
 80018c4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80018c8:	d205      	bcs.n	80018d6 <LCD_DrawDot+0x2c>
	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 80018ca:	88b9      	ldrh	r1, [r7, #4]
 80018cc:	88f8      	ldrh	r0, [r7, #6]
 80018ce:	2301      	movs	r3, #1
 80018d0:	2201      	movs	r2, #1
 80018d2:	f7ff fe55 	bl	8001580 <LCD_OpenWindow>
	LCD_FillColor (1, usColor);
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	4619      	mov	r1, r3
 80018da:	2001      	movs	r0, #1
 80018dc:	f7ff fea9 	bl	8001632 <LCD_FillColor>

}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <LCD_DrawChar_Color>:
{	

}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4604      	mov	r4, r0
 80018f0:	4608      	mov	r0, r1
 80018f2:	4611      	mov	r1, r2
 80018f4:	461a      	mov	r2, r3
 80018f6:	4623      	mov	r3, r4
 80018f8:	80fb      	strh	r3, [r7, #6]
 80018fa:	4603      	mov	r3, r0
 80018fc:	80bb      	strh	r3, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	70fb      	strb	r3, [r7, #3]
 8001902:	4613      	mov	r3, r2
 8001904:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	3b20      	subs	r3, #32
 800190a:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 800190c:	88b9      	ldrh	r1, [r7, #4]
 800190e:	88f8      	ldrh	r0, [r7, #6]
 8001910:	2310      	movs	r3, #16
 8001912:	2208      	movs	r2, #8
 8001914:	f7ff fe34 	bl	8001580 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001918:	202c      	movs	r0, #44	@ 0x2c
 800191a:	f7ff fcf9 	bl	8001310 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800191e:	2300      	movs	r3, #0
 8001920:	73bb      	strb	r3, [r7, #14]
 8001922:	e024      	b.n	800196e <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001924:	7b3a      	ldrb	r2, [r7, #12]
 8001926:	7bbb      	ldrb	r3, [r7, #14]
 8001928:	4915      	ldr	r1, [pc, #84]	@ (8001980 <LCD_DrawChar_Color+0x98>)
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	440a      	add	r2, r1
 800192e:	4413      	add	r3, r2
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001934:	2300      	movs	r3, #0
 8001936:	737b      	strb	r3, [r7, #13]
 8001938:	e013      	b.n	8001962 <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 8001944:	8c3b      	ldrh	r3, [r7, #32]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fcf0 	bl	800132c <LCD_Write_Data>
 800194c:	e003      	b.n	8001956 <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 800194e:	883b      	ldrh	r3, [r7, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fceb 	bl	800132c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	085b      	lsrs	r3, r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800195c:	7b7b      	ldrb	r3, [r7, #13]
 800195e:	3301      	adds	r3, #1
 8001960:	737b      	strb	r3, [r7, #13]
 8001962:	7b7b      	ldrb	r3, [r7, #13]
 8001964:	2b07      	cmp	r3, #7
 8001966:	d9e8      	bls.n	800193a <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001968:	7bbb      	ldrb	r3, [r7, #14]
 800196a:	3301      	adds	r3, #1
 800196c:	73bb      	strb	r3, [r7, #14]
 800196e:	7bbb      	ldrb	r3, [r7, #14]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d9d7      	bls.n	8001924 <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bd90      	pop	{r4, r7, pc}
 800197e:	bf00      	nop
 8001980:	08009184 	.word	0x08009184

08001984 <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af02      	add	r7, sp, #8
 800198a:	4603      	mov	r3, r0
 800198c:	460a      	mov	r2, r1
 800198e:	80fb      	strh	r3, [r7, #6]
 8001990:	4613      	mov	r3, r2
 8001992:	80bb      	strh	r3, [r7, #4]
  LCD_Clear ( usX - 10, usY, 20, 1, RED);
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	3b0a      	subs	r3, #10
 8001998:	b298      	uxth	r0, r3
 800199a:	88b9      	ldrh	r1, [r7, #4]
 800199c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2301      	movs	r3, #1
 80019a4:	2214      	movs	r2, #20
 80019a6:	f7ff fe62 	bl	800166e <LCD_Clear>
  LCD_Clear ( usX, usY - 10, 1, 20, RED);
 80019aa:	88bb      	ldrh	r3, [r7, #4]
 80019ac:	3b0a      	subs	r3, #10
 80019ae:	b299      	uxth	r1, r3
 80019b0:	88f8      	ldrh	r0, [r7, #6]
 80019b2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2314      	movs	r3, #20
 80019ba:	2201      	movs	r2, #1
 80019bc:	f7ff fe57 	bl	800166e <LCD_Clear>
	
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	60ba      	str	r2, [r7, #8]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4603      	mov	r3, r0
 80019d4:	81fb      	strh	r3, [r7, #14]
 80019d6:	460b      	mov	r3, r1
 80019d8:	81bb      	strh	r3, [r7, #12]
 80019da:	4613      	mov	r3, r2
 80019dc:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80019de:	e01f      	b.n	8001a20 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80019e0:	89fb      	ldrh	r3, [r7, #14]
 80019e2:	2be8      	cmp	r3, #232	@ 0xe8
 80019e4:	d904      	bls.n	80019f0 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80019e6:	2300      	movs	r3, #0
 80019e8:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 80019ea:	89bb      	ldrh	r3, [r7, #12]
 80019ec:	3310      	adds	r3, #16
 80019ee:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80019f0:	89bb      	ldrh	r3, [r7, #12]
 80019f2:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 80019f6:	d903      	bls.n	8001a00 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80019f8:	2300      	movs	r3, #0
 80019fa:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	781a      	ldrb	r2, [r3, #0]
 8001a04:	88fc      	ldrh	r4, [r7, #6]
 8001a06:	89b9      	ldrh	r1, [r7, #12]
 8001a08:	89f8      	ldrh	r0, [r7, #14]
 8001a0a:	8c3b      	ldrh	r3, [r7, #32]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	4623      	mov	r3, r4
 8001a10:	f7ff ff6a 	bl	80018e8 <LCD_DrawChar_Color>
		
		pStr ++;
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	3301      	adds	r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 8001a1a:	89fb      	ldrh	r3, [r7, #14]
 8001a1c:	3308      	adds	r3, #8
 8001a1e:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1db      	bne.n	80019e0 <LCD_DrawString_Color+0x18>
		
	}
	
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd90      	pop	{r4, r7, pc}
	...

08001a34 <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{	
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	f200 80a0 	bhi.w	8001b88 <LCD_GramScan+0x154>
 8001a48:	a201      	add	r2, pc, #4	@ (adr r2, 8001a50 <LCD_GramScan+0x1c>)
 8001a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4e:	bf00      	nop
 8001a50:	08001a61 	.word	0x08001a61
 8001a54:	08001aab 	.word	0x08001aab
 8001a58:	08001af5 	.word	0x08001af5
 8001a5c:	08001b3f 	.word	0x08001b3f

//		____ x(240)      
//	 |  
//	 |	y(320)        
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001a60:	2036      	movs	r0, #54	@ 0x36
 8001a62:	f7ff fc55 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0xC8 );   
 8001a66:	20c8      	movs	r0, #200	@ 0xc8
 8001a68:	f7ff fc60 	bl	800132c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001a6c:	202a      	movs	r0, #42	@ 0x2a
 8001a6e:	f7ff fc4f 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* x start */	
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff fc5a 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff fc57 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );  /* x end */	
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff fc54 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );
 8001a84:	20ef      	movs	r0, #239	@ 0xef
 8001a86:	f7ff fc51 	bl	800132c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001a8a:	202b      	movs	r0, #43	@ 0x2b
 8001a8c:	f7ff fc40 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* y start */  
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff fc4b 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a96:	2000      	movs	r0, #0
 8001a98:	f7ff fc48 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );	/* y end */   
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f7ff fc45 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );
 8001aa2:	203f      	movs	r0, #63	@ 0x3f
 8001aa4:	f7ff fc42 	bl	800132c <LCD_Write_Data>
					
		  break;
 8001aa8:	e06e      	b.n	8001b88 <LCD_GramScan+0x154>

//		|x(320)            
//		|
//		|___ y(240)
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001aaa:	2036      	movs	r0, #54	@ 0x36
 8001aac:	f7ff fc30 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x68 );	
 8001ab0:	2068      	movs	r0, #104	@ 0x68
 8001ab2:	f7ff fc3b 	bl	800132c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001ab6:	202a      	movs	r0, #42	@ 0x2a
 8001ab8:	f7ff fc2a 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001abc:	2000      	movs	r0, #0
 8001abe:	f7ff fc35 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7ff fc32 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f7ff fc2f 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8001ace:	203f      	movs	r0, #63	@ 0x3f
 8001ad0:	f7ff fc2c 	bl	800132c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001ad4:	202b      	movs	r0, #43	@ 0x2b
 8001ad6:	f7ff fc1b 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001ada:	2000      	movs	r0, #0
 8001adc:	f7ff fc26 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f7ff fc23 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7ff fc20 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );		
 8001aec:	20ef      	movs	r0, #239	@ 0xef
 8001aee:	f7ff fc1d 	bl	800132c <LCD_Write_Data>
		
		  break;
 8001af2:	e049      	b.n	8001b88 <LCD_GramScan+0x154>

//		           |x(320)   
//		           |           
//		y(240) ____|
		
			LCD_Write_Cmd ( 0x36 ); 
 8001af4:	2036      	movs	r0, #54	@ 0x36
 8001af6:	f7ff fc0b 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x28 );	
 8001afa:	2028      	movs	r0, #40	@ 0x28
 8001afc:	f7ff fc16 	bl	800132c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001b00:	202a      	movs	r0, #42	@ 0x2a
 8001b02:	f7ff fc05 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001b06:	2000      	movs	r0, #0
 8001b08:	f7ff fc10 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff fc0d 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001b12:	2001      	movs	r0, #1
 8001b14:	f7ff fc0a 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8001b18:	203f      	movs	r0, #63	@ 0x3f
 8001b1a:	f7ff fc07 	bl	800132c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001b1e:	202b      	movs	r0, #43	@ 0x2b
 8001b20:	f7ff fbf6 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7ff fc01 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f7ff fbfe 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff fbfb 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );			
 8001b36:	20ef      	movs	r0, #239	@ 0xef
 8001b38:	f7ff fbf8 	bl	800132c <LCD_Write_Data>
		  
		  break;
 8001b3c:	e024      	b.n	8001b88 <LCD_GramScan+0x154>

//		|y(320)              
//		|
//		|___ x(240)			
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001b3e:	2036      	movs	r0, #54	@ 0x36
 8001b40:	f7ff fbe6 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x48 );	
 8001b44:	2048      	movs	r0, #72	@ 0x48
 8001b46:	f7ff fbf1 	bl	800132c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001b4a:	202a      	movs	r0, #42	@ 0x2a
 8001b4c:	f7ff fbe0 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001b50:	2000      	movs	r0, #0
 8001b52:	f7ff fbeb 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b56:	2000      	movs	r0, #0
 8001b58:	f7ff fbe8 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff fbe5 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );	
 8001b62:	20ef      	movs	r0, #239	@ 0xef
 8001b64:	f7ff fbe2 	bl	800132c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001b68:	202b      	movs	r0, #43	@ 0x2b
 8001b6a:	f7ff fbd1 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f7ff fbdc 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7ff fbd9 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f7ff fbd6 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );		
 8001b80:	203f      	movs	r0, #63	@ 0x3f
 8001b82:	f7ff fbd3 	bl	800132c <LCD_Write_Data>
		
	    break;
 8001b86:	bf00      	nop
		
	}
	
	
	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 8001b88:	202c      	movs	r0, #44	@ 0x2c
 8001b8a:	f7ff fbc1 	bl	8001310 <LCD_Write_Cmd>
	
	
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop

08001b98 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
    if(in >= 0.0f)
 8001ba2:	f04f 0100 	mov.w	r1, #0
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fae6 	bl	8001178 <__aeabi_fcmpge>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <arm_sqrt_f32+0x2a>
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined ( __ICCARM__ ) && (__VER__ >= 6040000)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f007 f9bc 	bl	8008f30 <sqrtf>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	601a      	str	r2, [r3, #0]
#endif

      return (ARM_MATH_SUCCESS);
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e005      	b.n	8001bce <arm_sqrt_f32+0x36>
    }
    else
    {
      *pOut = 0.0f;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <apply_hann_window>:
  * @brief  Apply Hann window to input data to reduce spectral leakage
  * @param  data: Input data array
  * @param  N: Number of samples
  * @retval None
  */
void apply_hann_window(float *data, uint32_t N) {
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  for (uint32_t i = 0; i < N; i++) {
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	e035      	b.n	8001c54 <apply_hann_window+0x7c>
    data[i] *= 0.5f * (1.0f - arm_cos_f32(2.0f * PI * i / (N - 1)));
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f7ff f8bb 	bl	8000d64 <__aeabi_ui2f>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	491d      	ldr	r1, [pc, #116]	@ (8001c68 <apply_hann_window+0x90>)
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f90e 	bl	8000e14 <__aeabi_fmul>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461c      	mov	r4, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff f8af 	bl	8000d64 <__aeabi_ui2f>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7ff f9b6 	bl	8000f7c <__aeabi_fdiv>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f005 ffb8 	bl	8007b88 <arm_cos_f32>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001c20:	f7fe ffee 	bl	8000c00 <__aeabi_fsub>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f8f2 	bl	8000e14 <__aeabi_fmul>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4618      	mov	r0, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	6819      	ldr	r1, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	18d4      	adds	r4, r2, r3
 8001c46:	f7ff f8e5 	bl	8000e14 <__aeabi_fmul>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6023      	str	r3, [r4, #0]
  for (uint32_t i = 0; i < N; i++) {
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3301      	adds	r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d3c5      	bcc.n	8001be8 <apply_hann_window+0x10>
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd90      	pop	{r4, r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40c90fdb 	.word	0x40c90fdb

08001c6c <high_pass_filter>:
  * @brief  Apply a simple high-pass filter to remove low-frequency noise
  * @param  data: Input data array
  * @param  N: Number of samples
  * @retval None
  */
void high_pass_filter(float *data, uint32_t N) {
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  // Simple first-order high-pass filter with cutoff ~20 Hz
  float alpha = 0.98f; // Adjusted for lower cutoff
 8001c76:	4b21      	ldr	r3, [pc, #132]	@ (8001cfc <high_pass_filter+0x90>)
 8001c78:	60fb      	str	r3, [r7, #12]
  float prev = 0.0f;
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < N; i++) {
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	e031      	b.n	8001cea <high_pass_filter+0x7e>
    float curr = data[i];
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60bb      	str	r3, [r7, #8]
    data[i] = alpha * (prev + data[i] - (i > 0 ? data[i-1] : 0.0f));
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6979      	ldr	r1, [r7, #20]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe ffb0 	bl	8000c04 <__addsf3>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d008      	beq.n	8001cc0 <high_pass_filter+0x54>
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	e001      	b.n	8001cc4 <high_pass_filter+0x58>
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f7fe ff9b 	bl	8000c00 <__aeabi_fsub>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	18d4      	adds	r4, r2, r3
 8001cd6:	68f9      	ldr	r1, [r7, #12]
 8001cd8:	f7ff f89c 	bl	8000e14 <__aeabi_fmul>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	6023      	str	r3, [r4, #0]
    prev = curr;
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < N; i++) {
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d3c9      	bcc.n	8001c86 <high_pass_filter+0x1a>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}
 8001cfc:	3f7ae148 	.word	0x3f7ae148

08001d00 <find_dominant_freq>:
  * @brief  Find dominant frequency from FFT output
  * @param  fft_out: FFT output array (complex interleaved)
  * @param  N: FFT size
  * @retval Dominant frequency in Hz
  */
float find_dominant_freq(float *fft_out, uint32_t N) {
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b09d      	sub	sp, #116	@ 0x74
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  float max_mag = 0.0f;
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  uint32_t max_idx = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint32_t min_idx = (uint32_t)(50.0f * N / SAMPLING_RATE); // Min 50 Hz
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	f7ff f825 	bl	8000d64 <__aeabi_ui2f>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	493e      	ldr	r1, [pc, #248]	@ (8001e18 <find_dominant_freq+0x118>)
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f878 	bl	8000e14 <__aeabi_fmul>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f926 	bl	8000f7c <__aeabi_fdiv>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fa70 	bl	8001218 <__aeabi_f2uiz>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  uint32_t max_idx_limit = (uint32_t)(400.0f * N / SAMPLING_RATE); // Max 400 Hz
 8001d3c:	6838      	ldr	r0, [r7, #0]
 8001d3e:	f7ff f811 	bl	8000d64 <__aeabi_ui2f>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4935      	ldr	r1, [pc, #212]	@ (8001e1c <find_dominant_freq+0x11c>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff f864 	bl	8000e14 <__aeabi_fmul>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff f912 	bl	8000f7c <__aeabi_fdiv>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fa5c 	bl	8001218 <__aeabi_f2uiz>
 8001d60:	4603      	mov	r3, r0
 8001d62:	657b      	str	r3, [r7, #84]	@ 0x54
  for (uint32_t i = min_idx; i < max_idx_limit && i < N / 2; i++) {
 8001d64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d66:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d68:	e039      	b.n	8001dde <find_dominant_freq+0xde>
    float mag;
    arm_sqrt_f32(fft_out[2*i] * fft_out[2*i] + fft_out[2*i+1] * fft_out[2*i+1], &mag);
 8001d6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7ff f848 	bl	8000e14 <__aeabi_fmul>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461c      	mov	r4, r3
 8001d88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	3304      	adds	r3, #4
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f7ff f837 	bl	8000e14 <__aeabi_fmul>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4619      	mov	r1, r3
 8001daa:	4620      	mov	r0, r4
 8001dac:	f7fe ff2a 	bl	8000c04 <__addsf3>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001db8:	4619      	mov	r1, r3
 8001dba:	4610      	mov	r0, r2
 8001dbc:	f7ff feec 	bl	8001b98 <arm_sqrt_f32>
    if (mag > max_mag) {
 8001dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001dc6:	f7ff f9c3 	bl	8001150 <__aeabi_fcmplt>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <find_dominant_freq+0xd8>
      max_mag = mag;
 8001dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
      max_idx = i;
 8001dd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001dd6:	66bb      	str	r3, [r7, #104]	@ 0x68
  for (uint32_t i = min_idx; i < max_idx_limit && i < N / 2; i++) {
 8001dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001dda:	3301      	adds	r3, #1
 8001ddc:	667b      	str	r3, [r7, #100]	@ 0x64
 8001dde:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d204      	bcs.n	8001df0 <find_dominant_freq+0xf0>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	085b      	lsrs	r3, r3, #1
 8001dea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d3bc      	bcc.n	8001d6a <find_dominant_freq+0x6a>
    }
  }
  // Check for sufficient signal strength
  if (max_mag < MIN_MAG_THRESHOLD) {
 8001df0:	490b      	ldr	r1, [pc, #44]	@ (8001e20 <find_dominant_freq+0x120>)
 8001df2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001df4:	f7ff f9ac 	bl	8001150 <__aeabi_fcmplt>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d016      	beq.n	8001e2c <find_dominant_freq+0x12c>
    if (screen_state == STATE_DATA_DISPLAY) {
 8001dfe:	4b09      	ldr	r3, [pc, #36]	@ (8001e24 <find_dominant_freq+0x124>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d104      	bne.n	8001e10 <find_dominant_freq+0x110>
      LCD_DrawString(20, 140, "No Signal          ");
 8001e06:	4a08      	ldr	r2, [pc, #32]	@ (8001e28 <find_dominant_freq+0x128>)
 8001e08:	218c      	movs	r1, #140	@ 0x8c
 8001e0a:	2014      	movs	r0, #20
 8001e0c:	f7ff fd1e 	bl	800184c <LCD_DrawString>
    }
    return 0.0f; // Return 0 Hz for no valid signal
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	e123      	b.n	800205e <find_dominant_freq+0x35e>
 8001e16:	bf00      	nop
 8001e18:	42480000 	.word	0x42480000
 8001e1c:	43c80000 	.word	0x43c80000
 8001e20:	3dcccccd 	.word	0x3dcccccd
 8001e24:	2000629b 	.word	0x2000629b
 8001e28:	0800907c 	.word	0x0800907c
  }

  float freq = (float)max_idx * SAMPLING_RATE / N;
 8001e2c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001e2e:	f7fe ff99 	bl	8000d64 <__aeabi_ui2f>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe ffeb 	bl	8000e14 <__aeabi_fmul>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461c      	mov	r4, r3
 8001e42:	6838      	ldr	r0, [r7, #0]
 8001e44:	f7fe ff8e 	bl	8000d64 <__aeabi_ui2f>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f7ff f895 	bl	8000f7c <__aeabi_fdiv>
 8001e52:	4603      	mov	r3, r0
 8001e54:	663b      	str	r3, [r7, #96]	@ 0x60
  if (max_idx > 0 && max_idx < N / 2 - 1) {
 8001e56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a8 	beq.w	8001fae <find_dominant_freq+0x2ae>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	085b      	lsrs	r3, r3, #1
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001e66:	429a      	cmp	r2, r3
 8001e68:	f080 80a1 	bcs.w	8001fae <find_dominant_freq+0x2ae>
    float y1, y2, y3;
    arm_sqrt_f32(fft_out[2*(max_idx-1)] * fft_out[2*(max_idx-1)] + fft_out[2*(max_idx-1)+1] * fft_out[2*(max_idx-1)+1], &y1);
 8001e6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe ffc5 	bl	8000e14 <__aeabi_fmul>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461c      	mov	r4, r3
 8001e8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e90:	3b01      	subs	r3, #1
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	3304      	adds	r3, #4
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f7fe ffb2 	bl	8000e14 <__aeabi_fmul>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	f7fe fea5 	bl	8000c04 <__addsf3>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	f7ff fe67 	bl	8001b98 <arm_sqrt_f32>
    y2 = max_mag;
 8001eca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ecc:	653b      	str	r3, [r7, #80]	@ 0x50
    arm_sqrt_f32(fft_out[2*(max_idx+1)] * fft_out[2*(max_idx+1)] + fft_out[2*(max_idx+1)+1] * fft_out[2*(max_idx+1)+1], &y3);
 8001ece:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001edc:	3301      	adds	r3, #1
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f7fe ff94 	bl	8000e14 <__aeabi_fmul>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461c      	mov	r4, r3
 8001ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f00:	3301      	adds	r3, #1
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	3304      	adds	r3, #4
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f7fe ff81 	bl	8000e14 <__aeabi_fmul>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4619      	mov	r1, r3
 8001f16:	4620      	mov	r0, r4
 8001f18:	f7fe fe74 	bl	8000c04 <__addsf3>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f24:	4619      	mov	r1, r3
 8001f26:	4610      	mov	r0, r2
 8001f28:	f7ff fe36 	bl	8001b98 <arm_sqrt_f32>
    float p = (y3 - y1) / (2.0f * (2.0f * y2 - y1 - y3));
 8001f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fe64 	bl	8000c00 <__aeabi_fsub>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461c      	mov	r4, r3
 8001f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fe5f 	bl	8000c04 <__addsf3>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f7fe fe56 	bl	8000c00 <__aeabi_fsub>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	f7fe fe4f 	bl	8000c00 <__aeabi_fsub>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4619      	mov	r1, r3
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fe4c 	bl	8000c04 <__addsf3>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4620      	mov	r0, r4
 8001f72:	f7ff f803 	bl	8000f7c <__aeabi_fdiv>
 8001f76:	4603      	mov	r3, r0
 8001f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
    freq = (float)(max_idx + p) * SAMPLING_RATE / N;
 8001f7a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001f7c:	f7fe fef2 	bl	8000d64 <__aeabi_ui2f>
 8001f80:	4603      	mov	r3, r0
 8001f82:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fe3d 	bl	8000c04 <__addsf3>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe ff3f 	bl	8000e14 <__aeabi_fmul>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461c      	mov	r4, r3
 8001f9a:	6838      	ldr	r0, [r7, #0]
 8001f9c:	f7fe fee2 	bl	8000d64 <__aeabi_ui2f>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f7fe ffe9 	bl	8000f7c <__aeabi_fdiv>
 8001faa:	4603      	mov	r3, r0
 8001fac:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if (screen_state == STATE_DATA_DISPLAY) {
 8001fae:	4b2e      	ldr	r3, [pc, #184]	@ (8002068 <find_dominant_freq+0x368>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d126      	bne.n	8002004 <find_dominant_freq+0x304>
    // Debug raw frequency
    char buff[50];
    sprintf(buff, "Raw Freq: %d.%02d Hz", (int)freq, (int)((freq - (int)freq) * 100));
 8001fb6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001fb8:	f7ff f908 	bl	80011cc <__aeabi_f2iz>
 8001fbc:	4604      	mov	r4, r0
 8001fbe:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001fc0:	f7ff f904 	bl	80011cc <__aeabi_f2iz>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fed0 	bl	8000d6c <__aeabi_i2f>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001fd2:	f7fe fe15 	bl	8000c00 <__aeabi_fsub>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4924      	ldr	r1, [pc, #144]	@ (800206c <find_dominant_freq+0x36c>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe ff1a 	bl	8000e14 <__aeabi_fmul>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff f8f2 	bl	80011cc <__aeabi_f2iz>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f107 0008 	add.w	r0, r7, #8
 8001fee:	4622      	mov	r2, r4
 8001ff0:	491f      	ldr	r1, [pc, #124]	@ (8002070 <find_dominant_freq+0x370>)
 8001ff2:	f006 fae5 	bl	80085c0 <siprintf>
    LCD_DrawString(20, 140, buff);
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	218c      	movs	r1, #140	@ 0x8c
 8001ffe:	2014      	movs	r0, #20
 8002000:	f7ff fc24 	bl	800184c <LCD_DrawString>
  }
  // Check for second harmonic for guitar signals, only for freq < 220 Hz
  if (freq < 220.0f) {
 8002004:	491b      	ldr	r1, [pc, #108]	@ (8002074 <find_dominant_freq+0x374>)
 8002006:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002008:	f7ff f8a2 	bl	8001150 <__aeabi_fcmplt>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d024      	beq.n	800205c <find_dominant_freq+0x35c>
    float fund = freq / 2;
 8002012:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002016:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002018:	f7fe ffb0 	bl	8000f7c <__aeabi_fdiv>
 800201c:	4603      	mov	r3, r0
 800201e:	64bb      	str	r3, [r7, #72]	@ 0x48
    for (int i = 0; i < 6; i++) {
 8002020:	2300      	movs	r3, #0
 8002022:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002024:	e017      	b.n	8002056 <find_dominant_freq+0x356>
      if (fabs(fund - note_freqs[i]) < 5.0f) {
 8002026:	4a14      	ldr	r2, [pc, #80]	@ (8002078 <find_dominant_freq+0x378>)
 8002028:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	4619      	mov	r1, r3
 8002030:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002032:	f7fe fde5 	bl	8000c00 <__aeabi_fsub>
 8002036:	4603      	mov	r3, r0
 8002038:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800203c:	490f      	ldr	r1, [pc, #60]	@ (800207c <find_dominant_freq+0x37c>)
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff f886 	bl	8001150 <__aeabi_fcmplt>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <find_dominant_freq+0x350>
        freq = fund;
 800204a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800204c:	663b      	str	r3, [r7, #96]	@ 0x60
        break;
 800204e:	e005      	b.n	800205c <find_dominant_freq+0x35c>
    for (int i = 0; i < 6; i++) {
 8002050:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002052:	3301      	adds	r3, #1
 8002054:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002058:	2b05      	cmp	r3, #5
 800205a:	dde4      	ble.n	8002026 <find_dominant_freq+0x326>
      }
    }
  }
  return freq;
 800205c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
}
 800205e:	4618      	mov	r0, r3
 8002060:	3774      	adds	r7, #116	@ 0x74
 8002062:	46bd      	mov	sp, r7
 8002064:	bd90      	pop	{r4, r7, pc}
 8002066:	bf00      	nop
 8002068:	2000629b 	.word	0x2000629b
 800206c:	42c80000 	.word	0x42c80000
 8002070:	08009090 	.word	0x08009090
 8002074:	435c0000 	.word	0x435c0000
 8002078:	08009774 	.word	0x08009774
 800207c:	40a00000 	.word	0x40a00000

08002080 <map_to_note>:
  * @param  target_freq: Target note frequency
  * @param  note: Output buffer for note name
  * @param  status: Output buffer for tuning status
  * @retval None
  */
void map_to_note(float freq, float target_freq, char *note, char *status) {
 8002080:	b5b0      	push	{r4, r5, r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  strcpy(note, note_names[selected_note_idx]); // Always set to selected note
 800208e:	4b30      	ldr	r3, [pc, #192]	@ (8002150 <map_to_note+0xd0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a30      	ldr	r2, [pc, #192]	@ (8002154 <map_to_note+0xd4>)
 8002094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002098:	4619      	mov	r1, r3
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f006 fae6 	bl	800866c <strcpy>
  if (freq < 50.0f) {
 80020a0:	492d      	ldr	r1, [pc, #180]	@ (8002158 <map_to_note+0xd8>)
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f7ff f854 	bl	8001150 <__aeabi_fcmplt>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d009      	beq.n	80020c2 <map_to_note+0x42>
    strcpy(status, "No Signal");
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	492a      	ldr	r1, [pc, #168]	@ (800215c <map_to_note+0xdc>)
 80020b2:	461a      	mov	r2, r3
 80020b4:	460b      	mov	r3, r1
 80020b6:	cb03      	ldmia	r3!, {r0, r1}
 80020b8:	6010      	str	r0, [r2, #0]
 80020ba:	6051      	str	r1, [r2, #4]
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	8113      	strh	r3, [r2, #8]
    return;
 80020c0:	e03c      	b.n	800213c <map_to_note+0xbc>
  }
  if (fabs(freq - target_freq) / target_freq < 0.02f)
 80020c2:	68b9      	ldr	r1, [r7, #8]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7fe fd9b 	bl	8000c00 <__aeabi_fsub>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fa7f 	bl	80005d4 <__aeabi_f2d>
 80020d6:	4604      	mov	r4, r0
 80020d8:	460d      	mov	r5, r1
 80020da:	68b8      	ldr	r0, [r7, #8]
 80020dc:	f7fe fa7a 	bl	80005d4 <__aeabi_f2d>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4620      	mov	r0, r4
 80020e6:	4629      	mov	r1, r5
 80020e8:	f7fe fbf6 	bl	80008d8 <__aeabi_ddiv>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	a314      	add	r3, pc, #80	@ (adr r3, 8002148 <map_to_note+0xc8>)
 80020f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fa:	f7fe fd35 	bl	8000b68 <__aeabi_dcmplt>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <map_to_note+0x94>
    strcpy(status, "In Tune");
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4916      	ldr	r1, [pc, #88]	@ (8002160 <map_to_note+0xe0>)
 8002108:	461a      	mov	r2, r3
 800210a:	460b      	mov	r3, r1
 800210c:	cb03      	ldmia	r3!, {r0, r1}
 800210e:	6010      	str	r0, [r2, #0]
 8002110:	6051      	str	r1, [r2, #4]
 8002112:	e013      	b.n	800213c <map_to_note+0xbc>
  else if (freq < target_freq)
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f7ff f81a 	bl	8001150 <__aeabi_fcmplt>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d006      	beq.n	8002130 <map_to_note+0xb0>
    strcpy(status, "Flat");
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	4a0f      	ldr	r2, [pc, #60]	@ (8002164 <map_to_note+0xe4>)
 8002126:	6810      	ldr	r0, [r2, #0]
 8002128:	6018      	str	r0, [r3, #0]
 800212a:	7912      	ldrb	r2, [r2, #4]
 800212c:	711a      	strb	r2, [r3, #4]
 800212e:	e005      	b.n	800213c <map_to_note+0xbc>
  else
    strcpy(status, "Sharp");
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	4a0d      	ldr	r2, [pc, #52]	@ (8002168 <map_to_note+0xe8>)
 8002134:	6810      	ldr	r0, [r2, #0]
 8002136:	6018      	str	r0, [r3, #0]
 8002138:	8892      	ldrh	r2, [r2, #4]
 800213a:	809a      	strh	r2, [r3, #4]
}
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bdb0      	pop	{r4, r5, r7, pc}
 8002142:	bf00      	nop
 8002144:	f3af 8000 	nop.w
 8002148:	40000000 	.word	0x40000000
 800214c:	3f947ae1 	.word	0x3f947ae1
 8002150:	20002088 	.word	0x20002088
 8002154:	20002000 	.word	0x20002000
 8002158:	42480000 	.word	0x42480000
 800215c:	080090a8 	.word	0x080090a8
 8002160:	080090b4 	.word	0x080090b4
 8002164:	080090bc 	.word	0x080090bc
 8002168:	080090c4 	.word	0x080090c4

0800216c <draw_buttons>:
/**
  * @brief  Draw buttons for guitar notes
  * @param  None
  * @retval None
  */
void draw_buttons(void) {
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b085      	sub	sp, #20
 8002170:	af02      	add	r7, sp, #8
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002172:	b672      	cpsid	i
}
 8002174:	bf00      	nop
  __disable_irq(); // Prevent interrupts during screen update
  LCD_Clear(0, 0, 240, 320, BACKGROUND); // Double clear for reliability
 8002176:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002180:	22f0      	movs	r2, #240	@ 0xf0
 8002182:	2100      	movs	r1, #0
 8002184:	2000      	movs	r0, #0
 8002186:	f7ff fa72 	bl	800166e <LCD_Clear>
  LCD_Clear(0, 0, 240, 320, BACKGROUND);
 800218a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002194:	22f0      	movs	r2, #240	@ 0xf0
 8002196:	2100      	movs	r1, #0
 8002198:	2000      	movs	r0, #0
 800219a:	f7ff fa68 	bl	800166e <LCD_Clear>
  for (uint8_t i = 0; i < num_buttons; i++) {
 800219e:	2300      	movs	r3, #0
 80021a0:	71fb      	strb	r3, [r7, #7]
 80021a2:	e09a      	b.n	80022da <draw_buttons+0x16e>
    // Draw button rectangle
    LCD_DrawLine(buttons[i].x_min, buttons[i].y_min, buttons[i].x_max, buttons[i].y_min, BLACK);
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	4a52      	ldr	r2, [pc, #328]	@ (80022f0 <draw_buttons+0x184>)
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	4413      	add	r3, r2
 80021ac:	8818      	ldrh	r0, [r3, #0]
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	4a4f      	ldr	r2, [pc, #316]	@ (80022f0 <draw_buttons+0x184>)
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	4413      	add	r3, r2
 80021b6:	3304      	adds	r3, #4
 80021b8:	8819      	ldrh	r1, [r3, #0]
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	4a4c      	ldr	r2, [pc, #304]	@ (80022f0 <draw_buttons+0x184>)
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	4413      	add	r3, r2
 80021c2:	3302      	adds	r3, #2
 80021c4:	881a      	ldrh	r2, [r3, #0]
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	4c49      	ldr	r4, [pc, #292]	@ (80022f0 <draw_buttons+0x184>)
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	4423      	add	r3, r4
 80021ce:	3304      	adds	r3, #4
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	2400      	movs	r4, #0
 80021d4:	9400      	str	r4, [sp, #0]
 80021d6:	f7ff fa6d 	bl	80016b4 <LCD_DrawLine>
    LCD_DrawLine(buttons[i].x_max, buttons[i].y_min, buttons[i].x_max, buttons[i].y_max, BLACK);
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	4a44      	ldr	r2, [pc, #272]	@ (80022f0 <draw_buttons+0x184>)
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	4413      	add	r3, r2
 80021e2:	3302      	adds	r3, #2
 80021e4:	8818      	ldrh	r0, [r3, #0]
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	4a41      	ldr	r2, [pc, #260]	@ (80022f0 <draw_buttons+0x184>)
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	4413      	add	r3, r2
 80021ee:	3304      	adds	r3, #4
 80021f0:	8819      	ldrh	r1, [r3, #0]
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	4a3e      	ldr	r2, [pc, #248]	@ (80022f0 <draw_buttons+0x184>)
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	4413      	add	r3, r2
 80021fa:	3302      	adds	r3, #2
 80021fc:	881a      	ldrh	r2, [r3, #0]
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	4c3b      	ldr	r4, [pc, #236]	@ (80022f0 <draw_buttons+0x184>)
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	4423      	add	r3, r4
 8002206:	3306      	adds	r3, #6
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	2400      	movs	r4, #0
 800220c:	9400      	str	r4, [sp, #0]
 800220e:	f7ff fa51 	bl	80016b4 <LCD_DrawLine>
    LCD_DrawLine(buttons[i].x_max, buttons[i].y_max, buttons[i].x_min, buttons[i].y_max, BLACK);
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	4a36      	ldr	r2, [pc, #216]	@ (80022f0 <draw_buttons+0x184>)
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	4413      	add	r3, r2
 800221a:	3302      	adds	r3, #2
 800221c:	8818      	ldrh	r0, [r3, #0]
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	4a33      	ldr	r2, [pc, #204]	@ (80022f0 <draw_buttons+0x184>)
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	4413      	add	r3, r2
 8002226:	3306      	adds	r3, #6
 8002228:	8819      	ldrh	r1, [r3, #0]
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	4a30      	ldr	r2, [pc, #192]	@ (80022f0 <draw_buttons+0x184>)
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4413      	add	r3, r2
 8002232:	881a      	ldrh	r2, [r3, #0]
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	4c2e      	ldr	r4, [pc, #184]	@ (80022f0 <draw_buttons+0x184>)
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	4423      	add	r3, r4
 800223c:	3306      	adds	r3, #6
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	2400      	movs	r4, #0
 8002242:	9400      	str	r4, [sp, #0]
 8002244:	f7ff fa36 	bl	80016b4 <LCD_DrawLine>
    LCD_DrawLine(buttons[i].x_min, buttons[i].y_max, buttons[i].x_min, buttons[i].y_min, BLACK);
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	4a29      	ldr	r2, [pc, #164]	@ (80022f0 <draw_buttons+0x184>)
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	4413      	add	r3, r2
 8002250:	8818      	ldrh	r0, [r3, #0]
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	4a26      	ldr	r2, [pc, #152]	@ (80022f0 <draw_buttons+0x184>)
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	4413      	add	r3, r2
 800225a:	3306      	adds	r3, #6
 800225c:	8819      	ldrh	r1, [r3, #0]
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	4a23      	ldr	r2, [pc, #140]	@ (80022f0 <draw_buttons+0x184>)
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	4413      	add	r3, r2
 8002266:	881a      	ldrh	r2, [r3, #0]
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	4c21      	ldr	r4, [pc, #132]	@ (80022f0 <draw_buttons+0x184>)
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	4423      	add	r3, r4
 8002270:	3304      	adds	r3, #4
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	2400      	movs	r4, #0
 8002276:	9400      	str	r4, [sp, #0]
 8002278:	f7ff fa1c 	bl	80016b4 <LCD_DrawLine>
    // Draw note name
    uint16_t text_x = buttons[i].x_min + (BUTTON_WIDTH - strlen(buttons[i].note) * WIDTH_EN_CHAR) / 2;
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <draw_buttons+0x184>)
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	4413      	add	r3, r2
 8002284:	881c      	ldrh	r4, [r3, #0]
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	4a19      	ldr	r2, [pc, #100]	@ (80022f0 <draw_buttons+0x184>)
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	4413      	add	r3, r2
 800228e:	3308      	adds	r3, #8
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f832 	bl	80002fc <strlen>
 8002298:	4603      	mov	r3, r0
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 80022a0:	085b      	lsrs	r3, r3, #1
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4423      	add	r3, r4
 80022a6:	80bb      	strh	r3, [r7, #4]
    uint16_t text_y = buttons[i].y_min + (BUTTON_HEIGHT - HEIGHT_EN_CHAR) / 2;
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	4a11      	ldr	r2, [pc, #68]	@ (80022f0 <draw_buttons+0x184>)
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	4413      	add	r3, r2
 80022b0:	3304      	adds	r3, #4
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	3308      	adds	r3, #8
 80022b6:	807b      	strh	r3, [r7, #2]
    LCD_DrawString_Color(text_x, text_y, buttons[i].note, WHITE, BLACK);
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	4a0d      	ldr	r2, [pc, #52]	@ (80022f0 <draw_buttons+0x184>)
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	4413      	add	r3, r2
 80022c0:	3308      	adds	r3, #8
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	8879      	ldrh	r1, [r7, #2]
 80022c6:	88b8      	ldrh	r0, [r7, #4]
 80022c8:	2300      	movs	r3, #0
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022d0:	f7ff fb7a 	bl	80019c8 <LCD_DrawString_Color>
  for (uint8_t i = 0; i < num_buttons; i++) {
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	3301      	adds	r3, #1
 80022d8:	71fb      	strb	r3, [r7, #7]
 80022da:	2206      	movs	r2, #6
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	4293      	cmp	r3, r2
 80022e0:	f4ff af60 	bcc.w	80021a4 <draw_buttons+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 80022e4:	b662      	cpsie	i
}
 80022e6:	bf00      	nop
  }
  __enable_irq();
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd90      	pop	{r4, r7, pc}
 80022f0:	20002018 	.word	0x20002018

080022f4 <draw_data_screen>:
/**
  * @brief  Draw data screen with tuning information and Back button
  * @param  None
  * @retval None
  */
void draw_data_screen(void) {
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af02      	add	r7, sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
 80022fa:	b672      	cpsid	i
}
 80022fc:	bf00      	nop
  __disable_irq(); // Prevent interrupts during screen update
  LCD_Clear(0, 0, 240, 320, BACKGROUND);
 80022fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002308:	22f0      	movs	r2, #240	@ 0xf0
 800230a:	2100      	movs	r1, #0
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff f9ae 	bl	800166e <LCD_Clear>
  // Draw Back button
  LCD_DrawLine(back_button.x_min, back_button.y_min, back_button.x_max, back_button.y_min, BLACK);
 8002312:	4b29      	ldr	r3, [pc, #164]	@ (80023b8 <draw_data_screen+0xc4>)
 8002314:	8818      	ldrh	r0, [r3, #0]
 8002316:	4b28      	ldr	r3, [pc, #160]	@ (80023b8 <draw_data_screen+0xc4>)
 8002318:	8899      	ldrh	r1, [r3, #4]
 800231a:	4b27      	ldr	r3, [pc, #156]	@ (80023b8 <draw_data_screen+0xc4>)
 800231c:	885a      	ldrh	r2, [r3, #2]
 800231e:	4b26      	ldr	r3, [pc, #152]	@ (80023b8 <draw_data_screen+0xc4>)
 8002320:	889b      	ldrh	r3, [r3, #4]
 8002322:	2400      	movs	r4, #0
 8002324:	9400      	str	r4, [sp, #0]
 8002326:	f7ff f9c5 	bl	80016b4 <LCD_DrawLine>
  LCD_DrawLine(back_button.x_max, back_button.y_min, back_button.x_max, back_button.y_max, BLACK);
 800232a:	4b23      	ldr	r3, [pc, #140]	@ (80023b8 <draw_data_screen+0xc4>)
 800232c:	8858      	ldrh	r0, [r3, #2]
 800232e:	4b22      	ldr	r3, [pc, #136]	@ (80023b8 <draw_data_screen+0xc4>)
 8002330:	8899      	ldrh	r1, [r3, #4]
 8002332:	4b21      	ldr	r3, [pc, #132]	@ (80023b8 <draw_data_screen+0xc4>)
 8002334:	885a      	ldrh	r2, [r3, #2]
 8002336:	4b20      	ldr	r3, [pc, #128]	@ (80023b8 <draw_data_screen+0xc4>)
 8002338:	88db      	ldrh	r3, [r3, #6]
 800233a:	2400      	movs	r4, #0
 800233c:	9400      	str	r4, [sp, #0]
 800233e:	f7ff f9b9 	bl	80016b4 <LCD_DrawLine>
  LCD_DrawLine(back_button.x_max, back_button.y_max, back_button.x_min, back_button.y_max, BLACK);
 8002342:	4b1d      	ldr	r3, [pc, #116]	@ (80023b8 <draw_data_screen+0xc4>)
 8002344:	8858      	ldrh	r0, [r3, #2]
 8002346:	4b1c      	ldr	r3, [pc, #112]	@ (80023b8 <draw_data_screen+0xc4>)
 8002348:	88d9      	ldrh	r1, [r3, #6]
 800234a:	4b1b      	ldr	r3, [pc, #108]	@ (80023b8 <draw_data_screen+0xc4>)
 800234c:	881a      	ldrh	r2, [r3, #0]
 800234e:	4b1a      	ldr	r3, [pc, #104]	@ (80023b8 <draw_data_screen+0xc4>)
 8002350:	88db      	ldrh	r3, [r3, #6]
 8002352:	2400      	movs	r4, #0
 8002354:	9400      	str	r4, [sp, #0]
 8002356:	f7ff f9ad 	bl	80016b4 <LCD_DrawLine>
  LCD_DrawLine(back_button.x_min, back_button.y_max, back_button.x_min, back_button.y_min, BLACK);
 800235a:	4b17      	ldr	r3, [pc, #92]	@ (80023b8 <draw_data_screen+0xc4>)
 800235c:	8818      	ldrh	r0, [r3, #0]
 800235e:	4b16      	ldr	r3, [pc, #88]	@ (80023b8 <draw_data_screen+0xc4>)
 8002360:	88d9      	ldrh	r1, [r3, #6]
 8002362:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <draw_data_screen+0xc4>)
 8002364:	881a      	ldrh	r2, [r3, #0]
 8002366:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <draw_data_screen+0xc4>)
 8002368:	889b      	ldrh	r3, [r3, #4]
 800236a:	2400      	movs	r4, #0
 800236c:	9400      	str	r4, [sp, #0]
 800236e:	f7ff f9a1 	bl	80016b4 <LCD_DrawLine>
  uint16_t text_x = back_button.x_min + (BACK_BUTTON_WIDTH - strlen(back_button.note) * WIDTH_EN_CHAR) / 2;
 8002372:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <draw_data_screen+0xc4>)
 8002374:	881c      	ldrh	r4, [r3, #0]
 8002376:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <draw_data_screen+0xc4>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fd ffbe 	bl	80002fc <strlen>
 8002380:	4603      	mov	r3, r0
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8002388:	085b      	lsrs	r3, r3, #1
 800238a:	b29b      	uxth	r3, r3
 800238c:	4423      	add	r3, r4
 800238e:	80fb      	strh	r3, [r7, #6]
  uint16_t text_y = back_button.y_min + (BACK_BUTTON_HEIGHT - HEIGHT_EN_CHAR) / 2;
 8002390:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <draw_data_screen+0xc4>)
 8002392:	889b      	ldrh	r3, [r3, #4]
 8002394:	3303      	adds	r3, #3
 8002396:	80bb      	strh	r3, [r7, #4]
  LCD_DrawString_Color(text_x, text_y, back_button.note, WHITE, BLACK);
 8002398:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <draw_data_screen+0xc4>)
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	88b9      	ldrh	r1, [r7, #4]
 800239e:	88f8      	ldrh	r0, [r7, #6]
 80023a0:	2300      	movs	r3, #0
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023a8:	f7ff fb0e 	bl	80019c8 <LCD_DrawString_Color>
  __ASM volatile ("cpsie i" : : : "memory");
 80023ac:	b662      	cpsie	i
}
 80023ae:	bf00      	nop
  __enable_irq();
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd90      	pop	{r4, r7, pc}
 80023b8:	20002078 	.word	0x20002078

080023bc <check_touch>:
/**
  * @brief  Check for touch input and update state
  * @param  None
  * @retval None
  */
void check_touch(void) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
  strType_XPT2046_Coordinate touch_coord;
  if (ucXPT2046_TouchFlag && XPT2046_Get_TouchedPoint(&touch_coord, &strXPT2046_TouchPara)) {
 80023c2:	4b3b      	ldr	r3, [pc, #236]	@ (80024b0 <check_touch+0xf4>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d06c      	beq.n	80024a6 <check_touch+0xea>
 80023cc:	463b      	mov	r3, r7
 80023ce:	4939      	ldr	r1, [pc, #228]	@ (80024b4 <check_touch+0xf8>)
 80023d0:	4618      	mov	r0, r3
 80023d2:	f001 fca5 	bl	8003d20 <XPT2046_Get_TouchedPoint>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d064      	beq.n	80024a6 <check_touch+0xea>
    if (screen_state == STATE_NOTE_SELECT) {
 80023dc:	4b36      	ldr	r3, [pc, #216]	@ (80024b8 <check_touch+0xfc>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d139      	bne.n	8002458 <check_touch+0x9c>
      for (uint8_t i = 0; i < num_buttons; i++) {
 80023e4:	2300      	movs	r3, #0
 80023e6:	71fb      	strb	r3, [r7, #7]
 80023e8:	e031      	b.n	800244e <check_touch+0x92>
        if (touch_coord.x >= buttons[i].x_min && touch_coord.x <= buttons[i].x_max &&
 80023ea:	883a      	ldrh	r2, [r7, #0]
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	4933      	ldr	r1, [pc, #204]	@ (80024bc <check_touch+0x100>)
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	440b      	add	r3, r1
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d326      	bcc.n	8002448 <check_touch+0x8c>
 80023fa:	883a      	ldrh	r2, [r7, #0]
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	492f      	ldr	r1, [pc, #188]	@ (80024bc <check_touch+0x100>)
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	440b      	add	r3, r1
 8002404:	3302      	adds	r3, #2
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d81d      	bhi.n	8002448 <check_touch+0x8c>
            touch_coord.y >= buttons[i].y_min && touch_coord.y <= buttons[i].y_max) {
 800240c:	887a      	ldrh	r2, [r7, #2]
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	492a      	ldr	r1, [pc, #168]	@ (80024bc <check_touch+0x100>)
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	440b      	add	r3, r1
 8002416:	3304      	adds	r3, #4
 8002418:	881b      	ldrh	r3, [r3, #0]
        if (touch_coord.x >= buttons[i].x_min && touch_coord.x <= buttons[i].x_max &&
 800241a:	429a      	cmp	r2, r3
 800241c:	d314      	bcc.n	8002448 <check_touch+0x8c>
            touch_coord.y >= buttons[i].y_min && touch_coord.y <= buttons[i].y_max) {
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	4926      	ldr	r1, [pc, #152]	@ (80024bc <check_touch+0x100>)
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	440b      	add	r3, r1
 8002428:	3306      	adds	r3, #6
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d80b      	bhi.n	8002448 <check_touch+0x8c>
          selected_note_idx = i;
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	4a23      	ldr	r2, [pc, #140]	@ (80024c0 <check_touch+0x104>)
 8002434:	6013      	str	r3, [r2, #0]
          screen_state = STATE_DATA_DISPLAY;
 8002436:	4b20      	ldr	r3, [pc, #128]	@ (80024b8 <check_touch+0xfc>)
 8002438:	2201      	movs	r2, #1
 800243a:	701a      	strb	r2, [r3, #0]
          adc_complete = 0; // Reset to ensure fresh data
 800243c:	4b21      	ldr	r3, [pc, #132]	@ (80024c4 <check_touch+0x108>)
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
          draw_data_screen();
 8002442:	f7ff ff57 	bl	80022f4 <draw_data_screen>
          break;
 8002446:	e02b      	b.n	80024a0 <check_touch+0xe4>
      for (uint8_t i = 0; i < num_buttons; i++) {
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	3301      	adds	r3, #1
 800244c:	71fb      	strb	r3, [r7, #7]
 800244e:	2206      	movs	r2, #6
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	4293      	cmp	r3, r2
 8002454:	d3c9      	bcc.n	80023ea <check_touch+0x2e>
 8002456:	e023      	b.n	80024a0 <check_touch+0xe4>
        }
      }
    } else if (screen_state == STATE_DATA_DISPLAY) {
 8002458:	4b17      	ldr	r3, [pc, #92]	@ (80024b8 <check_touch+0xfc>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d11f      	bne.n	80024a0 <check_touch+0xe4>
      if (touch_coord.x >= back_button.x_min && touch_coord.x <= back_button.x_max &&
 8002460:	883a      	ldrh	r2, [r7, #0]
 8002462:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <check_touch+0x10c>)
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d31a      	bcc.n	80024a0 <check_touch+0xe4>
 800246a:	883a      	ldrh	r2, [r7, #0]
 800246c:	4b16      	ldr	r3, [pc, #88]	@ (80024c8 <check_touch+0x10c>)
 800246e:	885b      	ldrh	r3, [r3, #2]
 8002470:	429a      	cmp	r2, r3
 8002472:	d815      	bhi.n	80024a0 <check_touch+0xe4>
          touch_coord.y >= back_button.y_min && touch_coord.y <= back_button.y_max) {
 8002474:	887a      	ldrh	r2, [r7, #2]
 8002476:	4b14      	ldr	r3, [pc, #80]	@ (80024c8 <check_touch+0x10c>)
 8002478:	889b      	ldrh	r3, [r3, #4]
      if (touch_coord.x >= back_button.x_min && touch_coord.x <= back_button.x_max &&
 800247a:	429a      	cmp	r2, r3
 800247c:	d310      	bcc.n	80024a0 <check_touch+0xe4>
          touch_coord.y >= back_button.y_min && touch_coord.y <= back_button.y_max) {
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <check_touch+0x10c>)
 8002482:	88db      	ldrh	r3, [r3, #6]
 8002484:	429a      	cmp	r2, r3
 8002486:	d80b      	bhi.n	80024a0 <check_touch+0xe4>
        selected_note_idx = -1;
 8002488:	4b0d      	ldr	r3, [pc, #52]	@ (80024c0 <check_touch+0x104>)
 800248a:	f04f 32ff 	mov.w	r2, #4294967295
 800248e:	601a      	str	r2, [r3, #0]
        screen_state = STATE_NOTE_SELECT;
 8002490:	4b09      	ldr	r3, [pc, #36]	@ (80024b8 <check_touch+0xfc>)
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
        adc_complete = 0; // Prevent immediate data redraw
 8002496:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <check_touch+0x108>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
        draw_buttons();
 800249c:	f7ff fe66 	bl	800216c <draw_buttons>
      }
    }
    ucXPT2046_TouchFlag = 0;
 80024a0:	4b03      	ldr	r3, [pc, #12]	@ (80024b0 <check_touch+0xf4>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
  }
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200062a4 	.word	0x200062a4
 80024b4:	20002090 	.word	0x20002090
 80024b8:	2000629b 	.word	0x2000629b
 80024bc:	20002018 	.word	0x20002018
 80024c0:	20002088 	.word	0x20002088
 80024c4:	20006298 	.word	0x20006298
 80024c8:	20002078 	.word	0x20002078

080024cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b0b0      	sub	sp, #192	@ 0xc0
 80024d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024d2:	f001 fcd3 	bl	8003e7c <HAL_Init>

  /* USER CODE BEGIN Init */
  // Initialize CMSIS-DSP FFT
  arm_rfft_fast_init_f32(&fft_handler, FFT_SIZE);
 80024d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024da:	48c8      	ldr	r0, [pc, #800]	@ (80027fc <main+0x330>)
 80024dc:	f004 fc3c 	bl	8006d58 <arm_rfft_fast_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024e0:	f000 f9de 	bl	80028a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024e4:	f000 fb5e 	bl	8002ba4 <MX_GPIO_Init>
  MX_DMA_Init();
 80024e8:	f000 fb10 	bl	8002b0c <MX_DMA_Init>
  MX_FSMC_Init();
 80024ec:	f000 fc0a 	bl	8002d04 <MX_FSMC_Init>
  MX_ADC1_Init();
 80024f0:	f000 fa34 	bl	800295c <MX_ADC1_Init>
  MX_TIM2_Init();
 80024f4:	f000 fa70 	bl	80029d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80024f8:	f000 faba 	bl	8002a70 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Initialize LCD
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80024fc:	2200      	movs	r2, #0
 80024fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002502:	48bf      	ldr	r0, [pc, #764]	@ (8002800 <main+0x334>)
 8002504:	f003 f921 	bl	800574a <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8002508:	2014      	movs	r0, #20
 800250a:	f001 fd19 	bl	8003f40 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800250e:	2201      	movs	r2, #1
 8002510:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002514:	48ba      	ldr	r0, [pc, #744]	@ (8002800 <main+0x334>)
 8002516:	f003 f918 	bl	800574a <HAL_GPIO_WritePin>
  HAL_Delay(200);
 800251a:	20c8      	movs	r0, #200	@ 0xc8
 800251c:	f001 fd10 	bl	8003f40 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8002520:	2201      	movs	r2, #1
 8002522:	2102      	movs	r1, #2
 8002524:	48b7      	ldr	r0, [pc, #732]	@ (8002804 <main+0x338>)
 8002526:	f003 f910 	bl	800574a <HAL_GPIO_WritePin>
  HAL_Delay(50);
 800252a:	2032      	movs	r0, #50	@ 0x32
 800252c:	f001 fd08 	bl	8003f40 <HAL_Delay>
  LCD_INIT();
 8002530:	f7fe fea3 	bl	800127a <LCD_INIT>
  HAL_Delay(200);
 8002534:	20c8      	movs	r0, #200	@ 0xc8
 8002536:	f001 fd03 	bl	8003f40 <HAL_Delay>

  // Initialize touch screen
  macXPT2046_CS_DISABLE();
 800253a:	2200      	movs	r2, #0
 800253c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002540:	48af      	ldr	r0, [pc, #700]	@ (8002800 <main+0x334>)
 8002542:	f003 f902 	bl	800574a <HAL_GPIO_WritePin>
//  XPT2046_Init();
  while (!XPT2046_Touch_Calibrate()); // Run calibration until successful
 8002546:	bf00      	nop
 8002548:	f001 f9ae 	bl	80038a8 <XPT2046_Touch_Calibrate>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0fa      	beq.n	8002548 <main+0x7c>
  #define macXPT2046_Coordinate_GramScan 1 // Portrait 240x320, top-left origin
  LCD_GramScan(macXPT2046_Coordinate_GramScan); // Set orientation
 8002552:	2001      	movs	r0, #1
 8002554:	f7ff fa6e 	bl	8001a34 <LCD_GramScan>
  LCD_Clear(0, 0, 240, 320, BACKGROUND);
 8002558:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002562:	22f0      	movs	r2, #240	@ 0xf0
 8002564:	2100      	movs	r1, #0
 8002566:	2000      	movs	r0, #0
 8002568:	f7ff f881 	bl	800166e <LCD_Clear>
  draw_buttons();
 800256c:	f7ff fdfe 	bl	800216c <draw_buttons>

  // Start ADC and timer
  HAL_TIM_Base_Start(&htim3);
 8002570:	48a5      	ldr	r0, [pc, #660]	@ (8002808 <main+0x33c>)
 8002572:	f003 ff4b 	bl	800640c <HAL_TIM_Base_Start>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8002576:	48a5      	ldr	r0, [pc, #660]	@ (800280c <main+0x340>)
 8002578:	f002 f9ee 	bl	8004958 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer[0], FFT_SIZE);
 800257c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002580:	49a3      	ldr	r1, [pc, #652]	@ (8002810 <main+0x344>)
 8002582:	48a2      	ldr	r0, [pc, #648]	@ (800280c <main+0x340>)
 8002584:	f001 fdea 	bl	800415c <HAL_ADC_Start_DMA>
  float freq;
  char note[10], status[20];
  while (1)
  {
    // Check for touch input
    check_touch();
 8002588:	f7ff ff18 	bl	80023bc <check_touch>

    if (screen_state == STATE_DATA_DISPLAY && adc_complete && selected_note_idx >= 0) {
 800258c:	4ba1      	ldr	r3, [pc, #644]	@ (8002814 <main+0x348>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b01      	cmp	r3, #1
 8002592:	f040 817d 	bne.w	8002890 <main+0x3c4>
 8002596:	4ba0      	ldr	r3, [pc, #640]	@ (8002818 <main+0x34c>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8177 	beq.w	8002890 <main+0x3c4>
 80025a2:	4b9e      	ldr	r3, [pc, #632]	@ (800281c <main+0x350>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f2c0 8172 	blt.w	8002890 <main+0x3c4>
      adc_complete = 0; // Reset flag
 80025ac:	4b9a      	ldr	r3, [pc, #616]	@ (8002818 <main+0x34c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
      uint8_t buf_to_process = processing_buffer;
 80025b2:	4b9b      	ldr	r3, [pc, #620]	@ (8002820 <main+0x354>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab

      // Remove DC offset and prepare FFT input
      float mean = 0.0f;
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      for (uint32_t i = 0; i < FFT_SIZE; i++) {
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025c8:	e019      	b.n	80025fe <main+0x132>
        mean += adc_buffer[buf_to_process][i];
 80025ca:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 80025ce:	4990      	ldr	r1, [pc, #576]	@ (8002810 <main+0x344>)
 80025d0:	02da      	lsls	r2, r3, #11
 80025d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025d6:	4413      	add	r3, r2
 80025d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe fbc5 	bl	8000d6c <__aeabi_i2f>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4619      	mov	r1, r3
 80025e6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80025ea:	f7fe fb0b 	bl	8000c04 <__addsf3>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      for (uint32_t i = 0; i < FFT_SIZE; i++) {
 80025f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025f8:	3301      	adds	r3, #1
 80025fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002602:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002606:	d3e0      	bcc.n	80025ca <main+0xfe>
      }
      mean /= FFT_SIZE;
 8002608:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 800260c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8002610:	f7fe fcb4 	bl	8000f7c <__aeabi_fdiv>
 8002614:	4603      	mov	r3, r0
 8002616:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      for (uint32_t i = 0; i < FFT_SIZE; i++) {
 800261a:	2300      	movs	r3, #0
 800261c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002620:	e022      	b.n	8002668 <main+0x19c>
        fft_input[i] = (float)(adc_buffer[buf_to_process][i] - mean) / (ADC_MAX / 2.0f); // Scale to [-1, 1]
 8002622:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8002626:	497a      	ldr	r1, [pc, #488]	@ (8002810 <main+0x344>)
 8002628:	02da      	lsls	r2, r3, #11
 800262a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800262e:	4413      	add	r3, r2
 8002630:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe fb99 	bl	8000d6c <__aeabi_i2f>
 800263a:	4603      	mov	r3, r0
 800263c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fadd 	bl	8000c00 <__aeabi_fsub>
 8002646:	4603      	mov	r3, r0
 8002648:	4976      	ldr	r1, [pc, #472]	@ (8002824 <main+0x358>)
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fc96 	bl	8000f7c <__aeabi_fdiv>
 8002650:	4603      	mov	r3, r0
 8002652:	4619      	mov	r1, r3
 8002654:	4a74      	ldr	r2, [pc, #464]	@ (8002828 <main+0x35c>)
 8002656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800265a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      for (uint32_t i = 0; i < FFT_SIZE; i++) {
 800265e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002662:	3301      	adds	r3, #1
 8002664:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800266c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002670:	d3d7      	bcc.n	8002622 <main+0x156>
      }

      // Apply high-pass filter
      high_pass_filter(fft_input, FFT_SIZE);
 8002672:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002676:	486c      	ldr	r0, [pc, #432]	@ (8002828 <main+0x35c>)
 8002678:	f7ff faf8 	bl	8001c6c <high_pass_filter>

      // Apply Hann window
      apply_hann_window(fft_input, FFT_SIZE);
 800267c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002680:	4869      	ldr	r0, [pc, #420]	@ (8002828 <main+0x35c>)
 8002682:	f7ff faa9 	bl	8001bd8 <apply_hann_window>

      // Compute FFT
      arm_rfft_fast_f32(&fft_handler, fft_input, fft_output, 0);
 8002686:	2300      	movs	r3, #0
 8002688:	4a68      	ldr	r2, [pc, #416]	@ (800282c <main+0x360>)
 800268a:	4967      	ldr	r1, [pc, #412]	@ (8002828 <main+0x35c>)
 800268c:	485b      	ldr	r0, [pc, #364]	@ (80027fc <main+0x330>)
 800268e:	f004 fbe3 	bl	8006e58 <arm_rfft_fast_f32>
      freq = find_dominant_freq(fft_output, FFT_SIZE);
 8002692:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002696:	4865      	ldr	r0, [pc, #404]	@ (800282c <main+0x360>)
 8002698:	f7ff fb32 	bl	8001d00 <find_dominant_freq>
 800269c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

      // Get note and status
      map_to_note(freq, buttons[selected_note_idx].freq, note, status);
 80026a0:	4b5e      	ldr	r3, [pc, #376]	@ (800281c <main+0x350>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a62      	ldr	r2, [pc, #392]	@ (8002830 <main+0x364>)
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	4413      	add	r3, r2
 80026aa:	330c      	adds	r3, #12
 80026ac:	6819      	ldr	r1, [r3, #0]
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	f107 0218 	add.w	r2, r7, #24
 80026b4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80026b8:	f7ff fce2 	bl	8002080 <map_to_note>

      // Display data
      sprintf(buff, "ADC: %u", adc_buffer[buf_to_process][0]);
 80026bc:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 80026c0:	4a53      	ldr	r2, [pc, #332]	@ (8002810 <main+0x344>)
 80026c2:	031b      	lsls	r3, r3, #12
 80026c4:	4413      	add	r3, r2
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ce:	4959      	ldr	r1, [pc, #356]	@ (8002834 <main+0x368>)
 80026d0:	4618      	mov	r0, r3
 80026d2:	f005 ff75 	bl	80085c0 <siprintf>
      LCD_DrawString(20, 20, buff);
 80026d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026da:	461a      	mov	r2, r3
 80026dc:	2114      	movs	r1, #20
 80026de:	2014      	movs	r0, #20
 80026e0:	f7ff f8b4 	bl	800184c <LCD_DrawString>

      LCD_DrawString(20, 50, "                    "); // Clear previous target
 80026e4:	4a54      	ldr	r2, [pc, #336]	@ (8002838 <main+0x36c>)
 80026e6:	2132      	movs	r1, #50	@ 0x32
 80026e8:	2014      	movs	r0, #20
 80026ea:	f7ff f8af 	bl	800184c <LCD_DrawString>
      sprintf(buff, "Target: %s", note);
 80026ee:	f107 0218 	add.w	r2, r7, #24
 80026f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026f6:	4951      	ldr	r1, [pc, #324]	@ (800283c <main+0x370>)
 80026f8:	4618      	mov	r0, r3
 80026fa:	f005 ff61 	bl	80085c0 <siprintf>
      LCD_DrawString(20, 50, buff);
 80026fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002702:	461a      	mov	r2, r3
 8002704:	2132      	movs	r1, #50	@ 0x32
 8002706:	2014      	movs	r0, #20
 8002708:	f7ff f8a0 	bl	800184c <LCD_DrawString>

      LCD_DrawString(20, 80, "                    "); // Clear previous status
 800270c:	4a4a      	ldr	r2, [pc, #296]	@ (8002838 <main+0x36c>)
 800270e:	2150      	movs	r1, #80	@ 0x50
 8002710:	2014      	movs	r0, #20
 8002712:	f7ff f89b 	bl	800184c <LCD_DrawString>
      sprintf(buff, "Status: %s", status);
 8002716:	1d3a      	adds	r2, r7, #4
 8002718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800271c:	4948      	ldr	r1, [pc, #288]	@ (8002840 <main+0x374>)
 800271e:	4618      	mov	r0, r3
 8002720:	f005 ff4e 	bl	80085c0 <siprintf>
      LCD_DrawString(20, 80, buff);
 8002724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002728:	461a      	mov	r2, r3
 800272a:	2150      	movs	r1, #80	@ 0x50
 800272c:	2014      	movs	r0, #20
 800272e:	f7ff f88d 	bl	800184c <LCD_DrawString>

      int freq_int_part = (int)freq;
 8002732:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002736:	f7fe fd49 	bl	80011cc <__aeabi_f2iz>
 800273a:	4603      	mov	r3, r0
 800273c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      int freq_frac_part = (int)((freq - freq_int_part) * 100);
 8002740:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002744:	f7fe fb12 	bl	8000d6c <__aeabi_i2f>
 8002748:	4603      	mov	r3, r0
 800274a:	4619      	mov	r1, r3
 800274c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002750:	f7fe fa56 	bl	8000c00 <__aeabi_fsub>
 8002754:	4603      	mov	r3, r0
 8002756:	493b      	ldr	r1, [pc, #236]	@ (8002844 <main+0x378>)
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe fb5b 	bl	8000e14 <__aeabi_fmul>
 800275e:	4603      	mov	r3, r0
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe fd33 	bl	80011cc <__aeabi_f2iz>
 8002766:	4603      	mov	r3, r0
 8002768:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      sprintf(buff, "Freq: %d.%02d Hz", freq_int_part, freq_frac_part);
 800276c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002770:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002774:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8002778:	4933      	ldr	r1, [pc, #204]	@ (8002848 <main+0x37c>)
 800277a:	f005 ff21 	bl	80085c0 <siprintf>
      LCD_DrawString(20, 110, buff);
 800277e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002782:	461a      	mov	r2, r3
 8002784:	216e      	movs	r1, #110	@ 0x6e
 8002786:	2014      	movs	r0, #20
 8002788:	f7ff f860 	bl	800184c <LCD_DrawString>

      if (hadc1.Instance->SR & (1U << 5)) {
 800278c:	4b1f      	ldr	r3, [pc, #124]	@ (800280c <main+0x340>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d005      	beq.n	80027a6 <main+0x2da>
        LCD_DrawString(20, 170, "ADC Overrun");
 800279a:	4a2c      	ldr	r2, [pc, #176]	@ (800284c <main+0x380>)
 800279c:	21aa      	movs	r1, #170	@ 0xaa
 800279e:	2014      	movs	r0, #20
 80027a0:	f7ff f854 	bl	800184c <LCD_DrawString>
 80027a4:	e004      	b.n	80027b0 <main+0x2e4>
      } else {
        LCD_DrawString(20, 170, "                "); // Clear overrun message
 80027a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002850 <main+0x384>)
 80027a8:	21aa      	movs	r1, #170	@ 0xaa
 80027aa:	2014      	movs	r0, #20
 80027ac:	f7ff f84e 	bl	800184c <LCD_DrawString>
      }

      // LED indicators
      if (strcmp(status, "In Tune") == 0) {
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	4928      	ldr	r1, [pc, #160]	@ (8002854 <main+0x388>)
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fd97 	bl	80002e8 <strcmp>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <main+0x30a>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Green on
 80027c0:	2200      	movs	r2, #0
 80027c2:	2101      	movs	r1, #1
 80027c4:	4824      	ldr	r0, [pc, #144]	@ (8002858 <main+0x38c>)
 80027c6:	f002 ffc0 	bl	800574a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_5, GPIO_PIN_SET);
 80027ca:	2201      	movs	r2, #1
 80027cc:	2122      	movs	r1, #34	@ 0x22
 80027ce:	4822      	ldr	r0, [pc, #136]	@ (8002858 <main+0x38c>)
 80027d0:	f002 ffbb 	bl	800574a <HAL_GPIO_WritePin>
 80027d4:	e05c      	b.n	8002890 <main+0x3c4>
      } else if (strcmp(status, "Flat") == 0) {
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	4920      	ldr	r1, [pc, #128]	@ (800285c <main+0x390>)
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fd fd84 	bl	80002e8 <strcmp>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d13c      	bne.n	8002860 <main+0x394>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Red on
 80027e6:	2200      	movs	r2, #0
 80027e8:	2120      	movs	r1, #32
 80027ea:	481b      	ldr	r0, [pc, #108]	@ (8002858 <main+0x38c>)
 80027ec:	f002 ffad 	bl	800574a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_SET);
 80027f0:	2201      	movs	r2, #1
 80027f2:	2103      	movs	r1, #3
 80027f4:	4818      	ldr	r0, [pc, #96]	@ (8002858 <main+0x38c>)
 80027f6:	f002 ffa8 	bl	800574a <HAL_GPIO_WritePin>
 80027fa:	e049      	b.n	8002890 <main+0x3c4>
 80027fc:	20006280 	.word	0x20006280
 8002800:	40011400 	.word	0x40011400
 8002804:	40011800 	.word	0x40011800
 8002808:	200021f0 	.word	0x200021f0
 800280c:	20002134 	.word	0x20002134
 8002810:	20000000 	.word	0x20000000
 8002814:	2000629b 	.word	0x2000629b
 8002818:	20006298 	.word	0x20006298
 800281c:	20002088 	.word	0x20002088
 8002820:	2000629a 	.word	0x2000629a
 8002824:	44fff000 	.word	0x44fff000
 8002828:	20002280 	.word	0x20002280
 800282c:	20004280 	.word	0x20004280
 8002830:	20002018 	.word	0x20002018
 8002834:	080090cc 	.word	0x080090cc
 8002838:	080090d4 	.word	0x080090d4
 800283c:	080090ec 	.word	0x080090ec
 8002840:	080090f8 	.word	0x080090f8
 8002844:	42c80000 	.word	0x42c80000
 8002848:	08009104 	.word	0x08009104
 800284c:	08009118 	.word	0x08009118
 8002850:	08009124 	.word	0x08009124
 8002854:	080090b4 	.word	0x080090b4
 8002858:	40010c00 	.word	0x40010c00
 800285c:	080090bc 	.word	0x080090bc
      } else if (strcmp(status, "Sharp") == 0) {
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	490d      	ldr	r1, [pc, #52]	@ (8002898 <main+0x3cc>)
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fd3f 	bl	80002e8 <strcmp>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <main+0x3ba>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Blue on
 8002870:	2200      	movs	r2, #0
 8002872:	2102      	movs	r1, #2
 8002874:	4809      	ldr	r0, [pc, #36]	@ (800289c <main+0x3d0>)
 8002876:	f002 ff68 	bl	800574a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_5, GPIO_PIN_SET);
 800287a:	2201      	movs	r2, #1
 800287c:	2121      	movs	r1, #33	@ 0x21
 800287e:	4807      	ldr	r0, [pc, #28]	@ (800289c <main+0x3d0>)
 8002880:	f002 ff63 	bl	800574a <HAL_GPIO_WritePin>
 8002884:	e004      	b.n	8002890 <main+0x3c4>
      } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5, GPIO_PIN_SET); // All off
 8002886:	2201      	movs	r2, #1
 8002888:	2123      	movs	r1, #35	@ 0x23
 800288a:	4804      	ldr	r0, [pc, #16]	@ (800289c <main+0x3d0>)
 800288c:	f002 ff5d 	bl	800574a <HAL_GPIO_WritePin>
      }
    }
    HAL_Delay(20); // Increased delay to test timing
 8002890:	2014      	movs	r0, #20
 8002892:	f001 fb55 	bl	8003f40 <HAL_Delay>
    check_touch();
 8002896:	e677      	b.n	8002588 <main+0xbc>
 8002898:	080090c4 	.word	0x080090c4
 800289c:	40010c00 	.word	0x40010c00

080028a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b096      	sub	sp, #88	@ 0x58
 80028a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80028aa:	2228      	movs	r2, #40	@ 0x28
 80028ac:	2100      	movs	r1, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f005 fea8 	bl	8008604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	60da      	str	r2, [r3, #12]
 80028d0:	611a      	str	r2, [r3, #16]
 80028d2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028d4:	2301      	movs	r3, #1
 80028d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80028de:	2300      	movs	r3, #0
 80028e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028e2:	2301      	movs	r3, #1
 80028e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028e6:	2302      	movs	r3, #2
 80028e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028f0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80028f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 ff60 	bl	80057c0 <HAL_RCC_OscConfig>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002906:	f000 faaf 	bl	8002e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800290a:	230f      	movs	r3, #15
 800290c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800290e:	2302      	movs	r3, #2
 8002910:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002916:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800291a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800291c:	2300      	movs	r3, #0
 800291e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002920:	f107 031c 	add.w	r3, r7, #28
 8002924:	2102      	movs	r1, #2
 8002926:	4618      	mov	r0, r3
 8002928:	f003 f9cc 	bl	8005cc4 <HAL_RCC_ClockConfig>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002932:	f000 fa99 	bl	8002e68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002936:	2302      	movs	r3, #2
 8002938:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800293a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800293e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	4618      	mov	r0, r3
 8002944:	f003 fb38 	bl	8005fb8 <HAL_RCCEx_PeriphCLKConfig>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800294e:	f000 fa8b 	bl	8002e68 <Error_Handler>
  }
}
 8002952:	bf00      	nop
 8002954:	3758      	adds	r7, #88	@ 0x58
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]

  hadc1.Instance = ADC1;
 800296c:	4b18      	ldr	r3, [pc, #96]	@ (80029d0 <MX_ADC1_Init+0x74>)
 800296e:	4a19      	ldr	r2, [pc, #100]	@ (80029d4 <MX_ADC1_Init+0x78>)
 8002970:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002972:	4b17      	ldr	r3, [pc, #92]	@ (80029d0 <MX_ADC1_Init+0x74>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002978:	4b15      	ldr	r3, [pc, #84]	@ (80029d0 <MX_ADC1_Init+0x74>)
 800297a:	2200      	movs	r2, #0
 800297c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800297e:	4b14      	ldr	r3, [pc, #80]	@ (80029d0 <MX_ADC1_Init+0x74>)
 8002980:	2200      	movs	r2, #0
 8002982:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002984:	4b12      	ldr	r3, [pc, #72]	@ (80029d0 <MX_ADC1_Init+0x74>)
 8002986:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800298a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800298c:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <MX_ADC1_Init+0x74>)
 800298e:	2200      	movs	r2, #0
 8002990:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002992:	4b0f      	ldr	r3, [pc, #60]	@ (80029d0 <MX_ADC1_Init+0x74>)
 8002994:	2201      	movs	r2, #1
 8002996:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002998:	480d      	ldr	r0, [pc, #52]	@ (80029d0 <MX_ADC1_Init+0x74>)
 800299a:	f001 faf5 	bl	8003f88 <HAL_ADC_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80029a4:	f000 fa60 	bl	8002e68 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_3;
 80029a8:	2303      	movs	r3, #3
 80029aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029ac:	2301      	movs	r3, #1
 80029ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5; // Increased for stability
 80029b0:	2307      	movs	r3, #7
 80029b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	4619      	mov	r1, r3
 80029b8:	4805      	ldr	r0, [pc, #20]	@ (80029d0 <MX_ADC1_Init+0x74>)
 80029ba:	f001 fdd3 	bl	8004564 <HAL_ADC_ConfigChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80029c4:	f000 fa50 	bl	8002e68 <Error_Handler>
  }
}
 80029c8:	bf00      	nop
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20002134 	.word	0x20002134
 80029d4:	40012400 	.word	0x40012400

080029d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029de:	f107 0308 	add.w	r3, r7, #8
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ec:	463b      	mov	r3, r7
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80029f4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a6c <MX_TIM2_Init+0x94>)
 80029f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <MX_TIM2_Init+0x94>)
 80029fe:	2223      	movs	r2, #35	@ 0x23
 8002a00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a02:	4b1a      	ldr	r3, [pc, #104]	@ (8002a6c <MX_TIM2_Init+0x94>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 976;
 8002a08:	4b18      	ldr	r3, [pc, #96]	@ (8002a6c <MX_TIM2_Init+0x94>)
 8002a0a:	f44f 7274 	mov.w	r2, #976	@ 0x3d0
 8002a0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a10:	4b16      	ldr	r3, [pc, #88]	@ (8002a6c <MX_TIM2_Init+0x94>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a16:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <MX_TIM2_Init+0x94>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a1c:	4813      	ldr	r0, [pc, #76]	@ (8002a6c <MX_TIM2_Init+0x94>)
 8002a1e:	f003 fca6 	bl	800636e <HAL_TIM_Base_Init>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002a28:	f000 fa1e 	bl	8002e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a32:	f107 0308 	add.w	r3, r7, #8
 8002a36:	4619      	mov	r1, r3
 8002a38:	480c      	ldr	r0, [pc, #48]	@ (8002a6c <MX_TIM2_Init+0x94>)
 8002a3a:	f003 fe2f 	bl	800669c <HAL_TIM_ConfigClockSource>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002a44:	f000 fa10 	bl	8002e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a48:	2320      	movs	r3, #32
 8002a4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002a4c:	2380      	movs	r3, #128	@ 0x80
 8002a4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a50:	463b      	mov	r3, r7
 8002a52:	4619      	mov	r1, r3
 8002a54:	4805      	ldr	r0, [pc, #20]	@ (8002a6c <MX_TIM2_Init+0x94>)
 8002a56:	f004 f831 	bl	8006abc <HAL_TIMEx_MasterConfigSynchronization>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002a60:	f000 fa02 	bl	8002e68 <Error_Handler>
  }
}
 8002a64:	bf00      	nop
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	200021a8 	.word	0x200021a8

08002a70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a76:	f107 0308 	add.w	r3, r7, #8
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a84:	463b      	mov	r3, r7
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b04 <MX_TIM3_Init+0x94>)
 8002a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8002b08 <MX_TIM3_Init+0x98>)
 8002a90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35; // (72 MHz / (35 + 1)) = 2 MHz
 8002a92:	4b1c      	ldr	r3, [pc, #112]	@ (8002b04 <MX_TIM3_Init+0x94>)
 8002a94:	2223      	movs	r2, #35	@ 0x23
 8002a96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a98:	4b1a      	ldr	r3, [pc, #104]	@ (8002b04 <MX_TIM3_Init+0x94>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 487;  // 2 MHz / (487 + 1) ≈ 4096 Hz
 8002a9e:	4b19      	ldr	r3, [pc, #100]	@ (8002b04 <MX_TIM3_Init+0x94>)
 8002aa0:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002aa4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa6:	4b17      	ldr	r3, [pc, #92]	@ (8002b04 <MX_TIM3_Init+0x94>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aac:	4b15      	ldr	r3, [pc, #84]	@ (8002b04 <MX_TIM3_Init+0x94>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ab2:	4814      	ldr	r0, [pc, #80]	@ (8002b04 <MX_TIM3_Init+0x94>)
 8002ab4:	f003 fc5b 	bl	800636e <HAL_TIM_Base_Init>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002abe:	f000 f9d3 	bl	8002e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ac8:	f107 0308 	add.w	r3, r7, #8
 8002acc:	4619      	mov	r1, r3
 8002ace:	480d      	ldr	r0, [pc, #52]	@ (8002b04 <MX_TIM3_Init+0x94>)
 8002ad0:	f003 fde4 	bl	800669c <HAL_TIM_ConfigClockSource>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002ada:	f000 f9c5 	bl	8002e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ade:	2320      	movs	r3, #32
 8002ae0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002ae2:	2380      	movs	r3, #128	@ 0x80
 8002ae4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ae6:	463b      	mov	r3, r7
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4806      	ldr	r0, [pc, #24]	@ (8002b04 <MX_TIM3_Init+0x94>)
 8002aec:	f003 ffe6 	bl	8006abc <HAL_TIMEx_MasterConfigSynchronization>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002af6:	f000 f9b7 	bl	8002e68 <Error_Handler>
  }
}
 8002afa:	bf00      	nop
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200021f0 	.word	0x200021f0
 8002b08:	40000400 	.word	0x40000400

08002b0c <MX_DMA_Init>:
/**
  * @brief Enable DMA controller clock
  * @retval None
  */
static void MX_DMA_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b12:	4b20      	ldr	r3, [pc, #128]	@ (8002b94 <MX_DMA_Init+0x88>)
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	4a1f      	ldr	r2, [pc, #124]	@ (8002b94 <MX_DMA_Init+0x88>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6153      	str	r3, [r2, #20]
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002b94 <MX_DMA_Init+0x88>)
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0); // Highest priority
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	200b      	movs	r0, #11
 8002b30:	f002 f8a1 	bl	8004c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b34:	200b      	movs	r0, #11
 8002b36:	f002 f8ba 	bl	8004cae <HAL_NVIC_EnableIRQ>

  /* Configure DMA for ADC1 */
  hdma_adc1.Instance = DMA1_Channel1;
 8002b3a:	4b17      	ldr	r3, [pc, #92]	@ (8002b98 <MX_DMA_Init+0x8c>)
 8002b3c:	4a17      	ldr	r2, [pc, #92]	@ (8002b9c <MX_DMA_Init+0x90>)
 8002b3e:	601a      	str	r2, [r3, #0]
  hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b40:	4b15      	ldr	r3, [pc, #84]	@ (8002b98 <MX_DMA_Init+0x8c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	605a      	str	r2, [r3, #4]
  hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b46:	4b14      	ldr	r3, [pc, #80]	@ (8002b98 <MX_DMA_Init+0x8c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
  hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b4c:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <MX_DMA_Init+0x8c>)
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	60da      	str	r2, [r3, #12]
  hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b52:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <MX_DMA_Init+0x8c>)
 8002b54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b58:	611a      	str	r2, [r3, #16]
  hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b98 <MX_DMA_Init+0x8c>)
 8002b5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b60:	615a      	str	r2, [r3, #20]
  hdma_adc1.Init.Mode = DMA_NORMAL; // Normal mode for simplicity
 8002b62:	4b0d      	ldr	r3, [pc, #52]	@ (8002b98 <MX_DMA_Init+0x8c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	619a      	str	r2, [r3, #24]
  hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002b68:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <MX_DMA_Init+0x8c>)
 8002b6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b6e:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b70:	4809      	ldr	r0, [pc, #36]	@ (8002b98 <MX_DMA_Init+0x8c>)
 8002b72:	f002 f8b7 	bl	8004ce4 <HAL_DMA_Init>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_DMA_Init+0x74>
  {
    Error_Handler();
 8002b7c:	f000 f974 	bl	8002e68 <Error_Handler>
  }

  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 8002b80:	4b07      	ldr	r3, [pc, #28]	@ (8002ba0 <MX_DMA_Init+0x94>)
 8002b82:	4a05      	ldr	r2, [pc, #20]	@ (8002b98 <MX_DMA_Init+0x8c>)
 8002b84:	621a      	str	r2, [r3, #32]
 8002b86:	4b04      	ldr	r3, [pc, #16]	@ (8002b98 <MX_DMA_Init+0x8c>)
 8002b88:	4a05      	ldr	r2, [pc, #20]	@ (8002ba0 <MX_DMA_Init+0x94>)
 8002b8a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40021000 	.word	0x40021000
 8002b98:	20002164 	.word	0x20002164
 8002b9c:	40020008 	.word	0x40020008
 8002ba0:	20002134 	.word	0x20002134

08002ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	@ 0x28
 8002ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002baa:	f107 0318 	add.w	r3, r7, #24
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	605a      	str	r2, [r3, #4]
 8002bb4:	609a      	str	r2, [r3, #8]
 8002bb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb8:	4b4d      	ldr	r3, [pc, #308]	@ (8002cf0 <MX_GPIO_Init+0x14c>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	4a4c      	ldr	r2, [pc, #304]	@ (8002cf0 <MX_GPIO_Init+0x14c>)
 8002bbe:	f043 0310 	orr.w	r3, r3, #16
 8002bc2:	6193      	str	r3, [r2, #24]
 8002bc4:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf0 <MX_GPIO_Init+0x14c>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd0:	4b47      	ldr	r3, [pc, #284]	@ (8002cf0 <MX_GPIO_Init+0x14c>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	4a46      	ldr	r2, [pc, #280]	@ (8002cf0 <MX_GPIO_Init+0x14c>)
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	6193      	str	r3, [r2, #24]
 8002bdc:	4b44      	ldr	r3, [pc, #272]	@ (8002cf0 <MX_GPIO_Init+0x14c>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be8:	4b41      	ldr	r3, [pc, #260]	@ (8002cf0 <MX_GPIO_Init+0x14c>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	4a40      	ldr	r2, [pc, #256]	@ (8002cf0 <MX_GPIO_Init+0x14c>)
 8002bee:	f043 0308 	orr.w	r3, r3, #8
 8002bf2:	6193      	str	r3, [r2, #24]
 8002bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8002cf0 <MX_GPIO_Init+0x14c>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c00:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf0 <MX_GPIO_Init+0x14c>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	4a3a      	ldr	r2, [pc, #232]	@ (8002cf0 <MX_GPIO_Init+0x14c>)
 8002c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c0a:	6193      	str	r3, [r2, #24]
 8002c0c:	4b38      	ldr	r3, [pc, #224]	@ (8002cf0 <MX_GPIO_Init+0x14c>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c18:	4b35      	ldr	r3, [pc, #212]	@ (8002cf0 <MX_GPIO_Init+0x14c>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	4a34      	ldr	r2, [pc, #208]	@ (8002cf0 <MX_GPIO_Init+0x14c>)
 8002c1e:	f043 0320 	orr.w	r3, r3, #32
 8002c22:	6193      	str	r3, [r2, #24]
 8002c24:	4b32      	ldr	r3, [pc, #200]	@ (8002cf0 <MX_GPIO_Init+0x14c>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8002c30:	2201      	movs	r2, #1
 8002c32:	2123      	movs	r1, #35	@ 0x23
 8002c34:	482f      	ldr	r0, [pc, #188]	@ (8002cf4 <MX_GPIO_Init+0x150>)
 8002c36:	f002 fd88 	bl	800574a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_SET);
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002c40:	482d      	ldr	r0, [pc, #180]	@ (8002cf8 <MX_GPIO_Init+0x154>)
 8002c42:	f002 fd82 	bl	800574a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8002c46:	2201      	movs	r2, #1
 8002c48:	2107      	movs	r1, #7
 8002c4a:	482c      	ldr	r0, [pc, #176]	@ (8002cfc <MX_GPIO_Init+0x158>)
 8002c4c:	f002 fd7d 	bl	800574a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8002c50:	2323      	movs	r3, #35	@ 0x23
 8002c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c54:	2301      	movs	r3, #1
 8002c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c60:	f107 0318 	add.w	r3, r7, #24
 8002c64:	4619      	mov	r1, r3
 8002c66:	4823      	ldr	r0, [pc, #140]	@ (8002cf4 <MX_GPIO_Init+0x150>)
 8002c68:	f002 fbc4 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002c6c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c72:	2301      	movs	r3, #1
 8002c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c7e:	f107 0318 	add.w	r3, r7, #24
 8002c82:	4619      	mov	r1, r3
 8002c84:	481c      	ldr	r0, [pc, #112]	@ (8002cf8 <MX_GPIO_Init+0x154>)
 8002c86:	f002 fbb5 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c96:	2302      	movs	r3, #2
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c9a:	f107 0318 	add.w	r3, r7, #24
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4816      	ldr	r0, [pc, #88]	@ (8002cfc <MX_GPIO_Init+0x158>)
 8002ca2:	f002 fba7 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cb2:	f107 0318 	add.w	r3, r7, #24
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4810      	ldr	r0, [pc, #64]	@ (8002cfc <MX_GPIO_Init+0x158>)
 8002cba:	f002 fb9b 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002cbe:	2310      	movs	r3, #16
 8002cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d00 <MX_GPIO_Init+0x15c>)
 8002cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cca:	f107 0318 	add.w	r3, r7, #24
 8002cce:	4619      	mov	r1, r3
 8002cd0:	480a      	ldr	r0, [pc, #40]	@ (8002cfc <MX_GPIO_Init+0x158>)
 8002cd2:	f002 fb8f 	bl	80053f4 <HAL_GPIO_Init>

  /* EXTI interrupt init */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2101      	movs	r1, #1
 8002cda:	200a      	movs	r0, #10
 8002cdc:	f001 ffcb 	bl	8004c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002ce0:	200a      	movs	r0, #10
 8002ce2:	f001 ffe4 	bl	8004cae <HAL_NVIC_EnableIRQ>
}
 8002ce6:	bf00      	nop
 8002ce8:	3728      	adds	r7, #40	@ 0x28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40010c00 	.word	0x40010c00
 8002cf8:	40011400 	.word	0x40011400
 8002cfc:	40011800 	.word	0x40011800
 8002d00:	10210000 	.word	0x10210000

08002d04 <MX_FSMC_Init>:
/**
  * @brief FSMC initialization function
  * @retval None
  */
static void MX_FSMC_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
 8002d18:	615a      	str	r2, [r3, #20]
 8002d1a:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002d1c:	4b28      	ldr	r3, [pc, #160]	@ (8002dc0 <MX_FSMC_Init+0xbc>)
 8002d1e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8002d22:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002d24:	4b26      	ldr	r3, [pc, #152]	@ (8002dc0 <MX_FSMC_Init+0xbc>)
 8002d26:	4a27      	ldr	r2, [pc, #156]	@ (8002dc4 <MX_FSMC_Init+0xc0>)
 8002d28:	605a      	str	r2, [r3, #4]
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002d2a:	4b25      	ldr	r3, [pc, #148]	@ (8002dc0 <MX_FSMC_Init+0xbc>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002d30:	4b23      	ldr	r3, [pc, #140]	@ (8002dc0 <MX_FSMC_Init+0xbc>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002d36:	4b22      	ldr	r3, [pc, #136]	@ (8002dc0 <MX_FSMC_Init+0xbc>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002d3c:	4b20      	ldr	r3, [pc, #128]	@ (8002dc0 <MX_FSMC_Init+0xbc>)
 8002d3e:	2210      	movs	r2, #16
 8002d40:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002d42:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc0 <MX_FSMC_Init+0xbc>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002d48:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc0 <MX_FSMC_Init+0xbc>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc0 <MX_FSMC_Init+0xbc>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002d54:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc0 <MX_FSMC_Init+0xbc>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002d5a:	4b19      	ldr	r3, [pc, #100]	@ (8002dc0 <MX_FSMC_Init+0xbc>)
 8002d5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d60:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002d62:	4b17      	ldr	r3, [pc, #92]	@ (8002dc0 <MX_FSMC_Init+0xbc>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002d68:	4b15      	ldr	r3, [pc, #84]	@ (8002dc0 <MX_FSMC_Init+0xbc>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002d6e:	4b14      	ldr	r3, [pc, #80]	@ (8002dc0 <MX_FSMC_Init+0xbc>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002d74:	4b12      	ldr	r3, [pc, #72]	@ (8002dc0 <MX_FSMC_Init+0xbc>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	639a      	str	r2, [r3, #56]	@ 0x38
  Timing.AddressSetupTime = 15;
 8002d7a:	230f      	movs	r3, #15
 8002d7c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002d7e:	230f      	movs	r3, #15
 8002d80:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002d82:	23ff      	movs	r3, #255	@ 0xff
 8002d84:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002d86:	230f      	movs	r3, #15
 8002d88:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002d8a:	2310      	movs	r3, #16
 8002d8c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002d8e:	2311      	movs	r3, #17
 8002d90:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2200      	movs	r2, #0
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4808      	ldr	r0, [pc, #32]	@ (8002dc0 <MX_FSMC_Init+0xbc>)
 8002d9e:	f003 fa99 	bl	80062d4 <HAL_SRAM_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_FSMC_Init+0xa8>
  {
    Error_Handler();
 8002da8:	f000 f85e 	bl	8002e68 <Error_Handler>
  }

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002dac:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <MX_FSMC_Init+0xc4>)
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	4a05      	ldr	r2, [pc, #20]	@ (8002dc8 <MX_FSMC_Init+0xc4>)
 8002db2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002db6:	61d3      	str	r3, [r2, #28]
}
 8002db8:	bf00      	nop
 8002dba:	3720      	adds	r7, #32
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20002238 	.word	0x20002238
 8002dc4:	a0000104 	.word	0xa0000104
 8002dc8:	40010000 	.word	0x40010000

08002dcc <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  ADC conversion complete callback
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1) {
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e4c <HAL_ADC_ConvCpltCallback+0x80>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d131      	bne.n	8002e42 <HAL_ADC_ConvCpltCallback+0x76>
    if (HAL_DMA_GetState(&hdma_adc1) == HAL_DMA_STATE_READY) {
 8002dde:	481c      	ldr	r0, [pc, #112]	@ (8002e50 <HAL_ADC_ConvCpltCallback+0x84>)
 8002de0:	f002 face 	bl	8005380 <HAL_DMA_GetState>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d12b      	bne.n	8002e42 <HAL_ADC_ConvCpltCallback+0x76>
  __ASM volatile ("cpsid i" : : : "memory");
 8002dea:	b672      	cpsid	i
}
 8002dec:	bf00      	nop
      // Critical section to synchronize buffer toggle
      __disable_irq();
      adc_complete = 1;
 8002dee:	4b19      	ldr	r3, [pc, #100]	@ (8002e54 <HAL_ADC_ConvCpltCallback+0x88>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]
      buffer_idx = !buffer_idx;
 8002df4:	4b18      	ldr	r3, [pc, #96]	@ (8002e58 <HAL_ADC_ConvCpltCallback+0x8c>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bf0c      	ite	eq
 8002dfe:	2301      	moveq	r3, #1
 8002e00:	2300      	movne	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b14      	ldr	r3, [pc, #80]	@ (8002e58 <HAL_ADC_ConvCpltCallback+0x8c>)
 8002e08:	701a      	strb	r2, [r3, #0]
      processing_buffer = !buffer_idx;
 8002e0a:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <HAL_ADC_ConvCpltCallback+0x8c>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e5c <HAL_ADC_ConvCpltCallback+0x90>)
 8002e1e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e20:	b662      	cpsie	i
}
 8002e22:	bf00      	nop
      __enable_irq();

      // Stop current DMA transfer
      if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK) {
 8002e24:	480e      	ldr	r0, [pc, #56]	@ (8002e60 <HAL_ADC_ConvCpltCallback+0x94>)
 8002e26:	f001 fa77 	bl	8004318 <HAL_ADC_Stop_DMA>
        // Error handling without display
      }

      // Start DMA transfer for the new buffer
      if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer[buffer_idx], FFT_SIZE) != HAL_OK) {
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e58 <HAL_ADC_ConvCpltCallback+0x8c>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	031b      	lsls	r3, r3, #12
 8002e32:	4a0c      	ldr	r2, [pc, #48]	@ (8002e64 <HAL_ADC_ConvCpltCallback+0x98>)
 8002e34:	4413      	add	r3, r2
 8002e36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4808      	ldr	r0, [pc, #32]	@ (8002e60 <HAL_ADC_ConvCpltCallback+0x94>)
 8002e3e:	f001 f98d 	bl	800415c <HAL_ADC_Start_DMA>
        // Error handling without display
      }
    }
  }
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40012400 	.word	0x40012400
 8002e50:	20002164 	.word	0x20002164
 8002e54:	20006298 	.word	0x20006298
 8002e58:	20006299 	.word	0x20006299
 8002e5c:	2000629a 	.word	0x2000629a
 8002e60:	20002134 	.word	0x20002134
 8002e64:	20000000 	.word	0x20000000

08002e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002e6c:	b672      	cpsid	i
}
 8002e6e:	bf00      	nop
  __disable_irq();
  while (1)
 8002e70:	bf00      	nop
 8002e72:	e7fd      	b.n	8002e70 <Error_Handler+0x8>

08002e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e7a:	4b15      	ldr	r3, [pc, #84]	@ (8002ed0 <HAL_MspInit+0x5c>)
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	4a14      	ldr	r2, [pc, #80]	@ (8002ed0 <HAL_MspInit+0x5c>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6193      	str	r3, [r2, #24]
 8002e86:	4b12      	ldr	r3, [pc, #72]	@ (8002ed0 <HAL_MspInit+0x5c>)
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e92:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed0 <HAL_MspInit+0x5c>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed0 <HAL_MspInit+0x5c>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e9c:	61d3      	str	r3, [r2, #28]
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed0 <HAL_MspInit+0x5c>)
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <HAL_MspInit+0x60>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	4a04      	ldr	r2, [pc, #16]	@ (8002ed4 <HAL_MspInit+0x60>)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40010000 	.word	0x40010000

08002ed8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	f107 0310 	add.w	r3, r7, #16
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a29      	ldr	r2, [pc, #164]	@ (8002f98 <HAL_ADC_MspInit+0xc0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d14a      	bne.n	8002f8e <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ef8:	4b28      	ldr	r3, [pc, #160]	@ (8002f9c <HAL_ADC_MspInit+0xc4>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	4a27      	ldr	r2, [pc, #156]	@ (8002f9c <HAL_ADC_MspInit+0xc4>)
 8002efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f02:	6193      	str	r3, [r2, #24]
 8002f04:	4b25      	ldr	r3, [pc, #148]	@ (8002f9c <HAL_ADC_MspInit+0xc4>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f10:	4b22      	ldr	r3, [pc, #136]	@ (8002f9c <HAL_ADC_MspInit+0xc4>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	4a21      	ldr	r2, [pc, #132]	@ (8002f9c <HAL_ADC_MspInit+0xc4>)
 8002f16:	f043 0304 	orr.w	r3, r3, #4
 8002f1a:	6193      	str	r3, [r2, #24]
 8002f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f9c <HAL_ADC_MspInit+0xc4>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f28:	2308      	movs	r3, #8
 8002f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f30:	f107 0310 	add.w	r3, r7, #16
 8002f34:	4619      	mov	r1, r3
 8002f36:	481a      	ldr	r0, [pc, #104]	@ (8002fa0 <HAL_ADC_MspInit+0xc8>)
 8002f38:	f002 fa5c 	bl	80053f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002f3c:	4b19      	ldr	r3, [pc, #100]	@ (8002fa4 <HAL_ADC_MspInit+0xcc>)
 8002f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002fa8 <HAL_ADC_MspInit+0xd0>)
 8002f40:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f42:	4b18      	ldr	r3, [pc, #96]	@ (8002fa4 <HAL_ADC_MspInit+0xcc>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f48:	4b16      	ldr	r3, [pc, #88]	@ (8002fa4 <HAL_ADC_MspInit+0xcc>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f4e:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <HAL_ADC_MspInit+0xcc>)
 8002f50:	2280      	movs	r2, #128	@ 0x80
 8002f52:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f54:	4b13      	ldr	r3, [pc, #76]	@ (8002fa4 <HAL_ADC_MspInit+0xcc>)
 8002f56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f5a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f5c:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <HAL_ADC_MspInit+0xcc>)
 8002f5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f62:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002f64:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa4 <HAL_ADC_MspInit+0xcc>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa4 <HAL_ADC_MspInit+0xcc>)
 8002f6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f70:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f72:	480c      	ldr	r0, [pc, #48]	@ (8002fa4 <HAL_ADC_MspInit+0xcc>)
 8002f74:	f001 feb6 	bl	8004ce4 <HAL_DMA_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8002f7e:	f7ff ff73 	bl	8002e68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a07      	ldr	r2, [pc, #28]	@ (8002fa4 <HAL_ADC_MspInit+0xcc>)
 8002f86:	621a      	str	r2, [r3, #32]
 8002f88:	4a06      	ldr	r2, [pc, #24]	@ (8002fa4 <HAL_ADC_MspInit+0xcc>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002f8e:	bf00      	nop
 8002f90:	3720      	adds	r7, #32
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40012400 	.word	0x40012400
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40010800 	.word	0x40010800
 8002fa4:	20002164 	.word	0x20002164
 8002fa8:	40020008 	.word	0x40020008

08002fac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x44>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d113      	bne.n	8002fe6 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff4 <HAL_TIM_Base_MspInit+0x48>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ff4 <HAL_TIM_Base_MspInit+0x48>)
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	61d3      	str	r3, [r2, #28]
 8002fca:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff4 <HAL_TIM_Base_MspInit+0x48>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2100      	movs	r1, #0
 8002fda:	201d      	movs	r0, #29
 8002fdc:	f001 fe4b 	bl	8004c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002fe0:	201d      	movs	r0, #29
 8002fe2:	f001 fe64 	bl	8004cae <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002ffe:	f107 0308 	add.w	r3, r7, #8
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 800300c:	4b18      	ldr	r3, [pc, #96]	@ (8003070 <HAL_FSMC_MspInit+0x78>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d129      	bne.n	8003068 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8003014:	4b16      	ldr	r3, [pc, #88]	@ (8003070 <HAL_FSMC_MspInit+0x78>)
 8003016:	2201      	movs	r2, #1
 8003018:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800301a:	4b16      	ldr	r3, [pc, #88]	@ (8003074 <HAL_FSMC_MspInit+0x7c>)
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	4a15      	ldr	r2, [pc, #84]	@ (8003074 <HAL_FSMC_MspInit+0x7c>)
 8003020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003024:	6153      	str	r3, [r2, #20]
 8003026:	4b13      	ldr	r3, [pc, #76]	@ (8003074 <HAL_FSMC_MspInit+0x7c>)
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003032:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8003036:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003038:	2302      	movs	r3, #2
 800303a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800303c:	2303      	movs	r3, #3
 800303e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003040:	f107 0308 	add.w	r3, r7, #8
 8003044:	4619      	mov	r1, r3
 8003046:	480c      	ldr	r0, [pc, #48]	@ (8003078 <HAL_FSMC_MspInit+0x80>)
 8003048:	f002 f9d4 	bl	80053f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800304c:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 8003050:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003056:	2303      	movs	r3, #3
 8003058:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800305a:	f107 0308 	add.w	r3, r7, #8
 800305e:	4619      	mov	r1, r3
 8003060:	4806      	ldr	r0, [pc, #24]	@ (800307c <HAL_FSMC_MspInit+0x84>)
 8003062:	f002 f9c7 	bl	80053f4 <HAL_GPIO_Init>
 8003066:	e000      	b.n	800306a <HAL_FSMC_MspInit+0x72>
    return;
 8003068:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	2000629c 	.word	0x2000629c
 8003074:	40021000 	.word	0x40021000
 8003078:	40011800 	.word	0x40011800
 800307c:	40011400 	.word	0x40011400

08003080 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8003088:	f7ff ffb6 	bl	8002ff8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003098:	bf00      	nop
 800309a:	e7fd      	b.n	8003098 <NMI_Handler+0x4>

0800309c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a0:	bf00      	nop
 80030a2:	e7fd      	b.n	80030a0 <HardFault_Handler+0x4>

080030a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030a8:	bf00      	nop
 80030aa:	e7fd      	b.n	80030a8 <MemManage_Handler+0x4>

080030ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b0:	bf00      	nop
 80030b2:	e7fd      	b.n	80030b0 <BusFault_Handler+0x4>

080030b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <UsageFault_Handler+0x4>

080030bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030e4:	f000 ff10 	bl	8003f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030e8:	bf00      	nop
 80030ea:	bd80      	pop	{r7, pc}

080030ec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET) {
 80030f0:	4b08      	ldr	r3, [pc, #32]	@ (8003114 <EXTI4_IRQHandler+0x28>)
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <EXTI4_IRQHandler+0x1c>
      __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80030fc:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <EXTI4_IRQHandler+0x28>)
 80030fe:	2210      	movs	r2, #16
 8003100:	615a      	str	r2, [r3, #20]
      ucXPT2046_TouchFlag = 1; // Set touch flag
 8003102:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <EXTI4_IRQHandler+0x2c>)
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
      // Debug: Indicate interrupt triggered
//      LCD_DrawString(20, 290, "EXTI4 Triggered    ");
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003108:	2010      	movs	r0, #16
 800310a:	f002 fb37 	bl	800577c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  /* USER CODE END EXTI4_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40010400 	.word	0x40010400
 8003118:	200062a4 	.word	0x200062a4

0800311c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003120:	4802      	ldr	r0, [pc, #8]	@ (800312c <DMA1_Channel1_IRQHandler+0x10>)
 8003122:	f001 fef1 	bl	8004f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20002164 	.word	0x20002164

08003130 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003134:	4802      	ldr	r0, [pc, #8]	@ (8003140 <ADC1_2_IRQHandler+0x10>)
 8003136:	f001 f93b 	bl	80043b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20002134 	.word	0x20002134

08003144 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003148:	4802      	ldr	r0, [pc, #8]	@ (8003154 <TIM3_IRQHandler+0x10>)
 800314a:	f003 f9b7 	bl	80064bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200021f0 	.word	0x200021f0

08003158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003160:	4a14      	ldr	r2, [pc, #80]	@ (80031b4 <_sbrk+0x5c>)
 8003162:	4b15      	ldr	r3, [pc, #84]	@ (80031b8 <_sbrk+0x60>)
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800316c:	4b13      	ldr	r3, [pc, #76]	@ (80031bc <_sbrk+0x64>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003174:	4b11      	ldr	r3, [pc, #68]	@ (80031bc <_sbrk+0x64>)
 8003176:	4a12      	ldr	r2, [pc, #72]	@ (80031c0 <_sbrk+0x68>)
 8003178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800317a:	4b10      	ldr	r3, [pc, #64]	@ (80031bc <_sbrk+0x64>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	429a      	cmp	r2, r3
 8003186:	d207      	bcs.n	8003198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003188:	f005 fa44 	bl	8008614 <__errno>
 800318c:	4603      	mov	r3, r0
 800318e:	220c      	movs	r2, #12
 8003190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	e009      	b.n	80031ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003198:	4b08      	ldr	r3, [pc, #32]	@ (80031bc <_sbrk+0x64>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800319e:	4b07      	ldr	r3, [pc, #28]	@ (80031bc <_sbrk+0x64>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4413      	add	r3, r2
 80031a6:	4a05      	ldr	r2, [pc, #20]	@ (80031bc <_sbrk+0x64>)
 80031a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031aa:	68fb      	ldr	r3, [r7, #12]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20010000 	.word	0x20010000
 80031b8:	00000400 	.word	0x00000400
 80031bc:	200062a0 	.word	0x200062a0
 80031c0:	200063f8 	.word	0x200063f8

080031c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <XPT2046_DelayUS>:



	
static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	e00a      	b.n	80031f4 <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;     
 80031de:	230c      	movs	r3, #12
 80031e0:	72fb      	strb	r3, [r7, #11]
	      
		while ( uc -- );     
 80031e2:	bf00      	nop
 80031e4:	7afb      	ldrb	r3, [r7, #11]
 80031e6:	1e5a      	subs	r2, r3, #1
 80031e8:	72fa      	strb	r2, [r7, #11]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1fa      	bne.n	80031e4 <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3301      	adds	r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d3f0      	bcc.n	80031de <XPT2046_DelayUS+0xe>

	}
	
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD ( uint8_t ucCmd ) 
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
	uint8_t i;


	macXPT2046_MOSI_0();
 8003212:	2200      	movs	r2, #0
 8003214:	2104      	movs	r1, #4
 8003216:	481d      	ldr	r0, [pc, #116]	@ (800328c <XPT2046_WriteCMD+0x84>)
 8003218:	f002 fa97 	bl	800574a <HAL_GPIO_WritePin>
	
	macXPT2046_CLK_LOW();
 800321c:	2200      	movs	r2, #0
 800321e:	2101      	movs	r1, #1
 8003220:	481a      	ldr	r0, [pc, #104]	@ (800328c <XPT2046_WriteCMD+0x84>)
 8003222:	f002 fa92 	bl	800574a <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ ) 
 8003226:	2300      	movs	r3, #0
 8003228:	73fb      	strb	r3, [r7, #15]
 800322a:	e027      	b.n	800327c <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 800322c:	79fa      	ldrb	r2, [r7, #7]
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	f1c3 0307 	rsb	r3, r3, #7
 8003234:	fa42 f303 	asr.w	r3, r2, r3
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <XPT2046_WriteCMD+0x44>
 8003240:	2201      	movs	r2, #1
 8003242:	2104      	movs	r1, #4
 8003244:	4811      	ldr	r0, [pc, #68]	@ (800328c <XPT2046_WriteCMD+0x84>)
 8003246:	f002 fa80 	bl	800574a <HAL_GPIO_WritePin>
 800324a:	e004      	b.n	8003256 <XPT2046_WriteCMD+0x4e>
 800324c:	2200      	movs	r2, #0
 800324e:	2104      	movs	r1, #4
 8003250:	480e      	ldr	r0, [pc, #56]	@ (800328c <XPT2046_WriteCMD+0x84>)
 8003252:	f002 fa7a 	bl	800574a <HAL_GPIO_WritePin>
		
	  XPT2046_DelayUS ( 5 );
 8003256:	2005      	movs	r0, #5
 8003258:	f7ff ffba 	bl	80031d0 <XPT2046_DelayUS>
		
		macXPT2046_CLK_HIGH();
 800325c:	2201      	movs	r2, #1
 800325e:	2101      	movs	r1, #1
 8003260:	480a      	ldr	r0, [pc, #40]	@ (800328c <XPT2046_WriteCMD+0x84>)
 8003262:	f002 fa72 	bl	800574a <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 8003266:	2005      	movs	r0, #5
 8003268:	f7ff ffb2 	bl	80031d0 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 800326c:	2200      	movs	r2, #0
 800326e:	2101      	movs	r1, #1
 8003270:	4806      	ldr	r0, [pc, #24]	@ (800328c <XPT2046_WriteCMD+0x84>)
 8003272:	f002 fa6a 	bl	800574a <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ ) 
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	3301      	adds	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	2b07      	cmp	r3, #7
 8003280:	d9d4      	bls.n	800322c <XPT2046_WriteCMD+0x24>
	}
	
}
 8003282:	bf00      	nop
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40011800 	.word	0x40011800

08003290 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD ( void ) 
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 8003296:	2300      	movs	r3, #0
 8003298:	80bb      	strh	r3, [r7, #4]
	


	macXPT2046_MOSI_0();
 800329a:	2200      	movs	r2, #0
 800329c:	2104      	movs	r1, #4
 800329e:	4819      	ldr	r0, [pc, #100]	@ (8003304 <XPT2046_ReadCMD+0x74>)
 80032a0:	f002 fa53 	bl	800574a <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 80032a4:	2201      	movs	r2, #1
 80032a6:	2101      	movs	r1, #1
 80032a8:	4816      	ldr	r0, [pc, #88]	@ (8003304 <XPT2046_ReadCMD+0x74>)
 80032aa:	f002 fa4e 	bl	800574a <HAL_GPIO_WritePin>

	for ( i=0;i<12;i++ ) 
 80032ae:	2300      	movs	r3, #0
 80032b0:	71fb      	strb	r3, [r7, #7]
 80032b2:	e01e      	b.n	80032f2 <XPT2046_ReadCMD+0x62>
	{
		macXPT2046_CLK_LOW();    
 80032b4:	2200      	movs	r2, #0
 80032b6:	2101      	movs	r1, #1
 80032b8:	4812      	ldr	r0, [pc, #72]	@ (8003304 <XPT2046_ReadCMD+0x74>)
 80032ba:	f002 fa46 	bl	800574a <HAL_GPIO_WritePin>
	
		usTemp = macXPT2046_MISO();
 80032be:	2108      	movs	r1, #8
 80032c0:	4810      	ldr	r0, [pc, #64]	@ (8003304 <XPT2046_ReadCMD+0x74>)
 80032c2:	f002 fa2b 	bl	800571c <HAL_GPIO_ReadPin>
 80032c6:	4603      	mov	r3, r0
 80032c8:	807b      	strh	r3, [r7, #2]
		
		usBuf |= usTemp << ( 11 - i );
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	f1c3 030b 	rsb	r3, r3, #11
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	b21a      	sxth	r2, r3
 80032d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80032dc:	4313      	orrs	r3, r2
 80032de:	b21b      	sxth	r3, r3
 80032e0:	80bb      	strh	r3, [r7, #4]
	
		macXPT2046_CLK_HIGH();
 80032e2:	2201      	movs	r2, #1
 80032e4:	2101      	movs	r1, #1
 80032e6:	4807      	ldr	r0, [pc, #28]	@ (8003304 <XPT2046_ReadCMD+0x74>)
 80032e8:	f002 fa2f 	bl	800574a <HAL_GPIO_WritePin>
	for ( i=0;i<12;i++ ) 
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	3301      	adds	r3, #1
 80032f0:	71fb      	strb	r3, [r7, #7]
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	2b0b      	cmp	r3, #11
 80032f6:	d9dd      	bls.n	80032b4 <XPT2046_ReadCMD+0x24>
		
	}
	
	return usBuf;
 80032f8:	88bb      	ldrh	r3, [r7, #4]

}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40011800 	.word	0x40011800

08003308 <XPT2046_ReadAdc>:


static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff77 	bl	8003208 <XPT2046_WriteCMD>

  return 	XPT2046_ReadCMD ();
 800331a:	f7ff ffb9 	bl	8003290 <XPT2046_ReadCMD>
 800331e:	4603      	mov	r3, r0
	
}
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <XPT2046_ReadAdc_XY>:


static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )  
{ 
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp; 

	
	
	sX_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_X );
 8003332:	2090      	movs	r0, #144	@ 0x90
 8003334:	f7ff ffe8 	bl	8003308 <XPT2046_ReadAdc>
 8003338:	4603      	mov	r3, r0
 800333a:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 ); 
 800333c:	2001      	movs	r0, #1
 800333e:	f7ff ff47 	bl	80031d0 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_Y ); 
 8003342:	20d0      	movs	r0, #208	@ 0xd0
 8003344:	f7ff ffe0 	bl	8003308 <XPT2046_ReadAdc>
 8003348:	4603      	mov	r3, r0
 800334a:	81bb      	strh	r3, [r7, #12]
	
	
	* sX_Ad = sX_Ad_Temp; 
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	89fa      	ldrh	r2, [r7, #14]
 8003350:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp; 
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	89ba      	ldrh	r2, [r7, #12]
 8003356:	801a      	strh	r2, [r3, #0]
	
	
}
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b092      	sub	sp, #72	@ 0x48
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8003368:	2300      	movs	r3, #0
 800336a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	
	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };  
 800336e:	f107 0308 	add.w	r3, r7, #8
 8003372:	2228      	movs	r2, #40	@ 0x28
 8003374:	2100      	movs	r1, #0
 8003376:	4618      	mov	r0, r3
 8003378:	f005 f944 	bl	8008604 <memset>
	int32_t lX_Min, lX_Max, lY_Min, lY_Max;


	do					       				
	{		  
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );  
 800337c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8003380:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ffce 	bl	8003328 <XPT2046_ReadAdc_XY>
		
		sBufferArray [ 0 ] [ ucCount ] = sAD_X;  
 800338c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003390:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	3348      	adds	r3, #72	@ 0x48
 8003398:	443b      	add	r3, r7
 800339a:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 800339e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80033a2:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 80033a6:	330a      	adds	r3, #10
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	3348      	adds	r3, #72	@ 0x48
 80033ac:	443b      	add	r3, r7
 80033ae:	f823 2c40 	strh.w	r2, [r3, #-64]
		
		ucCount ++;  
 80033b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80033b6:	3301      	adds	r3, #1
 80033b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		
	}	while ( ( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel ) && ( ucCount < 10 ) );
 80033bc:	2110      	movs	r1, #16
 80033be:	4871      	ldr	r0, [pc, #452]	@ (8003584 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80033c0:	f002 f9ac 	bl	800571c <HAL_GPIO_ReadPin>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d103      	bne.n	80033d2 <XPT2046_ReadAdc_Smooth_XY+0x72>
 80033ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80033ce:	2b09      	cmp	r3, #9
 80033d0:	d9d4      	bls.n	800337c <XPT2046_ReadAdc_Smooth_XY+0x1c>
	

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel )
 80033d2:	2110      	movs	r1, #16
 80033d4:	486b      	ldr	r0, [pc, #428]	@ (8003584 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80033d6:	f002 f9a1 	bl	800571c <HAL_GPIO_ReadPin>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;			
 80033e0:	4b69      	ldr	r3, [pc, #420]	@ (8003588 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	701a      	strb	r2, [r3, #0]


	if ( ucCount ==10 )		 					
 80033e6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80033ea:	2b0a      	cmp	r3, #10
 80033ec:	f040 80c4 	bne.w	8003578 <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 80033f0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80033f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80033f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 80033fa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80033fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003402:	637b      	str	r3, [r7, #52]	@ 0x34
		
		for ( i = 1; i < 10; i ++ )
 8003404:	2301      	movs	r3, #1
 8003406:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800340a:	e02b      	b.n	8003464 <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray [ 0 ] [ i ] < lX_Min )
 800340c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	3348      	adds	r3, #72	@ 0x48
 8003414:	443b      	add	r3, r7
 8003416:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800341a:	461a      	mov	r2, r3
 800341c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800341e:	4293      	cmp	r3, r2
 8003420:	dd08      	ble.n	8003434 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 8003422:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	3348      	adds	r3, #72	@ 0x48
 800342a:	443b      	add	r3, r7
 800342c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003430:	643b      	str	r3, [r7, #64]	@ 0x40
 8003432:	e012      	b.n	800345a <XPT2046_ReadAdc_Smooth_XY+0xfa>
			
			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 8003434:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	3348      	adds	r3, #72	@ 0x48
 800343c:	443b      	add	r3, r7
 800343e:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003442:	461a      	mov	r2, r3
 8003444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003446:	4293      	cmp	r3, r2
 8003448:	da07      	bge.n	800345a <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 800344a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	3348      	adds	r3, #72	@ 0x48
 8003452:	443b      	add	r3, r7
 8003454:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003458:	63fb      	str	r3, [r7, #60]	@ 0x3c
		for ( i = 1; i < 10; i ++ )
 800345a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800345e:	3301      	adds	r3, #1
 8003460:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003464:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003468:	2b09      	cmp	r3, #9
 800346a:	d9cf      	bls.n	800340c <XPT2046_ReadAdc_Smooth_XY+0xac>

		}
		
		for ( i = 1; i < 10; i ++ )
 800346c:	2301      	movs	r3, #1
 800346e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003472:	e02f      	b.n	80034d4 <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 8003474:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003478:	330a      	adds	r3, #10
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	3348      	adds	r3, #72	@ 0x48
 800347e:	443b      	add	r3, r7
 8003480:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003484:	461a      	mov	r2, r3
 8003486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003488:	4293      	cmp	r3, r2
 800348a:	dd09      	ble.n	80034a0 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 800348c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003490:	330a      	adds	r3, #10
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	3348      	adds	r3, #72	@ 0x48
 8003496:	443b      	add	r3, r7
 8003498:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800349c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800349e:	e014      	b.n	80034ca <XPT2046_ReadAdc_Smooth_XY+0x16a>
			
			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 80034a0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80034a4:	330a      	adds	r3, #10
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	3348      	adds	r3, #72	@ 0x48
 80034aa:	443b      	add	r3, r7
 80034ac:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80034b0:	461a      	mov	r2, r3
 80034b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b4:	4293      	cmp	r3, r2
 80034b6:	da08      	bge.n	80034ca <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 80034b8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80034bc:	330a      	adds	r3, #10
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	3348      	adds	r3, #72	@ 0x48
 80034c2:	443b      	add	r3, r7
 80034c4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80034c8:	637b      	str	r3, [r7, #52]	@ 0x34
		for ( i = 1; i < 10; i ++ )
 80034ca:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80034ce:	3301      	adds	r3, #1
 80034d0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80034d4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80034d8:	2b09      	cmp	r3, #9
 80034da:	d9cb      	bls.n	8003474 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}
		

		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 80034dc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80034e0:	461a      	mov	r2, r3
 80034e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80034e6:	4413      	add	r3, r2
 80034e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80034ec:	4413      	add	r3, r2
 80034ee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80034f2:	4413      	add	r3, r2
 80034f4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80034f8:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 80034fa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 80034fe:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8003500:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003504:	4413      	add	r3, r2
 8003506:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800350a:	4413      	add	r3, r2
 800350c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003510:	4413      	add	r3, r2
 8003512:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003516:	441a      	add	r2, r3
 8003518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800351a:	1ad2      	subs	r2, r2, r3
 800351c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8003522:	b29a      	uxth	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	801a      	strh	r2, [r3, #0]
		
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8003528:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800352c:	461a      	mov	r2, r3
 800352e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003532:	4413      	add	r3, r2
 8003534:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003538:	4413      	add	r3, r2
 800353a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800353e:	4413      	add	r3, r2
 8003540:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8003544:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8003546:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 800354a:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 800354c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8003550:	4413      	add	r3, r2
 8003552:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8003556:	4413      	add	r3, r2
 8003558:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 800355c:	4413      	add	r3, r2
 800355e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8003562:	441a      	add	r2, r3
 8003564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003566:	1ad2      	subs	r2, r2, r3
 8003568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 800356e:	b29a      	uxth	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	805a      	strh	r2, [r3, #2]
		
		
		return 1;
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <XPT2046_ReadAdc_Smooth_XY+0x21a>
		

	}   
	
	
	return 0;    
 8003578:	2300      	movs	r3, #0
	
	
}
 800357a:	4618      	mov	r0, r3
 800357c:	3748      	adds	r7, #72	@ 0x48
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40011800 	.word	0x40011800
 8003588:	200062a4 	.word	0x200062a4

0800358c <XPT2046_Calculate_CalibrationFactor>:
#endif



static uint8_t XPT2046_Calculate_CalibrationFactor ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_Coordinate * pScreenSample, strType_XPT2046_Calibration * pCalibrationFactor )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8003598:	2301      	movs	r3, #1
 800359a:	75fb      	strb	r3, [r7, #23]


	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	3308      	adds	r3, #8
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	3204      	adds	r2, #4
 80035ae:	8852      	ldrh	r2, [r2, #2]
 80035b0:	4611      	mov	r1, r2
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	3208      	adds	r2, #8
 80035b6:	8852      	ldrh	r2, [r2, #2]
 80035b8:	1a8a      	subs	r2, r1, r2
 80035ba:	fb03 f202 	mul.w	r2, r3, r2
									                 ( ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	3304      	adds	r3, #4
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	4619      	mov	r1, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	3308      	adds	r3, #8
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	1acb      	subs	r3, r1, r3
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	8849      	ldrh	r1, [r1, #2]
 80035d2:	4608      	mov	r0, r1
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	3108      	adds	r1, #8
 80035d8:	8849      	ldrh	r1, [r1, #2]
 80035da:	1a41      	subs	r1, r0, r1
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fc ffe4 	bl	80005b0 <__aeabi_i2d>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	
	
	if (  pCalibrationFactor -> Divider == 0  )
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	f7fd faa8 	bl	8000b54 <__aeabi_dcmpeq>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	75fb      	strb	r3, [r7, #23]
 800360e:	e145      	b.n	800389c <XPT2046_Calculate_CalibrationFactor+0x310>

	else
	{

		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3308      	adds	r3, #8
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	3204      	adds	r2, #4
 8003622:	8852      	ldrh	r2, [r2, #2]
 8003624:	4611      	mov	r1, r2
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	3208      	adds	r2, #8
 800362a:	8852      	ldrh	r2, [r2, #2]
 800362c:	1a8a      	subs	r2, r1, r2
 800362e:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) );
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	3304      	adds	r3, #4
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	4619      	mov	r1, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	3308      	adds	r3, #8
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	1acb      	subs	r3, r1, r3
 8003642:	68b9      	ldr	r1, [r7, #8]
 8003644:	8849      	ldrh	r1, [r1, #2]
 8003646:	4608      	mov	r0, r1
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	3108      	adds	r1, #8
 800364c:	8849      	ldrh	r1, [r1, #2]
 800364e:	1a41      	subs	r1, r0, r1
 8003650:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	4618      	mov	r0, r3
 8003658:	f7fc ffaa 	bl	80005b0 <__aeabi_i2d>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	e9c1 2300 	strd	r2, r3, [r1]
		
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) - 
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	3308      	adds	r3, #8
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	3204      	adds	r2, #4
 8003678:	8812      	ldrh	r2, [r2, #0]
 800367a:	4611      	mov	r1, r2
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	3208      	adds	r2, #8
 8003680:	8812      	ldrh	r2, [r2, #0]
 8003682:	1a8a      	subs	r2, r1, r2
 8003684:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) );
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	4619      	mov	r1, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	3308      	adds	r3, #8
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	1acb      	subs	r3, r1, r3
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	3104      	adds	r1, #4
 800369a:	8809      	ldrh	r1, [r1, #0]
 800369c:	4608      	mov	r0, r1
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	3108      	adds	r1, #8
 80036a2:	8809      	ldrh	r1, [r1, #0]
 80036a4:	1a41      	subs	r1, r0, r1
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) - 
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fc ff7f 	bl	80005b0 <__aeabi_i2d>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	3308      	adds	r3, #8
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3304      	adds	r3, #4
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	fb03 f202 	mul.w	r2, r3, r2
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	3304      	adds	r3, #4
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	4619      	mov	r1, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3308      	adds	r3, #8
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	8852      	ldrh	r2, [r2, #2]
 80036e6:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	4619      	mov	r1, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3308      	adds	r3, #8
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	fb03 f101 	mul.w	r1, r3, r1
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3308      	adds	r3, #8
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	fb00 f303 	mul.w	r3, r0, r3
 800370a:	1acb      	subs	r3, r1, r3
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	3104      	adds	r1, #4
 8003710:	8849      	ldrh	r1, [r1, #2]
 8003712:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8003716:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .x - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .x ) * pScreenSample [ 2 ] .y ;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	3304      	adds	r3, #4
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	4619      	mov	r1, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	fb03 f101 	mul.w	r1, r3, r1
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3304      	adds	r3, #4
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	fb00 f303 	mul.w	r3, r0, r3
 8003738:	1acb      	subs	r3, r1, r3
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	3108      	adds	r1, #8
 800373e:	8849      	ldrh	r1, [r1, #2]
 8003740:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 8003744:	4413      	add	r3, r2
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8003746:	4618      	mov	r0, r3
 8003748:	f7fc ff32 	bl	80005b0 <__aeabi_i2d>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	e9c1 2304 	strd	r2, r3, [r1, #16]
		
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	885b      	ldrh	r3, [r3, #2]
 800375a:	461a      	mov	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3308      	adds	r3, #8
 8003760:	885b      	ldrh	r3, [r3, #2]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	3204      	adds	r2, #4
 8003768:	8852      	ldrh	r2, [r2, #2]
 800376a:	4611      	mov	r1, r2
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	3208      	adds	r2, #8
 8003770:	8852      	ldrh	r2, [r2, #2]
 8003772:	1a8a      	subs	r2, r1, r2
 8003774:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	3304      	adds	r3, #4
 800377c:	885b      	ldrh	r3, [r3, #2]
 800377e:	4619      	mov	r1, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3308      	adds	r3, #8
 8003784:	885b      	ldrh	r3, [r3, #2]
 8003786:	1acb      	subs	r3, r1, r3
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	8849      	ldrh	r1, [r1, #2]
 800378c:	4608      	mov	r0, r1
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	3108      	adds	r1, #8
 8003792:	8849      	ldrh	r1, [r1, #2]
 8003794:	1a41      	subs	r1, r0, r1
 8003796:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	4618      	mov	r0, r3
 800379e:	f7fc ff07 	bl	80005b0 <__aeabi_i2d>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	e9c1 2306 	strd	r2, r3, [r1, #24]
		
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) - 
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	3308      	adds	r3, #8
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	3204      	adds	r2, #4
 80037be:	8852      	ldrh	r2, [r2, #2]
 80037c0:	4611      	mov	r1, r2
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	3208      	adds	r2, #8
 80037c6:	8852      	ldrh	r2, [r2, #2]
 80037c8:	1a8a      	subs	r2, r1, r2
 80037ca:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) ) ;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	885b      	ldrh	r3, [r3, #2]
 80037d2:	4619      	mov	r1, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3308      	adds	r3, #8
 80037d8:	885b      	ldrh	r3, [r3, #2]
 80037da:	1acb      	subs	r3, r1, r3
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	3104      	adds	r1, #4
 80037e0:	8809      	ldrh	r1, [r1, #0]
 80037e2:	4608      	mov	r0, r1
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	3108      	adds	r1, #8
 80037e8:	8809      	ldrh	r1, [r1, #0]
 80037ea:	1a41      	subs	r1, r0, r1
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) - 
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fc fedc 	bl	80005b0 <__aeabi_i2d>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	e9c1 2308 	strd	r2, r3, [r1, #32]
		

		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3308      	adds	r3, #8
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3304      	adds	r3, #4
 800380e:	885b      	ldrh	r3, [r3, #2]
 8003810:	fb03 f202 	mul.w	r2, r3, r2
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	3304      	adds	r3, #4
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	4619      	mov	r1, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3308      	adds	r3, #8
 8003820:	885b      	ldrh	r3, [r3, #2]
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	8852      	ldrh	r2, [r2, #2]
 800382c:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	4619      	mov	r1, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	3308      	adds	r3, #8
 800383a:	885b      	ldrh	r3, [r3, #2]
 800383c:	fb03 f101 	mul.w	r1, r3, r1
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	3308      	adds	r3, #8
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	885b      	ldrh	r3, [r3, #2]
 800384c:	fb00 f303 	mul.w	r3, r0, r3
 8003850:	1acb      	subs	r3, r1, r3
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	3104      	adds	r1, #4
 8003856:	8849      	ldrh	r1, [r1, #2]
 8003858:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 800385c:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .y - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .y ) * pScreenSample [ 2 ] .y;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	3304      	adds	r3, #4
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	4619      	mov	r1, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	885b      	ldrh	r3, [r3, #2]
 800386a:	fb03 f101 	mul.w	r1, r3, r1
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3304      	adds	r3, #4
 8003878:	885b      	ldrh	r3, [r3, #2]
 800387a:	fb00 f303 	mul.w	r3, r0, r3
 800387e:	1acb      	subs	r3, r1, r3
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	3108      	adds	r1, #8
 8003884:	8849      	ldrh	r1, [r1, #2]
 8003886:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 800388a:	4413      	add	r3, r2
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 800388c:	4618      	mov	r0, r3
 800388e:	f7fc fe8f 	bl	80005b0 <__aeabi_i2d>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
			
	}
	
	
	return ucRet;
 800389c:	7dfb      	ldrb	r3, [r7, #23]
	
	
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <XPT2046_Touch_Calibrate>:



uint8_t XPT2046_Touch_Calibrate ( void )
{
 80038a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038ac:	b0a0      	sub	sp, #128	@ 0x80
 80038ae:	af02      	add	r7, sp, #8
		uint8_t i;
		
		char cStr [ 10 ];
		
    uint16_t usScreenWidth, usScreenHeigth;
		uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 80038b6:	2300      	movs	r3, #0
 80038b8:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 80038bc:	2300      	movs	r3, #0
 80038be:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
 80038c2:	2300      	movs	r3, #0
 80038c4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		
	  char * pStr = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	66bb      	str	r3, [r7, #104]	@ 0x68
	  
	  strType_XPT2046_Calibration CalibrationFactor;
    		

		#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	    usScreenWidth = LCD_Default_Max_Width;
 80038cc:	23f0      	movs	r3, #240	@ 0xf0
 80038ce:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	    usScreenHeigth = LCD_Default_Max_Heigth;
 80038d2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80038d6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	
	  #endif
		
		

		strCrossCoordinate [ 0 ] .x = usScreenWidth >> 2;
 80038da:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		strCrossCoordinate [ 0 ] .y = usScreenHeigth >> 2;
 80038e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80038ea:	089b      	lsrs	r3, r3, #2
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		
		strCrossCoordinate [ 1 ] .x = strCrossCoordinate [ 0 ] .x;
 80038f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80038f6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		strCrossCoordinate [ 1 ] .y = ( usScreenHeigth * 3 ) >> 2;
 80038fa:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 80038fe:	4613      	mov	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4413      	add	r3, r2
 8003904:	109b      	asrs	r3, r3, #2
 8003906:	b29b      	uxth	r3, r3
 8003908:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		
		strCrossCoordinate [ 2 ] .x = ( usScreenWidth * 3 ) >> 2;
 800390c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8003910:	4613      	mov	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4413      	add	r3, r2
 8003916:	109b      	asrs	r3, r3, #2
 8003918:	b29b      	uxth	r3, r3
 800391a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
		strCrossCoordinate [ 2 ] .y = strCrossCoordinate [ 1 ] .y;
 800391e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003922:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
		
		strCrossCoordinate [ 3 ] .x = strCrossCoordinate [ 2 ] .x;
 8003926:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800392a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		strCrossCoordinate [ 3 ] .y = strCrossCoordinate [ 0 ] .y;		
 800392e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003932:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	  	
			
		for ( i = 0; i < 4; i ++ )
 8003936:	2300      	movs	r3, #0
 8003938:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800393c:	e066      	b.n	8003a0c <XPT2046_Touch_Calibrate+0x164>
		{ 
			LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );       
 800393e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003942:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8003946:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800394a:	9100      	str	r1, [sp, #0]
 800394c:	2100      	movs	r1, #0
 800394e:	2000      	movs	r0, #0
 8003950:	f7fd fe8d 	bl	800166e <LCD_Clear>
			
			pStr = "Touch Calibrate ......";			
 8003954:	4bc5      	ldr	r3, [pc, #788]	@ (8003c6c <XPT2046_Touch_Calibrate+0x3c4>)
 8003956:	66bb      	str	r3, [r7, #104]	@ 0x68
      LCD_DrawString_Color ( ( usScreenWidth - ( strlen ( pStr ) - 7 ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );			
 8003958:	f8b7 4066 	ldrh.w	r4, [r7, #102]	@ 0x66
 800395c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800395e:	f7fc fccd 	bl	80002fc <strlen>
 8003962:	4603      	mov	r3, r0
 8003964:	3b07      	subs	r3, #7
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	1ae3      	subs	r3, r4, r3
 800396a:	085b      	lsrs	r3, r3, #1
 800396c:	b298      	uxth	r0, r3
 800396e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003972:	085b      	lsrs	r3, r3, #1
 8003974:	b299      	uxth	r1, r3
 8003976:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003980:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003982:	f7fe f821 	bl	80019c8 <LCD_DrawString_Color>
		
			sprintf ( cStr, "%d", i + 1 );
 8003986:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003990:	49b7      	ldr	r1, [pc, #732]	@ (8003c70 <XPT2046_Touch_Calibrate+0x3c8>)
 8003992:	4618      	mov	r0, r3
 8003994:	f004 fe14 	bl	80085c0 <siprintf>
			LCD_DrawString_Color ( usScreenWidth >> 1, ( usScreenHeigth >> 1 ) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED );
 8003998:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	b298      	uxth	r0, r3
 80039a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80039a4:	085b      	lsrs	r3, r3, #1
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b10      	subs	r3, #16
 80039aa:	b299      	uxth	r1, r3
 80039ac:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80039b0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039ba:	f7fe f805 	bl	80019c8 <LCD_DrawString_Color>
		
			XPT2046_DelayUS ( 100000 );		                                                   
 80039be:	48ad      	ldr	r0, [pc, #692]	@ (8003c74 <XPT2046_Touch_Calibrate+0x3cc>)
 80039c0:	f7ff fc06 	bl	80031d0 <XPT2046_DelayUS>
			
			LCD_DrawCross ( strCrossCoordinate [ i ] .x, strCrossCoordinate [ i ] .y );  
 80039c4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	3378      	adds	r3, #120	@ 0x78
 80039cc:	443b      	add	r3, r7
 80039ce:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80039d2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	3378      	adds	r3, #120	@ 0x78
 80039da:	443b      	add	r3, r7
 80039dc:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 80039e0:	4619      	mov	r1, r3
 80039e2:	4610      	mov	r0, r2
 80039e4:	f7fd ffce 	bl	8001984 <LCD_DrawCross>

			while ( ! XPT2046_ReadAdc_Smooth_XY ( & strScreenSample [ i ] ) );         
 80039e8:	bf00      	nop
 80039ea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80039ee:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fcb2 	bl	8003360 <XPT2046_ReadAdc_Smooth_XY>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f3      	beq.n	80039ea <XPT2046_Touch_Calibrate+0x142>
		for ( i = 0; i < 4; i ++ )
 8003a02:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003a06:	3301      	adds	r3, #1
 8003a08:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003a0c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d994      	bls.n	800393e <XPT2046_Touch_Calibrate+0x96>

		}
		
		
		XPT2046_Calculate_CalibrationFactor ( strCrossCoordinate, strScreenSample, & CalibrationFactor ) ;  	 
 8003a14:	463a      	mov	r2, r7
 8003a16:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8003a1a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fdb4 	bl	800358c <XPT2046_Calculate_CalibrationFactor>
		
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 8003a24:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	f7fd f890 	bl	8000b54 <__aeabi_dcmpeq>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f040 8116 	bne.w	8003c68 <XPT2046_Touch_Calibrate+0x3c0>
		
			
		usTest_x = ( ( CalibrationFactor .An * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .Bn * strScreenSample [ 3 ] .y ) + CalibrationFactor .Cn ) / CalibrationFactor .Divider;		
 8003a3c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fc fdb3 	bl	80005b0 <__aeabi_i2d>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4620      	mov	r0, r4
 8003a50:	4629      	mov	r1, r5
 8003a52:	f7fc fe17 	bl	8000684 <__aeabi_dmul>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4690      	mov	r8, r2
 8003a5c:	4699      	mov	r9, r3
 8003a5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fc fda2 	bl	80005b0 <__aeabi_i2d>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4620      	mov	r0, r4
 8003a72:	4629      	mov	r1, r5
 8003a74:	f7fc fe06 	bl	8000684 <__aeabi_dmul>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4640      	mov	r0, r8
 8003a7e:	4649      	mov	r1, r9
 8003a80:	f7fc fc4a 	bl	8000318 <__adddf3>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4610      	mov	r0, r2
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a90:	f7fc fc42 	bl	8000318 <__adddf3>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003aa0:	f7fc ff1a 	bl	80008d8 <__aeabi_ddiv>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f7fd f884 	bl	8000bb8 <__aeabi_d2uiz>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
		usTest_y = ( ( CalibrationFactor .Dn * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .En * strScreenSample [ 3 ] .y ) + CalibrationFactor .Fn ) / CalibrationFactor .Divider;   
 8003ab6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003aba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fc fd76 	bl	80005b0 <__aeabi_i2d>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4620      	mov	r0, r4
 8003aca:	4629      	mov	r1, r5
 8003acc:	f7fc fdda 	bl	8000684 <__aeabi_dmul>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4690      	mov	r8, r2
 8003ad6:	4699      	mov	r9, r3
 8003ad8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003adc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fc fd65 	bl	80005b0 <__aeabi_i2d>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4620      	mov	r0, r4
 8003aec:	4629      	mov	r1, r5
 8003aee:	f7fc fdc9 	bl	8000684 <__aeabi_dmul>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4640      	mov	r0, r8
 8003af8:	4649      	mov	r1, r9
 8003afa:	f7fc fc0d 	bl	8000318 <__adddf3>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b0a:	f7fc fc05 	bl	8000318 <__adddf3>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4610      	mov	r0, r2
 8003b14:	4619      	mov	r1, r3
 8003b16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003b1a:	f7fc fedd 	bl	80008d8 <__aeabi_ddiv>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4610      	mov	r0, r2
 8003b24:	4619      	mov	r1, r3
 8003b26:	f7fd f847 	bl	8000bb8 <__aeabi_d2uiz>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
		
		usGap_x = ( usTest_x > strCrossCoordinate [ 3 ] .x ) ? ( usTest_x - strCrossCoordinate [ 3 ] .x ) : ( strCrossCoordinate [ 3 ] .x - usTest_x );  
 8003b30:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8003b34:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d906      	bls.n	8003b4a <XPT2046_Touch_Calibrate+0x2a2>
 8003b3c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8003b40:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	e005      	b.n	8003b56 <XPT2046_Touch_Calibrate+0x2ae>
 8003b4a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8003b4e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
		usGap_y = ( usTest_y > strCrossCoordinate [ 3 ] .y ) ? ( usTest_y - strCrossCoordinate [ 3 ] .y ) : ( strCrossCoordinate [ 3 ] .y - usTest_y );  
 8003b5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003b5e:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d906      	bls.n	8003b74 <XPT2046_Touch_Calibrate+0x2cc>
 8003b66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003b6a:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	e005      	b.n	8003b80 <XPT2046_Touch_Calibrate+0x2d8>
 8003b74:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8003b78:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;       
 8003b84:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8003b88:	2b0a      	cmp	r3, #10
 8003b8a:	d87b      	bhi.n	8003c84 <XPT2046_Touch_Calibrate+0x3dc>
 8003b8c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003b90:	2b0a      	cmp	r3, #10
 8003b92:	d877      	bhi.n	8003c84 <XPT2046_Touch_Calibrate+0x3dc>
		

		strXPT2046_TouchPara .dX_X = ( CalibrationFactor .An * 1.0 ) / CalibrationFactor .Divider;
 8003b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003b9c:	f7fc fe9c 	bl	80008d8 <__aeabi_ddiv>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4934      	ldr	r1, [pc, #208]	@ (8003c78 <XPT2046_Touch_Calibrate+0x3d0>)
 8003ba6:	e9c1 2300 	strd	r2, r3, [r1]
		strXPT2046_TouchPara .dX_Y = ( CalibrationFactor .Bn * 1.0 ) / CalibrationFactor .Divider;
 8003baa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003bb2:	f7fc fe91 	bl	80008d8 <__aeabi_ddiv>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	492f      	ldr	r1, [pc, #188]	@ (8003c78 <XPT2046_Touch_Calibrate+0x3d0>)
 8003bbc:	e9c1 2302 	strd	r2, r3, [r1, #8]
		strXPT2046_TouchPara .dX   = ( CalibrationFactor .Cn * 1.0 ) / CalibrationFactor .Divider;
 8003bc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003bc8:	f7fc fe86 	bl	80008d8 <__aeabi_ddiv>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4929      	ldr	r1, [pc, #164]	@ (8003c78 <XPT2046_Touch_Calibrate+0x3d0>)
 8003bd2:	e9c1 2304 	strd	r2, r3, [r1, #16]
		
		strXPT2046_TouchPara .dY_X = ( CalibrationFactor .Dn * 1.0 ) / CalibrationFactor .Divider;
 8003bd6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003bda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003bde:	f7fc fe7b 	bl	80008d8 <__aeabi_ddiv>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4924      	ldr	r1, [pc, #144]	@ (8003c78 <XPT2046_Touch_Calibrate+0x3d0>)
 8003be8:	e9c1 2306 	strd	r2, r3, [r1, #24]
		strXPT2046_TouchPara .dY_Y = ( CalibrationFactor .En * 1.0 ) / CalibrationFactor .Divider;
 8003bec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003bf0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003bf4:	f7fc fe70 	bl	80008d8 <__aeabi_ddiv>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	491e      	ldr	r1, [pc, #120]	@ (8003c78 <XPT2046_Touch_Calibrate+0x3d0>)
 8003bfe:	e9c1 2308 	strd	r2, r3, [r1, #32]
		strXPT2046_TouchPara .dY   = ( CalibrationFactor .Fn * 1.0 ) / CalibrationFactor .Divider;
 8003c02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003c0a:	f7fc fe65 	bl	80008d8 <__aeabi_ddiv>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4919      	ldr	r1, [pc, #100]	@ (8003c78 <XPT2046_Touch_Calibrate+0x3d0>)
 8003c14:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	

	#endif
	
	
	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 8003c18:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003c1c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8003c20:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003c24:	9100      	str	r1, [sp, #0]
 8003c26:	2100      	movs	r1, #0
 8003c28:	2000      	movs	r0, #0
 8003c2a:	f7fd fd20 	bl	800166e <LCD_Clear>
	
	pStr = "Calibrate Succed";			
 8003c2e:	4b13      	ldr	r3, [pc, #76]	@ (8003c7c <XPT2046_Touch_Calibrate+0x3d4>)
 8003c30:	66bb      	str	r3, [r7, #104]	@ 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );	
 8003c32:	f8b7 4066 	ldrh.w	r4, [r7, #102]	@ 0x66
 8003c36:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003c38:	f7fc fb60 	bl	80002fc <strlen>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	1ae3      	subs	r3, r4, r3
 8003c42:	085b      	lsrs	r3, r3, #1
 8003c44:	b298      	uxth	r0, r3
 8003c46:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003c4a:	085b      	lsrs	r3, r3, #1
 8003c4c:	b299      	uxth	r1, r3
 8003c4e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c58:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003c5a:	f7fd feb5 	bl	80019c8 <LCD_DrawString_Color>

  XPT2046_DelayUS ( 200000 );
 8003c5e:	4808      	ldr	r0, [pc, #32]	@ (8003c80 <XPT2046_Touch_Calibrate+0x3d8>)
 8003c60:	f7ff fab6 	bl	80031d0 <XPT2046_DelayUS>

	return 1;    
 8003c64:	2301      	movs	r3, #1
 8003c66:	e04f      	b.n	8003d08 <XPT2046_Touch_Calibrate+0x460>
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 8003c68:	bf00      	nop
 8003c6a:	e00c      	b.n	8003c86 <XPT2046_Touch_Calibrate+0x3de>
 8003c6c:	08009138 	.word	0x08009138
 8003c70:	08009150 	.word	0x08009150
 8003c74:	000186a0 	.word	0x000186a0
 8003c78:	20002090 	.word	0x20002090
 8003c7c:	08009154 	.word	0x08009154
 8003c80:	00030d40 	.word	0x00030d40
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;       
 8003c84:	bf00      	nop
	

	Failure:
	
	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND ); 
 8003c86:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003c8a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8003c8e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003c92:	9100      	str	r1, [sp, #0]
 8003c94:	2100      	movs	r1, #0
 8003c96:	2000      	movs	r0, #0
 8003c98:	f7fd fce9 	bl	800166e <LCD_Clear>
	
	pStr = "Calibrate fail";			
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d14 <XPT2046_Touch_Calibrate+0x46c>)
 8003c9e:	66bb      	str	r3, [r7, #104]	@ 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );	
 8003ca0:	f8b7 4066 	ldrh.w	r4, [r7, #102]	@ 0x66
 8003ca4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003ca6:	f7fc fb29 	bl	80002fc <strlen>
 8003caa:	4603      	mov	r3, r0
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	1ae3      	subs	r3, r4, r3
 8003cb0:	085b      	lsrs	r3, r3, #1
 8003cb2:	b298      	uxth	r0, r3
 8003cb4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003cb8:	085b      	lsrs	r3, r3, #1
 8003cba:	b299      	uxth	r1, r3
 8003cbc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cc6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003cc8:	f7fd fe7e 	bl	80019c8 <LCD_DrawString_Color>

	pStr = "try again";			
 8003ccc:	4b12      	ldr	r3, [pc, #72]	@ (8003d18 <XPT2046_Touch_Calibrate+0x470>)
 8003cce:	66bb      	str	r3, [r7, #104]	@ 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, ( usScreenHeigth >> 1 ) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED );				
 8003cd0:	f8b7 4066 	ldrh.w	r4, [r7, #102]	@ 0x66
 8003cd4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003cd6:	f7fc fb11 	bl	80002fc <strlen>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	1ae3      	subs	r3, r4, r3
 8003ce0:	085b      	lsrs	r3, r3, #1
 8003ce2:	b298      	uxth	r0, r3
 8003ce4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3310      	adds	r3, #16
 8003cee:	b299      	uxth	r1, r3
 8003cf0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cfa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003cfc:	f7fd fe64 	bl	80019c8 <LCD_DrawString_Color>

	XPT2046_DelayUS ( 1000000 );		
 8003d00:	4806      	ldr	r0, [pc, #24]	@ (8003d1c <XPT2046_Touch_Calibrate+0x474>)
 8003d02:	f7ff fa65 	bl	80031d0 <XPT2046_DelayUS>
	
	return 0; 
 8003d06:	2300      	movs	r3, #0
		
		
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3778      	adds	r7, #120	@ 0x78
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d12:	bf00      	nop
 8003d14:	08009168 	.word	0x08009168
 8003d18:	08009178 	.word	0x08009178
 8003d1c:	000f4240 	.word	0x000f4240

08003d20 <XPT2046_Get_TouchedPoint>:

   

uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 8003d20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;           
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	73fb      	strb	r3, [r7, #15]
	
	strType_XPT2046_Coordinate strScreenCoordinate; 
	

  if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 8003d30:	f107 0308 	add.w	r3, r7, #8
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fb13 	bl	8003360 <XPT2046_ReadAdc_Smooth_XY>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d06e      	beq.n	8003e1e <XPT2046_Get_TouchedPoint+0xfe>
  {    
		pDisplayCoordinate ->x = ( ( pTouchPara ->dX_X * strScreenCoordinate .x ) + ( pTouchPara ->dX_Y * strScreenCoordinate .y ) + pTouchPara ->dX );        
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003d46:	893b      	ldrh	r3, [r7, #8]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fc fc31 	bl	80005b0 <__aeabi_i2d>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4620      	mov	r0, r4
 8003d54:	4629      	mov	r1, r5
 8003d56:	f7fc fc95 	bl	8000684 <__aeabi_dmul>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4690      	mov	r8, r2
 8003d60:	4699      	mov	r9, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003d68:	897b      	ldrh	r3, [r7, #10]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fc fc20 	bl	80005b0 <__aeabi_i2d>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4620      	mov	r0, r4
 8003d76:	4629      	mov	r1, r5
 8003d78:	f7fc fc84 	bl	8000684 <__aeabi_dmul>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4640      	mov	r0, r8
 8003d82:	4649      	mov	r1, r9
 8003d84:	f7fc fac8 	bl	8000318 <__adddf3>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	4619      	mov	r1, r3
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d96:	f7fc fabf 	bl	8000318 <__adddf3>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4610      	mov	r0, r2
 8003da0:	4619      	mov	r1, r3
 8003da2:	f7fc ff09 	bl	8000bb8 <__aeabi_d2uiz>
 8003da6:	4603      	mov	r3, r0
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara ->dY_X * strScreenCoordinate .x ) + ( pTouchPara ->dY_Y * strScreenCoordinate .y ) + pTouchPara ->dY );
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003db4:	893b      	ldrh	r3, [r7, #8]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fc fbfa 	bl	80005b0 <__aeabi_i2d>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	f7fc fc5e 	bl	8000684 <__aeabi_dmul>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4690      	mov	r8, r2
 8003dce:	4699      	mov	r9, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003dd6:	897b      	ldrh	r3, [r7, #10]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fc fbe9 	bl	80005b0 <__aeabi_i2d>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4620      	mov	r0, r4
 8003de4:	4629      	mov	r1, r5
 8003de6:	f7fc fc4d 	bl	8000684 <__aeabi_dmul>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4640      	mov	r0, r8
 8003df0:	4649      	mov	r1, r9
 8003df2:	f7fc fa91 	bl	8000318 <__adddf3>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003e04:	f7fc fa88 	bl	8000318 <__adddf3>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f7fc fed2 	bl	8000bb8 <__aeabi_d2uiz>
 8003e14:	4603      	mov	r3, r0
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	805a      	strh	r2, [r3, #2]
 8003e1c:	e001      	b.n	8003e22 <XPT2046_Get_TouchedPoint+0x102>

  }
	 
	else ucRet = 0;            
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73fb      	strb	r3, [r7, #15]
	
	return ucRet;
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
	
	
} 
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08003e30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e30:	f7ff f9c8 	bl	80031c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e34:	480b      	ldr	r0, [pc, #44]	@ (8003e64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003e36:	490c      	ldr	r1, [pc, #48]	@ (8003e68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003e38:	4a0c      	ldr	r2, [pc, #48]	@ (8003e6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8003e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e3c:	e002      	b.n	8003e44 <LoopCopyDataInit>

08003e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e42:	3304      	adds	r3, #4

08003e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e48:	d3f9      	bcc.n	8003e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e4a:	4a09      	ldr	r2, [pc, #36]	@ (8003e70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003e4c:	4c09      	ldr	r4, [pc, #36]	@ (8003e74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e50:	e001      	b.n	8003e56 <LoopFillZerobss>

08003e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e54:	3204      	adds	r2, #4

08003e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e58:	d3fb      	bcc.n	8003e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e5a:	f004 fbe1 	bl	8008620 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e5e:	f7fe fb35 	bl	80024cc <main>
  bx lr
 8003e62:	4770      	bx	lr
  ldr r0, =_sdata
 8003e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e68:	20002118 	.word	0x20002118
  ldr r2, =_sidata
 8003e6c:	0801d474 	.word	0x0801d474
  ldr r2, =_sbss
 8003e70:	20002118 	.word	0x20002118
  ldr r4, =_ebss
 8003e74:	200063f4 	.word	0x200063f4

08003e78 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e78:	e7fe      	b.n	8003e78 <ADC3_IRQHandler>
	...

08003e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e80:	4b08      	ldr	r3, [pc, #32]	@ (8003ea4 <HAL_Init+0x28>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a07      	ldr	r2, [pc, #28]	@ (8003ea4 <HAL_Init+0x28>)
 8003e86:	f043 0310 	orr.w	r3, r3, #16
 8003e8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e8c:	2003      	movs	r0, #3
 8003e8e:	f000 fee7 	bl	8004c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e92:	200f      	movs	r0, #15
 8003e94:	f000 f808 	bl	8003ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e98:	f7fe ffec 	bl	8002e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40022000 	.word	0x40022000

08003ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003eb0:	4b12      	ldr	r3, [pc, #72]	@ (8003efc <HAL_InitTick+0x54>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4b12      	ldr	r3, [pc, #72]	@ (8003f00 <HAL_InitTick+0x58>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 feff 	bl	8004cca <HAL_SYSTICK_Config>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e00e      	b.n	8003ef4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b0f      	cmp	r3, #15
 8003eda:	d80a      	bhi.n	8003ef2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003edc:	2200      	movs	r2, #0
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee4:	f000 fec7 	bl	8004c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ee8:	4a06      	ldr	r2, [pc, #24]	@ (8003f04 <HAL_InitTick+0x5c>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e000      	b.n	8003ef4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	2000208c 	.word	0x2000208c
 8003f00:	200020c4 	.word	0x200020c4
 8003f04:	200020c0 	.word	0x200020c0

08003f08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f0c:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <HAL_IncTick+0x1c>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b05      	ldr	r3, [pc, #20]	@ (8003f28 <HAL_IncTick+0x20>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4413      	add	r3, r2
 8003f18:	4a03      	ldr	r2, [pc, #12]	@ (8003f28 <HAL_IncTick+0x20>)
 8003f1a:	6013      	str	r3, [r2, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	200020c4 	.word	0x200020c4
 8003f28:	200062a8 	.word	0x200062a8

08003f2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f30:	4b02      	ldr	r3, [pc, #8]	@ (8003f3c <HAL_GetTick+0x10>)
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	200062a8 	.word	0x200062a8

08003f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f48:	f7ff fff0 	bl	8003f2c <HAL_GetTick>
 8003f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f58:	d005      	beq.n	8003f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f84 <HAL_Delay+0x44>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f66:	bf00      	nop
 8003f68:	f7ff ffe0 	bl	8003f2c <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d8f7      	bhi.n	8003f68 <HAL_Delay+0x28>
  {
  }
}
 8003f78:	bf00      	nop
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200020c4 	.word	0x200020c4

08003f88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e0ce      	b.n	8004148 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d109      	bne.n	8003fcc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fe ff86 	bl	8002ed8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fc1b 	bl	8004808 <ADC_ConversionStop_Disable>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f040 80a9 	bne.w	8004136 <HAL_ADC_Init+0x1ae>
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f040 80a5 	bne.w	8004136 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ff4:	f023 0302 	bic.w	r3, r3, #2
 8003ff8:	f043 0202 	orr.w	r2, r3, #2
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4951      	ldr	r1, [pc, #324]	@ (8004150 <HAL_ADC_Init+0x1c8>)
 800400a:	428b      	cmp	r3, r1
 800400c:	d10a      	bne.n	8004024 <HAL_ADC_Init+0x9c>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004016:	d002      	beq.n	800401e <HAL_ADC_Init+0x96>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	e004      	b.n	8004028 <HAL_ADC_Init+0xa0>
 800401e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004022:	e001      	b.n	8004028 <HAL_ADC_Init+0xa0>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004028:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	7b1b      	ldrb	r3, [r3, #12]
 800402e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004030:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	4313      	orrs	r3, r2
 8004036:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004040:	d003      	beq.n	800404a <HAL_ADC_Init+0xc2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d102      	bne.n	8004050 <HAL_ADC_Init+0xc8>
 800404a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800404e:	e000      	b.n	8004052 <HAL_ADC_Init+0xca>
 8004050:	2300      	movs	r3, #0
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	7d1b      	ldrb	r3, [r3, #20]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d119      	bne.n	8004094 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	7b1b      	ldrb	r3, [r3, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	3b01      	subs	r3, #1
 800406e:	035a      	lsls	r2, r3, #13
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	e00b      	b.n	8004094 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004080:	f043 0220 	orr.w	r2, r3, #32
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408c:	f043 0201 	orr.w	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	4b29      	ldr	r3, [pc, #164]	@ (8004154 <HAL_ADC_Init+0x1cc>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040c4:	d003      	beq.n	80040ce <HAL_ADC_Init+0x146>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d104      	bne.n	80040d8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	051b      	lsls	r3, r3, #20
 80040d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040de:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	4b19      	ldr	r3, [pc, #100]	@ (8004158 <HAL_ADC_Init+0x1d0>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d10b      	bne.n	8004114 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004106:	f023 0303 	bic.w	r3, r3, #3
 800410a:	f043 0201 	orr.w	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004112:	e018      	b.n	8004146 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004118:	f023 0312 	bic.w	r3, r3, #18
 800411c:	f043 0210 	orr.w	r2, r3, #16
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004128:	f043 0201 	orr.w	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004134:	e007      	b.n	8004146 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413a:	f043 0210 	orr.w	r2, r3, #16
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004146:	7dfb      	ldrb	r3, [r7, #23]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40013c00 	.word	0x40013c00
 8004154:	ffe1f7fd 	.word	0xffe1f7fd
 8004158:	ff1f0efe 	.word	0xff1f0efe

0800415c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a64      	ldr	r2, [pc, #400]	@ (8004304 <HAL_ADC_Start_DMA+0x1a8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_ADC_Start_DMA+0x24>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a63      	ldr	r2, [pc, #396]	@ (8004308 <HAL_ADC_Start_DMA+0x1ac>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d106      	bne.n	800418e <HAL_ADC_Start_DMA+0x32>
 8004180:	4b60      	ldr	r3, [pc, #384]	@ (8004304 <HAL_ADC_Start_DMA+0x1a8>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004188:	2b00      	cmp	r3, #0
 800418a:	f040 80b3 	bne.w	80042f4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_ADC_Start_DMA+0x40>
 8004198:	2302      	movs	r3, #2
 800419a:	e0ae      	b.n	80042fa <HAL_ADC_Start_DMA+0x19e>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fad5 	bl	8004754 <ADC_Enable>
 80041aa:	4603      	mov	r3, r0
 80041ac:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f040 809a 	bne.w	80042ea <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041be:	f023 0301 	bic.w	r3, r3, #1
 80041c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a4e      	ldr	r2, [pc, #312]	@ (8004308 <HAL_ADC_Start_DMA+0x1ac>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d105      	bne.n	80041e0 <HAL_ADC_Start_DMA+0x84>
 80041d4:	4b4b      	ldr	r3, [pc, #300]	@ (8004304 <HAL_ADC_Start_DMA+0x1a8>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d115      	bne.n	800420c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d026      	beq.n	8004248 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004202:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800420a:	e01d      	b.n	8004248 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004210:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a39      	ldr	r2, [pc, #228]	@ (8004304 <HAL_ADC_Start_DMA+0x1a8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d004      	beq.n	800422c <HAL_ADC_Start_DMA+0xd0>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a38      	ldr	r2, [pc, #224]	@ (8004308 <HAL_ADC_Start_DMA+0x1ac>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d10d      	bne.n	8004248 <HAL_ADC_Start_DMA+0xec>
 800422c:	4b35      	ldr	r3, [pc, #212]	@ (8004304 <HAL_ADC_Start_DMA+0x1a8>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004240:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d006      	beq.n	8004262 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	f023 0206 	bic.w	r2, r3, #6
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004260:	e002      	b.n	8004268 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	4a25      	ldr	r2, [pc, #148]	@ (800430c <HAL_ADC_Start_DMA+0x1b0>)
 8004276:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	4a24      	ldr	r2, [pc, #144]	@ (8004310 <HAL_ADC_Start_DMA+0x1b4>)
 800427e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	4a23      	ldr	r2, [pc, #140]	@ (8004314 <HAL_ADC_Start_DMA+0x1b8>)
 8004286:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0202 	mvn.w	r2, #2
 8004290:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042a0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a18      	ldr	r0, [r3, #32]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	334c      	adds	r3, #76	@ 0x4c
 80042ac:	4619      	mov	r1, r3
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f000 fd8d 	bl	8004dd0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80042c0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80042c4:	d108      	bne.n	80042d8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80042d4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80042d6:	e00f      	b.n	80042f8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80042e6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80042e8:	e006      	b.n	80042f8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80042f2:	e001      	b.n	80042f8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40012400 	.word	0x40012400
 8004308:	40012800 	.word	0x40012800
 800430c:	0800488b 	.word	0x0800488b
 8004310:	08004907 	.word	0x08004907
 8004314:	08004923 	.word	0x08004923

08004318 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_ADC_Stop_DMA+0x1a>
 800432e:	2302      	movs	r3, #2
 8004330:	e03a      	b.n	80043a8 <HAL_ADC_Stop_DMA+0x90>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fa64 	bl	8004808 <ADC_ConversionStop_Disable>
 8004340:	4603      	mov	r3, r0
 8004342:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d129      	bne.n	800439e <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004358:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d11a      	bne.n	800439e <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fd8f 	bl	8004e90 <HAL_DMA_Abort>
 8004372:	4603      	mov	r3, r0
 8004374:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	f043 0201 	orr.w	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004390:	e005      	b.n	800439e <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004396:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d03e      	beq.n	8004450 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d039      	beq.n	8004450 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d105      	bne.n	80043f4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80043fe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004402:	d11d      	bne.n	8004440 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004408:	2b00      	cmp	r3, #0
 800440a:	d119      	bne.n	8004440 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0220 	bic.w	r2, r2, #32
 800441a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004420:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d105      	bne.n	8004440 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004438:	f043 0201 	orr.w	r2, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7fe fcc3 	bl	8002dcc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f06f 0212 	mvn.w	r2, #18
 800444e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004456:	2b00      	cmp	r3, #0
 8004458:	d04d      	beq.n	80044f6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d048      	beq.n	80044f6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004474:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004486:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800448a:	d012      	beq.n	80044b2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004496:	2b00      	cmp	r3, #0
 8004498:	d125      	bne.n	80044e6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80044a4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80044a8:	d11d      	bne.n	80044e6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d119      	bne.n	80044e6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044c0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d105      	bne.n	80044e6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044de:	f043 0201 	orr.w	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fae4 	bl	8004ab4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 020c 	mvn.w	r2, #12
 80044f4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d012      	beq.n	8004526 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00d      	beq.n	8004526 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f812 	bl	8004540 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0201 	mvn.w	r2, #1
 8004524:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr

08004540 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr

08004552 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x20>
 8004580:	2302      	movs	r3, #2
 8004582:	e0dc      	b.n	800473e <HAL_ADC_ConfigChannel+0x1da>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b06      	cmp	r3, #6
 8004592:	d81c      	bhi.n	80045ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	3b05      	subs	r3, #5
 80045a6:	221f      	movs	r2, #31
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43db      	mvns	r3, r3
 80045ae:	4019      	ands	r1, r3
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	3b05      	subs	r3, #5
 80045c0:	fa00 f203 	lsl.w	r2, r0, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80045cc:	e03c      	b.n	8004648 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b0c      	cmp	r3, #12
 80045d4:	d81c      	bhi.n	8004610 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	3b23      	subs	r3, #35	@ 0x23
 80045e8:	221f      	movs	r2, #31
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43db      	mvns	r3, r3
 80045f0:	4019      	ands	r1, r3
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	3b23      	subs	r3, #35	@ 0x23
 8004602:	fa00 f203 	lsl.w	r2, r0, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	631a      	str	r2, [r3, #48]	@ 0x30
 800460e:	e01b      	b.n	8004648 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	3b41      	subs	r3, #65	@ 0x41
 8004622:	221f      	movs	r2, #31
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	4019      	ands	r1, r3
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	6818      	ldr	r0, [r3, #0]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	3b41      	subs	r3, #65	@ 0x41
 800463c:	fa00 f203 	lsl.w	r2, r0, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b09      	cmp	r3, #9
 800464e:	d91c      	bls.n	800468a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68d9      	ldr	r1, [r3, #12]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4613      	mov	r3, r2
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	4413      	add	r3, r2
 8004660:	3b1e      	subs	r3, #30
 8004662:	2207      	movs	r2, #7
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	43db      	mvns	r3, r3
 800466a:	4019      	ands	r1, r3
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	6898      	ldr	r0, [r3, #8]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	4413      	add	r3, r2
 800467a:	3b1e      	subs	r3, #30
 800467c:	fa00 f203 	lsl.w	r2, r0, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	60da      	str	r2, [r3, #12]
 8004688:	e019      	b.n	80046be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6919      	ldr	r1, [r3, #16]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	4613      	mov	r3, r2
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	4413      	add	r3, r2
 800469a:	2207      	movs	r2, #7
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	4019      	ands	r1, r3
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	6898      	ldr	r0, [r3, #8]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	4613      	mov	r3, r2
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	4413      	add	r3, r2
 80046b2:	fa00 f203 	lsl.w	r2, r0, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d003      	beq.n	80046ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80046ca:	2b11      	cmp	r3, #17
 80046cc:	d132      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004748 <HAL_ADC_ConfigChannel+0x1e4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d125      	bne.n	8004724 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d126      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80046f4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b10      	cmp	r3, #16
 80046fc:	d11a      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046fe:	4b13      	ldr	r3, [pc, #76]	@ (800474c <HAL_ADC_ConfigChannel+0x1e8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a13      	ldr	r2, [pc, #76]	@ (8004750 <HAL_ADC_ConfigChannel+0x1ec>)
 8004704:	fba2 2303 	umull	r2, r3, r2, r3
 8004708:	0c9a      	lsrs	r2, r3, #18
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004714:	e002      	b.n	800471c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	3b01      	subs	r3, #1
 800471a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f9      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x1b2>
 8004722:	e007      	b.n	8004734 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004728:	f043 0220 	orr.w	r2, r3, #32
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800473c:	7bfb      	ldrb	r3, [r7, #15]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr
 8004748:	40012400 	.word	0x40012400
 800474c:	2000208c 	.word	0x2000208c
 8004750:	431bde83 	.word	0x431bde83

08004754 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b01      	cmp	r3, #1
 8004770:	d040      	beq.n	80047f4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0201 	orr.w	r2, r2, #1
 8004780:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004782:	4b1f      	ldr	r3, [pc, #124]	@ (8004800 <ADC_Enable+0xac>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1f      	ldr	r2, [pc, #124]	@ (8004804 <ADC_Enable+0xb0>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	0c9b      	lsrs	r3, r3, #18
 800478e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004790:	e002      	b.n	8004798 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	3b01      	subs	r3, #1
 8004796:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f9      	bne.n	8004792 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800479e:	f7ff fbc5 	bl	8003f2c <HAL_GetTick>
 80047a2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80047a4:	e01f      	b.n	80047e6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047a6:	f7ff fbc1 	bl	8003f2c <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d918      	bls.n	80047e6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d011      	beq.n	80047e6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c6:	f043 0210 	orr.w	r2, r3, #16
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d2:	f043 0201 	orr.w	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e007      	b.n	80047f6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d1d8      	bne.n	80047a6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	2000208c 	.word	0x2000208c
 8004804:	431bde83 	.word	0x431bde83

08004808 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b01      	cmp	r3, #1
 8004820:	d12e      	bne.n	8004880 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004832:	f7ff fb7b 	bl	8003f2c <HAL_GetTick>
 8004836:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004838:	e01b      	b.n	8004872 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800483a:	f7ff fb77 	bl	8003f2c <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d914      	bls.n	8004872 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b01      	cmp	r3, #1
 8004854:	d10d      	bne.n	8004872 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485a:	f043 0210 	orr.w	r2, r3, #16
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004866:	f043 0201 	orr.w	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e007      	b.n	8004882 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b01      	cmp	r3, #1
 800487e:	d0dc      	beq.n	800483a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004896:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d127      	bne.n	80048f4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80048ba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80048be:	d115      	bne.n	80048ec <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d111      	bne.n	80048ec <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d105      	bne.n	80048ec <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e4:	f043 0201 	orr.w	r2, r3, #1
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f7fe fa6d 	bl	8002dcc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80048f2:	e004      	b.n	80048fe <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	4798      	blx	r3
}
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b084      	sub	sp, #16
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004912:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f7ff fe0a 	bl	800452e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800491a:	bf00      	nop
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004934:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004940:	f043 0204 	orr.w	r2, r3, #4
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f7ff fe02 	bl	8004552 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_ADCEx_Calibration_Start+0x1e>
 8004972:	2302      	movs	r3, #2
 8004974:	e097      	b.n	8004aa6 <HAL_ADCEx_Calibration_Start+0x14e>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff ff42 	bl	8004808 <ADC_ConversionStop_Disable>
 8004984:	4603      	mov	r3, r0
 8004986:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff fee3 	bl	8004754 <ADC_Enable>
 800498e:	4603      	mov	r3, r0
 8004990:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8004992:	7dfb      	ldrb	r3, [r7, #23]
 8004994:	2b00      	cmp	r3, #0
 8004996:	f040 8081 	bne.w	8004a9c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80049a2:	f023 0302 	bic.w	r3, r3, #2
 80049a6:	f043 0202 	orr.w	r2, r3, #2
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80049ae:	4b40      	ldr	r3, [pc, #256]	@ (8004ab0 <HAL_ADCEx_Calibration_Start+0x158>)
 80049b0:	681c      	ldr	r4, [r3, #0]
 80049b2:	2002      	movs	r0, #2
 80049b4:	f001 fbb6 	bl	8006124 <HAL_RCCEx_GetPeriphCLKFreq>
 80049b8:	4603      	mov	r3, r0
 80049ba:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80049be:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80049c0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80049c2:	e002      	b.n	80049ca <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f9      	bne.n	80049c4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0208 	orr.w	r2, r2, #8
 80049de:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80049e0:	f7ff faa4 	bl	8003f2c <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80049e6:	e01b      	b.n	8004a20 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80049e8:	f7ff faa0 	bl	8003f2c <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b0a      	cmp	r3, #10
 80049f4:	d914      	bls.n	8004a20 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00d      	beq.n	8004a20 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a08:	f023 0312 	bic.w	r3, r3, #18
 8004a0c:	f043 0210 	orr.w	r2, r3, #16
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e042      	b.n	8004aa6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1dc      	bne.n	80049e8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0204 	orr.w	r2, r2, #4
 8004a3c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004a3e:	f7ff fa75 	bl	8003f2c <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004a44:	e01b      	b.n	8004a7e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004a46:	f7ff fa71 	bl	8003f2c <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b0a      	cmp	r3, #10
 8004a52:	d914      	bls.n	8004a7e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00d      	beq.n	8004a7e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a66:	f023 0312 	bic.w	r3, r3, #18
 8004a6a:	f043 0210 	orr.w	r2, r3, #16
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e013      	b.n	8004aa6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1dc      	bne.n	8004a46 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a90:	f023 0303 	bic.w	r3, r3, #3
 8004a94:	f043 0201 	orr.w	r2, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd90      	pop	{r4, r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	2000208c 	.word	0x2000208c

08004ab4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr
	...

08004ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b0c <__NVIC_SetPriorityGrouping+0x44>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004af0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004afa:	4a04      	ldr	r2, [pc, #16]	@ (8004b0c <__NVIC_SetPriorityGrouping+0x44>)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	60d3      	str	r3, [r2, #12]
}
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bc80      	pop	{r7}
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	e000ed00 	.word	0xe000ed00

08004b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b14:	4b04      	ldr	r3, [pc, #16]	@ (8004b28 <__NVIC_GetPriorityGrouping+0x18>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	0a1b      	lsrs	r3, r3, #8
 8004b1a:	f003 0307 	and.w	r3, r3, #7
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bc80      	pop	{r7}
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	e000ed00 	.word	0xe000ed00

08004b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	db0b      	blt.n	8004b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	f003 021f 	and.w	r2, r3, #31
 8004b44:	4906      	ldr	r1, [pc, #24]	@ (8004b60 <__NVIC_EnableIRQ+0x34>)
 8004b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr
 8004b60:	e000e100 	.word	0xe000e100

08004b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	6039      	str	r1, [r7, #0]
 8004b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	db0a      	blt.n	8004b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	490c      	ldr	r1, [pc, #48]	@ (8004bb0 <__NVIC_SetPriority+0x4c>)
 8004b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b82:	0112      	lsls	r2, r2, #4
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	440b      	add	r3, r1
 8004b88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b8c:	e00a      	b.n	8004ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	4908      	ldr	r1, [pc, #32]	@ (8004bb4 <__NVIC_SetPriority+0x50>)
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	3b04      	subs	r3, #4
 8004b9c:	0112      	lsls	r2, r2, #4
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	761a      	strb	r2, [r3, #24]
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	e000e100 	.word	0xe000e100
 8004bb4:	e000ed00 	.word	0xe000ed00

08004bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b089      	sub	sp, #36	@ 0x24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f1c3 0307 	rsb	r3, r3, #7
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	bf28      	it	cs
 8004bd6:	2304      	movcs	r3, #4
 8004bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	2b06      	cmp	r3, #6
 8004be0:	d902      	bls.n	8004be8 <NVIC_EncodePriority+0x30>
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3b03      	subs	r3, #3
 8004be6:	e000      	b.n	8004bea <NVIC_EncodePriority+0x32>
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bec:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43da      	mvns	r2, r3
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c00:	f04f 31ff 	mov.w	r1, #4294967295
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0a:	43d9      	mvns	r1, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c10:	4313      	orrs	r3, r2
         );
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3724      	adds	r7, #36	@ 0x24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr

08004c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c2c:	d301      	bcc.n	8004c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e00f      	b.n	8004c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c32:	4a0a      	ldr	r2, [pc, #40]	@ (8004c5c <SysTick_Config+0x40>)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c3a:	210f      	movs	r1, #15
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c40:	f7ff ff90 	bl	8004b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c44:	4b05      	ldr	r3, [pc, #20]	@ (8004c5c <SysTick_Config+0x40>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c4a:	4b04      	ldr	r3, [pc, #16]	@ (8004c5c <SysTick_Config+0x40>)
 8004c4c:	2207      	movs	r2, #7
 8004c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	e000e010 	.word	0xe000e010

08004c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff ff2d 	bl	8004ac8 <__NVIC_SetPriorityGrouping>
}
 8004c6e:	bf00      	nop
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b086      	sub	sp, #24
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c88:	f7ff ff42 	bl	8004b10 <__NVIC_GetPriorityGrouping>
 8004c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	6978      	ldr	r0, [r7, #20]
 8004c94:	f7ff ff90 	bl	8004bb8 <NVIC_EncodePriority>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff ff5f 	bl	8004b64 <__NVIC_SetPriority>
}
 8004ca6:	bf00      	nop
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b082      	sub	sp, #8
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff ff35 	bl	8004b2c <__NVIC_EnableIRQ>
}
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff ffa2 	bl	8004c1c <SysTick_Config>
 8004cd8:	4603      	mov	r3, r0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e059      	b.n	8004dae <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4b2d      	ldr	r3, [pc, #180]	@ (8004db8 <HAL_DMA_Init+0xd4>)
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d80f      	bhi.n	8004d26 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004dbc <HAL_DMA_Init+0xd8>)
 8004d0e:	4413      	add	r3, r2
 8004d10:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc0 <HAL_DMA_Init+0xdc>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	091b      	lsrs	r3, r3, #4
 8004d18:	009a      	lsls	r2, r3, #2
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a28      	ldr	r2, [pc, #160]	@ (8004dc4 <HAL_DMA_Init+0xe0>)
 8004d22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004d24:	e00e      	b.n	8004d44 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4b26      	ldr	r3, [pc, #152]	@ (8004dc8 <HAL_DMA_Init+0xe4>)
 8004d2e:	4413      	add	r3, r2
 8004d30:	4a23      	ldr	r2, [pc, #140]	@ (8004dc0 <HAL_DMA_Init+0xdc>)
 8004d32:	fba2 2303 	umull	r2, r3, r2, r3
 8004d36:	091b      	lsrs	r3, r3, #4
 8004d38:	009a      	lsls	r2, r3, #2
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a22      	ldr	r2, [pc, #136]	@ (8004dcc <HAL_DMA_Init+0xe8>)
 8004d42:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004d5a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004d5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr
 8004db8:	40020407 	.word	0x40020407
 8004dbc:	bffdfff8 	.word	0xbffdfff8
 8004dc0:	cccccccd 	.word	0xcccccccd
 8004dc4:	40020000 	.word	0x40020000
 8004dc8:	bffdfbf8 	.word	0xbffdfbf8
 8004dcc:	40020400 	.word	0x40020400

08004dd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_DMA_Start_IT+0x20>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e04b      	b.n	8004e88 <HAL_DMA_Start_IT+0xb8>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d13a      	bne.n	8004e7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0201 	bic.w	r2, r2, #1
 8004e20:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fab6 	bl	800539a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d008      	beq.n	8004e48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 020e 	orr.w	r2, r2, #14
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	e00f      	b.n	8004e68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0204 	bic.w	r2, r2, #4
 8004e56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 020a 	orr.w	r2, r2, #10
 8004e66:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0201 	orr.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	e005      	b.n	8004e86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004e82:	2302      	movs	r3, #2
 8004e84:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d008      	beq.n	8004eba <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2204      	movs	r2, #4
 8004eac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e020      	b.n	8004efc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 020e 	bic.w	r2, r2, #14
 8004ec8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0201 	bic.w	r2, r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr
	...

08004f08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f24:	2204      	movs	r2, #4
 8004f26:	409a      	lsls	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 80f1 	beq.w	8005114 <HAL_DMA_IRQHandler+0x20c>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 80eb 	beq.w	8005114 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d107      	bne.n	8004f5c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0204 	bic.w	r2, r2, #4
 8004f5a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	4b5f      	ldr	r3, [pc, #380]	@ (80050e0 <HAL_DMA_IRQHandler+0x1d8>)
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d958      	bls.n	800501a <HAL_DMA_IRQHandler+0x112>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80050e4 <HAL_DMA_IRQHandler+0x1dc>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d04f      	beq.n	8005012 <HAL_DMA_IRQHandler+0x10a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a5c      	ldr	r2, [pc, #368]	@ (80050e8 <HAL_DMA_IRQHandler+0x1e0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d048      	beq.n	800500e <HAL_DMA_IRQHandler+0x106>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a5a      	ldr	r2, [pc, #360]	@ (80050ec <HAL_DMA_IRQHandler+0x1e4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d040      	beq.n	8005008 <HAL_DMA_IRQHandler+0x100>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a59      	ldr	r2, [pc, #356]	@ (80050f0 <HAL_DMA_IRQHandler+0x1e8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d038      	beq.n	8005002 <HAL_DMA_IRQHandler+0xfa>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a57      	ldr	r2, [pc, #348]	@ (80050f4 <HAL_DMA_IRQHandler+0x1ec>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d030      	beq.n	8004ffc <HAL_DMA_IRQHandler+0xf4>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a56      	ldr	r2, [pc, #344]	@ (80050f8 <HAL_DMA_IRQHandler+0x1f0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d028      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0xee>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a4d      	ldr	r2, [pc, #308]	@ (80050e0 <HAL_DMA_IRQHandler+0x1d8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d020      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0xe8>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a52      	ldr	r2, [pc, #328]	@ (80050fc <HAL_DMA_IRQHandler+0x1f4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d019      	beq.n	8004fec <HAL_DMA_IRQHandler+0xe4>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a50      	ldr	r2, [pc, #320]	@ (8005100 <HAL_DMA_IRQHandler+0x1f8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d012      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xe0>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a4f      	ldr	r2, [pc, #316]	@ (8005104 <HAL_DMA_IRQHandler+0x1fc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00a      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0xda>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a4d      	ldr	r2, [pc, #308]	@ (8005108 <HAL_DMA_IRQHandler+0x200>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d102      	bne.n	8004fdc <HAL_DMA_IRQHandler+0xd4>
 8004fd6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004fda:	e01b      	b.n	8005014 <HAL_DMA_IRQHandler+0x10c>
 8004fdc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004fe0:	e018      	b.n	8005014 <HAL_DMA_IRQHandler+0x10c>
 8004fe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fe6:	e015      	b.n	8005014 <HAL_DMA_IRQHandler+0x10c>
 8004fe8:	2340      	movs	r3, #64	@ 0x40
 8004fea:	e013      	b.n	8005014 <HAL_DMA_IRQHandler+0x10c>
 8004fec:	2304      	movs	r3, #4
 8004fee:	e011      	b.n	8005014 <HAL_DMA_IRQHandler+0x10c>
 8004ff0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004ff4:	e00e      	b.n	8005014 <HAL_DMA_IRQHandler+0x10c>
 8004ff6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004ffa:	e00b      	b.n	8005014 <HAL_DMA_IRQHandler+0x10c>
 8004ffc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005000:	e008      	b.n	8005014 <HAL_DMA_IRQHandler+0x10c>
 8005002:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005006:	e005      	b.n	8005014 <HAL_DMA_IRQHandler+0x10c>
 8005008:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800500c:	e002      	b.n	8005014 <HAL_DMA_IRQHandler+0x10c>
 800500e:	2340      	movs	r3, #64	@ 0x40
 8005010:	e000      	b.n	8005014 <HAL_DMA_IRQHandler+0x10c>
 8005012:	2304      	movs	r3, #4
 8005014:	4a3d      	ldr	r2, [pc, #244]	@ (800510c <HAL_DMA_IRQHandler+0x204>)
 8005016:	6053      	str	r3, [r2, #4]
 8005018:	e057      	b.n	80050ca <HAL_DMA_IRQHandler+0x1c2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a31      	ldr	r2, [pc, #196]	@ (80050e4 <HAL_DMA_IRQHandler+0x1dc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d04f      	beq.n	80050c4 <HAL_DMA_IRQHandler+0x1bc>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a2f      	ldr	r2, [pc, #188]	@ (80050e8 <HAL_DMA_IRQHandler+0x1e0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d048      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x1b8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a2e      	ldr	r2, [pc, #184]	@ (80050ec <HAL_DMA_IRQHandler+0x1e4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d040      	beq.n	80050ba <HAL_DMA_IRQHandler+0x1b2>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a2c      	ldr	r2, [pc, #176]	@ (80050f0 <HAL_DMA_IRQHandler+0x1e8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d038      	beq.n	80050b4 <HAL_DMA_IRQHandler+0x1ac>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a2b      	ldr	r2, [pc, #172]	@ (80050f4 <HAL_DMA_IRQHandler+0x1ec>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d030      	beq.n	80050ae <HAL_DMA_IRQHandler+0x1a6>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a29      	ldr	r2, [pc, #164]	@ (80050f8 <HAL_DMA_IRQHandler+0x1f0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d028      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x1a0>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a21      	ldr	r2, [pc, #132]	@ (80050e0 <HAL_DMA_IRQHandler+0x1d8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d020      	beq.n	80050a2 <HAL_DMA_IRQHandler+0x19a>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a25      	ldr	r2, [pc, #148]	@ (80050fc <HAL_DMA_IRQHandler+0x1f4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d019      	beq.n	800509e <HAL_DMA_IRQHandler+0x196>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a24      	ldr	r2, [pc, #144]	@ (8005100 <HAL_DMA_IRQHandler+0x1f8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d012      	beq.n	800509a <HAL_DMA_IRQHandler+0x192>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a22      	ldr	r2, [pc, #136]	@ (8005104 <HAL_DMA_IRQHandler+0x1fc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00a      	beq.n	8005094 <HAL_DMA_IRQHandler+0x18c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a21      	ldr	r2, [pc, #132]	@ (8005108 <HAL_DMA_IRQHandler+0x200>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d102      	bne.n	800508e <HAL_DMA_IRQHandler+0x186>
 8005088:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800508c:	e01b      	b.n	80050c6 <HAL_DMA_IRQHandler+0x1be>
 800508e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005092:	e018      	b.n	80050c6 <HAL_DMA_IRQHandler+0x1be>
 8005094:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005098:	e015      	b.n	80050c6 <HAL_DMA_IRQHandler+0x1be>
 800509a:	2340      	movs	r3, #64	@ 0x40
 800509c:	e013      	b.n	80050c6 <HAL_DMA_IRQHandler+0x1be>
 800509e:	2304      	movs	r3, #4
 80050a0:	e011      	b.n	80050c6 <HAL_DMA_IRQHandler+0x1be>
 80050a2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80050a6:	e00e      	b.n	80050c6 <HAL_DMA_IRQHandler+0x1be>
 80050a8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80050ac:	e00b      	b.n	80050c6 <HAL_DMA_IRQHandler+0x1be>
 80050ae:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80050b2:	e008      	b.n	80050c6 <HAL_DMA_IRQHandler+0x1be>
 80050b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80050b8:	e005      	b.n	80050c6 <HAL_DMA_IRQHandler+0x1be>
 80050ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050be:	e002      	b.n	80050c6 <HAL_DMA_IRQHandler+0x1be>
 80050c0:	2340      	movs	r3, #64	@ 0x40
 80050c2:	e000      	b.n	80050c6 <HAL_DMA_IRQHandler+0x1be>
 80050c4:	2304      	movs	r3, #4
 80050c6:	4a12      	ldr	r2, [pc, #72]	@ (8005110 <HAL_DMA_IRQHandler+0x208>)
 80050c8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 8136 	beq.w	8005340 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80050dc:	e130      	b.n	8005340 <HAL_DMA_IRQHandler+0x438>
 80050de:	bf00      	nop
 80050e0:	40020080 	.word	0x40020080
 80050e4:	40020008 	.word	0x40020008
 80050e8:	4002001c 	.word	0x4002001c
 80050ec:	40020030 	.word	0x40020030
 80050f0:	40020044 	.word	0x40020044
 80050f4:	40020058 	.word	0x40020058
 80050f8:	4002006c 	.word	0x4002006c
 80050fc:	40020408 	.word	0x40020408
 8005100:	4002041c 	.word	0x4002041c
 8005104:	40020430 	.word	0x40020430
 8005108:	40020444 	.word	0x40020444
 800510c:	40020400 	.word	0x40020400
 8005110:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005118:	2202      	movs	r2, #2
 800511a:	409a      	lsls	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4013      	ands	r3, r2
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 80dd 	beq.w	80052e0 <HAL_DMA_IRQHandler+0x3d8>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80d7 	beq.w	80052e0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10b      	bne.n	8005158 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 020a 	bic.w	r2, r2, #10
 800514e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	4b7b      	ldr	r3, [pc, #492]	@ (800534c <HAL_DMA_IRQHandler+0x444>)
 8005160:	429a      	cmp	r2, r3
 8005162:	d958      	bls.n	8005216 <HAL_DMA_IRQHandler+0x30e>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a79      	ldr	r2, [pc, #484]	@ (8005350 <HAL_DMA_IRQHandler+0x448>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d04f      	beq.n	800520e <HAL_DMA_IRQHandler+0x306>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a78      	ldr	r2, [pc, #480]	@ (8005354 <HAL_DMA_IRQHandler+0x44c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d048      	beq.n	800520a <HAL_DMA_IRQHandler+0x302>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a76      	ldr	r2, [pc, #472]	@ (8005358 <HAL_DMA_IRQHandler+0x450>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d040      	beq.n	8005204 <HAL_DMA_IRQHandler+0x2fc>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a75      	ldr	r2, [pc, #468]	@ (800535c <HAL_DMA_IRQHandler+0x454>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d038      	beq.n	80051fe <HAL_DMA_IRQHandler+0x2f6>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a73      	ldr	r2, [pc, #460]	@ (8005360 <HAL_DMA_IRQHandler+0x458>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d030      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x2f0>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a72      	ldr	r2, [pc, #456]	@ (8005364 <HAL_DMA_IRQHandler+0x45c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d028      	beq.n	80051f2 <HAL_DMA_IRQHandler+0x2ea>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a69      	ldr	r2, [pc, #420]	@ (800534c <HAL_DMA_IRQHandler+0x444>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d020      	beq.n	80051ec <HAL_DMA_IRQHandler+0x2e4>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a6e      	ldr	r2, [pc, #440]	@ (8005368 <HAL_DMA_IRQHandler+0x460>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d019      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x2e0>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a6c      	ldr	r2, [pc, #432]	@ (800536c <HAL_DMA_IRQHandler+0x464>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d012      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x2dc>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a6b      	ldr	r2, [pc, #428]	@ (8005370 <HAL_DMA_IRQHandler+0x468>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00a      	beq.n	80051de <HAL_DMA_IRQHandler+0x2d6>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a69      	ldr	r2, [pc, #420]	@ (8005374 <HAL_DMA_IRQHandler+0x46c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d102      	bne.n	80051d8 <HAL_DMA_IRQHandler+0x2d0>
 80051d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051d6:	e01b      	b.n	8005210 <HAL_DMA_IRQHandler+0x308>
 80051d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80051dc:	e018      	b.n	8005210 <HAL_DMA_IRQHandler+0x308>
 80051de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051e2:	e015      	b.n	8005210 <HAL_DMA_IRQHandler+0x308>
 80051e4:	2320      	movs	r3, #32
 80051e6:	e013      	b.n	8005210 <HAL_DMA_IRQHandler+0x308>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e011      	b.n	8005210 <HAL_DMA_IRQHandler+0x308>
 80051ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051f0:	e00e      	b.n	8005210 <HAL_DMA_IRQHandler+0x308>
 80051f2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80051f6:	e00b      	b.n	8005210 <HAL_DMA_IRQHandler+0x308>
 80051f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80051fc:	e008      	b.n	8005210 <HAL_DMA_IRQHandler+0x308>
 80051fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005202:	e005      	b.n	8005210 <HAL_DMA_IRQHandler+0x308>
 8005204:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005208:	e002      	b.n	8005210 <HAL_DMA_IRQHandler+0x308>
 800520a:	2320      	movs	r3, #32
 800520c:	e000      	b.n	8005210 <HAL_DMA_IRQHandler+0x308>
 800520e:	2302      	movs	r3, #2
 8005210:	4a59      	ldr	r2, [pc, #356]	@ (8005378 <HAL_DMA_IRQHandler+0x470>)
 8005212:	6053      	str	r3, [r2, #4]
 8005214:	e057      	b.n	80052c6 <HAL_DMA_IRQHandler+0x3be>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a4d      	ldr	r2, [pc, #308]	@ (8005350 <HAL_DMA_IRQHandler+0x448>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d04f      	beq.n	80052c0 <HAL_DMA_IRQHandler+0x3b8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a4b      	ldr	r2, [pc, #300]	@ (8005354 <HAL_DMA_IRQHandler+0x44c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d048      	beq.n	80052bc <HAL_DMA_IRQHandler+0x3b4>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a4a      	ldr	r2, [pc, #296]	@ (8005358 <HAL_DMA_IRQHandler+0x450>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d040      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x3ae>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a48      	ldr	r2, [pc, #288]	@ (800535c <HAL_DMA_IRQHandler+0x454>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d038      	beq.n	80052b0 <HAL_DMA_IRQHandler+0x3a8>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a47      	ldr	r2, [pc, #284]	@ (8005360 <HAL_DMA_IRQHandler+0x458>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d030      	beq.n	80052aa <HAL_DMA_IRQHandler+0x3a2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a45      	ldr	r2, [pc, #276]	@ (8005364 <HAL_DMA_IRQHandler+0x45c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d028      	beq.n	80052a4 <HAL_DMA_IRQHandler+0x39c>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a3d      	ldr	r2, [pc, #244]	@ (800534c <HAL_DMA_IRQHandler+0x444>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d020      	beq.n	800529e <HAL_DMA_IRQHandler+0x396>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a41      	ldr	r2, [pc, #260]	@ (8005368 <HAL_DMA_IRQHandler+0x460>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d019      	beq.n	800529a <HAL_DMA_IRQHandler+0x392>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a40      	ldr	r2, [pc, #256]	@ (800536c <HAL_DMA_IRQHandler+0x464>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d012      	beq.n	8005296 <HAL_DMA_IRQHandler+0x38e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a3e      	ldr	r2, [pc, #248]	@ (8005370 <HAL_DMA_IRQHandler+0x468>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00a      	beq.n	8005290 <HAL_DMA_IRQHandler+0x388>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a3d      	ldr	r2, [pc, #244]	@ (8005374 <HAL_DMA_IRQHandler+0x46c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d102      	bne.n	800528a <HAL_DMA_IRQHandler+0x382>
 8005284:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005288:	e01b      	b.n	80052c2 <HAL_DMA_IRQHandler+0x3ba>
 800528a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800528e:	e018      	b.n	80052c2 <HAL_DMA_IRQHandler+0x3ba>
 8005290:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005294:	e015      	b.n	80052c2 <HAL_DMA_IRQHandler+0x3ba>
 8005296:	2320      	movs	r3, #32
 8005298:	e013      	b.n	80052c2 <HAL_DMA_IRQHandler+0x3ba>
 800529a:	2302      	movs	r3, #2
 800529c:	e011      	b.n	80052c2 <HAL_DMA_IRQHandler+0x3ba>
 800529e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052a2:	e00e      	b.n	80052c2 <HAL_DMA_IRQHandler+0x3ba>
 80052a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80052a8:	e00b      	b.n	80052c2 <HAL_DMA_IRQHandler+0x3ba>
 80052aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80052ae:	e008      	b.n	80052c2 <HAL_DMA_IRQHandler+0x3ba>
 80052b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052b4:	e005      	b.n	80052c2 <HAL_DMA_IRQHandler+0x3ba>
 80052b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052ba:	e002      	b.n	80052c2 <HAL_DMA_IRQHandler+0x3ba>
 80052bc:	2320      	movs	r3, #32
 80052be:	e000      	b.n	80052c2 <HAL_DMA_IRQHandler+0x3ba>
 80052c0:	2302      	movs	r3, #2
 80052c2:	4a2e      	ldr	r2, [pc, #184]	@ (800537c <HAL_DMA_IRQHandler+0x474>)
 80052c4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d034      	beq.n	8005340 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80052de:	e02f      	b.n	8005340 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e4:	2208      	movs	r2, #8
 80052e6:	409a      	lsls	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d028      	beq.n	8005342 <HAL_DMA_IRQHandler+0x43a>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d023      	beq.n	8005342 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 020e 	bic.w	r2, r2, #14
 8005308:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005312:	2101      	movs	r1, #1
 8005314:	fa01 f202 	lsl.w	r2, r1, r2
 8005318:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005334:	2b00      	cmp	r3, #0
 8005336:	d004      	beq.n	8005342 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	4798      	blx	r3
    }
  }
  return;
 8005340:	bf00      	nop
 8005342:	bf00      	nop
}
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40020080 	.word	0x40020080
 8005350:	40020008 	.word	0x40020008
 8005354:	4002001c 	.word	0x4002001c
 8005358:	40020030 	.word	0x40020030
 800535c:	40020044 	.word	0x40020044
 8005360:	40020058 	.word	0x40020058
 8005364:	4002006c 	.word	0x4002006c
 8005368:	40020408 	.word	0x40020408
 800536c:	4002041c 	.word	0x4002041c
 8005370:	40020430 	.word	0x40020430
 8005374:	40020444 	.word	0x40020444
 8005378:	40020400 	.word	0x40020400
 800537c:	40020000 	.word	0x40020000

08005380 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800538e:	b2db      	uxtb	r3, r3
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr

0800539a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
 80053a6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b0:	2101      	movs	r1, #1
 80053b2:	fa01 f202 	lsl.w	r2, r1, r2
 80053b6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d108      	bne.n	80053da <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80053d8:	e007      	b.n	80053ea <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	60da      	str	r2, [r3, #12]
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr

080053f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b08b      	sub	sp, #44	@ 0x2c
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053fe:	2300      	movs	r3, #0
 8005400:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005402:	2300      	movs	r3, #0
 8005404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005406:	e179      	b.n	80056fc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005408:	2201      	movs	r2, #1
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	4013      	ands	r3, r2
 800541a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	429a      	cmp	r2, r3
 8005422:	f040 8168 	bne.w	80056f6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	4a96      	ldr	r2, [pc, #600]	@ (8005684 <HAL_GPIO_Init+0x290>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d05e      	beq.n	80054ee <HAL_GPIO_Init+0xfa>
 8005430:	4a94      	ldr	r2, [pc, #592]	@ (8005684 <HAL_GPIO_Init+0x290>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d875      	bhi.n	8005522 <HAL_GPIO_Init+0x12e>
 8005436:	4a94      	ldr	r2, [pc, #592]	@ (8005688 <HAL_GPIO_Init+0x294>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d058      	beq.n	80054ee <HAL_GPIO_Init+0xfa>
 800543c:	4a92      	ldr	r2, [pc, #584]	@ (8005688 <HAL_GPIO_Init+0x294>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d86f      	bhi.n	8005522 <HAL_GPIO_Init+0x12e>
 8005442:	4a92      	ldr	r2, [pc, #584]	@ (800568c <HAL_GPIO_Init+0x298>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d052      	beq.n	80054ee <HAL_GPIO_Init+0xfa>
 8005448:	4a90      	ldr	r2, [pc, #576]	@ (800568c <HAL_GPIO_Init+0x298>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d869      	bhi.n	8005522 <HAL_GPIO_Init+0x12e>
 800544e:	4a90      	ldr	r2, [pc, #576]	@ (8005690 <HAL_GPIO_Init+0x29c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d04c      	beq.n	80054ee <HAL_GPIO_Init+0xfa>
 8005454:	4a8e      	ldr	r2, [pc, #568]	@ (8005690 <HAL_GPIO_Init+0x29c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d863      	bhi.n	8005522 <HAL_GPIO_Init+0x12e>
 800545a:	4a8e      	ldr	r2, [pc, #568]	@ (8005694 <HAL_GPIO_Init+0x2a0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d046      	beq.n	80054ee <HAL_GPIO_Init+0xfa>
 8005460:	4a8c      	ldr	r2, [pc, #560]	@ (8005694 <HAL_GPIO_Init+0x2a0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d85d      	bhi.n	8005522 <HAL_GPIO_Init+0x12e>
 8005466:	2b12      	cmp	r3, #18
 8005468:	d82a      	bhi.n	80054c0 <HAL_GPIO_Init+0xcc>
 800546a:	2b12      	cmp	r3, #18
 800546c:	d859      	bhi.n	8005522 <HAL_GPIO_Init+0x12e>
 800546e:	a201      	add	r2, pc, #4	@ (adr r2, 8005474 <HAL_GPIO_Init+0x80>)
 8005470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005474:	080054ef 	.word	0x080054ef
 8005478:	080054c9 	.word	0x080054c9
 800547c:	080054db 	.word	0x080054db
 8005480:	0800551d 	.word	0x0800551d
 8005484:	08005523 	.word	0x08005523
 8005488:	08005523 	.word	0x08005523
 800548c:	08005523 	.word	0x08005523
 8005490:	08005523 	.word	0x08005523
 8005494:	08005523 	.word	0x08005523
 8005498:	08005523 	.word	0x08005523
 800549c:	08005523 	.word	0x08005523
 80054a0:	08005523 	.word	0x08005523
 80054a4:	08005523 	.word	0x08005523
 80054a8:	08005523 	.word	0x08005523
 80054ac:	08005523 	.word	0x08005523
 80054b0:	08005523 	.word	0x08005523
 80054b4:	08005523 	.word	0x08005523
 80054b8:	080054d1 	.word	0x080054d1
 80054bc:	080054e5 	.word	0x080054e5
 80054c0:	4a75      	ldr	r2, [pc, #468]	@ (8005698 <HAL_GPIO_Init+0x2a4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d013      	beq.n	80054ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80054c6:	e02c      	b.n	8005522 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	623b      	str	r3, [r7, #32]
          break;
 80054ce:	e029      	b.n	8005524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	3304      	adds	r3, #4
 80054d6:	623b      	str	r3, [r7, #32]
          break;
 80054d8:	e024      	b.n	8005524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	3308      	adds	r3, #8
 80054e0:	623b      	str	r3, [r7, #32]
          break;
 80054e2:	e01f      	b.n	8005524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	330c      	adds	r3, #12
 80054ea:	623b      	str	r3, [r7, #32]
          break;
 80054ec:	e01a      	b.n	8005524 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d102      	bne.n	80054fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80054f6:	2304      	movs	r3, #4
 80054f8:	623b      	str	r3, [r7, #32]
          break;
 80054fa:	e013      	b.n	8005524 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d105      	bne.n	8005510 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005504:	2308      	movs	r3, #8
 8005506:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	611a      	str	r2, [r3, #16]
          break;
 800550e:	e009      	b.n	8005524 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005510:	2308      	movs	r3, #8
 8005512:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	615a      	str	r2, [r3, #20]
          break;
 800551a:	e003      	b.n	8005524 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800551c:	2300      	movs	r3, #0
 800551e:	623b      	str	r3, [r7, #32]
          break;
 8005520:	e000      	b.n	8005524 <HAL_GPIO_Init+0x130>
          break;
 8005522:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2bff      	cmp	r3, #255	@ 0xff
 8005528:	d801      	bhi.n	800552e <HAL_GPIO_Init+0x13a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	e001      	b.n	8005532 <HAL_GPIO_Init+0x13e>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3304      	adds	r3, #4
 8005532:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2bff      	cmp	r3, #255	@ 0xff
 8005538:	d802      	bhi.n	8005540 <HAL_GPIO_Init+0x14c>
 800553a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	e002      	b.n	8005546 <HAL_GPIO_Init+0x152>
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	3b08      	subs	r3, #8
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	210f      	movs	r1, #15
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	fa01 f303 	lsl.w	r3, r1, r3
 8005554:	43db      	mvns	r3, r3
 8005556:	401a      	ands	r2, r3
 8005558:	6a39      	ldr	r1, [r7, #32]
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	fa01 f303 	lsl.w	r3, r1, r3
 8005560:	431a      	orrs	r2, r3
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 80c1 	beq.w	80056f6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005574:	4b49      	ldr	r3, [pc, #292]	@ (800569c <HAL_GPIO_Init+0x2a8>)
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	4a48      	ldr	r2, [pc, #288]	@ (800569c <HAL_GPIO_Init+0x2a8>)
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	6193      	str	r3, [r2, #24]
 8005580:	4b46      	ldr	r3, [pc, #280]	@ (800569c <HAL_GPIO_Init+0x2a8>)
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800558c:	4a44      	ldr	r2, [pc, #272]	@ (80056a0 <HAL_GPIO_Init+0x2ac>)
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	089b      	lsrs	r3, r3, #2
 8005592:	3302      	adds	r3, #2
 8005594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005598:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	220f      	movs	r2, #15
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	43db      	mvns	r3, r3
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4013      	ands	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a3c      	ldr	r2, [pc, #240]	@ (80056a4 <HAL_GPIO_Init+0x2b0>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d01f      	beq.n	80055f8 <HAL_GPIO_Init+0x204>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a3b      	ldr	r2, [pc, #236]	@ (80056a8 <HAL_GPIO_Init+0x2b4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d019      	beq.n	80055f4 <HAL_GPIO_Init+0x200>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a3a      	ldr	r2, [pc, #232]	@ (80056ac <HAL_GPIO_Init+0x2b8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d013      	beq.n	80055f0 <HAL_GPIO_Init+0x1fc>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a39      	ldr	r2, [pc, #228]	@ (80056b0 <HAL_GPIO_Init+0x2bc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00d      	beq.n	80055ec <HAL_GPIO_Init+0x1f8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a38      	ldr	r2, [pc, #224]	@ (80056b4 <HAL_GPIO_Init+0x2c0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d007      	beq.n	80055e8 <HAL_GPIO_Init+0x1f4>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a37      	ldr	r2, [pc, #220]	@ (80056b8 <HAL_GPIO_Init+0x2c4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d101      	bne.n	80055e4 <HAL_GPIO_Init+0x1f0>
 80055e0:	2305      	movs	r3, #5
 80055e2:	e00a      	b.n	80055fa <HAL_GPIO_Init+0x206>
 80055e4:	2306      	movs	r3, #6
 80055e6:	e008      	b.n	80055fa <HAL_GPIO_Init+0x206>
 80055e8:	2304      	movs	r3, #4
 80055ea:	e006      	b.n	80055fa <HAL_GPIO_Init+0x206>
 80055ec:	2303      	movs	r3, #3
 80055ee:	e004      	b.n	80055fa <HAL_GPIO_Init+0x206>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e002      	b.n	80055fa <HAL_GPIO_Init+0x206>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <HAL_GPIO_Init+0x206>
 80055f8:	2300      	movs	r3, #0
 80055fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055fc:	f002 0203 	and.w	r2, r2, #3
 8005600:	0092      	lsls	r2, r2, #2
 8005602:	4093      	lsls	r3, r2
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800560a:	4925      	ldr	r1, [pc, #148]	@ (80056a0 <HAL_GPIO_Init+0x2ac>)
 800560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560e:	089b      	lsrs	r3, r3, #2
 8005610:	3302      	adds	r3, #2
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d006      	beq.n	8005632 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005624:	4b25      	ldr	r3, [pc, #148]	@ (80056bc <HAL_GPIO_Init+0x2c8>)
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	4924      	ldr	r1, [pc, #144]	@ (80056bc <HAL_GPIO_Init+0x2c8>)
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	4313      	orrs	r3, r2
 800562e:	608b      	str	r3, [r1, #8]
 8005630:	e006      	b.n	8005640 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005632:	4b22      	ldr	r3, [pc, #136]	@ (80056bc <HAL_GPIO_Init+0x2c8>)
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	43db      	mvns	r3, r3
 800563a:	4920      	ldr	r1, [pc, #128]	@ (80056bc <HAL_GPIO_Init+0x2c8>)
 800563c:	4013      	ands	r3, r2
 800563e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d006      	beq.n	800565a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800564c:	4b1b      	ldr	r3, [pc, #108]	@ (80056bc <HAL_GPIO_Init+0x2c8>)
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	491a      	ldr	r1, [pc, #104]	@ (80056bc <HAL_GPIO_Init+0x2c8>)
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	4313      	orrs	r3, r2
 8005656:	60cb      	str	r3, [r1, #12]
 8005658:	e006      	b.n	8005668 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800565a:	4b18      	ldr	r3, [pc, #96]	@ (80056bc <HAL_GPIO_Init+0x2c8>)
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	43db      	mvns	r3, r3
 8005662:	4916      	ldr	r1, [pc, #88]	@ (80056bc <HAL_GPIO_Init+0x2c8>)
 8005664:	4013      	ands	r3, r2
 8005666:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d025      	beq.n	80056c0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005674:	4b11      	ldr	r3, [pc, #68]	@ (80056bc <HAL_GPIO_Init+0x2c8>)
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	4910      	ldr	r1, [pc, #64]	@ (80056bc <HAL_GPIO_Init+0x2c8>)
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	4313      	orrs	r3, r2
 800567e:	604b      	str	r3, [r1, #4]
 8005680:	e025      	b.n	80056ce <HAL_GPIO_Init+0x2da>
 8005682:	bf00      	nop
 8005684:	10320000 	.word	0x10320000
 8005688:	10310000 	.word	0x10310000
 800568c:	10220000 	.word	0x10220000
 8005690:	10210000 	.word	0x10210000
 8005694:	10120000 	.word	0x10120000
 8005698:	10110000 	.word	0x10110000
 800569c:	40021000 	.word	0x40021000
 80056a0:	40010000 	.word	0x40010000
 80056a4:	40010800 	.word	0x40010800
 80056a8:	40010c00 	.word	0x40010c00
 80056ac:	40011000 	.word	0x40011000
 80056b0:	40011400 	.word	0x40011400
 80056b4:	40011800 	.word	0x40011800
 80056b8:	40011c00 	.word	0x40011c00
 80056bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80056c0:	4b15      	ldr	r3, [pc, #84]	@ (8005718 <HAL_GPIO_Init+0x324>)
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	43db      	mvns	r3, r3
 80056c8:	4913      	ldr	r1, [pc, #76]	@ (8005718 <HAL_GPIO_Init+0x324>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d006      	beq.n	80056e8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80056da:	4b0f      	ldr	r3, [pc, #60]	@ (8005718 <HAL_GPIO_Init+0x324>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	490e      	ldr	r1, [pc, #56]	@ (8005718 <HAL_GPIO_Init+0x324>)
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	600b      	str	r3, [r1, #0]
 80056e6:	e006      	b.n	80056f6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80056e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005718 <HAL_GPIO_Init+0x324>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	43db      	mvns	r3, r3
 80056f0:	4909      	ldr	r1, [pc, #36]	@ (8005718 <HAL_GPIO_Init+0x324>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	3301      	adds	r3, #1
 80056fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	fa22 f303 	lsr.w	r3, r2, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	f47f ae7e 	bne.w	8005408 <HAL_GPIO_Init+0x14>
  }
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	372c      	adds	r7, #44	@ 0x2c
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr
 8005718:	40010400 	.word	0x40010400

0800571c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	887b      	ldrh	r3, [r7, #2]
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
 8005738:	e001      	b.n	800573e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800573a:	2300      	movs	r3, #0
 800573c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800573e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr

0800574a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	460b      	mov	r3, r1
 8005754:	807b      	strh	r3, [r7, #2]
 8005756:	4613      	mov	r3, r2
 8005758:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800575a:	787b      	ldrb	r3, [r7, #1]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005760:	887a      	ldrh	r2, [r7, #2]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005766:	e003      	b.n	8005770 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005768:	887b      	ldrh	r3, [r7, #2]
 800576a:	041a      	lsls	r2, r3, #16
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	611a      	str	r2, [r3, #16]
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr
	...

0800577c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	4603      	mov	r3, r0
 8005784:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005786:	4b08      	ldr	r3, [pc, #32]	@ (80057a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005788:	695a      	ldr	r2, [r3, #20]
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	4013      	ands	r3, r2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d006      	beq.n	80057a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005792:	4a05      	ldr	r2, [pc, #20]	@ (80057a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	4618      	mov	r0, r3
 800579c:	f000 f806 	bl	80057ac <HAL_GPIO_EXTI_Callback>
  }
}
 80057a0:	bf00      	nop
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	40010400 	.word	0x40010400

080057ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e272      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 8087 	beq.w	80058ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057e0:	4b92      	ldr	r3, [pc, #584]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f003 030c 	and.w	r3, r3, #12
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d00c      	beq.n	8005806 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80057ec:	4b8f      	ldr	r3, [pc, #572]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f003 030c 	and.w	r3, r3, #12
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d112      	bne.n	800581e <HAL_RCC_OscConfig+0x5e>
 80057f8:	4b8c      	ldr	r3, [pc, #560]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005804:	d10b      	bne.n	800581e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005806:	4b89      	ldr	r3, [pc, #548]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d06c      	beq.n	80058ec <HAL_RCC_OscConfig+0x12c>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d168      	bne.n	80058ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e24c      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005826:	d106      	bne.n	8005836 <HAL_RCC_OscConfig+0x76>
 8005828:	4b80      	ldr	r3, [pc, #512]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a7f      	ldr	r2, [pc, #508]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 800582e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	e02e      	b.n	8005894 <HAL_RCC_OscConfig+0xd4>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10c      	bne.n	8005858 <HAL_RCC_OscConfig+0x98>
 800583e:	4b7b      	ldr	r3, [pc, #492]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a7a      	ldr	r2, [pc, #488]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005844:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	4b78      	ldr	r3, [pc, #480]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a77      	ldr	r2, [pc, #476]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005850:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	e01d      	b.n	8005894 <HAL_RCC_OscConfig+0xd4>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005860:	d10c      	bne.n	800587c <HAL_RCC_OscConfig+0xbc>
 8005862:	4b72      	ldr	r3, [pc, #456]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a71      	ldr	r2, [pc, #452]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005868:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	4b6f      	ldr	r3, [pc, #444]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a6e      	ldr	r2, [pc, #440]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	e00b      	b.n	8005894 <HAL_RCC_OscConfig+0xd4>
 800587c:	4b6b      	ldr	r3, [pc, #428]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a6a      	ldr	r2, [pc, #424]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	4b68      	ldr	r3, [pc, #416]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a67      	ldr	r2, [pc, #412]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 800588e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005892:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d013      	beq.n	80058c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589c:	f7fe fb46 	bl	8003f2c <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a4:	f7fe fb42 	bl	8003f2c <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b64      	cmp	r3, #100	@ 0x64
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e200      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058b6:	4b5d      	ldr	r3, [pc, #372]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0f0      	beq.n	80058a4 <HAL_RCC_OscConfig+0xe4>
 80058c2:	e014      	b.n	80058ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c4:	f7fe fb32 	bl	8003f2c <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058cc:	f7fe fb2e 	bl	8003f2c <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b64      	cmp	r3, #100	@ 0x64
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e1ec      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058de:	4b53      	ldr	r3, [pc, #332]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1f0      	bne.n	80058cc <HAL_RCC_OscConfig+0x10c>
 80058ea:	e000      	b.n	80058ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d063      	beq.n	80059c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058fa:	4b4c      	ldr	r3, [pc, #304]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f003 030c 	and.w	r3, r3, #12
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00b      	beq.n	800591e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005906:	4b49      	ldr	r3, [pc, #292]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f003 030c 	and.w	r3, r3, #12
 800590e:	2b08      	cmp	r3, #8
 8005910:	d11c      	bne.n	800594c <HAL_RCC_OscConfig+0x18c>
 8005912:	4b46      	ldr	r3, [pc, #280]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d116      	bne.n	800594c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800591e:	4b43      	ldr	r3, [pc, #268]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d005      	beq.n	8005936 <HAL_RCC_OscConfig+0x176>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d001      	beq.n	8005936 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e1c0      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005936:	4b3d      	ldr	r3, [pc, #244]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	4939      	ldr	r1, [pc, #228]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005946:	4313      	orrs	r3, r2
 8005948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800594a:	e03a      	b.n	80059c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d020      	beq.n	8005996 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005954:	4b36      	ldr	r3, [pc, #216]	@ (8005a30 <HAL_RCC_OscConfig+0x270>)
 8005956:	2201      	movs	r2, #1
 8005958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800595a:	f7fe fae7 	bl	8003f2c <HAL_GetTick>
 800595e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005960:	e008      	b.n	8005974 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005962:	f7fe fae3 	bl	8003f2c <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e1a1      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005974:	4b2d      	ldr	r3, [pc, #180]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0f0      	beq.n	8005962 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005980:	4b2a      	ldr	r3, [pc, #168]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	4927      	ldr	r1, [pc, #156]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 8005990:	4313      	orrs	r3, r2
 8005992:	600b      	str	r3, [r1, #0]
 8005994:	e015      	b.n	80059c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005996:	4b26      	ldr	r3, [pc, #152]	@ (8005a30 <HAL_RCC_OscConfig+0x270>)
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800599c:	f7fe fac6 	bl	8003f2c <HAL_GetTick>
 80059a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059a4:	f7fe fac2 	bl	8003f2c <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e180      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059b6:	4b1d      	ldr	r3, [pc, #116]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1f0      	bne.n	80059a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d03a      	beq.n	8005a44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d019      	beq.n	8005a0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059d6:	4b17      	ldr	r3, [pc, #92]	@ (8005a34 <HAL_RCC_OscConfig+0x274>)
 80059d8:	2201      	movs	r2, #1
 80059da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059dc:	f7fe faa6 	bl	8003f2c <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059e4:	f7fe faa2 	bl	8003f2c <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e160      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059f6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a2c <HAL_RCC_OscConfig+0x26c>)
 80059f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0f0      	beq.n	80059e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a02:	2001      	movs	r0, #1
 8005a04:	f000 faba 	bl	8005f7c <RCC_Delay>
 8005a08:	e01c      	b.n	8005a44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a34 <HAL_RCC_OscConfig+0x274>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a10:	f7fe fa8c 	bl	8003f2c <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a16:	e00f      	b.n	8005a38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a18:	f7fe fa88 	bl	8003f2c <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d908      	bls.n	8005a38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e146      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>
 8005a2a:	bf00      	nop
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	42420000 	.word	0x42420000
 8005a34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a38:	4b92      	ldr	r3, [pc, #584]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1e9      	bne.n	8005a18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80a6 	beq.w	8005b9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a52:	2300      	movs	r3, #0
 8005a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a56:	4b8b      	ldr	r3, [pc, #556]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10d      	bne.n	8005a7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a62:	4b88      	ldr	r3, [pc, #544]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	4a87      	ldr	r2, [pc, #540]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a6c:	61d3      	str	r3, [r2, #28]
 8005a6e:	4b85      	ldr	r3, [pc, #532]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a76:	60bb      	str	r3, [r7, #8]
 8005a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7e:	4b82      	ldr	r3, [pc, #520]	@ (8005c88 <HAL_RCC_OscConfig+0x4c8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d118      	bne.n	8005abc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a8a:	4b7f      	ldr	r3, [pc, #508]	@ (8005c88 <HAL_RCC_OscConfig+0x4c8>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a7e      	ldr	r2, [pc, #504]	@ (8005c88 <HAL_RCC_OscConfig+0x4c8>)
 8005a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a96:	f7fe fa49 	bl	8003f2c <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a9e:	f7fe fa45 	bl	8003f2c <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b64      	cmp	r3, #100	@ 0x64
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e103      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab0:	4b75      	ldr	r3, [pc, #468]	@ (8005c88 <HAL_RCC_OscConfig+0x4c8>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f0      	beq.n	8005a9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d106      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x312>
 8005ac4:	4b6f      	ldr	r3, [pc, #444]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	4a6e      	ldr	r2, [pc, #440]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005aca:	f043 0301 	orr.w	r3, r3, #1
 8005ace:	6213      	str	r3, [r2, #32]
 8005ad0:	e02d      	b.n	8005b2e <HAL_RCC_OscConfig+0x36e>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10c      	bne.n	8005af4 <HAL_RCC_OscConfig+0x334>
 8005ada:	4b6a      	ldr	r3, [pc, #424]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	4a69      	ldr	r2, [pc, #420]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005ae0:	f023 0301 	bic.w	r3, r3, #1
 8005ae4:	6213      	str	r3, [r2, #32]
 8005ae6:	4b67      	ldr	r3, [pc, #412]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	4a66      	ldr	r2, [pc, #408]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005aec:	f023 0304 	bic.w	r3, r3, #4
 8005af0:	6213      	str	r3, [r2, #32]
 8005af2:	e01c      	b.n	8005b2e <HAL_RCC_OscConfig+0x36e>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	2b05      	cmp	r3, #5
 8005afa:	d10c      	bne.n	8005b16 <HAL_RCC_OscConfig+0x356>
 8005afc:	4b61      	ldr	r3, [pc, #388]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	4a60      	ldr	r2, [pc, #384]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005b02:	f043 0304 	orr.w	r3, r3, #4
 8005b06:	6213      	str	r3, [r2, #32]
 8005b08:	4b5e      	ldr	r3, [pc, #376]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	4a5d      	ldr	r2, [pc, #372]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005b0e:	f043 0301 	orr.w	r3, r3, #1
 8005b12:	6213      	str	r3, [r2, #32]
 8005b14:	e00b      	b.n	8005b2e <HAL_RCC_OscConfig+0x36e>
 8005b16:	4b5b      	ldr	r3, [pc, #364]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	4a5a      	ldr	r2, [pc, #360]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005b1c:	f023 0301 	bic.w	r3, r3, #1
 8005b20:	6213      	str	r3, [r2, #32]
 8005b22:	4b58      	ldr	r3, [pc, #352]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	4a57      	ldr	r2, [pc, #348]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005b28:	f023 0304 	bic.w	r3, r3, #4
 8005b2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d015      	beq.n	8005b62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b36:	f7fe f9f9 	bl	8003f2c <HAL_GetTick>
 8005b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b3c:	e00a      	b.n	8005b54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b3e:	f7fe f9f5 	bl	8003f2c <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e0b1      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b54:	4b4b      	ldr	r3, [pc, #300]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0ee      	beq.n	8005b3e <HAL_RCC_OscConfig+0x37e>
 8005b60:	e014      	b.n	8005b8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b62:	f7fe f9e3 	bl	8003f2c <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b68:	e00a      	b.n	8005b80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6a:	f7fe f9df 	bl	8003f2c <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e09b      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b80:	4b40      	ldr	r3, [pc, #256]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1ee      	bne.n	8005b6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d105      	bne.n	8005b9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b92:	4b3c      	ldr	r3, [pc, #240]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	4a3b      	ldr	r2, [pc, #236]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005b98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 8087 	beq.w	8005cb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ba8:	4b36      	ldr	r3, [pc, #216]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f003 030c 	and.w	r3, r3, #12
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d061      	beq.n	8005c78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d146      	bne.n	8005c4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bbc:	4b33      	ldr	r3, [pc, #204]	@ (8005c8c <HAL_RCC_OscConfig+0x4cc>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc2:	f7fe f9b3 	bl	8003f2c <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bca:	f7fe f9af 	bl	8003f2c <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e06d      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bdc:	4b29      	ldr	r3, [pc, #164]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1f0      	bne.n	8005bca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bf0:	d108      	bne.n	8005c04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005bf2:	4b24      	ldr	r3, [pc, #144]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	4921      	ldr	r1, [pc, #132]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c04:	4b1f      	ldr	r3, [pc, #124]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a19      	ldr	r1, [r3, #32]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c14:	430b      	orrs	r3, r1
 8005c16:	491b      	ldr	r1, [pc, #108]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005c8c <HAL_RCC_OscConfig+0x4cc>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c22:	f7fe f983 	bl	8003f2c <HAL_GetTick>
 8005c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c2a:	f7fe f97f 	bl	8003f2c <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e03d      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c3c:	4b11      	ldr	r3, [pc, #68]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0f0      	beq.n	8005c2a <HAL_RCC_OscConfig+0x46a>
 8005c48:	e035      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c4a:	4b10      	ldr	r3, [pc, #64]	@ (8005c8c <HAL_RCC_OscConfig+0x4cc>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c50:	f7fe f96c 	bl	8003f2c <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c58:	f7fe f968 	bl	8003f2c <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e026      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c6a:	4b06      	ldr	r3, [pc, #24]	@ (8005c84 <HAL_RCC_OscConfig+0x4c4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f0      	bne.n	8005c58 <HAL_RCC_OscConfig+0x498>
 8005c76:	e01e      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d107      	bne.n	8005c90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e019      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>
 8005c84:	40021000 	.word	0x40021000
 8005c88:	40007000 	.word	0x40007000
 8005c8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c90:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc0 <HAL_RCC_OscConfig+0x500>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d106      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d001      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	40021000 	.word	0x40021000

08005cc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e0d0      	b.n	8005e7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cd8:	4b6a      	ldr	r3, [pc, #424]	@ (8005e84 <HAL_RCC_ClockConfig+0x1c0>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d910      	bls.n	8005d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce6:	4b67      	ldr	r3, [pc, #412]	@ (8005e84 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f023 0207 	bic.w	r2, r3, #7
 8005cee:	4965      	ldr	r1, [pc, #404]	@ (8005e84 <HAL_RCC_ClockConfig+0x1c0>)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf6:	4b63      	ldr	r3, [pc, #396]	@ (8005e84 <HAL_RCC_ClockConfig+0x1c0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d001      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e0b8      	b.n	8005e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d020      	beq.n	8005d56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d20:	4b59      	ldr	r3, [pc, #356]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	4a58      	ldr	r2, [pc, #352]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005d26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d38:	4b53      	ldr	r3, [pc, #332]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	4a52      	ldr	r2, [pc, #328]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005d3e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005d42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d44:	4b50      	ldr	r3, [pc, #320]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	494d      	ldr	r1, [pc, #308]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d040      	beq.n	8005de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d107      	bne.n	8005d7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d6a:	4b47      	ldr	r3, [pc, #284]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d115      	bne.n	8005da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e07f      	b.n	8005e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d107      	bne.n	8005d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d82:	4b41      	ldr	r3, [pc, #260]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e073      	b.n	8005e7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d92:	4b3d      	ldr	r3, [pc, #244]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e06b      	b.n	8005e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005da2:	4b39      	ldr	r3, [pc, #228]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f023 0203 	bic.w	r2, r3, #3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	4936      	ldr	r1, [pc, #216]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005db4:	f7fe f8ba 	bl	8003f2c <HAL_GetTick>
 8005db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dba:	e00a      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dbc:	f7fe f8b6 	bl	8003f2c <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e053      	b.n	8005e7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f003 020c 	and.w	r2, r3, #12
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d1eb      	bne.n	8005dbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005de4:	4b27      	ldr	r3, [pc, #156]	@ (8005e84 <HAL_RCC_ClockConfig+0x1c0>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d210      	bcs.n	8005e14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005df2:	4b24      	ldr	r3, [pc, #144]	@ (8005e84 <HAL_RCC_ClockConfig+0x1c0>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f023 0207 	bic.w	r2, r3, #7
 8005dfa:	4922      	ldr	r1, [pc, #136]	@ (8005e84 <HAL_RCC_ClockConfig+0x1c0>)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e02:	4b20      	ldr	r3, [pc, #128]	@ (8005e84 <HAL_RCC_ClockConfig+0x1c0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d001      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e032      	b.n	8005e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d008      	beq.n	8005e32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e20:	4b19      	ldr	r3, [pc, #100]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	4916      	ldr	r1, [pc, #88]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d009      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e3e:	4b12      	ldr	r3, [pc, #72]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	490e      	ldr	r1, [pc, #56]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e52:	f000 f821 	bl	8005e98 <HAL_RCC_GetSysClockFreq>
 8005e56:	4602      	mov	r2, r0
 8005e58:	4b0b      	ldr	r3, [pc, #44]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	091b      	lsrs	r3, r3, #4
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	490a      	ldr	r1, [pc, #40]	@ (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005e64:	5ccb      	ldrb	r3, [r1, r3]
 8005e66:	fa22 f303 	lsr.w	r3, r2, r3
 8005e6a:	4a09      	ldr	r2, [pc, #36]	@ (8005e90 <HAL_RCC_ClockConfig+0x1cc>)
 8005e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e6e:	4b09      	ldr	r3, [pc, #36]	@ (8005e94 <HAL_RCC_ClockConfig+0x1d0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe f818 	bl	8003ea8 <HAL_InitTick>

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40022000 	.word	0x40022000
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	0800978c 	.word	0x0800978c
 8005e90:	2000208c 	.word	0x2000208c
 8005e94:	200020c0 	.word	0x200020c0

08005e98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60bb      	str	r3, [r7, #8]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8005f2c <HAL_RCC_GetSysClockFreq+0x94>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f003 030c 	and.w	r3, r3, #12
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d002      	beq.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x30>
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d003      	beq.n	8005ece <HAL_RCC_GetSysClockFreq+0x36>
 8005ec6:	e027      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ec8:	4b19      	ldr	r3, [pc, #100]	@ (8005f30 <HAL_RCC_GetSysClockFreq+0x98>)
 8005eca:	613b      	str	r3, [r7, #16]
      break;
 8005ecc:	e027      	b.n	8005f1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	0c9b      	lsrs	r3, r3, #18
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	4a17      	ldr	r2, [pc, #92]	@ (8005f34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ed8:	5cd3      	ldrb	r3, [r2, r3]
 8005eda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d010      	beq.n	8005f08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ee6:	4b11      	ldr	r3, [pc, #68]	@ (8005f2c <HAL_RCC_GetSysClockFreq+0x94>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	0c5b      	lsrs	r3, r3, #17
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	4a11      	ldr	r2, [pc, #68]	@ (8005f38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ef2:	5cd3      	ldrb	r3, [r2, r3]
 8005ef4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8005f30 <HAL_RCC_GetSysClockFreq+0x98>)
 8005efa:	fb03 f202 	mul.w	r2, r3, r2
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	e004      	b.n	8005f12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005f3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f0c:	fb02 f303 	mul.w	r3, r2, r3
 8005f10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	613b      	str	r3, [r7, #16]
      break;
 8005f16:	e002      	b.n	8005f1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f18:	4b05      	ldr	r3, [pc, #20]	@ (8005f30 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f1a:	613b      	str	r3, [r7, #16]
      break;
 8005f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f1e:	693b      	ldr	r3, [r7, #16]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bc80      	pop	{r7}
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	007a1200 	.word	0x007a1200
 8005f34:	080097a4 	.word	0x080097a4
 8005f38:	080097b4 	.word	0x080097b4
 8005f3c:	003d0900 	.word	0x003d0900

08005f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f44:	4b02      	ldr	r3, [pc, #8]	@ (8005f50 <HAL_RCC_GetHCLKFreq+0x10>)
 8005f46:	681b      	ldr	r3, [r3, #0]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr
 8005f50:	2000208c 	.word	0x2000208c

08005f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f58:	f7ff fff2 	bl	8005f40 <HAL_RCC_GetHCLKFreq>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	4b05      	ldr	r3, [pc, #20]	@ (8005f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	0adb      	lsrs	r3, r3, #11
 8005f64:	f003 0307 	and.w	r3, r3, #7
 8005f68:	4903      	ldr	r1, [pc, #12]	@ (8005f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f6a:	5ccb      	ldrb	r3, [r1, r3]
 8005f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40021000 	.word	0x40021000
 8005f78:	0800979c 	.word	0x0800979c

08005f7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f84:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb0 <RCC_Delay+0x34>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a0a      	ldr	r2, [pc, #40]	@ (8005fb4 <RCC_Delay+0x38>)
 8005f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8e:	0a5b      	lsrs	r3, r3, #9
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	fb02 f303 	mul.w	r3, r2, r3
 8005f96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f98:	bf00      	nop
  }
  while (Delay --);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	1e5a      	subs	r2, r3, #1
 8005f9e:	60fa      	str	r2, [r7, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1f9      	bne.n	8005f98 <RCC_Delay+0x1c>
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr
 8005fb0:	2000208c 	.word	0x2000208c
 8005fb4:	10624dd3 	.word	0x10624dd3

08005fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d07d      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fd8:	4b4f      	ldr	r3, [pc, #316]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10d      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fe4:	4b4c      	ldr	r3, [pc, #304]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	4a4b      	ldr	r2, [pc, #300]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fee:	61d3      	str	r3, [r2, #28]
 8005ff0:	4b49      	ldr	r3, [pc, #292]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ff8:	60bb      	str	r3, [r7, #8]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006000:	4b46      	ldr	r3, [pc, #280]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006008:	2b00      	cmp	r3, #0
 800600a:	d118      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800600c:	4b43      	ldr	r3, [pc, #268]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a42      	ldr	r2, [pc, #264]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006016:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006018:	f7fd ff88 	bl	8003f2c <HAL_GetTick>
 800601c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601e:	e008      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006020:	f7fd ff84 	bl	8003f2c <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b64      	cmp	r3, #100	@ 0x64
 800602c:	d901      	bls.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e06d      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006032:	4b3a      	ldr	r3, [pc, #232]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0f0      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800603e:	4b36      	ldr	r3, [pc, #216]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006046:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d02e      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	429a      	cmp	r2, r3
 800605a:	d027      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800605c:	4b2e      	ldr	r3, [pc, #184]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006064:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006066:	4b2e      	ldr	r3, [pc, #184]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006068:	2201      	movs	r2, #1
 800606a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800606c:	4b2c      	ldr	r3, [pc, #176]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800606e:	2200      	movs	r2, #0
 8006070:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006072:	4a29      	ldr	r2, [pc, #164]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d014      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006082:	f7fd ff53 	bl	8003f2c <HAL_GetTick>
 8006086:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006088:	e00a      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800608a:	f7fd ff4f 	bl	8003f2c <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006098:	4293      	cmp	r3, r2
 800609a:	d901      	bls.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e036      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0ee      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	4917      	ldr	r1, [pc, #92]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d105      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060c4:	4b14      	ldr	r3, [pc, #80]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	4a13      	ldr	r2, [pc, #76]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	490b      	ldr	r1, [pc, #44]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0310 	and.w	r3, r3, #16
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d008      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060fa:	4b07      	ldr	r3, [pc, #28]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	4904      	ldr	r1, [pc, #16]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006108:	4313      	orrs	r3, r2
 800610a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	40021000 	.word	0x40021000
 800611c:	40007000 	.word	0x40007000
 8006120:	42420440 	.word	0x42420440

08006124 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b088      	sub	sp, #32
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	2300      	movs	r3, #0
 8006132:	61fb      	str	r3, [r7, #28]
 8006134:	2300      	movs	r3, #0
 8006136:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	2300      	movs	r3, #0
 800613e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3b01      	subs	r3, #1
 8006144:	2b0f      	cmp	r3, #15
 8006146:	f200 80af 	bhi.w	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800614a:	a201      	add	r2, pc, #4	@ (adr r2, 8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	08006227 	.word	0x08006227
 8006154:	0800628d 	.word	0x0800628d
 8006158:	080062a9 	.word	0x080062a9
 800615c:	08006217 	.word	0x08006217
 8006160:	080062a9 	.word	0x080062a9
 8006164:	080062a9 	.word	0x080062a9
 8006168:	080062a9 	.word	0x080062a9
 800616c:	0800621f 	.word	0x0800621f
 8006170:	080062a9 	.word	0x080062a9
 8006174:	080062a9 	.word	0x080062a9
 8006178:	080062a9 	.word	0x080062a9
 800617c:	080062a9 	.word	0x080062a9
 8006180:	080062a9 	.word	0x080062a9
 8006184:	080062a9 	.word	0x080062a9
 8006188:	080062a9 	.word	0x080062a9
 800618c:	08006191 	.word	0x08006191
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8006190:	4b4a      	ldr	r3, [pc, #296]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006196:	4b49      	ldr	r3, [pc, #292]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 8084 	beq.w	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	0c9b      	lsrs	r3, r3, #18
 80061a8:	f003 030f 	and.w	r3, r3, #15
 80061ac:	4a44      	ldr	r2, [pc, #272]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80061ae:	5cd3      	ldrb	r3, [r2, r3]
 80061b0:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d015      	beq.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80061bc:	4b3f      	ldr	r3, [pc, #252]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	0c5b      	lsrs	r3, r3, #17
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	4a3f      	ldr	r2, [pc, #252]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80061c8:	5cd3      	ldrb	r3, [r2, r3]
 80061ca:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00d      	beq.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80061d6:	4a3c      	ldr	r2, [pc, #240]	@ (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	fbb2 f2f3 	udiv	r2, r2, r3
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	fb02 f303 	mul.w	r3, r2, r3
 80061e4:	61fb      	str	r3, [r7, #28]
 80061e6:	e004      	b.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	4a38      	ldr	r2, [pc, #224]	@ (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80061ec:	fb02 f303 	mul.w	r3, r2, r3
 80061f0:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80061f2:	4b32      	ldr	r3, [pc, #200]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061fe:	d102      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8006204:	e052      	b.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	4a31      	ldr	r2, [pc, #196]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 800620c:	fba2 2303 	umull	r2, r3, r2, r3
 8006210:	085b      	lsrs	r3, r3, #1
 8006212:	61bb      	str	r3, [r7, #24]
      break;
 8006214:	e04a      	b.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006216:	f7ff fe3f 	bl	8005e98 <HAL_RCC_GetSysClockFreq>
 800621a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800621c:	e049      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800621e:	f7ff fe3b 	bl	8005e98 <HAL_RCC_GetSysClockFreq>
 8006222:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006224:	e045      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8006226:	4b25      	ldr	r3, [pc, #148]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006236:	d108      	bne.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8006242:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006246:	61bb      	str	r3, [r7, #24]
 8006248:	e01f      	b.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006254:	d109      	bne.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006256:	4b19      	ldr	r3, [pc, #100]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8006262:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8006266:	61bb      	str	r3, [r7, #24]
 8006268:	e00f      	b.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006270:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006274:	d11c      	bne.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8006276:	4b11      	ldr	r3, [pc, #68]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d016      	beq.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8006282:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8006286:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8006288:	e012      	b.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800628a:	e011      	b.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800628c:	f7ff fe62 	bl	8005f54 <HAL_RCC_GetPCLK2Freq>
 8006290:	4602      	mov	r2, r0
 8006292:	4b0a      	ldr	r3, [pc, #40]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	0b9b      	lsrs	r3, r3, #14
 8006298:	f003 0303 	and.w	r3, r3, #3
 800629c:	3301      	adds	r3, #1
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a4:	61bb      	str	r3, [r7, #24]
      break;
 80062a6:	e004      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 80062a8:	bf00      	nop
 80062aa:	e002      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80062ac:	bf00      	nop
 80062ae:	e000      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80062b0:	bf00      	nop
    }
  }
  return (frequency);
 80062b2:	69bb      	ldr	r3, [r7, #24]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3720      	adds	r7, #32
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	40021000 	.word	0x40021000
 80062c0:	080097b8 	.word	0x080097b8
 80062c4:	080097c8 	.word	0x080097c8
 80062c8:	007a1200 	.word	0x007a1200
 80062cc:	003d0900 	.word	0x003d0900
 80062d0:	aaaaaaab 	.word	0xaaaaaaab

080062d4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d004      	beq.n	80062f0 <HAL_SRAM_Init+0x1c>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ee:	d101      	bne.n	80062f4 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e038      	b.n	8006366 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d106      	bne.n	800630e <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7fc feb9 	bl	8003080 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3308      	adds	r3, #8
 8006316:	4619      	mov	r1, r3
 8006318:	4610      	mov	r0, r2
 800631a:	f000 fc4d 	bl	8006bb8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	461a      	mov	r2, r3
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	f000 fcaf 	bl	8006c8c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6858      	ldr	r0, [r3, #4]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	f000 fcd4 	bl	8006ce8 <FSMC_NORSRAM_Extended_Timing_Init>
                                          hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	6892      	ldr	r2, [r2, #8]
 8006348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	6892      	ldr	r2, [r2, #8]
 8006354:	f041 0101 	orr.w	r1, r1, #1
 8006358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b082      	sub	sp, #8
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e041      	b.n	8006404 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d106      	bne.n	800639a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7fc fe09 	bl	8002fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2202      	movs	r2, #2
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3304      	adds	r3, #4
 80063aa:	4619      	mov	r1, r3
 80063ac:	4610      	mov	r0, r2
 80063ae:	f000 fa69 	bl	8006884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	d001      	beq.n	8006424 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e03c      	b.n	800649e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a1d      	ldr	r2, [pc, #116]	@ (80064a8 <HAL_TIM_Base_Start+0x9c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d018      	beq.n	8006468 <HAL_TIM_Base_Start+0x5c>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a1c      	ldr	r2, [pc, #112]	@ (80064ac <HAL_TIM_Base_Start+0xa0>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d013      	beq.n	8006468 <HAL_TIM_Base_Start+0x5c>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006448:	d00e      	beq.n	8006468 <HAL_TIM_Base_Start+0x5c>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a18      	ldr	r2, [pc, #96]	@ (80064b0 <HAL_TIM_Base_Start+0xa4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d009      	beq.n	8006468 <HAL_TIM_Base_Start+0x5c>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a16      	ldr	r2, [pc, #88]	@ (80064b4 <HAL_TIM_Base_Start+0xa8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d004      	beq.n	8006468 <HAL_TIM_Base_Start+0x5c>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a15      	ldr	r2, [pc, #84]	@ (80064b8 <HAL_TIM_Base_Start+0xac>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d111      	bne.n	800648c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2b06      	cmp	r3, #6
 8006478:	d010      	beq.n	800649c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0201 	orr.w	r2, r2, #1
 8006488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800648a:	e007      	b.n	800649c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bc80      	pop	{r7}
 80064a6:	4770      	bx	lr
 80064a8:	40012c00 	.word	0x40012c00
 80064ac:	40013400 	.word	0x40013400
 80064b0:	40000400 	.word	0x40000400
 80064b4:	40000800 	.word	0x40000800
 80064b8:	40000c00 	.word	0x40000c00

080064bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d020      	beq.n	8006520 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01b      	beq.n	8006520 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f06f 0202 	mvn.w	r2, #2
 80064f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f9a1 	bl	800684e <HAL_TIM_IC_CaptureCallback>
 800650c:	e005      	b.n	800651a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f994 	bl	800683c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f9a3 	bl	8006860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	d020      	beq.n	800656c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01b      	beq.n	800656c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0204 	mvn.w	r2, #4
 800653c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2202      	movs	r2, #2
 8006542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f97b 	bl	800684e <HAL_TIM_IC_CaptureCallback>
 8006558:	e005      	b.n	8006566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f96e 	bl	800683c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f97d 	bl	8006860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d020      	beq.n	80065b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	2b00      	cmp	r3, #0
 800657e:	d01b      	beq.n	80065b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0208 	mvn.w	r2, #8
 8006588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2204      	movs	r2, #4
 800658e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f955 	bl	800684e <HAL_TIM_IC_CaptureCallback>
 80065a4:	e005      	b.n	80065b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f948 	bl	800683c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f957 	bl	8006860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f003 0310 	and.w	r3, r3, #16
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d020      	beq.n	8006604 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f003 0310 	and.w	r3, r3, #16
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01b      	beq.n	8006604 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0210 	mvn.w	r2, #16
 80065d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2208      	movs	r2, #8
 80065da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f92f 	bl	800684e <HAL_TIM_IC_CaptureCallback>
 80065f0:	e005      	b.n	80065fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f922 	bl	800683c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f931 	bl	8006860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00c      	beq.n	8006628 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d007      	beq.n	8006628 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f06f 0201 	mvn.w	r2, #1
 8006620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f901 	bl	800682a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00c      	beq.n	800664c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006638:	2b00      	cmp	r3, #0
 800663a:	d007      	beq.n	800664c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 faad 	bl	8006ba6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00c      	beq.n	8006670 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800665c:	2b00      	cmp	r3, #0
 800665e:	d007      	beq.n	8006670 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f901 	bl	8006872 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00c      	beq.n	8006694 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f003 0320 	and.w	r3, r3, #32
 8006680:	2b00      	cmp	r3, #0
 8006682:	d007      	beq.n	8006694 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0220 	mvn.w	r2, #32
 800668c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fa80 	bl	8006b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006694:	bf00      	nop
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_TIM_ConfigClockSource+0x1c>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e0b4      	b.n	8006822 <HAL_TIM_ConfigClockSource+0x186>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f0:	d03e      	beq.n	8006770 <HAL_TIM_ConfigClockSource+0xd4>
 80066f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f6:	f200 8087 	bhi.w	8006808 <HAL_TIM_ConfigClockSource+0x16c>
 80066fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066fe:	f000 8086 	beq.w	800680e <HAL_TIM_ConfigClockSource+0x172>
 8006702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006706:	d87f      	bhi.n	8006808 <HAL_TIM_ConfigClockSource+0x16c>
 8006708:	2b70      	cmp	r3, #112	@ 0x70
 800670a:	d01a      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0xa6>
 800670c:	2b70      	cmp	r3, #112	@ 0x70
 800670e:	d87b      	bhi.n	8006808 <HAL_TIM_ConfigClockSource+0x16c>
 8006710:	2b60      	cmp	r3, #96	@ 0x60
 8006712:	d050      	beq.n	80067b6 <HAL_TIM_ConfigClockSource+0x11a>
 8006714:	2b60      	cmp	r3, #96	@ 0x60
 8006716:	d877      	bhi.n	8006808 <HAL_TIM_ConfigClockSource+0x16c>
 8006718:	2b50      	cmp	r3, #80	@ 0x50
 800671a:	d03c      	beq.n	8006796 <HAL_TIM_ConfigClockSource+0xfa>
 800671c:	2b50      	cmp	r3, #80	@ 0x50
 800671e:	d873      	bhi.n	8006808 <HAL_TIM_ConfigClockSource+0x16c>
 8006720:	2b40      	cmp	r3, #64	@ 0x40
 8006722:	d058      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x13a>
 8006724:	2b40      	cmp	r3, #64	@ 0x40
 8006726:	d86f      	bhi.n	8006808 <HAL_TIM_ConfigClockSource+0x16c>
 8006728:	2b30      	cmp	r3, #48	@ 0x30
 800672a:	d064      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0x15a>
 800672c:	2b30      	cmp	r3, #48	@ 0x30
 800672e:	d86b      	bhi.n	8006808 <HAL_TIM_ConfigClockSource+0x16c>
 8006730:	2b20      	cmp	r3, #32
 8006732:	d060      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0x15a>
 8006734:	2b20      	cmp	r3, #32
 8006736:	d867      	bhi.n	8006808 <HAL_TIM_ConfigClockSource+0x16c>
 8006738:	2b00      	cmp	r3, #0
 800673a:	d05c      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0x15a>
 800673c:	2b10      	cmp	r3, #16
 800673e:	d05a      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0x15a>
 8006740:	e062      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006752:	f000 f994 	bl	8006a7e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006764:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	609a      	str	r2, [r3, #8]
      break;
 800676e:	e04f      	b.n	8006810 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006780:	f000 f97d 	bl	8006a7e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689a      	ldr	r2, [r3, #8]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006792:	609a      	str	r2, [r3, #8]
      break;
 8006794:	e03c      	b.n	8006810 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067a2:	461a      	mov	r2, r3
 80067a4:	f000 f8f4 	bl	8006990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2150      	movs	r1, #80	@ 0x50
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 f94b 	bl	8006a4a <TIM_ITRx_SetConfig>
      break;
 80067b4:	e02c      	b.n	8006810 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067c2:	461a      	mov	r2, r3
 80067c4:	f000 f912 	bl	80069ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2160      	movs	r1, #96	@ 0x60
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 f93b 	bl	8006a4a <TIM_ITRx_SetConfig>
      break;
 80067d4:	e01c      	b.n	8006810 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067e2:	461a      	mov	r2, r3
 80067e4:	f000 f8d4 	bl	8006990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2140      	movs	r1, #64	@ 0x40
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 f92b 	bl	8006a4a <TIM_ITRx_SetConfig>
      break;
 80067f4:	e00c      	b.n	8006810 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4619      	mov	r1, r3
 8006800:	4610      	mov	r0, r2
 8006802:	f000 f922 	bl	8006a4a <TIM_ITRx_SetConfig>
      break;
 8006806:	e003      	b.n	8006810 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	73fb      	strb	r3, [r7, #15]
      break;
 800680c:	e000      	b.n	8006810 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800680e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	bc80      	pop	{r7}
 800683a:	4770      	bx	lr

0800683c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr

0800684e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr

08006860 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	bc80      	pop	{r7}
 8006870:	4770      	bx	lr

08006872 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	bc80      	pop	{r7}
 8006882:	4770      	bx	lr

08006884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a39      	ldr	r2, [pc, #228]	@ (800697c <TIM_Base_SetConfig+0xf8>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d013      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a38      	ldr	r2, [pc, #224]	@ (8006980 <TIM_Base_SetConfig+0xfc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00f      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068aa:	d00b      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a35      	ldr	r2, [pc, #212]	@ (8006984 <TIM_Base_SetConfig+0x100>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d007      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a34      	ldr	r2, [pc, #208]	@ (8006988 <TIM_Base_SetConfig+0x104>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d003      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a33      	ldr	r2, [pc, #204]	@ (800698c <TIM_Base_SetConfig+0x108>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d108      	bne.n	80068d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a28      	ldr	r2, [pc, #160]	@ (800697c <TIM_Base_SetConfig+0xf8>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d013      	beq.n	8006906 <TIM_Base_SetConfig+0x82>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a27      	ldr	r2, [pc, #156]	@ (8006980 <TIM_Base_SetConfig+0xfc>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00f      	beq.n	8006906 <TIM_Base_SetConfig+0x82>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ec:	d00b      	beq.n	8006906 <TIM_Base_SetConfig+0x82>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a24      	ldr	r2, [pc, #144]	@ (8006984 <TIM_Base_SetConfig+0x100>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d007      	beq.n	8006906 <TIM_Base_SetConfig+0x82>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a23      	ldr	r2, [pc, #140]	@ (8006988 <TIM_Base_SetConfig+0x104>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d003      	beq.n	8006906 <TIM_Base_SetConfig+0x82>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a22      	ldr	r2, [pc, #136]	@ (800698c <TIM_Base_SetConfig+0x108>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d108      	bne.n	8006918 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800690c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a0f      	ldr	r2, [pc, #60]	@ (800697c <TIM_Base_SetConfig+0xf8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d003      	beq.n	800694c <TIM_Base_SetConfig+0xc8>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a0e      	ldr	r2, [pc, #56]	@ (8006980 <TIM_Base_SetConfig+0xfc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d103      	bne.n	8006954 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	691a      	ldr	r2, [r3, #16]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d005      	beq.n	8006972 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f023 0201 	bic.w	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	611a      	str	r2, [r3, #16]
  }
}
 8006972:	bf00      	nop
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	bc80      	pop	{r7}
 800697a:	4770      	bx	lr
 800697c:	40012c00 	.word	0x40012c00
 8006980:	40013400 	.word	0x40013400
 8006984:	40000400 	.word	0x40000400
 8006988:	40000800 	.word	0x40000800
 800698c:	40000c00 	.word	0x40000c00

08006990 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f023 0201 	bic.w	r2, r3, #1
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f023 030a 	bic.w	r3, r3, #10
 80069cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	621a      	str	r2, [r3, #32]
}
 80069e2:	bf00      	nop
 80069e4:	371c      	adds	r7, #28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr

080069ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f023 0210 	bic.w	r2, r3, #16
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	031b      	lsls	r3, r3, #12
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	621a      	str	r2, [r3, #32]
}
 8006a40:	bf00      	nop
 8006a42:	371c      	adds	r7, #28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bc80      	pop	{r7}
 8006a48:	4770      	bx	lr

08006a4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b085      	sub	sp, #20
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f043 0307 	orr.w	r3, r3, #7
 8006a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	609a      	str	r2, [r3, #8]
}
 8006a74:	bf00      	nop
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr

08006a7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b087      	sub	sp, #28
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	60f8      	str	r0, [r7, #12]
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	607a      	str	r2, [r7, #4]
 8006a8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	021a      	lsls	r2, r3, #8
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	609a      	str	r2, [r3, #8]
}
 8006ab2:	bf00      	nop
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bc80      	pop	{r7}
 8006aba:	4770      	bx	lr

08006abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e050      	b.n	8006b76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a1b      	ldr	r2, [pc, #108]	@ (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d018      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a19      	ldr	r2, [pc, #100]	@ (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b2a:	d00e      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a15      	ldr	r2, [pc, #84]	@ (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d009      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a14      	ldr	r2, [pc, #80]	@ (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d004      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a12      	ldr	r2, [pc, #72]	@ (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d10c      	bne.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bc80      	pop	{r7}
 8006b7e:	4770      	bx	lr
 8006b80:	40012c00 	.word	0x40012c00
 8006b84:	40013400 	.word	0x40013400
 8006b88:	40000400 	.word	0x40000400
 8006b8c:	40000800 	.word	0x40000800
 8006b90:	40000c00 	.word	0x40000c00

08006b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr

08006ba6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bae:	bf00      	nop
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bc80      	pop	{r7}
 8006bb6:	4770      	bx	lr

08006bb8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	6812      	ldr	r2, [r2, #0]
 8006bd0:	f023 0101 	bic.w	r1, r3, #1
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	2b08      	cmp	r3, #8
 8006be0:	d102      	bne.n	8006be8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006be2:	2340      	movs	r3, #64	@ 0x40
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	e001      	b.n	8006bec <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006be8:	2300      	movs	r3, #0
 8006bea:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006bf8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006bfe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006c04:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006c0a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006c10:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006c16:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006c1c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8006c22:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006c28:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8006c46:	4b10      	ldr	r3, [pc, #64]	@ (8006c88 <FSMC_NORSRAM_Init+0xd0>)
 8006c48:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c50:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006c58:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	43db      	mvns	r3, r3
 8006c68:	ea02 0103 	and.w	r1, r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	4319      	orrs	r1, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bc80      	pop	{r7}
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	0008fb7f 	.word	0x0008fb7f

08006c8c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 8006ca2:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8006caa:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 8006cb2:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 8006cbc:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	3b02      	subs	r3, #2
 8006cc4:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 8006cc6:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 8006cd2:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr
	...

08006ce8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cfc:	d11d      	bne.n	8006d3a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d06:	4b13      	ldr	r3, [pc, #76]	@ (8006d54 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006d08:	4013      	ands	r3, r2
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	6811      	ldr	r1, [r2, #0]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	6852      	ldr	r2, [r2, #4]
 8006d12:	0112      	lsls	r2, r2, #4
 8006d14:	4311      	orrs	r1, r2
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	6892      	ldr	r2, [r2, #8]
 8006d1a:	0212      	lsls	r2, r2, #8
 8006d1c:	4311      	orrs	r1, r2
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	6992      	ldr	r2, [r2, #24]
 8006d22:	4311      	orrs	r1, r2
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	68d2      	ldr	r2, [r2, #12]
 8006d28:	0412      	lsls	r2, r2, #16
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	ea43 0102 	orr.w	r1, r3, r2
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006d38:	e005      	b.n	8006d46 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3714      	adds	r7, #20
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bc80      	pop	{r7}
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	cff00000 	.word	0xcff00000

08006d58 <arm_rfft_fast_init_f32>:
 8006d58:	084b      	lsrs	r3, r1, #1
 8006d5a:	2b80      	cmp	r3, #128	@ 0x80
 8006d5c:	b410      	push	{r4}
 8006d5e:	8201      	strh	r1, [r0, #16]
 8006d60:	8003      	strh	r3, [r0, #0]
 8006d62:	d044      	beq.n	8006dee <arm_rfft_fast_init_f32+0x96>
 8006d64:	d915      	bls.n	8006d92 <arm_rfft_fast_init_f32+0x3a>
 8006d66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d6a:	d03a      	beq.n	8006de2 <arm_rfft_fast_init_f32+0x8a>
 8006d6c:	d926      	bls.n	8006dbc <arm_rfft_fast_init_f32+0x64>
 8006d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d72:	d01d      	beq.n	8006db0 <arm_rfft_fast_init_f32+0x58>
 8006d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d78:	d111      	bne.n	8006d9e <arm_rfft_fast_init_f32+0x46>
 8006d7a:	4c1f      	ldr	r4, [pc, #124]	@ (8006df8 <arm_rfft_fast_init_f32+0xa0>)
 8006d7c:	491f      	ldr	r1, [pc, #124]	@ (8006dfc <arm_rfft_fast_init_f32+0xa4>)
 8006d7e:	4a20      	ldr	r2, [pc, #128]	@ (8006e00 <arm_rfft_fast_init_f32+0xa8>)
 8006d80:	f44f 636e 	mov.w	r3, #3808	@ 0xee0
 8006d84:	6084      	str	r4, [r0, #8]
 8006d86:	6041      	str	r1, [r0, #4]
 8006d88:	6142      	str	r2, [r0, #20]
 8006d8a:	8183      	strh	r3, [r0, #12]
 8006d8c:	bc10      	pop	{r4}
 8006d8e:	2000      	movs	r0, #0
 8006d90:	4770      	bx	lr
 8006d92:	2b20      	cmp	r3, #32
 8006d94:	d01b      	beq.n	8006dce <arm_rfft_fast_init_f32+0x76>
 8006d96:	2b40      	cmp	r3, #64	@ 0x40
 8006d98:	d005      	beq.n	8006da6 <arm_rfft_fast_init_f32+0x4e>
 8006d9a:	2b10      	cmp	r3, #16
 8006d9c:	d01c      	beq.n	8006dd8 <arm_rfft_fast_init_f32+0x80>
 8006d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006da2:	bc10      	pop	{r4}
 8006da4:	4770      	bx	lr
 8006da6:	4c17      	ldr	r4, [pc, #92]	@ (8006e04 <arm_rfft_fast_init_f32+0xac>)
 8006da8:	4917      	ldr	r1, [pc, #92]	@ (8006e08 <arm_rfft_fast_init_f32+0xb0>)
 8006daa:	4a18      	ldr	r2, [pc, #96]	@ (8006e0c <arm_rfft_fast_init_f32+0xb4>)
 8006dac:	2338      	movs	r3, #56	@ 0x38
 8006dae:	e7e9      	b.n	8006d84 <arm_rfft_fast_init_f32+0x2c>
 8006db0:	4c17      	ldr	r4, [pc, #92]	@ (8006e10 <arm_rfft_fast_init_f32+0xb8>)
 8006db2:	4918      	ldr	r1, [pc, #96]	@ (8006e14 <arm_rfft_fast_init_f32+0xbc>)
 8006db4:	4a18      	ldr	r2, [pc, #96]	@ (8006e18 <arm_rfft_fast_init_f32+0xc0>)
 8006db6:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8006dba:	e7e3      	b.n	8006d84 <arm_rfft_fast_init_f32+0x2c>
 8006dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dc0:	d1ed      	bne.n	8006d9e <arm_rfft_fast_init_f32+0x46>
 8006dc2:	4c16      	ldr	r4, [pc, #88]	@ (8006e1c <arm_rfft_fast_init_f32+0xc4>)
 8006dc4:	4916      	ldr	r1, [pc, #88]	@ (8006e20 <arm_rfft_fast_init_f32+0xc8>)
 8006dc6:	4a17      	ldr	r2, [pc, #92]	@ (8006e24 <arm_rfft_fast_init_f32+0xcc>)
 8006dc8:	f44f 73dc 	mov.w	r3, #440	@ 0x1b8
 8006dcc:	e7da      	b.n	8006d84 <arm_rfft_fast_init_f32+0x2c>
 8006dce:	4c16      	ldr	r4, [pc, #88]	@ (8006e28 <arm_rfft_fast_init_f32+0xd0>)
 8006dd0:	4916      	ldr	r1, [pc, #88]	@ (8006e2c <arm_rfft_fast_init_f32+0xd4>)
 8006dd2:	4a17      	ldr	r2, [pc, #92]	@ (8006e30 <arm_rfft_fast_init_f32+0xd8>)
 8006dd4:	2330      	movs	r3, #48	@ 0x30
 8006dd6:	e7d5      	b.n	8006d84 <arm_rfft_fast_init_f32+0x2c>
 8006dd8:	4c16      	ldr	r4, [pc, #88]	@ (8006e34 <arm_rfft_fast_init_f32+0xdc>)
 8006dda:	4917      	ldr	r1, [pc, #92]	@ (8006e38 <arm_rfft_fast_init_f32+0xe0>)
 8006ddc:	4a17      	ldr	r2, [pc, #92]	@ (8006e3c <arm_rfft_fast_init_f32+0xe4>)
 8006dde:	2314      	movs	r3, #20
 8006de0:	e7d0      	b.n	8006d84 <arm_rfft_fast_init_f32+0x2c>
 8006de2:	4c17      	ldr	r4, [pc, #92]	@ (8006e40 <arm_rfft_fast_init_f32+0xe8>)
 8006de4:	4917      	ldr	r1, [pc, #92]	@ (8006e44 <arm_rfft_fast_init_f32+0xec>)
 8006de6:	4a18      	ldr	r2, [pc, #96]	@ (8006e48 <arm_rfft_fast_init_f32+0xf0>)
 8006de8:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8006dec:	e7ca      	b.n	8006d84 <arm_rfft_fast_init_f32+0x2c>
 8006dee:	4c17      	ldr	r4, [pc, #92]	@ (8006e4c <arm_rfft_fast_init_f32+0xf4>)
 8006df0:	4917      	ldr	r1, [pc, #92]	@ (8006e50 <arm_rfft_fast_init_f32+0xf8>)
 8006df2:	4a18      	ldr	r2, [pc, #96]	@ (8006e54 <arm_rfft_fast_init_f32+0xfc>)
 8006df4:	23d0      	movs	r3, #208	@ 0xd0
 8006df6:	e7c5      	b.n	8006d84 <arm_rfft_fast_init_f32+0x2c>
 8006df8:	08018dd8 	.word	0x08018dd8
 8006dfc:	080097cc 	.word	0x080097cc
 8006e00:	0800f93c 	.word	0x0800f93c
 8006e04:	0800d8cc 	.word	0x0800d8cc
 8006e08:	0801ab98 	.word	0x0801ab98
 8006e0c:	0801d088 	.word	0x0801d088
 8006e10:	080162bc 	.word	0x080162bc
 8006e14:	080141bc 	.word	0x080141bc
 8006e18:	0800d93c 	.word	0x0800d93c
 8006e1c:	0801cd18 	.word	0x0801cd18
 8006e20:	0801393c 	.word	0x0801393c
 8006e24:	0801ad98 	.word	0x0801ad98
 8006e28:	08017174 	.word	0x08017174
 8006e2c:	080161bc 	.word	0x080161bc
 8006e30:	0800d7cc 	.word	0x0800d7cc
 8006e34:	080170cc 	.word	0x080170cc
 8006e38:	0801413c 	.word	0x0801413c
 8006e3c:	080170f4 	.word	0x080170f4
 8006e40:	0801b598 	.word	0x0801b598
 8006e44:	08017dd8 	.word	0x08017dd8
 8006e48:	0801b918 	.word	0x0801b918
 8006e4c:	0801d288 	.word	0x0801d288
 8006e50:	080179d8 	.word	0x080179d8
 8006e54:	0801c918 	.word	0x0801c918

08006e58 <arm_rfft_fast_f32>:
 8006e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	8a04      	ldrh	r4, [r0, #16]
 8006e5e:	b089      	sub	sp, #36	@ 0x24
 8006e60:	9205      	str	r2, [sp, #20]
 8006e62:	0862      	lsrs	r2, r4, #1
 8006e64:	9006      	str	r0, [sp, #24]
 8006e66:	8002      	strh	r2, [r0, #0]
 8006e68:	460e      	mov	r6, r1
 8006e6a:	9307      	str	r3, [sp, #28]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f040 8096 	bne.w	8006f9e <arm_rfft_fast_f32+0x146>
 8006e72:	461a      	mov	r2, r3
 8006e74:	2301      	movs	r3, #1
 8006e76:	f000 fe09 	bl	8007a8c <arm_cfft_f32>
 8006e7a:	9c06      	ldr	r4, [sp, #24]
 8006e7c:	6831      	ldr	r1, [r6, #0]
 8006e7e:	8823      	ldrh	r3, [r4, #0]
 8006e80:	4608      	mov	r0, r1
 8006e82:	3b01      	subs	r3, #1
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	f7f9 febd 	bl	8000c04 <__addsf3>
 8006e8a:	6871      	ldr	r1, [r6, #4]
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	4608      	mov	r0, r1
 8006e90:	f7f9 feb8 	bl	8000c04 <__addsf3>
 8006e94:	4607      	mov	r7, r0
 8006e96:	4601      	mov	r1, r0
 8006e98:	4628      	mov	r0, r5
 8006e9a:	f7f9 feb3 	bl	8000c04 <__addsf3>
 8006e9e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006ea2:	f7f9 ffb7 	bl	8000e14 <__aeabi_fmul>
 8006ea6:	4639      	mov	r1, r7
 8006ea8:	9f05      	ldr	r7, [sp, #20]
 8006eaa:	6964      	ldr	r4, [r4, #20]
 8006eac:	6038      	str	r0, [r7, #0]
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f7f9 fea6 	bl	8000c00 <__aeabi_fsub>
 8006eb4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006eb8:	f7f9 ffac 	bl	8000e14 <__aeabi_fmul>
 8006ebc:	9b01      	ldr	r3, [sp, #4]
 8006ebe:	f106 0210 	add.w	r2, r6, #16
 8006ec2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8006ec6:	3b08      	subs	r3, #8
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	f107 0510 	add.w	r5, r7, #16
 8006ece:	461e      	mov	r6, r3
 8006ed0:	4617      	mov	r7, r2
 8006ed2:	3410      	adds	r4, #16
 8006ed4:	f857 3c08 	ldr.w	r3, [r7, #-8]
 8006ed8:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8006edc:	4619      	mov	r1, r3
 8006ede:	9305      	str	r3, [sp, #20]
 8006ee0:	68f3      	ldr	r3, [r6, #12]
 8006ee2:	4650      	mov	r0, sl
 8006ee4:	4698      	mov	r8, r3
 8006ee6:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8006eea:	3e08      	subs	r6, #8
 8006eec:	4699      	mov	r9, r3
 8006eee:	f7f9 fe87 	bl	8000c00 <__aeabi_fsub>
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	4683      	mov	fp, r0
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006efc:	f8cd 8008 	str.w	r8, [sp, #8]
 8006f00:	f7f9 fe80 	bl	8000c04 <__addsf3>
 8006f04:	f854 8c08 	ldr.w	r8, [r4, #-8]
 8006f08:	4681      	mov	r9, r0
 8006f0a:	4659      	mov	r1, fp
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	f7f9 ff81 	bl	8000e14 <__aeabi_fmul>
 8006f12:	9b05      	ldr	r3, [sp, #20]
 8006f14:	9004      	str	r0, [sp, #16]
 8006f16:	4619      	mov	r1, r3
 8006f18:	4650      	mov	r0, sl
 8006f1a:	f7f9 fe73 	bl	8000c04 <__addsf3>
 8006f1e:	9a04      	ldr	r2, [sp, #16]
 8006f20:	4601      	mov	r1, r0
 8006f22:	4610      	mov	r0, r2
 8006f24:	f7f9 fe6e 	bl	8000c04 <__addsf3>
 8006f28:	f854 ac04 	ldr.w	sl, [r4, #-4]
 8006f2c:	9004      	str	r0, [sp, #16]
 8006f2e:	4649      	mov	r1, r9
 8006f30:	4650      	mov	r0, sl
 8006f32:	f7f9 ff6f 	bl	8000e14 <__aeabi_fmul>
 8006f36:	9b04      	ldr	r3, [sp, #16]
 8006f38:	4601      	mov	r1, r0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7f9 fe62 	bl	8000c04 <__addsf3>
 8006f40:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006f44:	f7f9 ff66 	bl	8000e14 <__aeabi_fmul>
 8006f48:	4659      	mov	r1, fp
 8006f4a:	f845 0c08 	str.w	r0, [r5, #-8]
 8006f4e:	4650      	mov	r0, sl
 8006f50:	f7f9 ff60 	bl	8000e14 <__aeabi_fmul>
 8006f54:	9902      	ldr	r1, [sp, #8]
 8006f56:	4682      	mov	sl, r0
 8006f58:	9803      	ldr	r0, [sp, #12]
 8006f5a:	f7f9 fe51 	bl	8000c00 <__aeabi_fsub>
 8006f5e:	4601      	mov	r1, r0
 8006f60:	4650      	mov	r0, sl
 8006f62:	f7f9 fe4f 	bl	8000c04 <__addsf3>
 8006f66:	4649      	mov	r1, r9
 8006f68:	4682      	mov	sl, r0
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	f7f9 ff52 	bl	8000e14 <__aeabi_fmul>
 8006f70:	4601      	mov	r1, r0
 8006f72:	4650      	mov	r0, sl
 8006f74:	f7f9 fe44 	bl	8000c00 <__aeabi_fsub>
 8006f78:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006f7c:	f7f9 ff4a 	bl	8000e14 <__aeabi_fmul>
 8006f80:	9b01      	ldr	r3, [sp, #4]
 8006f82:	f845 0c04 	str.w	r0, [r5, #-4]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	f107 0708 	add.w	r7, r7, #8
 8006f8c:	f104 0408 	add.w	r4, r4, #8
 8006f90:	f105 0508 	add.w	r5, r5, #8
 8006f94:	9301      	str	r3, [sp, #4]
 8006f96:	d19d      	bne.n	8006ed4 <arm_rfft_fast_f32+0x7c>
 8006f98:	b009      	add	sp, #36	@ 0x24
 8006f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f9e:	680c      	ldr	r4, [r1, #0]
 8006fa0:	684f      	ldr	r7, [r1, #4]
 8006fa2:	3a01      	subs	r2, #1
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	9201      	str	r2, [sp, #4]
 8006faa:	f7f9 fe2b 	bl	8000c04 <__addsf3>
 8006fae:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006fb2:	f7f9 ff2f 	bl	8000e14 <__aeabi_fmul>
 8006fb6:	9b06      	ldr	r3, [sp, #24]
 8006fb8:	4639      	mov	r1, r7
 8006fba:	9f05      	ldr	r7, [sp, #20]
 8006fbc:	695d      	ldr	r5, [r3, #20]
 8006fbe:	6038      	str	r0, [r7, #0]
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f7f9 fe1d 	bl	8000c00 <__aeabi_fsub>
 8006fc6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8006fca:	f7f9 ff23 	bl	8000e14 <__aeabi_fmul>
 8006fce:	9a01      	ldr	r2, [sp, #4]
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	00d3      	lsls	r3, r2, #3
 8006fd4:	2a00      	cmp	r2, #0
 8006fd6:	d063      	beq.n	80070a0 <arm_rfft_fast_f32+0x248>
 8006fd8:	3b08      	subs	r3, #8
 8006fda:	4433      	add	r3, r6
 8006fdc:	3710      	adds	r7, #16
 8006fde:	f106 0410 	add.w	r4, r6, #16
 8006fe2:	46b9      	mov	r9, r7
 8006fe4:	461e      	mov	r6, r3
 8006fe6:	3510      	adds	r5, #16
 8006fe8:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8006fec:	f854 bc08 	ldr.w	fp, [r4, #-8]
 8006ff0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006ff4:	4641      	mov	r1, r8
 8006ff6:	4658      	mov	r0, fp
 8006ff8:	9204      	str	r2, [sp, #16]
 8006ffa:	9301      	str	r3, [sp, #4]
 8006ffc:	f7f9 fe00 	bl	8000c00 <__aeabi_fsub>
 8007000:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8007004:	4607      	mov	r7, r0
 8007006:	9901      	ldr	r1, [sp, #4]
 8007008:	4650      	mov	r0, sl
 800700a:	f7f9 fdfb 	bl	8000c04 <__addsf3>
 800700e:	4659      	mov	r1, fp
 8007010:	9002      	str	r0, [sp, #8]
 8007012:	4640      	mov	r0, r8
 8007014:	f7f9 fdf6 	bl	8000c04 <__addsf3>
 8007018:	f855 8c08 	ldr.w	r8, [r5, #-8]
 800701c:	4683      	mov	fp, r0
 800701e:	4639      	mov	r1, r7
 8007020:	4640      	mov	r0, r8
 8007022:	f7f9 fef7 	bl	8000e14 <__aeabi_fmul>
 8007026:	4601      	mov	r1, r0
 8007028:	4658      	mov	r0, fp
 800702a:	f7f9 fde9 	bl	8000c00 <__aeabi_fsub>
 800702e:	f855 bc04 	ldr.w	fp, [r5, #-4]
 8007032:	9003      	str	r0, [sp, #12]
 8007034:	9902      	ldr	r1, [sp, #8]
 8007036:	4658      	mov	r0, fp
 8007038:	f7f9 feec 	bl	8000e14 <__aeabi_fmul>
 800703c:	9b03      	ldr	r3, [sp, #12]
 800703e:	4601      	mov	r1, r0
 8007040:	4618      	mov	r0, r3
 8007042:	f7f9 fddd 	bl	8000c00 <__aeabi_fsub>
 8007046:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800704a:	f7f9 fee3 	bl	8000e14 <__aeabi_fmul>
 800704e:	4639      	mov	r1, r7
 8007050:	f849 0c08 	str.w	r0, [r9, #-8]
 8007054:	4658      	mov	r0, fp
 8007056:	f7f9 fedd 	bl	8000e14 <__aeabi_fmul>
 800705a:	4651      	mov	r1, sl
 800705c:	4607      	mov	r7, r0
 800705e:	9801      	ldr	r0, [sp, #4]
 8007060:	f7f9 fdce 	bl	8000c00 <__aeabi_fsub>
 8007064:	4601      	mov	r1, r0
 8007066:	4638      	mov	r0, r7
 8007068:	f7f9 fdcc 	bl	8000c04 <__addsf3>
 800706c:	9902      	ldr	r1, [sp, #8]
 800706e:	4607      	mov	r7, r0
 8007070:	4640      	mov	r0, r8
 8007072:	f7f9 fecf 	bl	8000e14 <__aeabi_fmul>
 8007076:	4601      	mov	r1, r0
 8007078:	4638      	mov	r0, r7
 800707a:	f7f9 fdc1 	bl	8000c00 <__aeabi_fsub>
 800707e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007082:	f7f9 fec7 	bl	8000e14 <__aeabi_fmul>
 8007086:	9a04      	ldr	r2, [sp, #16]
 8007088:	f849 0c04 	str.w	r0, [r9, #-4]
 800708c:	3a01      	subs	r2, #1
 800708e:	f1a6 0608 	sub.w	r6, r6, #8
 8007092:	f104 0408 	add.w	r4, r4, #8
 8007096:	f105 0508 	add.w	r5, r5, #8
 800709a:	f109 0908 	add.w	r9, r9, #8
 800709e:	d1a3      	bne.n	8006fe8 <arm_rfft_fast_f32+0x190>
 80070a0:	9a07      	ldr	r2, [sp, #28]
 80070a2:	9905      	ldr	r1, [sp, #20]
 80070a4:	9806      	ldr	r0, [sp, #24]
 80070a6:	2301      	movs	r3, #1
 80070a8:	b009      	add	sp, #36	@ 0x24
 80070aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ae:	f000 bced 	b.w	8007a8c <arm_cfft_f32>
 80070b2:	bf00      	nop

080070b4 <arm_cfft_radix8by2_f32>:
 80070b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b8:	460c      	mov	r4, r1
 80070ba:	8803      	ldrh	r3, [r0, #0]
 80070bc:	b093      	sub	sp, #76	@ 0x4c
 80070be:	900e      	str	r0, [sp, #56]	@ 0x38
 80070c0:	6842      	ldr	r2, [r0, #4]
 80070c2:	0858      	lsrs	r0, r3, #1
 80070c4:	9111      	str	r1, [sp, #68]	@ 0x44
 80070c6:	9010      	str	r0, [sp, #64]	@ 0x40
 80070c8:	0081      	lsls	r1, r0, #2
 80070ca:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 80070ce:	08db      	lsrs	r3, r3, #3
 80070d0:	900f      	str	r0, [sp, #60]	@ 0x3c
 80070d2:	9308      	str	r3, [sp, #32]
 80070d4:	f000 8131 	beq.w	800733a <arm_cfft_radix8by2_f32+0x286>
 80070d8:	f101 0310 	add.w	r3, r1, #16
 80070dc:	18c7      	adds	r7, r0, r3
 80070de:	46bb      	mov	fp, r7
 80070e0:	3210      	adds	r2, #16
 80070e2:	9200      	str	r2, [sp, #0]
 80070e4:	eb04 0803 	add.w	r8, r4, r3
 80070e8:	f104 0610 	add.w	r6, r4, #16
 80070ec:	f100 0910 	add.w	r9, r0, #16
 80070f0:	f859 2c10 	ldr.w	r2, [r9, #-16]
 80070f4:	f856 3c10 	ldr.w	r3, [r6, #-16]
 80070f8:	4611      	mov	r1, r2
 80070fa:	4618      	mov	r0, r3
 80070fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80070fe:	9206      	str	r2, [sp, #24]
 8007100:	f7f9 fd80 	bl	8000c04 <__addsf3>
 8007104:	f859 2c08 	ldr.w	r2, [r9, #-8]
 8007108:	f858 1c0c 	ldr.w	r1, [r8, #-12]
 800710c:	f858 ec04 	ldr.w	lr, [r8, #-4]
 8007110:	4614      	mov	r4, r2
 8007112:	f858 2c10 	ldr.w	r2, [r8, #-16]
 8007116:	f859 3c0c 	ldr.w	r3, [r9, #-12]
 800711a:	f856 ac0c 	ldr.w	sl, [r6, #-12]
 800711e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007120:	f85b 1c08 	ldr.w	r1, [fp, #-8]
 8007124:	f85b cc10 	ldr.w	ip, [fp, #-16]
 8007128:	f858 7c08 	ldr.w	r7, [r8, #-8]
 800712c:	920a      	str	r2, [sp, #40]	@ 0x28
 800712e:	f8cd e008 	str.w	lr, [sp, #8]
 8007132:	f85b 2c0c 	ldr.w	r2, [fp, #-12]
 8007136:	f85b ec04 	ldr.w	lr, [fp, #-4]
 800713a:	f859 5c04 	ldr.w	r5, [r9, #-4]
 800713e:	9104      	str	r1, [sp, #16]
 8007140:	f846 0c10 	str.w	r0, [r6, #-16]
 8007144:	4619      	mov	r1, r3
 8007146:	4650      	mov	r0, sl
 8007148:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
 800714c:	f8cd e014 	str.w	lr, [sp, #20]
 8007150:	9203      	str	r2, [sp, #12]
 8007152:	9307      	str	r3, [sp, #28]
 8007154:	9701      	str	r7, [sp, #4]
 8007156:	f7f9 fd55 	bl	8000c04 <__addsf3>
 800715a:	f856 7c08 	ldr.w	r7, [r6, #-8]
 800715e:	f846 0c0c 	str.w	r0, [r6, #-12]
 8007162:	4621      	mov	r1, r4
 8007164:	4638      	mov	r0, r7
 8007166:	9409      	str	r4, [sp, #36]	@ 0x24
 8007168:	f7f9 fd4c 	bl	8000c04 <__addsf3>
 800716c:	f856 4c04 	ldr.w	r4, [r6, #-4]
 8007170:	f846 0c08 	str.w	r0, [r6, #-8]
 8007174:	4629      	mov	r1, r5
 8007176:	4620      	mov	r0, r4
 8007178:	f7f9 fd44 	bl	8000c04 <__addsf3>
 800717c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800717e:	9a06      	ldr	r2, [sp, #24]
 8007180:	f846 0c04 	str.w	r0, [r6, #-4]
 8007184:	4611      	mov	r1, r2
 8007186:	4618      	mov	r0, r3
 8007188:	f7f9 fd3a 	bl	8000c00 <__aeabi_fsub>
 800718c:	9907      	ldr	r1, [sp, #28]
 800718e:	9006      	str	r0, [sp, #24]
 8007190:	4650      	mov	r0, sl
 8007192:	f7f9 fd35 	bl	8000c00 <__aeabi_fsub>
 8007196:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007198:	4682      	mov	sl, r0
 800719a:	4638      	mov	r0, r7
 800719c:	f7f9 fd30 	bl	8000c00 <__aeabi_fsub>
 80071a0:	4629      	mov	r1, r5
 80071a2:	9007      	str	r0, [sp, #28]
 80071a4:	4620      	mov	r0, r4
 80071a6:	f7f9 fd2b 	bl	8000c00 <__aeabi_fsub>
 80071aa:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80071ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071ae:	4639      	mov	r1, r7
 80071b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80071b2:	4620      	mov	r0, r4
 80071b4:	f7f9 fd26 	bl	8000c04 <__addsf3>
 80071b8:	9903      	ldr	r1, [sp, #12]
 80071ba:	f848 0c10 	str.w	r0, [r8, #-16]
 80071be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80071c0:	3610      	adds	r6, #16
 80071c2:	4628      	mov	r0, r5
 80071c4:	f7f9 fd1e 	bl	8000c04 <__addsf3>
 80071c8:	9904      	ldr	r1, [sp, #16]
 80071ca:	f848 0c0c 	str.w	r0, [r8, #-12]
 80071ce:	9801      	ldr	r0, [sp, #4]
 80071d0:	f7f9 fd18 	bl	8000c04 <__addsf3>
 80071d4:	9905      	ldr	r1, [sp, #20]
 80071d6:	f848 0c08 	str.w	r0, [r8, #-8]
 80071da:	9802      	ldr	r0, [sp, #8]
 80071dc:	f7f9 fd12 	bl	8000c04 <__addsf3>
 80071e0:	4621      	mov	r1, r4
 80071e2:	f848 0c04 	str.w	r0, [r8, #-4]
 80071e6:	4638      	mov	r0, r7
 80071e8:	f7f9 fd0a 	bl	8000c00 <__aeabi_fsub>
 80071ec:	4629      	mov	r1, r5
 80071ee:	4607      	mov	r7, r0
 80071f0:	9803      	ldr	r0, [sp, #12]
 80071f2:	f7f9 fd05 	bl	8000c00 <__aeabi_fsub>
 80071f6:	9901      	ldr	r1, [sp, #4]
 80071f8:	9003      	str	r0, [sp, #12]
 80071fa:	9804      	ldr	r0, [sp, #16]
 80071fc:	f7f9 fd00 	bl	8000c00 <__aeabi_fsub>
 8007200:	9902      	ldr	r1, [sp, #8]
 8007202:	9001      	str	r0, [sp, #4]
 8007204:	9805      	ldr	r0, [sp, #20]
 8007206:	f7f9 fcfb 	bl	8000c00 <__aeabi_fsub>
 800720a:	9a00      	ldr	r2, [sp, #0]
 800720c:	9002      	str	r0, [sp, #8]
 800720e:	f852 4c10 	ldr.w	r4, [r2, #-16]
 8007212:	9806      	ldr	r0, [sp, #24]
 8007214:	4621      	mov	r1, r4
 8007216:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 800721a:	f7f9 fdfb 	bl	8000e14 <__aeabi_fmul>
 800721e:	4629      	mov	r1, r5
 8007220:	9004      	str	r0, [sp, #16]
 8007222:	4650      	mov	r0, sl
 8007224:	f7f9 fdf6 	bl	8000e14 <__aeabi_fmul>
 8007228:	9b04      	ldr	r3, [sp, #16]
 800722a:	4601      	mov	r1, r0
 800722c:	4618      	mov	r0, r3
 800722e:	f7f9 fce9 	bl	8000c04 <__addsf3>
 8007232:	4621      	mov	r1, r4
 8007234:	f849 0c10 	str.w	r0, [r9, #-16]
 8007238:	4650      	mov	r0, sl
 800723a:	f7f9 fdeb 	bl	8000e14 <__aeabi_fmul>
 800723e:	4629      	mov	r1, r5
 8007240:	4682      	mov	sl, r0
 8007242:	9806      	ldr	r0, [sp, #24]
 8007244:	f7f9 fde6 	bl	8000e14 <__aeabi_fmul>
 8007248:	4601      	mov	r1, r0
 800724a:	4650      	mov	r0, sl
 800724c:	f7f9 fcd8 	bl	8000c00 <__aeabi_fsub>
 8007250:	4629      	mov	r1, r5
 8007252:	f849 0c0c 	str.w	r0, [r9, #-12]
 8007256:	4638      	mov	r0, r7
 8007258:	f7f9 fddc 	bl	8000e14 <__aeabi_fmul>
 800725c:	4621      	mov	r1, r4
 800725e:	4682      	mov	sl, r0
 8007260:	9803      	ldr	r0, [sp, #12]
 8007262:	f7f9 fdd7 	bl	8000e14 <__aeabi_fmul>
 8007266:	4601      	mov	r1, r0
 8007268:	4650      	mov	r0, sl
 800726a:	f7f9 fcc9 	bl	8000c00 <__aeabi_fsub>
 800726e:	4629      	mov	r1, r5
 8007270:	f84b 0c10 	str.w	r0, [fp, #-16]
 8007274:	9803      	ldr	r0, [sp, #12]
 8007276:	f7f9 fdcd 	bl	8000e14 <__aeabi_fmul>
 800727a:	4621      	mov	r1, r4
 800727c:	4605      	mov	r5, r0
 800727e:	4638      	mov	r0, r7
 8007280:	f7f9 fdc8 	bl	8000e14 <__aeabi_fmul>
 8007284:	4601      	mov	r1, r0
 8007286:	4628      	mov	r0, r5
 8007288:	f7f9 fcbc 	bl	8000c04 <__addsf3>
 800728c:	9a00      	ldr	r2, [sp, #0]
 800728e:	f84b 0c0c 	str.w	r0, [fp, #-12]
 8007292:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8007296:	9807      	ldr	r0, [sp, #28]
 8007298:	4621      	mov	r1, r4
 800729a:	f852 5c04 	ldr.w	r5, [r2, #-4]
 800729e:	f7f9 fdb9 	bl	8000e14 <__aeabi_fmul>
 80072a2:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80072a6:	4607      	mov	r7, r0
 80072a8:	4629      	mov	r1, r5
 80072aa:	4650      	mov	r0, sl
 80072ac:	f7f9 fdb2 	bl	8000e14 <__aeabi_fmul>
 80072b0:	4601      	mov	r1, r0
 80072b2:	4638      	mov	r0, r7
 80072b4:	f7f9 fca6 	bl	8000c04 <__addsf3>
 80072b8:	4621      	mov	r1, r4
 80072ba:	f849 0c08 	str.w	r0, [r9, #-8]
 80072be:	4650      	mov	r0, sl
 80072c0:	f7f9 fda8 	bl	8000e14 <__aeabi_fmul>
 80072c4:	4629      	mov	r1, r5
 80072c6:	4607      	mov	r7, r0
 80072c8:	9807      	ldr	r0, [sp, #28]
 80072ca:	f7f9 fda3 	bl	8000e14 <__aeabi_fmul>
 80072ce:	4601      	mov	r1, r0
 80072d0:	4638      	mov	r0, r7
 80072d2:	f7f9 fc95 	bl	8000c00 <__aeabi_fsub>
 80072d6:	4629      	mov	r1, r5
 80072d8:	f849 0c04 	str.w	r0, [r9, #-4]
 80072dc:	9801      	ldr	r0, [sp, #4]
 80072de:	f7f9 fd99 	bl	8000e14 <__aeabi_fmul>
 80072e2:	f8dd a008 	ldr.w	sl, [sp, #8]
 80072e6:	4607      	mov	r7, r0
 80072e8:	4621      	mov	r1, r4
 80072ea:	4650      	mov	r0, sl
 80072ec:	f7f9 fd92 	bl	8000e14 <__aeabi_fmul>
 80072f0:	4601      	mov	r1, r0
 80072f2:	4638      	mov	r0, r7
 80072f4:	f7f9 fc84 	bl	8000c00 <__aeabi_fsub>
 80072f8:	4629      	mov	r1, r5
 80072fa:	f84b 0c08 	str.w	r0, [fp, #-8]
 80072fe:	4650      	mov	r0, sl
 8007300:	f7f9 fd88 	bl	8000e14 <__aeabi_fmul>
 8007304:	4621      	mov	r1, r4
 8007306:	4605      	mov	r5, r0
 8007308:	9801      	ldr	r0, [sp, #4]
 800730a:	f7f9 fd83 	bl	8000e14 <__aeabi_fmul>
 800730e:	4601      	mov	r1, r0
 8007310:	4628      	mov	r0, r5
 8007312:	f7f9 fc77 	bl	8000c04 <__addsf3>
 8007316:	9b00      	ldr	r3, [sp, #0]
 8007318:	f84b 0c04 	str.w	r0, [fp, #-4]
 800731c:	3310      	adds	r3, #16
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	9b08      	ldr	r3, [sp, #32]
 8007322:	f108 0810 	add.w	r8, r8, #16
 8007326:	3b01      	subs	r3, #1
 8007328:	f109 0910 	add.w	r9, r9, #16
 800732c:	f10b 0b10 	add.w	fp, fp, #16
 8007330:	9308      	str	r3, [sp, #32]
 8007332:	f47f aedd 	bne.w	80070f0 <arm_cfft_radix8by2_f32+0x3c>
 8007336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	f8bd 4040 	ldrh.w	r4, [sp, #64]	@ 0x40
 800733e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8007340:	4621      	mov	r1, r4
 8007342:	2302      	movs	r3, #2
 8007344:	f000 fc64 	bl	8007c10 <arm_radix8_butterfly_f32>
 8007348:	4621      	mov	r1, r4
 800734a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800734c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	2302      	movs	r3, #2
 8007352:	b013      	add	sp, #76	@ 0x4c
 8007354:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007358:	f000 bc5a 	b.w	8007c10 <arm_radix8_butterfly_f32>

0800735c <arm_cfft_radix8by4_f32>:
 800735c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007360:	8804      	ldrh	r4, [r0, #0]
 8007362:	b0a7      	sub	sp, #156	@ 0x9c
 8007364:	0864      	lsrs	r4, r4, #1
 8007366:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800736a:	680d      	ldr	r5, [r1, #0]
 800736c:	911a      	str	r1, [sp, #104]	@ 0x68
 800736e:	4451      	add	r1, sl
 8007370:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
 8007374:	460f      	mov	r7, r1
 8007376:	9023      	str	r0, [sp, #140]	@ 0x8c
 8007378:	4631      	mov	r1, r6
 800737a:	4628      	mov	r0, r5
 800737c:	f7f9 fc42 	bl	8000c04 <__addsf3>
 8007380:	4631      	mov	r1, r6
 8007382:	4683      	mov	fp, r0
 8007384:	4628      	mov	r0, r5
 8007386:	9718      	str	r7, [sp, #96]	@ 0x60
 8007388:	f7f9 fc3a 	bl	8000c00 <__aeabi_fsub>
 800738c:	eb07 060a 	add.w	r6, r7, sl
 8007390:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8007392:	961b      	str	r6, [sp, #108]	@ 0x6c
 8007394:	687d      	ldr	r5, [r7, #4]
 8007396:	6876      	ldr	r6, [r6, #4]
 8007398:	9000      	str	r0, [sp, #0]
 800739a:	4631      	mov	r1, r6
 800739c:	4628      	mov	r0, r5
 800739e:	f7f9 fc31 	bl	8000c04 <__addsf3>
 80073a2:	4631      	mov	r1, r6
 80073a4:	9001      	str	r0, [sp, #4]
 80073a6:	4628      	mov	r0, r5
 80073a8:	f7f9 fc2a 	bl	8000c00 <__aeabi_fsub>
 80073ac:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80073ae:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80073b0:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
 80073b4:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 80073b8:	4639      	mov	r1, r7
 80073ba:	9002      	str	r0, [sp, #8]
 80073bc:	4658      	mov	r0, fp
 80073be:	f7f9 fc21 	bl	8000c04 <__addsf3>
 80073c2:	4631      	mov	r1, r6
 80073c4:	f7f9 fc1e 	bl	8000c04 <__addsf3>
 80073c8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80073ca:	46ae      	mov	lr, r5
 80073cc:	4619      	mov	r1, r3
 80073ce:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80073d0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80073d2:	44d6      	add	lr, sl
 80073d4:	f8de 8004 	ldr.w	r8, [lr, #4]
 80073d8:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80073dc:	951b      	str	r5, [sp, #108]	@ 0x6c
 80073de:	685d      	ldr	r5, [r3, #4]
 80073e0:	f841 0b08 	str.w	r0, [r1], #8
 80073e4:	911d      	str	r1, [sp, #116]	@ 0x74
 80073e6:	9801      	ldr	r0, [sp, #4]
 80073e8:	6851      	ldr	r1, [r2, #4]
 80073ea:	f8cd e064 	str.w	lr, [sp, #100]	@ 0x64
 80073ee:	f7f9 fc09 	bl	8000c04 <__addsf3>
 80073f2:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80073f4:	6849      	ldr	r1, [r1, #4]
 80073f6:	f7f9 fc05 	bl	8000c04 <__addsf3>
 80073fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80073fc:	4649      	mov	r1, r9
 80073fe:	6050      	str	r0, [r2, #4]
 8007400:	9800      	ldr	r0, [sp, #0]
 8007402:	f7f9 fbff 	bl	8000c04 <__addsf3>
 8007406:	4641      	mov	r1, r8
 8007408:	f7f9 fbfa 	bl	8000c00 <__aeabi_fsub>
 800740c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800740e:	4639      	mov	r1, r7
 8007410:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8007414:	9802      	ldr	r0, [sp, #8]
 8007416:	f7f9 fbf3 	bl	8000c00 <__aeabi_fsub>
 800741a:	4631      	mov	r1, r6
 800741c:	f7f9 fbf2 	bl	8000c04 <__addsf3>
 8007420:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8007422:	4639      	mov	r1, r7
 8007424:	6058      	str	r0, [r3, #4]
 8007426:	4658      	mov	r0, fp
 8007428:	f7f9 fbea 	bl	8000c00 <__aeabi_fsub>
 800742c:	4631      	mov	r1, r6
 800742e:	f7f9 fbe7 	bl	8000c00 <__aeabi_fsub>
 8007432:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007434:	4649      	mov	r1, r9
 8007436:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800743a:	9801      	ldr	r0, [sp, #4]
 800743c:	f7f9 fbe0 	bl	8000c00 <__aeabi_fsub>
 8007440:	4641      	mov	r1, r8
 8007442:	f7f9 fbdd 	bl	8000c00 <__aeabi_fsub>
 8007446:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007448:	4649      	mov	r1, r9
 800744a:	6058      	str	r0, [r3, #4]
 800744c:	9800      	ldr	r0, [sp, #0]
 800744e:	f7f9 fbd7 	bl	8000c00 <__aeabi_fsub>
 8007452:	4641      	mov	r1, r8
 8007454:	f7f9 fbd6 	bl	8000c04 <__addsf3>
 8007458:	4639      	mov	r1, r7
 800745a:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 800745c:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8007460:	9802      	ldr	r0, [sp, #8]
 8007462:	f7f9 fbcf 	bl	8000c04 <__addsf3>
 8007466:	4631      	mov	r1, r6
 8007468:	f7f9 fbca 	bl	8000c00 <__aeabi_fsub>
 800746c:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800746e:	0864      	lsrs	r4, r4, #1
 8007470:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8007472:	6048      	str	r0, [r1, #4]
 8007474:	1ea3      	subs	r3, r4, #2
 8007476:	9424      	str	r4, [sp, #144]	@ 0x90
 8007478:	460c      	mov	r4, r1
 800747a:	3108      	adds	r1, #8
 800747c:	911c      	str	r1, [sp, #112]	@ 0x70
 800747e:	4639      	mov	r1, r7
 8007480:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007482:	3108      	adds	r1, #8
 8007484:	911e      	str	r1, [sp, #120]	@ 0x78
 8007486:	4611      	mov	r1, r2
 8007488:	3108      	adds	r1, #8
 800748a:	f105 0018 	add.w	r0, r5, #24
 800748e:	911f      	str	r1, [sp, #124]	@ 0x7c
 8007490:	f105 0108 	add.w	r1, r5, #8
 8007494:	9121      	str	r1, [sp, #132]	@ 0x84
 8007496:	9020      	str	r0, [sp, #128]	@ 0x80
 8007498:	f105 0110 	add.w	r1, r5, #16
 800749c:	0858      	lsrs	r0, r3, #1
 800749e:	9122      	str	r1, [sp, #136]	@ 0x88
 80074a0:	9025      	str	r0, [sp, #148]	@ 0x94
 80074a2:	f000 8207 	beq.w	80078b4 <arm_cfft_radix8by4_f32+0x558>
 80074a6:	f1aa 030c 	sub.w	r3, sl, #12
 80074aa:	9105      	str	r1, [sp, #20]
 80074ac:	18e1      	adds	r1, r4, r3
 80074ae:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80074b0:	f1a7 0b0c 	sub.w	fp, r7, #12
 80074b4:	3310      	adds	r3, #16
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	f102 0310 	add.w	r3, r2, #16
 80074bc:	461a      	mov	r2, r3
 80074be:	f105 0320 	add.w	r3, r5, #32
 80074c2:	9304      	str	r3, [sp, #16]
 80074c4:	f105 0330 	add.w	r3, r5, #48	@ 0x30
 80074c8:	9303      	str	r3, [sp, #12]
 80074ca:	463b      	mov	r3, r7
 80074cc:	46d8      	mov	r8, fp
 80074ce:	4691      	mov	r9, r2
 80074d0:	3310      	adds	r3, #16
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	2300      	movs	r3, #0
 80074d6:	9014      	str	r0, [sp, #80]	@ 0x50
 80074d8:	9102      	str	r1, [sp, #8]
 80074da:	f104 0a10 	add.w	sl, r4, #16
 80074de:	9306      	str	r3, [sp, #24]
 80074e0:	9e01      	ldr	r6, [sp, #4]
 80074e2:	9f00      	ldr	r7, [sp, #0]
 80074e4:	f856 4c08 	ldr.w	r4, [r6, #-8]
 80074e8:	f857 5c08 	ldr.w	r5, [r7, #-8]
 80074ec:	4620      	mov	r0, r4
 80074ee:	4629      	mov	r1, r5
 80074f0:	f7f9 fb88 	bl	8000c04 <__addsf3>
 80074f4:	4629      	mov	r1, r5
 80074f6:	9007      	str	r0, [sp, #28]
 80074f8:	4620      	mov	r0, r4
 80074fa:	f7f9 fb81 	bl	8000c00 <__aeabi_fsub>
 80074fe:	f856 4c04 	ldr.w	r4, [r6, #-4]
 8007502:	f857 5c04 	ldr.w	r5, [r7, #-4]
 8007506:	9008      	str	r0, [sp, #32]
 8007508:	4629      	mov	r1, r5
 800750a:	4620      	mov	r0, r4
 800750c:	9601      	str	r6, [sp, #4]
 800750e:	9700      	str	r7, [sp, #0]
 8007510:	f7f9 fb78 	bl	8000c04 <__addsf3>
 8007514:	4629      	mov	r1, r5
 8007516:	4607      	mov	r7, r0
 8007518:	4620      	mov	r0, r4
 800751a:	f7f9 fb71 	bl	8000c00 <__aeabi_fsub>
 800751e:	f859 bc04 	ldr.w	fp, [r9, #-4]
 8007522:	f85a 6c04 	ldr.w	r6, [sl, #-4]
 8007526:	4604      	mov	r4, r0
 8007528:	4659      	mov	r1, fp
 800752a:	9808      	ldr	r0, [sp, #32]
 800752c:	f7f9 fb6a 	bl	8000c04 <__addsf3>
 8007530:	4631      	mov	r1, r6
 8007532:	f7f9 fb65 	bl	8000c00 <__aeabi_fsub>
 8007536:	f859 5c08 	ldr.w	r5, [r9, #-8]
 800753a:	9009      	str	r0, [sp, #36]	@ 0x24
 800753c:	940d      	str	r4, [sp, #52]	@ 0x34
 800753e:	4620      	mov	r0, r4
 8007540:	f85a 4c08 	ldr.w	r4, [sl, #-8]
 8007544:	4629      	mov	r1, r5
 8007546:	f7f9 fb5b 	bl	8000c00 <__aeabi_fsub>
 800754a:	4621      	mov	r1, r4
 800754c:	f7f9 fb5a 	bl	8000c04 <__addsf3>
 8007550:	4629      	mov	r1, r5
 8007552:	900a      	str	r0, [sp, #40]	@ 0x28
 8007554:	9807      	ldr	r0, [sp, #28]
 8007556:	f7f9 fb53 	bl	8000c00 <__aeabi_fsub>
 800755a:	4621      	mov	r1, r4
 800755c:	f7f9 fb50 	bl	8000c00 <__aeabi_fsub>
 8007560:	4659      	mov	r1, fp
 8007562:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007564:	4638      	mov	r0, r7
 8007566:	f7f9 fb4b 	bl	8000c00 <__aeabi_fsub>
 800756a:	4631      	mov	r1, r6
 800756c:	f7f9 fb48 	bl	8000c00 <__aeabi_fsub>
 8007570:	4659      	mov	r1, fp
 8007572:	900c      	str	r0, [sp, #48]	@ 0x30
 8007574:	9808      	ldr	r0, [sp, #32]
 8007576:	f7f9 fb43 	bl	8000c00 <__aeabi_fsub>
 800757a:	4631      	mov	r1, r6
 800757c:	f7f9 fb42 	bl	8000c04 <__addsf3>
 8007580:	4629      	mov	r1, r5
 8007582:	9008      	str	r0, [sp, #32]
 8007584:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007586:	f7f9 fb3d 	bl	8000c04 <__addsf3>
 800758a:	4621      	mov	r1, r4
 800758c:	f7f9 fb38 	bl	8000c00 <__aeabi_fsub>
 8007590:	4629      	mov	r1, r5
 8007592:	900d      	str	r0, [sp, #52]	@ 0x34
 8007594:	9807      	ldr	r0, [sp, #28]
 8007596:	f7f9 fb35 	bl	8000c04 <__addsf3>
 800759a:	4621      	mov	r1, r4
 800759c:	f7f9 fb32 	bl	8000c04 <__addsf3>
 80075a0:	9d01      	ldr	r5, [sp, #4]
 80075a2:	f109 0908 	add.w	r9, r9, #8
 80075a6:	f845 0c08 	str.w	r0, [r5, #-8]
 80075aa:	f859 1c0c 	ldr.w	r1, [r9, #-12]
 80075ae:	4638      	mov	r0, r7
 80075b0:	f7f9 fb28 	bl	8000c04 <__addsf3>
 80075b4:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 80075b8:	f7f9 fb24 	bl	8000c04 <__addsf3>
 80075bc:	9a06      	ldr	r2, [sp, #24]
 80075be:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 80075c0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80075c2:	f845 0c04 	str.w	r0, [r5, #-4]
 80075c6:	4414      	add	r4, r2
 80075c8:	18b2      	adds	r2, r6, r2
 80075ca:	f852 6c08 	ldr.w	r6, [r2, #-8]
 80075ce:	9501      	str	r5, [sp, #4]
 80075d0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80075d4:	4631      	mov	r1, r6
 80075d6:	4628      	mov	r0, r5
 80075d8:	4617      	mov	r7, r2
 80075da:	f7f9 fb13 	bl	8000c04 <__addsf3>
 80075de:	4631      	mov	r1, r6
 80075e0:	9007      	str	r0, [sp, #28]
 80075e2:	4628      	mov	r0, r5
 80075e4:	f7f9 fb0c 	bl	8000c00 <__aeabi_fsub>
 80075e8:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80075ec:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80075f0:	4683      	mov	fp, r0
 80075f2:	4631      	mov	r1, r6
 80075f4:	4628      	mov	r0, r5
 80075f6:	9715      	str	r7, [sp, #84]	@ 0x54
 80075f8:	f7f9 fb04 	bl	8000c04 <__addsf3>
 80075fc:	4631      	mov	r1, r6
 80075fe:	900e      	str	r0, [sp, #56]	@ 0x38
 8007600:	4628      	mov	r0, r5
 8007602:	f7f9 fafd 	bl	8000c00 <__aeabi_fsub>
 8007606:	9f02      	ldr	r7, [sp, #8]
 8007608:	f8d8 6008 	ldr.w	r6, [r8, #8]
 800760c:	68bd      	ldr	r5, [r7, #8]
 800760e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007610:	4629      	mov	r1, r5
 8007612:	4630      	mov	r0, r6
 8007614:	f7f9 faf4 	bl	8000c00 <__aeabi_fsub>
 8007618:	4601      	mov	r1, r0
 800761a:	9017      	str	r0, [sp, #92]	@ 0x5c
 800761c:	4658      	mov	r0, fp
 800761e:	f7f9 faf1 	bl	8000c04 <__addsf3>
 8007622:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007626:	9702      	str	r7, [sp, #8]
 8007628:	687f      	ldr	r7, [r7, #4]
 800762a:	4619      	mov	r1, r3
 800762c:	9010      	str	r0, [sp, #64]	@ 0x40
 800762e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007630:	9312      	str	r3, [sp, #72]	@ 0x48
 8007632:	f7f9 fae5 	bl	8000c00 <__aeabi_fsub>
 8007636:	4639      	mov	r1, r7
 8007638:	f7f9 fae4 	bl	8000c04 <__addsf3>
 800763c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800763e:	9011      	str	r0, [sp, #68]	@ 0x44
 8007640:	4619      	mov	r1, r3
 8007642:	9807      	ldr	r0, [sp, #28]
 8007644:	9316      	str	r3, [sp, #88]	@ 0x58
 8007646:	f7f9 fadb 	bl	8000c00 <__aeabi_fsub>
 800764a:	4639      	mov	r1, r7
 800764c:	f7f9 fad8 	bl	8000c00 <__aeabi_fsub>
 8007650:	4631      	mov	r1, r6
 8007652:	9012      	str	r0, [sp, #72]	@ 0x48
 8007654:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8007656:	f7f9 fad3 	bl	8000c00 <__aeabi_fsub>
 800765a:	4629      	mov	r1, r5
 800765c:	f7f9 fad0 	bl	8000c00 <__aeabi_fsub>
 8007660:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007662:	4659      	mov	r1, fp
 8007664:	9013      	str	r0, [sp, #76]	@ 0x4c
 8007666:	4610      	mov	r0, r2
 8007668:	f7f9 faca 	bl	8000c00 <__aeabi_fsub>
 800766c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800766e:	4683      	mov	fp, r0
 8007670:	4619      	mov	r1, r3
 8007672:	4638      	mov	r0, r7
 8007674:	f7f9 fac4 	bl	8000c00 <__aeabi_fsub>
 8007678:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800767a:	f7f9 fac1 	bl	8000c00 <__aeabi_fsub>
 800767e:	4631      	mov	r1, r6
 8007680:	4607      	mov	r7, r0
 8007682:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8007684:	f7f9 fabe 	bl	8000c04 <__addsf3>
 8007688:	4629      	mov	r1, r5
 800768a:	f7f9 fabb 	bl	8000c04 <__addsf3>
 800768e:	f844 0c04 	str.w	r0, [r4, #-4]
 8007692:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007696:	9807      	ldr	r0, [sp, #28]
 8007698:	f7f9 fab4 	bl	8000c04 <__addsf3>
 800769c:	9902      	ldr	r1, [sp, #8]
 800769e:	f1a8 0808 	sub.w	r8, r8, #8
 80076a2:	6849      	ldr	r1, [r1, #4]
 80076a4:	f7f9 faae 	bl	8000c04 <__addsf3>
 80076a8:	9d05      	ldr	r5, [sp, #20]
 80076aa:	f844 0c08 	str.w	r0, [r4, #-8]
 80076ae:	f855 4c08 	ldr.w	r4, [r5, #-8]
 80076b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076b4:	4621      	mov	r1, r4
 80076b6:	f7f9 fbad 	bl	8000e14 <__aeabi_fmul>
 80076ba:	f855 5c04 	ldr.w	r5, [r5, #-4]
 80076be:	4606      	mov	r6, r0
 80076c0:	4629      	mov	r1, r5
 80076c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80076c4:	f7f9 fba6 	bl	8000e14 <__aeabi_fmul>
 80076c8:	4601      	mov	r1, r0
 80076ca:	4630      	mov	r0, r6
 80076cc:	f7f9 fa9a 	bl	8000c04 <__addsf3>
 80076d0:	4621      	mov	r1, r4
 80076d2:	f849 0c10 	str.w	r0, [r9, #-16]
 80076d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80076d8:	f7f9 fb9c 	bl	8000e14 <__aeabi_fmul>
 80076dc:	4629      	mov	r1, r5
 80076de:	4606      	mov	r6, r0
 80076e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076e2:	f7f9 fb97 	bl	8000e14 <__aeabi_fmul>
 80076e6:	4601      	mov	r1, r0
 80076e8:	4630      	mov	r0, r6
 80076ea:	f7f9 fa89 	bl	8000c00 <__aeabi_fsub>
 80076ee:	4629      	mov	r1, r5
 80076f0:	f849 0c0c 	str.w	r0, [r9, #-12]
 80076f4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80076f6:	f7f9 fb8d 	bl	8000e14 <__aeabi_fmul>
 80076fa:	4621      	mov	r1, r4
 80076fc:	4606      	mov	r6, r0
 80076fe:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8007700:	f7f9 fb88 	bl	8000e14 <__aeabi_fmul>
 8007704:	4601      	mov	r1, r0
 8007706:	4630      	mov	r0, r6
 8007708:	f7f9 fa7a 	bl	8000c00 <__aeabi_fsub>
 800770c:	4629      	mov	r1, r5
 800770e:	f8c8 0010 	str.w	r0, [r8, #16]
 8007712:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8007714:	f7f9 fb7e 	bl	8000e14 <__aeabi_fmul>
 8007718:	4621      	mov	r1, r4
 800771a:	4605      	mov	r5, r0
 800771c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800771e:	f7f9 fb79 	bl	8000e14 <__aeabi_fmul>
 8007722:	4601      	mov	r1, r0
 8007724:	4628      	mov	r0, r5
 8007726:	f7f9 fa6d 	bl	8000c04 <__addsf3>
 800772a:	9904      	ldr	r1, [sp, #16]
 800772c:	f8c8 000c 	str.w	r0, [r8, #12]
 8007730:	f851 4c10 	ldr.w	r4, [r1, #-16]
 8007734:	f851 5c0c 	ldr.w	r5, [r1, #-12]
 8007738:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800773a:	4621      	mov	r1, r4
 800773c:	f7f9 fb6a 	bl	8000e14 <__aeabi_fmul>
 8007740:	4629      	mov	r1, r5
 8007742:	4606      	mov	r6, r0
 8007744:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007746:	f7f9 fb65 	bl	8000e14 <__aeabi_fmul>
 800774a:	4601      	mov	r1, r0
 800774c:	4630      	mov	r0, r6
 800774e:	f7f9 fa59 	bl	8000c04 <__addsf3>
 8007752:	9a00      	ldr	r2, [sp, #0]
 8007754:	4621      	mov	r1, r4
 8007756:	f842 0c08 	str.w	r0, [r2, #-8]
 800775a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800775c:	f7f9 fb5a 	bl	8000e14 <__aeabi_fmul>
 8007760:	4629      	mov	r1, r5
 8007762:	4606      	mov	r6, r0
 8007764:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007766:	f7f9 fb55 	bl	8000e14 <__aeabi_fmul>
 800776a:	4601      	mov	r1, r0
 800776c:	4630      	mov	r0, r6
 800776e:	f7f9 fa47 	bl	8000c00 <__aeabi_fsub>
 8007772:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007774:	9a00      	ldr	r2, [sp, #0]
 8007776:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800777a:	f842 0c04 	str.w	r0, [r2, #-4]
 800777e:	4621      	mov	r1, r4
 8007780:	4618      	mov	r0, r3
 8007782:	f7f9 fb47 	bl	8000e14 <__aeabi_fmul>
 8007786:	4629      	mov	r1, r5
 8007788:	4606      	mov	r6, r0
 800778a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800778c:	f7f9 fb42 	bl	8000e14 <__aeabi_fmul>
 8007790:	4601      	mov	r1, r0
 8007792:	4630      	mov	r0, r6
 8007794:	f7f9 fa34 	bl	8000c00 <__aeabi_fsub>
 8007798:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800779a:	4629      	mov	r1, r5
 800779c:	f846 0c04 	str.w	r0, [r6, #-4]
 80077a0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80077a2:	f7f9 fb37 	bl	8000e14 <__aeabi_fmul>
 80077a6:	4621      	mov	r1, r4
 80077a8:	4605      	mov	r5, r0
 80077aa:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80077ac:	f7f9 fb32 	bl	8000e14 <__aeabi_fmul>
 80077b0:	4601      	mov	r1, r0
 80077b2:	4628      	mov	r0, r5
 80077b4:	f7f9 fa24 	bl	8000c00 <__aeabi_fsub>
 80077b8:	f846 0c08 	str.w	r0, [r6, #-8]
 80077bc:	9e03      	ldr	r6, [sp, #12]
 80077be:	9808      	ldr	r0, [sp, #32]
 80077c0:	f856 4c18 	ldr.w	r4, [r6, #-24]
 80077c4:	f856 5c14 	ldr.w	r5, [r6, #-20]
 80077c8:	4621      	mov	r1, r4
 80077ca:	f7f9 fb23 	bl	8000e14 <__aeabi_fmul>
 80077ce:	4629      	mov	r1, r5
 80077d0:	4606      	mov	r6, r0
 80077d2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80077d4:	f7f9 fb1e 	bl	8000e14 <__aeabi_fmul>
 80077d8:	4601      	mov	r1, r0
 80077da:	4630      	mov	r0, r6
 80077dc:	f7f9 fa12 	bl	8000c04 <__addsf3>
 80077e0:	4621      	mov	r1, r4
 80077e2:	f84a 0c08 	str.w	r0, [sl, #-8]
 80077e6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80077e8:	f7f9 fb14 	bl	8000e14 <__aeabi_fmul>
 80077ec:	4629      	mov	r1, r5
 80077ee:	4606      	mov	r6, r0
 80077f0:	9808      	ldr	r0, [sp, #32]
 80077f2:	f7f9 fb0f 	bl	8000e14 <__aeabi_fmul>
 80077f6:	4601      	mov	r1, r0
 80077f8:	4630      	mov	r0, r6
 80077fa:	f7f9 fa01 	bl	8000c00 <__aeabi_fsub>
 80077fe:	4629      	mov	r1, r5
 8007800:	f84a 0c04 	str.w	r0, [sl, #-4]
 8007804:	4638      	mov	r0, r7
 8007806:	f7f9 fb05 	bl	8000e14 <__aeabi_fmul>
 800780a:	4621      	mov	r1, r4
 800780c:	4606      	mov	r6, r0
 800780e:	4658      	mov	r0, fp
 8007810:	f7f9 fb00 	bl	8000e14 <__aeabi_fmul>
 8007814:	4601      	mov	r1, r0
 8007816:	4630      	mov	r0, r6
 8007818:	f7f9 f9f2 	bl	8000c00 <__aeabi_fsub>
 800781c:	9e02      	ldr	r6, [sp, #8]
 800781e:	4629      	mov	r1, r5
 8007820:	60b0      	str	r0, [r6, #8]
 8007822:	4658      	mov	r0, fp
 8007824:	f7f9 faf6 	bl	8000e14 <__aeabi_fmul>
 8007828:	4621      	mov	r1, r4
 800782a:	4605      	mov	r5, r0
 800782c:	4638      	mov	r0, r7
 800782e:	f7f9 faf1 	bl	8000e14 <__aeabi_fmul>
 8007832:	4601      	mov	r1, r0
 8007834:	4628      	mov	r0, r5
 8007836:	f7f9 f9e5 	bl	8000c04 <__addsf3>
 800783a:	9b01      	ldr	r3, [sp, #4]
 800783c:	9d05      	ldr	r5, [sp, #20]
 800783e:	461f      	mov	r7, r3
 8007840:	9b06      	ldr	r3, [sp, #24]
 8007842:	9904      	ldr	r1, [sp, #16]
 8007844:	3b08      	subs	r3, #8
 8007846:	9306      	str	r3, [sp, #24]
 8007848:	f105 0308 	add.w	r3, r5, #8
 800784c:	9305      	str	r3, [sp, #20]
 800784e:	3708      	adds	r7, #8
 8007850:	f101 0310 	add.w	r3, r1, #16
 8007854:	9701      	str	r7, [sp, #4]
 8007856:	9304      	str	r3, [sp, #16]
 8007858:	9a00      	ldr	r2, [sp, #0]
 800785a:	9c03      	ldr	r4, [sp, #12]
 800785c:	f102 0308 	add.w	r3, r2, #8
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	f104 0318 	add.w	r3, r4, #24
 8007866:	9303      	str	r3, [sp, #12]
 8007868:	f1a6 0308 	sub.w	r3, r6, #8
 800786c:	9302      	str	r3, [sp, #8]
 800786e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007870:	f10a 0a08 	add.w	sl, sl, #8
 8007874:	3b01      	subs	r3, #1
 8007876:	6070      	str	r0, [r6, #4]
 8007878:	9314      	str	r3, [sp, #80]	@ 0x50
 800787a:	f47f ae31 	bne.w	80074e0 <arm_cfft_radix8by4_f32+0x184>
 800787e:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8007880:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8007882:	00cb      	lsls	r3, r1, #3
 8007884:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007888:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800788c:	9122      	str	r1, [sp, #136]	@ 0x88
 800788e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8007890:	4419      	add	r1, r3
 8007892:	911d      	str	r1, [sp, #116]	@ 0x74
 8007894:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8007896:	4419      	add	r1, r3
 8007898:	9121      	str	r1, [sp, #132]	@ 0x84
 800789a:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 800789c:	4419      	add	r1, r3
 800789e:	911f      	str	r1, [sp, #124]	@ 0x7c
 80078a0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80078a2:	4419      	add	r1, r3
 80078a4:	911e      	str	r1, [sp, #120]	@ 0x78
 80078a6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80078a8:	4419      	add	r1, r3
 80078aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80078ac:	911c      	str	r1, [sp, #112]	@ 0x70
 80078ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078b2:	9320      	str	r3, [sp, #128]	@ 0x80
 80078b4:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 80078b6:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 80078b8:	6834      	ldr	r4, [r6, #0]
 80078ba:	683d      	ldr	r5, [r7, #0]
 80078bc:	4620      	mov	r0, r4
 80078be:	4629      	mov	r1, r5
 80078c0:	f7f9 f9a0 	bl	8000c04 <__addsf3>
 80078c4:	4629      	mov	r1, r5
 80078c6:	4681      	mov	r9, r0
 80078c8:	4620      	mov	r0, r4
 80078ca:	f7f9 f999 	bl	8000c00 <__aeabi_fsub>
 80078ce:	6874      	ldr	r4, [r6, #4]
 80078d0:	687d      	ldr	r5, [r7, #4]
 80078d2:	4683      	mov	fp, r0
 80078d4:	4629      	mov	r1, r5
 80078d6:	4620      	mov	r0, r4
 80078d8:	961d      	str	r6, [sp, #116]	@ 0x74
 80078da:	971e      	str	r7, [sp, #120]	@ 0x78
 80078dc:	f7f9 f992 	bl	8000c04 <__addsf3>
 80078e0:	4629      	mov	r1, r5
 80078e2:	4680      	mov	r8, r0
 80078e4:	4620      	mov	r0, r4
 80078e6:	f7f9 f98b 	bl	8000c00 <__aeabi_fsub>
 80078ea:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 80078ec:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80078ee:	6867      	ldr	r7, [r4, #4]
 80078f0:	685e      	ldr	r6, [r3, #4]
 80078f2:	4682      	mov	sl, r0
 80078f4:	4639      	mov	r1, r7
 80078f6:	4658      	mov	r0, fp
 80078f8:	f7f9 f984 	bl	8000c04 <__addsf3>
 80078fc:	4631      	mov	r1, r6
 80078fe:	f7f9 f97f 	bl	8000c00 <__aeabi_fsub>
 8007902:	6825      	ldr	r5, [r4, #0]
 8007904:	941f      	str	r4, [sp, #124]	@ 0x7c
 8007906:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8007908:	9000      	str	r0, [sp, #0]
 800790a:	6824      	ldr	r4, [r4, #0]
 800790c:	4629      	mov	r1, r5
 800790e:	4650      	mov	r0, sl
 8007910:	f7f9 f976 	bl	8000c00 <__aeabi_fsub>
 8007914:	4621      	mov	r1, r4
 8007916:	f7f9 f975 	bl	8000c04 <__addsf3>
 800791a:	4629      	mov	r1, r5
 800791c:	9001      	str	r0, [sp, #4]
 800791e:	4648      	mov	r0, r9
 8007920:	f7f9 f96e 	bl	8000c00 <__aeabi_fsub>
 8007924:	4621      	mov	r1, r4
 8007926:	f7f9 f96b 	bl	8000c00 <__aeabi_fsub>
 800792a:	4639      	mov	r1, r7
 800792c:	9002      	str	r0, [sp, #8]
 800792e:	4640      	mov	r0, r8
 8007930:	f7f9 f966 	bl	8000c00 <__aeabi_fsub>
 8007934:	4631      	mov	r1, r6
 8007936:	f7f9 f963 	bl	8000c00 <__aeabi_fsub>
 800793a:	4639      	mov	r1, r7
 800793c:	9003      	str	r0, [sp, #12]
 800793e:	4658      	mov	r0, fp
 8007940:	f7f9 f95e 	bl	8000c00 <__aeabi_fsub>
 8007944:	4631      	mov	r1, r6
 8007946:	f7f9 f95d 	bl	8000c04 <__addsf3>
 800794a:	4629      	mov	r1, r5
 800794c:	4606      	mov	r6, r0
 800794e:	4650      	mov	r0, sl
 8007950:	f7f9 f958 	bl	8000c04 <__addsf3>
 8007954:	4621      	mov	r1, r4
 8007956:	f7f9 f953 	bl	8000c00 <__aeabi_fsub>
 800795a:	4629      	mov	r1, r5
 800795c:	4682      	mov	sl, r0
 800795e:	4648      	mov	r0, r9
 8007960:	f7f9 f950 	bl	8000c04 <__addsf3>
 8007964:	4621      	mov	r1, r4
 8007966:	f7f9 f94d 	bl	8000c04 <__addsf3>
 800796a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800796c:	6028      	str	r0, [r5, #0]
 800796e:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 8007970:	4640      	mov	r0, r8
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	f7f9 f946 	bl	8000c04 <__addsf3>
 8007978:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800797a:	6851      	ldr	r1, [r2, #4]
 800797c:	f7f9 f942 	bl	8000c04 <__addsf3>
 8007980:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 8007982:	6068      	str	r0, [r5, #4]
 8007984:	6825      	ldr	r5, [r4, #0]
 8007986:	f8dd 9000 	ldr.w	r9, [sp]
 800798a:	4629      	mov	r1, r5
 800798c:	4648      	mov	r0, r9
 800798e:	f7f9 fa41 	bl	8000e14 <__aeabi_fmul>
 8007992:	6864      	ldr	r4, [r4, #4]
 8007994:	f8dd b004 	ldr.w	fp, [sp, #4]
 8007998:	4680      	mov	r8, r0
 800799a:	4621      	mov	r1, r4
 800799c:	4658      	mov	r0, fp
 800799e:	f7f9 fa39 	bl	8000e14 <__aeabi_fmul>
 80079a2:	4601      	mov	r1, r0
 80079a4:	4640      	mov	r0, r8
 80079a6:	f7f9 f92d 	bl	8000c04 <__addsf3>
 80079aa:	4629      	mov	r1, r5
 80079ac:	6038      	str	r0, [r7, #0]
 80079ae:	4658      	mov	r0, fp
 80079b0:	f7f9 fa30 	bl	8000e14 <__aeabi_fmul>
 80079b4:	4621      	mov	r1, r4
 80079b6:	4605      	mov	r5, r0
 80079b8:	4648      	mov	r0, r9
 80079ba:	f7f9 fa2b 	bl	8000e14 <__aeabi_fmul>
 80079be:	4601      	mov	r1, r0
 80079c0:	4628      	mov	r0, r5
 80079c2:	f7f9 f91d 	bl	8000c00 <__aeabi_fsub>
 80079c6:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	6825      	ldr	r5, [r4, #0]
 80079cc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80079d0:	4629      	mov	r1, r5
 80079d2:	4648      	mov	r0, r9
 80079d4:	f7f9 fa1e 	bl	8000e14 <__aeabi_fmul>
 80079d8:	6864      	ldr	r4, [r4, #4]
 80079da:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80079de:	4607      	mov	r7, r0
 80079e0:	4621      	mov	r1, r4
 80079e2:	4640      	mov	r0, r8
 80079e4:	f7f9 fa16 	bl	8000e14 <__aeabi_fmul>
 80079e8:	4601      	mov	r1, r0
 80079ea:	4638      	mov	r0, r7
 80079ec:	f7f9 f90a 	bl	8000c04 <__addsf3>
 80079f0:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 80079f2:	4629      	mov	r1, r5
 80079f4:	6038      	str	r0, [r7, #0]
 80079f6:	4640      	mov	r0, r8
 80079f8:	f7f9 fa0c 	bl	8000e14 <__aeabi_fmul>
 80079fc:	4621      	mov	r1, r4
 80079fe:	4605      	mov	r5, r0
 8007a00:	4648      	mov	r0, r9
 8007a02:	f7f9 fa07 	bl	8000e14 <__aeabi_fmul>
 8007a06:	4601      	mov	r1, r0
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f7f9 f8f9 	bl	8000c00 <__aeabi_fsub>
 8007a0e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	680d      	ldr	r5, [r1, #0]
 8007a14:	4630      	mov	r0, r6
 8007a16:	684c      	ldr	r4, [r1, #4]
 8007a18:	4629      	mov	r1, r5
 8007a1a:	f7f9 f9fb 	bl	8000e14 <__aeabi_fmul>
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4607      	mov	r7, r0
 8007a22:	4650      	mov	r0, sl
 8007a24:	f7f9 f9f6 	bl	8000e14 <__aeabi_fmul>
 8007a28:	4601      	mov	r1, r0
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	f7f9 f8ea 	bl	8000c04 <__addsf3>
 8007a30:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8007a32:	4629      	mov	r1, r5
 8007a34:	6038      	str	r0, [r7, #0]
 8007a36:	4650      	mov	r0, sl
 8007a38:	f7f9 f9ec 	bl	8000e14 <__aeabi_fmul>
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	4605      	mov	r5, r0
 8007a40:	4630      	mov	r0, r6
 8007a42:	f7f9 f9e7 	bl	8000e14 <__aeabi_fmul>
 8007a46:	4601      	mov	r1, r0
 8007a48:	4628      	mov	r0, r5
 8007a4a:	f7f9 f8d9 	bl	8000c00 <__aeabi_fsub>
 8007a4e:	f8bd 4090 	ldrh.w	r4, [sp, #144]	@ 0x90
 8007a52:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	6872      	ldr	r2, [r6, #4]
 8007a58:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	f000 f8d7 	bl	8007c10 <arm_radix8_butterfly_f32>
 8007a62:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8007a64:	4621      	mov	r1, r4
 8007a66:	6872      	ldr	r2, [r6, #4]
 8007a68:	2304      	movs	r3, #4
 8007a6a:	f000 f8d1 	bl	8007c10 <arm_radix8_butterfly_f32>
 8007a6e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8007a70:	4621      	mov	r1, r4
 8007a72:	6872      	ldr	r2, [r6, #4]
 8007a74:	2304      	movs	r3, #4
 8007a76:	f000 f8cb 	bl	8007c10 <arm_radix8_butterfly_f32>
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	6872      	ldr	r2, [r6, #4]
 8007a7e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007a80:	2304      	movs	r3, #4
 8007a82:	b027      	add	sp, #156	@ 0x9c
 8007a84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a88:	f000 b8c2 	b.w	8007c10 <arm_radix8_butterfly_f32>

08007a8c <arm_cfft_f32>:
 8007a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a90:	2a01      	cmp	r2, #1
 8007a92:	4606      	mov	r6, r0
 8007a94:	4617      	mov	r7, r2
 8007a96:	460c      	mov	r4, r1
 8007a98:	4698      	mov	r8, r3
 8007a9a:	8805      	ldrh	r5, [r0, #0]
 8007a9c:	d058      	beq.n	8007b50 <arm_cfft_f32+0xc4>
 8007a9e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8007aa2:	d050      	beq.n	8007b46 <arm_cfft_f32+0xba>
 8007aa4:	d916      	bls.n	8007ad4 <arm_cfft_f32+0x48>
 8007aa6:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8007aaa:	d01a      	beq.n	8007ae2 <arm_cfft_f32+0x56>
 8007aac:	d960      	bls.n	8007b70 <arm_cfft_f32+0xe4>
 8007aae:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8007ab2:	d048      	beq.n	8007b46 <arm_cfft_f32+0xba>
 8007ab4:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8007ab8:	d105      	bne.n	8007ac6 <arm_cfft_f32+0x3a>
 8007aba:	2301      	movs	r3, #1
 8007abc:	6872      	ldr	r2, [r6, #4]
 8007abe:	4629      	mov	r1, r5
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f000 f8a5 	bl	8007c10 <arm_radix8_butterfly_f32>
 8007ac6:	f1b8 0f00 	cmp.w	r8, #0
 8007aca:	d111      	bne.n	8007af0 <arm_cfft_f32+0x64>
 8007acc:	2f01      	cmp	r7, #1
 8007ace:	d016      	beq.n	8007afe <arm_cfft_f32+0x72>
 8007ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad4:	2d20      	cmp	r5, #32
 8007ad6:	d036      	beq.n	8007b46 <arm_cfft_f32+0xba>
 8007ad8:	d94e      	bls.n	8007b78 <arm_cfft_f32+0xec>
 8007ada:	2d40      	cmp	r5, #64	@ 0x40
 8007adc:	d0ed      	beq.n	8007aba <arm_cfft_f32+0x2e>
 8007ade:	2d80      	cmp	r5, #128	@ 0x80
 8007ae0:	d1f1      	bne.n	8007ac6 <arm_cfft_f32+0x3a>
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f7ff fae5 	bl	80070b4 <arm_cfft_radix8by2_f32>
 8007aea:	f1b8 0f00 	cmp.w	r8, #0
 8007aee:	d0ed      	beq.n	8007acc <arm_cfft_f32+0x40>
 8007af0:	68b2      	ldr	r2, [r6, #8]
 8007af2:	89b1      	ldrh	r1, [r6, #12]
 8007af4:	4620      	mov	r0, r4
 8007af6:	f7f8 fb97 	bl	8000228 <arm_bitreversal_32>
 8007afa:	2f01      	cmp	r7, #1
 8007afc:	d1e8      	bne.n	8007ad0 <arm_cfft_f32+0x44>
 8007afe:	4628      	mov	r0, r5
 8007b00:	f7f9 f930 	bl	8000d64 <__aeabi_ui2f>
 8007b04:	4601      	mov	r1, r0
 8007b06:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007b0a:	f7f9 fa37 	bl	8000f7c <__aeabi_fdiv>
 8007b0e:	4607      	mov	r7, r0
 8007b10:	2d00      	cmp	r5, #0
 8007b12:	d0dd      	beq.n	8007ad0 <arm_cfft_f32+0x44>
 8007b14:	3408      	adds	r4, #8
 8007b16:	2600      	movs	r6, #0
 8007b18:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8007b1c:	4639      	mov	r1, r7
 8007b1e:	f7f9 f979 	bl	8000e14 <__aeabi_fmul>
 8007b22:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007b26:	f844 0c08 	str.w	r0, [r4, #-8]
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	f103 4000 	add.w	r0, r3, #2147483648	@ 0x80000000
 8007b30:	f7f9 f970 	bl	8000e14 <__aeabi_fmul>
 8007b34:	3601      	adds	r6, #1
 8007b36:	42b5      	cmp	r5, r6
 8007b38:	f844 0c04 	str.w	r0, [r4, #-4]
 8007b3c:	f104 0408 	add.w	r4, r4, #8
 8007b40:	d1ea      	bne.n	8007b18 <arm_cfft_f32+0x8c>
 8007b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b46:	4621      	mov	r1, r4
 8007b48:	4630      	mov	r0, r6
 8007b4a:	f7ff fc07 	bl	800735c <arm_cfft_radix8by4_f32>
 8007b4e:	e7ba      	b.n	8007ac6 <arm_cfft_f32+0x3a>
 8007b50:	b1ad      	cbz	r5, 8007b7e <arm_cfft_f32+0xf2>
 8007b52:	f101 030c 	add.w	r3, r1, #12
 8007b56:	2100      	movs	r1, #0
 8007b58:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8007b5c:	3101      	adds	r1, #1
 8007b5e:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8007b62:	428d      	cmp	r5, r1
 8007b64:	f843 2c08 	str.w	r2, [r3, #-8]
 8007b68:	f103 0308 	add.w	r3, r3, #8
 8007b6c:	d1f4      	bne.n	8007b58 <arm_cfft_f32+0xcc>
 8007b6e:	e796      	b.n	8007a9e <arm_cfft_f32+0x12>
 8007b70:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8007b74:	d0a1      	beq.n	8007aba <arm_cfft_f32+0x2e>
 8007b76:	e7a6      	b.n	8007ac6 <arm_cfft_f32+0x3a>
 8007b78:	2d10      	cmp	r5, #16
 8007b7a:	d0b2      	beq.n	8007ae2 <arm_cfft_f32+0x56>
 8007b7c:	e7a3      	b.n	8007ac6 <arm_cfft_f32+0x3a>
 8007b7e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8007b82:	d890      	bhi.n	8007aa6 <arm_cfft_f32+0x1a>
 8007b84:	e7a6      	b.n	8007ad4 <arm_cfft_f32+0x48>
 8007b86:	bf00      	nop

08007b88 <arm_cos_f32>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	491f      	ldr	r1, [pc, #124]	@ (8007c08 <arm_cos_f32+0x80>)
 8007b8c:	f7f9 f942 	bl	8000e14 <__aeabi_fmul>
 8007b90:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8007b94:	f7f9 f836 	bl	8000c04 <__addsf3>
 8007b98:	4604      	mov	r4, r0
 8007b9a:	f7f9 fb17 	bl	80011cc <__aeabi_f2iz>
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f7f9 fad4 	bl	8001150 <__aeabi_fcmplt>
 8007ba8:	b100      	cbz	r0, 8007bac <arm_cos_f32+0x24>
 8007baa:	3d01      	subs	r5, #1
 8007bac:	4628      	mov	r0, r5
 8007bae:	f7f9 f8dd 	bl	8000d6c <__aeabi_i2f>
 8007bb2:	4601      	mov	r1, r0
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f7f9 f823 	bl	8000c00 <__aeabi_fsub>
 8007bba:	f04f 4188 	mov.w	r1, #1140850688	@ 0x44000000
 8007bbe:	f7f9 f929 	bl	8000e14 <__aeabi_fmul>
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	f7f9 fb28 	bl	8001218 <__aeabi_f2uiz>
 8007bc8:	f3c0 0408 	ubfx	r4, r0, #0, #9
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f7f9 f8c9 	bl	8000d64 <__aeabi_ui2f>
 8007bd2:	4601      	mov	r1, r0
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f7f9 f813 	bl	8000c00 <__aeabi_fsub>
 8007bda:	4e0c      	ldr	r6, [pc, #48]	@ (8007c0c <arm_cos_f32+0x84>)
 8007bdc:	4605      	mov	r5, r0
 8007bde:	4601      	mov	r1, r0
 8007be0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007be4:	f7f9 f80c 	bl	8000c00 <__aeabi_fsub>
 8007be8:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8007bec:	f7f9 f912 	bl	8000e14 <__aeabi_fmul>
 8007bf0:	3401      	adds	r4, #1
 8007bf2:	4607      	mov	r7, r0
 8007bf4:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f7f9 f90b 	bl	8000e14 <__aeabi_fmul>
 8007bfe:	4601      	mov	r1, r0
 8007c00:	4638      	mov	r0, r7
 8007c02:	f7f8 ffff 	bl	8000c04 <__addsf3>
 8007c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c08:	3e22f983 	.word	0x3e22f983
 8007c0c:	080171d4 	.word	0x080171d4

08007c10 <arm_radix8_butterfly_f32>:
 8007c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c14:	b0b9      	sub	sp, #228	@ 0xe4
 8007c16:	9314      	str	r3, [sp, #80]	@ 0x50
 8007c18:	4605      	mov	r5, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	9118      	str	r1, [sp, #96]	@ 0x60
 8007c1e:	902b      	str	r0, [sp, #172]	@ 0xac
 8007c20:	9237      	str	r2, [sp, #220]	@ 0xdc
 8007c22:	9117      	str	r1, [sp, #92]	@ 0x5c
 8007c24:	08db      	lsrs	r3, r3, #3
 8007c26:	00d9      	lsls	r1, r3, #3
 8007c28:	460e      	mov	r6, r1
 8007c2a:	9116      	str	r1, [sp, #88]	@ 0x58
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	461f      	mov	r7, r3
 8007c30:	4431      	add	r1, r6
 8007c32:	9112      	str	r1, [sp, #72]	@ 0x48
 8007c34:	005a      	lsls	r2, r3, #1
 8007c36:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007c38:	9215      	str	r2, [sp, #84]	@ 0x54
 8007c3a:	441a      	add	r2, r3
 8007c3c:	1986      	adds	r6, r0, r6
 8007c3e:	9323      	str	r3, [sp, #140]	@ 0x8c
 8007c40:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8007c44:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007c48:	960a      	str	r6, [sp, #40]	@ 0x28
 8007c4a:	1d16      	adds	r6, r2, #4
 8007c4c:	46b3      	mov	fp, r6
 8007c4e:	ebc7 7147 	rsb	r1, r7, r7, lsl #29
 8007c52:	eb03 0447 	add.w	r4, r3, r7, lsl #1
 8007c56:	00c9      	lsls	r1, r1, #3
 8007c58:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007c5c:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8007c5e:	1d1a      	adds	r2, r3, #4
 8007c60:	9103      	str	r1, [sp, #12]
 8007c62:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007c66:	9202      	str	r2, [sp, #8]
 8007c68:	9c03      	ldr	r4, [sp, #12]
 8007c6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c6c:	eba7 0087 	sub.w	r0, r7, r7, lsl #2
 8007c70:	4422      	add	r2, r4
 8007c72:	ebc7 7107 	rsb	r1, r7, r7, lsl #28
 8007c76:	9213      	str	r2, [sp, #76]	@ 0x4c
 8007c78:	00c2      	lsls	r2, r0, #3
 8007c7a:	9204      	str	r2, [sp, #16]
 8007c7c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c7e:	010a      	lsls	r2, r1, #4
 8007c80:	9507      	str	r5, [sp, #28]
 8007c82:	9206      	str	r2, [sp, #24]
 8007c84:	013a      	lsls	r2, r7, #4
 8007c86:	9205      	str	r2, [sp, #20]
 8007c88:	00db      	lsls	r3, r3, #3
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007c90:	9330      	str	r3, [sp, #192]	@ 0xc0
 8007c92:	9201      	str	r2, [sp, #4]
 8007c94:	9311      	str	r3, [sp, #68]	@ 0x44
 8007c96:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8007c98:	9f01      	ldr	r7, [sp, #4]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	9b04      	ldr	r3, [sp, #16]
 8007c9e:	f852 5037 	ldr.w	r5, [r2, r7, lsl #3]
 8007ca2:	f85a 6003 	ldr.w	r6, [sl, r3]
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	4631      	mov	r1, r6
 8007caa:	f7f8 ffab 	bl	8000c04 <__addsf3>
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f7f8 ffa4 	bl	8000c00 <__aeabi_fsub>
 8007cb8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007cba:	9b02      	ldr	r3, [sp, #8]
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	9701      	str	r7, [sp, #4]
 8007cc0:	f851 6037 	ldr.w	r6, [r1, r7, lsl #3]
 8007cc4:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8007cc8:	9009      	str	r0, [sp, #36]	@ 0x24
 8007cca:	4639      	mov	r1, r7
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f7f8 ff99 	bl	8000c04 <__addsf3>
 8007cd2:	4639      	mov	r1, r7
 8007cd4:	4605      	mov	r5, r0
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f7f8 ff92 	bl	8000c00 <__aeabi_fsub>
 8007cdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cde:	9f03      	ldr	r7, [sp, #12]
 8007ce0:	468e      	mov	lr, r1
 8007ce2:	9901      	ldr	r1, [sp, #4]
 8007ce4:	f85a 8007 	ldr.w	r8, [sl, r7]
 8007ce8:	f85e 6031 	ldr.w	r6, [lr, r1, lsl #3]
 8007cec:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007cee:	4641      	mov	r1, r8
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f7f8 ff87 	bl	8000c04 <__addsf3>
 8007cf6:	4641      	mov	r1, r8
 8007cf8:	4607      	mov	r7, r0
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f7f8 ff80 	bl	8000c00 <__aeabi_fsub>
 8007d00:	f85b 8c04 	ldr.w	r8, [fp, #-4]
 8007d04:	f8da 9000 	ldr.w	r9, [sl]
 8007d08:	900c      	str	r0, [sp, #48]	@ 0x30
 8007d0a:	4649      	mov	r1, r9
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	f7f8 ff79 	bl	8000c04 <__addsf3>
 8007d12:	4649      	mov	r1, r9
 8007d14:	4606      	mov	r6, r0
 8007d16:	4640      	mov	r0, r8
 8007d18:	f7f8 ff72 	bl	8000c00 <__aeabi_fsub>
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	900d      	str	r0, [sp, #52]	@ 0x34
 8007d20:	4620      	mov	r0, r4
 8007d22:	f7f8 ff6d 	bl	8000c00 <__aeabi_fsub>
 8007d26:	4639      	mov	r1, r7
 8007d28:	900e      	str	r0, [sp, #56]	@ 0x38
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f7f8 ff6a 	bl	8000c04 <__addsf3>
 8007d30:	4631      	mov	r1, r6
 8007d32:	4604      	mov	r4, r0
 8007d34:	4628      	mov	r0, r5
 8007d36:	f7f8 ff63 	bl	8000c00 <__aeabi_fsub>
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007d3e:	4628      	mov	r0, r5
 8007d40:	f7f8 ff60 	bl	8000c04 <__addsf3>
 8007d44:	4605      	mov	r5, r0
 8007d46:	4601      	mov	r1, r0
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f7f8 ff5b 	bl	8000c04 <__addsf3>
 8007d4e:	9b01      	ldr	r3, [sp, #4]
 8007d50:	9e2b      	ldr	r6, [sp, #172]	@ 0xac
 8007d52:	4629      	mov	r1, r5
 8007d54:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f7f8 ff51 	bl	8000c00 <__aeabi_fsub>
 8007d5e:	9d04      	ldr	r5, [sp, #16]
 8007d60:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8007d62:	f84a 0005 	str.w	r0, [sl, r5]
 8007d66:	f85b 4005 	ldr.w	r4, [fp, r5]
 8007d6a:	f85b 5031 	ldr.w	r5, [fp, r1, lsl #3]
 8007d6e:	4620      	mov	r0, r4
 8007d70:	4629      	mov	r1, r5
 8007d72:	f7f8 ff47 	bl	8000c04 <__addsf3>
 8007d76:	4629      	mov	r1, r5
 8007d78:	4607      	mov	r7, r0
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f7f8 ff40 	bl	8000c00 <__aeabi_fsub>
 8007d80:	9e05      	ldr	r6, [sp, #20]
 8007d82:	9c06      	ldr	r4, [sp, #24]
 8007d84:	f85b 5006 	ldr.w	r5, [fp, r6]
 8007d88:	f85b 4004 	ldr.w	r4, [fp, r4]
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007d90:	4620      	mov	r0, r4
 8007d92:	f7f8 ff37 	bl	8000c04 <__addsf3>
 8007d96:	4629      	mov	r1, r5
 8007d98:	4681      	mov	r9, r0
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f7f8 ff30 	bl	8000c00 <__aeabi_fsub>
 8007da0:	9a02      	ldr	r2, [sp, #8]
 8007da2:	9e03      	ldr	r6, [sp, #12]
 8007da4:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8007da6:	f85b 5006 	ldr.w	r5, [fp, r6]
 8007daa:	f852 6031 	ldr.w	r6, [r2, r1, lsl #3]
 8007dae:	4604      	mov	r4, r0
 8007db0:	4631      	mov	r1, r6
 8007db2:	4628      	mov	r0, r5
 8007db4:	f7f8 ff26 	bl	8000c04 <__addsf3>
 8007db8:	4631      	mov	r1, r6
 8007dba:	4680      	mov	r8, r0
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f7f8 ff1f 	bl	8000c00 <__aeabi_fsub>
 8007dc2:	9e06      	ldr	r6, [sp, #24]
 8007dc4:	9d02      	ldr	r5, [sp, #8]
 8007dc6:	9007      	str	r0, [sp, #28]
 8007dc8:	59ad      	ldr	r5, [r5, r6]
 8007dca:	f8da 6004 	ldr.w	r6, [sl, #4]
 8007dce:	4628      	mov	r0, r5
 8007dd0:	4631      	mov	r1, r6
 8007dd2:	f7f8 ff17 	bl	8000c04 <__addsf3>
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	9008      	str	r0, [sp, #32]
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f7f8 ff10 	bl	8000c00 <__aeabi_fsub>
 8007de0:	4641      	mov	r1, r8
 8007de2:	4606      	mov	r6, r0
 8007de4:	4638      	mov	r0, r7
 8007de6:	f7f8 ff0b 	bl	8000c00 <__aeabi_fsub>
 8007dea:	4641      	mov	r1, r8
 8007dec:	4605      	mov	r5, r0
 8007dee:	4638      	mov	r0, r7
 8007df0:	f7f8 ff08 	bl	8000c04 <__addsf3>
 8007df4:	9908      	ldr	r1, [sp, #32]
 8007df6:	4680      	mov	r8, r0
 8007df8:	4648      	mov	r0, r9
 8007dfa:	f7f8 ff01 	bl	8000c00 <__aeabi_fsub>
 8007dfe:	9908      	ldr	r1, [sp, #32]
 8007e00:	4607      	mov	r7, r0
 8007e02:	4648      	mov	r0, r9
 8007e04:	f7f8 fefe 	bl	8000c04 <__addsf3>
 8007e08:	4681      	mov	r9, r0
 8007e0a:	4601      	mov	r1, r0
 8007e0c:	4640      	mov	r0, r8
 8007e0e:	f7f8 fef9 	bl	8000c04 <__addsf3>
 8007e12:	9a04      	ldr	r2, [sp, #16]
 8007e14:	4649      	mov	r1, r9
 8007e16:	f84b 0002 	str.w	r0, [fp, r2]
 8007e1a:	4640      	mov	r0, r8
 8007e1c:	f7f8 fef0 	bl	8000c00 <__aeabi_fsub>
 8007e20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007e22:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 8007e26:	f84b 0032 	str.w	r0, [fp, r2, lsl #3]
 8007e2a:	4639      	mov	r1, r7
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	f7f8 fee9 	bl	8000c04 <__addsf3>
 8007e32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e34:	9a01      	ldr	r2, [sp, #4]
 8007e36:	469e      	mov	lr, r3
 8007e38:	4639      	mov	r1, r7
 8007e3a:	f84e 0032 	str.w	r0, [lr, r2, lsl #3]
 8007e3e:	4640      	mov	r0, r8
 8007e40:	f7f8 fede 	bl	8000c00 <__aeabi_fsub>
 8007e44:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 8007e48:	9f03      	ldr	r7, [sp, #12]
 8007e4a:	4641      	mov	r1, r8
 8007e4c:	f84a 0007 	str.w	r0, [sl, r7]
 8007e50:	4628      	mov	r0, r5
 8007e52:	f7f8 fed5 	bl	8000c00 <__aeabi_fsub>
 8007e56:	9f03      	ldr	r7, [sp, #12]
 8007e58:	4629      	mov	r1, r5
 8007e5a:	f84b 0007 	str.w	r0, [fp, r7]
 8007e5e:	4640      	mov	r0, r8
 8007e60:	f7f8 fed0 	bl	8000c04 <__addsf3>
 8007e64:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007e66:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8007e68:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 8007e6c:	9f02      	ldr	r7, [sp, #8]
 8007e6e:	4629      	mov	r1, r5
 8007e70:	f847 0032 	str.w	r0, [r7, r2, lsl #3]
 8007e74:	4640      	mov	r0, r8
 8007e76:	f7f8 fec3 	bl	8000c00 <__aeabi_fsub>
 8007e7a:	4986      	ldr	r1, [pc, #536]	@ (8008094 <arm_radix8_butterfly_f32+0x484>)
 8007e7c:	f7f8 ffca 	bl	8000e14 <__aeabi_fmul>
 8007e80:	4629      	mov	r1, r5
 8007e82:	4681      	mov	r9, r0
 8007e84:	4640      	mov	r0, r8
 8007e86:	f7f8 febd 	bl	8000c04 <__addsf3>
 8007e8a:	4982      	ldr	r1, [pc, #520]	@ (8008094 <arm_radix8_butterfly_f32+0x484>)
 8007e8c:	f7f8 ffc2 	bl	8000e14 <__aeabi_fmul>
 8007e90:	4631      	mov	r1, r6
 8007e92:	4605      	mov	r5, r0
 8007e94:	4620      	mov	r0, r4
 8007e96:	f7f8 feb3 	bl	8000c00 <__aeabi_fsub>
 8007e9a:	497e      	ldr	r1, [pc, #504]	@ (8008094 <arm_radix8_butterfly_f32+0x484>)
 8007e9c:	f7f8 ffba 	bl	8000e14 <__aeabi_fmul>
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4607      	mov	r7, r0
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f7f8 fead 	bl	8000c04 <__addsf3>
 8007eaa:	497a      	ldr	r1, [pc, #488]	@ (8008094 <arm_radix8_butterfly_f32+0x484>)
 8007eac:	f7f8 ffb2 	bl	8000e14 <__aeabi_fmul>
 8007eb0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	9008      	str	r0, [sp, #32]
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f7f8 fea2 	bl	8000c00 <__aeabi_fsub>
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	4680      	mov	r8, r0
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f7f8 fe9f 	bl	8000c04 <__addsf3>
 8007ec6:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8007eca:	4629      	mov	r1, r5
 8007ecc:	9009      	str	r0, [sp, #36]	@ 0x24
 8007ece:	4648      	mov	r0, r9
 8007ed0:	f7f8 fe96 	bl	8000c00 <__aeabi_fsub>
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	4648      	mov	r0, r9
 8007eda:	f7f8 fe93 	bl	8000c04 <__addsf3>
 8007ede:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	4639      	mov	r1, r7
 8007ee6:	4648      	mov	r0, r9
 8007ee8:	f7f8 fe8a 	bl	8000c00 <__aeabi_fsub>
 8007eec:	4639      	mov	r1, r7
 8007eee:	4605      	mov	r5, r0
 8007ef0:	4648      	mov	r0, r9
 8007ef2:	f7f8 fe87 	bl	8000c04 <__addsf3>
 8007ef6:	9908      	ldr	r1, [sp, #32]
 8007ef8:	4607      	mov	r7, r0
 8007efa:	9807      	ldr	r0, [sp, #28]
 8007efc:	f7f8 fe80 	bl	8000c00 <__aeabi_fsub>
 8007f00:	9908      	ldr	r1, [sp, #32]
 8007f02:	4681      	mov	r9, r0
 8007f04:	9807      	ldr	r0, [sp, #28]
 8007f06:	f7f8 fe7d 	bl	8000c04 <__addsf3>
 8007f0a:	4601      	mov	r1, r0
 8007f0c:	9007      	str	r0, [sp, #28]
 8007f0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f10:	f7f8 fe78 	bl	8000c04 <__addsf3>
 8007f14:	9a07      	ldr	r2, [sp, #28]
 8007f16:	9b01      	ldr	r3, [sp, #4]
 8007f18:	4611      	mov	r1, r2
 8007f1a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007f1c:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
 8007f20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f22:	f7f8 fe6d 	bl	8000c00 <__aeabi_fsub>
 8007f26:	4649      	mov	r1, r9
 8007f28:	f8ca 0000 	str.w	r0, [sl]
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	f7f8 fe69 	bl	8000c04 <__addsf3>
 8007f32:	9a02      	ldr	r2, [sp, #8]
 8007f34:	4649      	mov	r1, r9
 8007f36:	f842 0c04 	str.w	r0, [r2, #-4]
 8007f3a:	4640      	mov	r0, r8
 8007f3c:	f7f8 fe60 	bl	8000c00 <__aeabi_fsub>
 8007f40:	4631      	mov	r1, r6
 8007f42:	f84b 0c04 	str.w	r0, [fp, #-4]
 8007f46:	4638      	mov	r0, r7
 8007f48:	f7f8 fe5a 	bl	8000c00 <__aeabi_fsub>
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	9f06      	ldr	r7, [sp, #24]
 8007f50:	f84b 0007 	str.w	r0, [fp, r7]
 8007f54:	4630      	mov	r0, r6
 8007f56:	f7f8 fe55 	bl	8000c04 <__addsf3>
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	f8ca 0004 	str.w	r0, [sl, #4]
 8007f60:	4628      	mov	r0, r5
 8007f62:	f7f8 fe4d 	bl	8000c00 <__aeabi_fsub>
 8007f66:	4629      	mov	r1, r5
 8007f68:	9d05      	ldr	r5, [sp, #20]
 8007f6a:	f84b 0005 	str.w	r0, [fp, r5]
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f7f8 fe48 	bl	8000c04 <__addsf3>
 8007f74:	9b01      	ldr	r3, [sp, #4]
 8007f76:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8007f78:	9a02      	ldr	r2, [sp, #8]
 8007f7a:	440b      	add	r3, r1
 8007f7c:	461c      	mov	r4, r3
 8007f7e:	9301      	str	r3, [sp, #4]
 8007f80:	9f06      	ldr	r7, [sp, #24]
 8007f82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007f84:	51d0      	str	r0, [r2, r7]
 8007f86:	441a      	add	r2, r3
 8007f88:	9202      	str	r2, [sp, #8]
 8007f8a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007f8c:	449a      	add	sl, r3
 8007f8e:	4611      	mov	r1, r2
 8007f90:	42a1      	cmp	r1, r4
 8007f92:	449b      	add	fp, r3
 8007f94:	f63f ae7e 	bhi.w	8007c94 <arm_radix8_butterfly_f32+0x84>
 8007f98:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 8007f9a:	2c07      	cmp	r4, #7
 8007f9c:	f240 830b 	bls.w	80085b6 <arm_radix8_butterfly_f32+0x9a6>
 8007fa0:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8007fa2:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 8007fa6:	00cb      	lsls	r3, r1, #3
 8007fa8:	4618      	mov	r0, r3
 8007faa:	460a      	mov	r2, r1
 8007fac:	9336      	str	r3, [sp, #216]	@ 0xd8
 8007fae:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8007fb0:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 8007fb4:	4403      	add	r3, r0
 8007fb6:	187d      	adds	r5, r7, r1
 8007fb8:	1818      	adds	r0, r3, r0
 8007fba:	902e      	str	r0, [sp, #184]	@ 0xb8
 8007fbc:	9026      	str	r0, [sp, #152]	@ 0x98
 8007fbe:	1868      	adds	r0, r5, r1
 8007fc0:	1841      	adds	r1, r0, r1
 8007fc2:	eb01 0c02 	add.w	ip, r1, r2
 8007fc6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007fc8:	00c9      	lsls	r1, r1, #3
 8007fca:	4616      	mov	r6, r2
 8007fcc:	4426      	add	r6, r4
 8007fce:	4632      	mov	r2, r6
 8007fd0:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8007fd2:	912f      	str	r1, [sp, #188]	@ 0xbc
 8007fd4:	ebc4 0e06 	rsb	lr, r4, r6
 8007fd8:	ea4f 06cc 	mov.w	r6, ip, lsl #3
 8007fdc:	4634      	mov	r4, r6
 8007fde:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8007fe0:	9634      	str	r6, [sp, #208]	@ 0xd0
 8007fe2:	0116      	lsls	r6, r2, #4
 8007fe4:	9608      	str	r6, [sp, #32]
 8007fe6:	ea4f 06ce 	mov.w	r6, lr, lsl #3
 8007fea:	9607      	str	r6, [sp, #28]
 8007fec:	190e      	adds	r6, r1, r4
 8007fee:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
 8007ff0:	00c0      	lsls	r0, r0, #3
 8007ff2:	00ed      	lsls	r5, r5, #3
 8007ff4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007ff6:	f8dd 90ac 	ldr.w	r9, [sp, #172]	@ 0xac
 8007ffa:	9035      	str	r0, [sp, #212]	@ 0xd4
 8007ffc:	9624      	str	r6, [sp, #144]	@ 0x90
 8007ffe:	1808      	adds	r0, r1, r0
 8008000:	190e      	adds	r6, r1, r4
 8008002:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 8008004:	9028      	str	r0, [sp, #160]	@ 0xa0
 8008006:	1948      	adds	r0, r1, r5
 8008008:	962a      	str	r6, [sp, #168]	@ 0xa8
 800800a:	9029      	str	r0, [sp, #164]	@ 0xa4
 800800c:	4646      	mov	r6, r8
 800800e:	0110      	lsls	r0, r2, #4
 8008010:	0162      	lsls	r2, r4, #5
 8008012:	464c      	mov	r4, r9
 8008014:	00ff      	lsls	r7, r7, #3
 8008016:	4439      	add	r1, r7
 8008018:	9204      	str	r2, [sp, #16]
 800801a:	2201      	movs	r2, #1
 800801c:	9733      	str	r7, [sp, #204]	@ 0xcc
 800801e:	9532      	str	r5, [sp, #200]	@ 0xc8
 8008020:	9031      	str	r0, [sp, #196]	@ 0xc4
 8008022:	9127      	str	r1, [sp, #156]	@ 0x9c
 8008024:	9225      	str	r2, [sp, #148]	@ 0x94
 8008026:	f104 0208 	add.w	r2, r4, #8
 800802a:	922d      	str	r2, [sp, #180]	@ 0xb4
 800802c:	9201      	str	r2, [sp, #4]
 800802e:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8008030:	f106 0108 	add.w	r1, r6, #8
 8008034:	920a      	str	r2, [sp, #40]	@ 0x28
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800803c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800803e:	912c      	str	r1, [sp, #176]	@ 0xb0
 8008040:	9103      	str	r1, [sp, #12]
 8008042:	930e      	str	r3, [sp, #56]	@ 0x38
 8008044:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8008046:	6813      	ldr	r3, [r2, #0]
 8008048:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 800804a:	9319      	str	r3, [sp, #100]	@ 0x64
 800804c:	680b      	ldr	r3, [r1, #0]
 800804e:	9d28      	ldr	r5, [sp, #160]	@ 0xa0
 8008050:	931a      	str	r3, [sp, #104]	@ 0x68
 8008052:	6803      	ldr	r3, [r0, #0]
 8008054:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 8008056:	930c      	str	r3, [sp, #48]	@ 0x30
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	6852      	ldr	r2, [r2, #4]
 800805c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	921d      	str	r2, [sp, #116]	@ 0x74
 8008062:	931c      	str	r3, [sp, #112]	@ 0x70
 8008064:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008066:	684a      	ldr	r2, [r1, #4]
 8008068:	f8d3 e000 	ldr.w	lr, [r3]
 800806c:	921e      	str	r2, [sp, #120]	@ 0x78
 800806e:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8008072:	6842      	ldr	r2, [r0, #4]
 8008074:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008076:	921f      	str	r2, [sp, #124]	@ 0x7c
 8008078:	686a      	ldr	r2, [r5, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	9220      	str	r2, [sp, #128]	@ 0x80
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	9322      	str	r3, [sp, #136]	@ 0x88
 8008082:	f104 030c 	add.w	r3, r4, #12
 8008086:	9221      	str	r2, [sp, #132]	@ 0x84
 8008088:	9302      	str	r3, [sp, #8]
 800808a:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 800808c:	f106 030c 	add.w	r3, r6, #12
 8008090:	9306      	str	r3, [sp, #24]
 8008092:	e001      	b.n	8008098 <arm_radix8_butterfly_f32+0x488>
 8008094:	3f3504f3 	.word	0x3f3504f3
 8008098:	9b02      	ldr	r3, [sp, #8]
 800809a:	9f04      	ldr	r7, [sp, #16]
 800809c:	9216      	str	r2, [sp, #88]	@ 0x58
 800809e:	9a01      	ldr	r2, [sp, #4]
 80080a0:	f853 5c04 	ldr.w	r5, [r3, #-4]
 80080a4:	59d6      	ldr	r6, [r2, r7]
 80080a6:	4628      	mov	r0, r5
 80080a8:	4631      	mov	r1, r6
 80080aa:	f7f8 fdab 	bl	8000c04 <__addsf3>
 80080ae:	4631      	mov	r1, r6
 80080b0:	4604      	mov	r4, r0
 80080b2:	4628      	mov	r0, r5
 80080b4:	f7f8 fda4 	bl	8000c00 <__aeabi_fsub>
 80080b8:	9d06      	ldr	r5, [sp, #24]
 80080ba:	9903      	ldr	r1, [sp, #12]
 80080bc:	f855 6c04 	ldr.w	r6, [r5, #-4]
 80080c0:	9704      	str	r7, [sp, #16]
 80080c2:	59cf      	ldr	r7, [r1, r7]
 80080c4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80080c6:	4639      	mov	r1, r7
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7f8 fd9b 	bl	8000c04 <__addsf3>
 80080ce:	4639      	mov	r1, r7
 80080d0:	4605      	mov	r5, r0
 80080d2:	4630      	mov	r0, r6
 80080d4:	f7f8 fd94 	bl	8000c00 <__aeabi_fsub>
 80080d8:	9a01      	ldr	r2, [sp, #4]
 80080da:	9e05      	ldr	r6, [sp, #20]
 80080dc:	9010      	str	r0, [sp, #64]	@ 0x40
 80080de:	5997      	ldr	r7, [r2, r6]
 80080e0:	4616      	mov	r6, r2
 80080e2:	9a08      	ldr	r2, [sp, #32]
 80080e4:	4638      	mov	r0, r7
 80080e6:	f856 8002 	ldr.w	r8, [r6, r2]
 80080ea:	4641      	mov	r1, r8
 80080ec:	f7f8 fd8a 	bl	8000c04 <__addsf3>
 80080f0:	4641      	mov	r1, r8
 80080f2:	4606      	mov	r6, r0
 80080f4:	4638      	mov	r0, r7
 80080f6:	f7f8 fd83 	bl	8000c00 <__aeabi_fsub>
 80080fa:	9903      	ldr	r1, [sp, #12]
 80080fc:	9a01      	ldr	r2, [sp, #4]
 80080fe:	468e      	mov	lr, r1
 8008100:	9b07      	ldr	r3, [sp, #28]
 8008102:	9905      	ldr	r1, [sp, #20]
 8008104:	f852 9003 	ldr.w	r9, [r2, r3]
 8008108:	f85e 8001 	ldr.w	r8, [lr, r1]
 800810c:	9011      	str	r0, [sp, #68]	@ 0x44
 800810e:	4649      	mov	r1, r9
 8008110:	4640      	mov	r0, r8
 8008112:	f7f8 fd77 	bl	8000c04 <__addsf3>
 8008116:	4649      	mov	r1, r9
 8008118:	4607      	mov	r7, r0
 800811a:	4640      	mov	r0, r8
 800811c:	f7f8 fd70 	bl	8000c00 <__aeabi_fsub>
 8008120:	4631      	mov	r1, r6
 8008122:	9012      	str	r0, [sp, #72]	@ 0x48
 8008124:	4620      	mov	r0, r4
 8008126:	f7f8 fd6b 	bl	8000c00 <__aeabi_fsub>
 800812a:	4631      	mov	r1, r6
 800812c:	4682      	mov	sl, r0
 800812e:	4620      	mov	r0, r4
 8008130:	f7f8 fd68 	bl	8000c04 <__addsf3>
 8008134:	4639      	mov	r1, r7
 8008136:	4604      	mov	r4, r0
 8008138:	4628      	mov	r0, r5
 800813a:	f7f8 fd61 	bl	8000c00 <__aeabi_fsub>
 800813e:	4639      	mov	r1, r7
 8008140:	4606      	mov	r6, r0
 8008142:	4628      	mov	r0, r5
 8008144:	f7f8 fd5e 	bl	8000c04 <__addsf3>
 8008148:	4605      	mov	r5, r0
 800814a:	4601      	mov	r1, r0
 800814c:	4620      	mov	r0, r4
 800814e:	f7f8 fd59 	bl	8000c04 <__addsf3>
 8008152:	9f02      	ldr	r7, [sp, #8]
 8008154:	4629      	mov	r1, r5
 8008156:	f847 0c04 	str.w	r0, [r7, #-4]
 800815a:	4620      	mov	r0, r4
 800815c:	f7f8 fd50 	bl	8000c00 <__aeabi_fsub>
 8008160:	4639      	mov	r1, r7
 8008162:	9b01      	ldr	r3, [sp, #4]
 8008164:	9702      	str	r7, [sp, #8]
 8008166:	9f04      	ldr	r7, [sp, #16]
 8008168:	685c      	ldr	r4, [r3, #4]
 800816a:	59cf      	ldr	r7, [r1, r7]
 800816c:	4605      	mov	r5, r0
 800816e:	4639      	mov	r1, r7
 8008170:	4620      	mov	r0, r4
 8008172:	f7f8 fd47 	bl	8000c04 <__addsf3>
 8008176:	4639      	mov	r1, r7
 8008178:	4680      	mov	r8, r0
 800817a:	4620      	mov	r0, r4
 800817c:	f7f8 fd40 	bl	8000c00 <__aeabi_fsub>
 8008180:	9c03      	ldr	r4, [sp, #12]
 8008182:	9013      	str	r0, [sp, #76]	@ 0x4c
 8008184:	6867      	ldr	r7, [r4, #4]
 8008186:	9c06      	ldr	r4, [sp, #24]
 8008188:	4638      	mov	r0, r7
 800818a:	46a6      	mov	lr, r4
 800818c:	9c04      	ldr	r4, [sp, #16]
 800818e:	f85e 9004 	ldr.w	r9, [lr, r4]
 8008192:	4649      	mov	r1, r9
 8008194:	f7f8 fd36 	bl	8000c04 <__addsf3>
 8008198:	4649      	mov	r1, r9
 800819a:	4604      	mov	r4, r0
 800819c:	4638      	mov	r0, r7
 800819e:	f7f8 fd2f 	bl	8000c00 <__aeabi_fsub>
 80081a2:	9b08      	ldr	r3, [sp, #32]
 80081a4:	9902      	ldr	r1, [sp, #8]
 80081a6:	9f05      	ldr	r7, [sp, #20]
 80081a8:	f851 9003 	ldr.w	r9, [r1, r3]
 80081ac:	59cf      	ldr	r7, [r1, r7]
 80081ae:	9014      	str	r0, [sp, #80]	@ 0x50
 80081b0:	4649      	mov	r1, r9
 80081b2:	4638      	mov	r0, r7
 80081b4:	f7f8 fd26 	bl	8000c04 <__addsf3>
 80081b8:	4649      	mov	r1, r9
 80081ba:	4683      	mov	fp, r0
 80081bc:	4638      	mov	r0, r7
 80081be:	f7f8 fd1f 	bl	8000c00 <__aeabi_fsub>
 80081c2:	9a07      	ldr	r2, [sp, #28]
 80081c4:	9b06      	ldr	r3, [sp, #24]
 80081c6:	9902      	ldr	r1, [sp, #8]
 80081c8:	9f05      	ldr	r7, [sp, #20]
 80081ca:	9009      	str	r0, [sp, #36]	@ 0x24
 80081cc:	59df      	ldr	r7, [r3, r7]
 80081ce:	588b      	ldr	r3, [r1, r2]
 80081d0:	4638      	mov	r0, r7
 80081d2:	4619      	mov	r1, r3
 80081d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80081d6:	f7f8 fd15 	bl	8000c04 <__addsf3>
 80081da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80081dc:	4681      	mov	r9, r0
 80081de:	4619      	mov	r1, r3
 80081e0:	4638      	mov	r0, r7
 80081e2:	f7f8 fd0d 	bl	8000c00 <__aeabi_fsub>
 80081e6:	4659      	mov	r1, fp
 80081e8:	9015      	str	r0, [sp, #84]	@ 0x54
 80081ea:	4640      	mov	r0, r8
 80081ec:	f7f8 fd08 	bl	8000c00 <__aeabi_fsub>
 80081f0:	4659      	mov	r1, fp
 80081f2:	4607      	mov	r7, r0
 80081f4:	4640      	mov	r0, r8
 80081f6:	f7f8 fd05 	bl	8000c04 <__addsf3>
 80081fa:	4649      	mov	r1, r9
 80081fc:	4680      	mov	r8, r0
 80081fe:	4620      	mov	r0, r4
 8008200:	f7f8 fcfe 	bl	8000c00 <__aeabi_fsub>
 8008204:	4649      	mov	r1, r9
 8008206:	4683      	mov	fp, r0
 8008208:	4620      	mov	r0, r4
 800820a:	f7f8 fcfb 	bl	8000c04 <__addsf3>
 800820e:	4659      	mov	r1, fp
 8008210:	4681      	mov	r9, r0
 8008212:	4650      	mov	r0, sl
 8008214:	f7f8 fcf6 	bl	8000c04 <__addsf3>
 8008218:	4659      	mov	r1, fp
 800821a:	4604      	mov	r4, r0
 800821c:	4650      	mov	r0, sl
 800821e:	f7f8 fcef 	bl	8000c00 <__aeabi_fsub>
 8008222:	4649      	mov	r1, r9
 8008224:	4682      	mov	sl, r0
 8008226:	4640      	mov	r0, r8
 8008228:	f7f8 fcec 	bl	8000c04 <__addsf3>
 800822c:	9a01      	ldr	r2, [sp, #4]
 800822e:	4649      	mov	r1, r9
 8008230:	6050      	str	r0, [r2, #4]
 8008232:	4640      	mov	r0, r8
 8008234:	f7f8 fce4 	bl	8000c00 <__aeabi_fsub>
 8008238:	4631      	mov	r1, r6
 800823a:	4681      	mov	r9, r0
 800823c:	4638      	mov	r0, r7
 800823e:	f7f8 fcdf 	bl	8000c00 <__aeabi_fsub>
 8008242:	4639      	mov	r1, r7
 8008244:	4680      	mov	r8, r0
 8008246:	4630      	mov	r0, r6
 8008248:	f7f8 fcdc 	bl	8000c04 <__addsf3>
 800824c:	4629      	mov	r1, r5
 800824e:	4606      	mov	r6, r0
 8008250:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008252:	f7f8 fddf 	bl	8000e14 <__aeabi_fmul>
 8008256:	f8dd b07c 	ldr.w	fp, [sp, #124]	@ 0x7c
 800825a:	4607      	mov	r7, r0
 800825c:	4649      	mov	r1, r9
 800825e:	4658      	mov	r0, fp
 8008260:	f7f8 fdd8 	bl	8000e14 <__aeabi_fmul>
 8008264:	4601      	mov	r1, r0
 8008266:	4638      	mov	r0, r7
 8008268:	f7f8 fccc 	bl	8000c04 <__addsf3>
 800826c:	9b01      	ldr	r3, [sp, #4]
 800826e:	9a04      	ldr	r2, [sp, #16]
 8008270:	4649      	mov	r1, r9
 8008272:	5098      	str	r0, [r3, r2]
 8008274:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008276:	f7f8 fdcd 	bl	8000e14 <__aeabi_fmul>
 800827a:	4629      	mov	r1, r5
 800827c:	4607      	mov	r7, r0
 800827e:	4658      	mov	r0, fp
 8008280:	f7f8 fdc8 	bl	8000e14 <__aeabi_fmul>
 8008284:	4601      	mov	r1, r0
 8008286:	4638      	mov	r0, r7
 8008288:	f7f8 fcba 	bl	8000c00 <__aeabi_fsub>
 800828c:	9f02      	ldr	r7, [sp, #8]
 800828e:	f8dd b064 	ldr.w	fp, [sp, #100]	@ 0x64
 8008292:	9d04      	ldr	r5, [sp, #16]
 8008294:	4621      	mov	r1, r4
 8008296:	5178      	str	r0, [r7, r5]
 8008298:	4658      	mov	r0, fp
 800829a:	f7f8 fdbb 	bl	8000e14 <__aeabi_fmul>
 800829e:	f8dd 9074 	ldr.w	r9, [sp, #116]	@ 0x74
 80082a2:	4605      	mov	r5, r0
 80082a4:	4641      	mov	r1, r8
 80082a6:	4648      	mov	r0, r9
 80082a8:	f7f8 fdb4 	bl	8000e14 <__aeabi_fmul>
 80082ac:	4601      	mov	r1, r0
 80082ae:	4628      	mov	r0, r5
 80082b0:	f7f8 fca8 	bl	8000c04 <__addsf3>
 80082b4:	9a05      	ldr	r2, [sp, #20]
 80082b6:	9d01      	ldr	r5, [sp, #4]
 80082b8:	4641      	mov	r1, r8
 80082ba:	50a8      	str	r0, [r5, r2]
 80082bc:	4658      	mov	r0, fp
 80082be:	f7f8 fda9 	bl	8000e14 <__aeabi_fmul>
 80082c2:	4621      	mov	r1, r4
 80082c4:	4605      	mov	r5, r0
 80082c6:	4648      	mov	r0, r9
 80082c8:	f7f8 fda4 	bl	8000e14 <__aeabi_fmul>
 80082cc:	4601      	mov	r1, r0
 80082ce:	4628      	mov	r0, r5
 80082d0:	f7f8 fc96 	bl	8000c00 <__aeabi_fsub>
 80082d4:	9c05      	ldr	r4, [sp, #20]
 80082d6:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 80082da:	5138      	str	r0, [r7, r4]
 80082dc:	4651      	mov	r1, sl
 80082de:	4658      	mov	r0, fp
 80082e0:	f7f8 fd98 	bl	8000e14 <__aeabi_fmul>
 80082e4:	f8dd 9084 	ldr.w	r9, [sp, #132]	@ 0x84
 80082e8:	4604      	mov	r4, r0
 80082ea:	4631      	mov	r1, r6
 80082ec:	4648      	mov	r0, r9
 80082ee:	f7f8 fd91 	bl	8000e14 <__aeabi_fmul>
 80082f2:	4601      	mov	r1, r0
 80082f4:	4620      	mov	r0, r4
 80082f6:	f7f8 fc85 	bl	8000c04 <__addsf3>
 80082fa:	463d      	mov	r5, r7
 80082fc:	9a01      	ldr	r2, [sp, #4]
 80082fe:	9f08      	ldr	r7, [sp, #32]
 8008300:	4631      	mov	r1, r6
 8008302:	51d0      	str	r0, [r2, r7]
 8008304:	4658      	mov	r0, fp
 8008306:	f7f8 fd85 	bl	8000e14 <__aeabi_fmul>
 800830a:	4651      	mov	r1, sl
 800830c:	4604      	mov	r4, r0
 800830e:	4648      	mov	r0, r9
 8008310:	f7f8 fd80 	bl	8000e14 <__aeabi_fmul>
 8008314:	4601      	mov	r1, r0
 8008316:	4620      	mov	r0, r4
 8008318:	f7f8 fc72 	bl	8000c00 <__aeabi_fsub>
 800831c:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 8008320:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 8008324:	51e8      	str	r0, [r5, r7]
 8008326:	4651      	mov	r1, sl
 8008328:	4648      	mov	r0, r9
 800832a:	9502      	str	r5, [sp, #8]
 800832c:	f7f8 fc68 	bl	8000c00 <__aeabi_fsub>
 8008330:	49a2      	ldr	r1, [pc, #648]	@ (80085bc <arm_radix8_butterfly_f32+0x9ac>)
 8008332:	f7f8 fd6f 	bl	8000e14 <__aeabi_fmul>
 8008336:	4651      	mov	r1, sl
 8008338:	4604      	mov	r4, r0
 800833a:	4648      	mov	r0, r9
 800833c:	f7f8 fc62 	bl	8000c04 <__addsf3>
 8008340:	499e      	ldr	r1, [pc, #632]	@ (80085bc <arm_radix8_butterfly_f32+0x9ac>)
 8008342:	f7f8 fd67 	bl	8000e14 <__aeabi_fmul>
 8008346:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 800834a:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800834e:	4607      	mov	r7, r0
 8008350:	4641      	mov	r1, r8
 8008352:	4650      	mov	r0, sl
 8008354:	f7f8 fc54 	bl	8000c00 <__aeabi_fsub>
 8008358:	4998      	ldr	r1, [pc, #608]	@ (80085bc <arm_radix8_butterfly_f32+0x9ac>)
 800835a:	f7f8 fd5b 	bl	8000e14 <__aeabi_fmul>
 800835e:	4641      	mov	r1, r8
 8008360:	4681      	mov	r9, r0
 8008362:	4650      	mov	r0, sl
 8008364:	f7f8 fc4e 	bl	8000c04 <__addsf3>
 8008368:	4994      	ldr	r1, [pc, #592]	@ (80085bc <arm_radix8_butterfly_f32+0x9ac>)
 800836a:	f7f8 fd53 	bl	8000e14 <__aeabi_fmul>
 800836e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8008370:	4605      	mov	r5, r0
 8008372:	4621      	mov	r1, r4
 8008374:	4630      	mov	r0, r6
 8008376:	f7f8 fc43 	bl	8000c00 <__aeabi_fsub>
 800837a:	4621      	mov	r1, r4
 800837c:	4682      	mov	sl, r0
 800837e:	4630      	mov	r0, r6
 8008380:	f7f8 fc40 	bl	8000c04 <__addsf3>
 8008384:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8008388:	4604      	mov	r4, r0
 800838a:	4639      	mov	r1, r7
 800838c:	4640      	mov	r0, r8
 800838e:	f7f8 fc37 	bl	8000c00 <__aeabi_fsub>
 8008392:	4639      	mov	r1, r7
 8008394:	4606      	mov	r6, r0
 8008396:	4640      	mov	r0, r8
 8008398:	f7f8 fc34 	bl	8000c04 <__addsf3>
 800839c:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
 80083a0:	4680      	mov	r8, r0
 80083a2:	4649      	mov	r1, r9
 80083a4:	4658      	mov	r0, fp
 80083a6:	f7f8 fc2b 	bl	8000c00 <__aeabi_fsub>
 80083aa:	4649      	mov	r1, r9
 80083ac:	4607      	mov	r7, r0
 80083ae:	4658      	mov	r0, fp
 80083b0:	f7f8 fc28 	bl	8000c04 <__addsf3>
 80083b4:	4629      	mov	r1, r5
 80083b6:	4681      	mov	r9, r0
 80083b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083ba:	f7f8 fc21 	bl	8000c00 <__aeabi_fsub>
 80083be:	4629      	mov	r1, r5
 80083c0:	4683      	mov	fp, r0
 80083c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083c4:	f7f8 fc1e 	bl	8000c04 <__addsf3>
 80083c8:	4601      	mov	r1, r0
 80083ca:	9009      	str	r0, [sp, #36]	@ 0x24
 80083cc:	4620      	mov	r0, r4
 80083ce:	f7f8 fc19 	bl	8000c04 <__addsf3>
 80083d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d4:	4605      	mov	r5, r0
 80083d6:	4619      	mov	r1, r3
 80083d8:	4620      	mov	r0, r4
 80083da:	f7f8 fc11 	bl	8000c00 <__aeabi_fsub>
 80083de:	4659      	mov	r1, fp
 80083e0:	4604      	mov	r4, r0
 80083e2:	4650      	mov	r0, sl
 80083e4:	f7f8 fc0e 	bl	8000c04 <__addsf3>
 80083e8:	4659      	mov	r1, fp
 80083ea:	9009      	str	r0, [sp, #36]	@ 0x24
 80083ec:	4650      	mov	r0, sl
 80083ee:	f7f8 fc07 	bl	8000c00 <__aeabi_fsub>
 80083f2:	4641      	mov	r1, r8
 80083f4:	4683      	mov	fp, r0
 80083f6:	4648      	mov	r0, r9
 80083f8:	f7f8 fc02 	bl	8000c00 <__aeabi_fsub>
 80083fc:	4649      	mov	r1, r9
 80083fe:	4682      	mov	sl, r0
 8008400:	4640      	mov	r0, r8
 8008402:	f7f8 fbff 	bl	8000c04 <__addsf3>
 8008406:	4631      	mov	r1, r6
 8008408:	4681      	mov	r9, r0
 800840a:	4638      	mov	r0, r7
 800840c:	f7f8 fbf8 	bl	8000c00 <__aeabi_fsub>
 8008410:	4639      	mov	r1, r7
 8008412:	4680      	mov	r8, r0
 8008414:	4630      	mov	r0, r6
 8008416:	f7f8 fbf5 	bl	8000c04 <__addsf3>
 800841a:	4629      	mov	r1, r5
 800841c:	4606      	mov	r6, r0
 800841e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008420:	f7f8 fcf8 	bl	8000e14 <__aeabi_fmul>
 8008424:	4651      	mov	r1, sl
 8008426:	4607      	mov	r7, r0
 8008428:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800842a:	f7f8 fcf3 	bl	8000e14 <__aeabi_fmul>
 800842e:	4601      	mov	r1, r0
 8008430:	4638      	mov	r0, r7
 8008432:	f7f8 fbe7 	bl	8000c04 <__addsf3>
 8008436:	9b06      	ldr	r3, [sp, #24]
 8008438:	4651      	mov	r1, sl
 800843a:	f843 0c04 	str.w	r0, [r3, #-4]
 800843e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008440:	f7f8 fce8 	bl	8000e14 <__aeabi_fmul>
 8008444:	4629      	mov	r1, r5
 8008446:	4607      	mov	r7, r0
 8008448:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800844a:	f7f8 fce3 	bl	8000e14 <__aeabi_fmul>
 800844e:	4601      	mov	r1, r0
 8008450:	4638      	mov	r0, r7
 8008452:	f7f8 fbd5 	bl	8000c00 <__aeabi_fsub>
 8008456:	9f03      	ldr	r7, [sp, #12]
 8008458:	4621      	mov	r1, r4
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800845e:	f7f8 fcd9 	bl	8000e14 <__aeabi_fmul>
 8008462:	f8dd a088 	ldr.w	sl, [sp, #136]	@ 0x88
 8008466:	4605      	mov	r5, r0
 8008468:	4649      	mov	r1, r9
 800846a:	4650      	mov	r0, sl
 800846c:	f7f8 fcd2 	bl	8000e14 <__aeabi_fmul>
 8008470:	4601      	mov	r1, r0
 8008472:	4628      	mov	r0, r5
 8008474:	f7f8 fbc6 	bl	8000c04 <__addsf3>
 8008478:	9a07      	ldr	r2, [sp, #28]
 800847a:	9f01      	ldr	r7, [sp, #4]
 800847c:	4649      	mov	r1, r9
 800847e:	50b8      	str	r0, [r7, r2]
 8008480:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008482:	f7f8 fcc7 	bl	8000e14 <__aeabi_fmul>
 8008486:	4621      	mov	r1, r4
 8008488:	4605      	mov	r5, r0
 800848a:	4650      	mov	r0, sl
 800848c:	f7f8 fcc2 	bl	8000e14 <__aeabi_fmul>
 8008490:	4601      	mov	r1, r0
 8008492:	4628      	mov	r0, r5
 8008494:	f7f8 fbb4 	bl	8000c00 <__aeabi_fsub>
 8008498:	9a07      	ldr	r2, [sp, #28]
 800849a:	9d02      	ldr	r5, [sp, #8]
 800849c:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
 80084a0:	50a8      	str	r0, [r5, r2]
 80084a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084a4:	4650      	mov	r0, sl
 80084a6:	f7f8 fcb5 	bl	8000e14 <__aeabi_fmul>
 80084aa:	f8dd 9080 	ldr.w	r9, [sp, #128]	@ 0x80
 80084ae:	4604      	mov	r4, r0
 80084b0:	4641      	mov	r1, r8
 80084b2:	4648      	mov	r0, r9
 80084b4:	f7f8 fcae 	bl	8000e14 <__aeabi_fmul>
 80084b8:	4601      	mov	r1, r0
 80084ba:	4620      	mov	r0, r4
 80084bc:	f7f8 fba2 	bl	8000c04 <__addsf3>
 80084c0:	9a03      	ldr	r2, [sp, #12]
 80084c2:	9b04      	ldr	r3, [sp, #16]
 80084c4:	4641      	mov	r1, r8
 80084c6:	50d0      	str	r0, [r2, r3]
 80084c8:	4650      	mov	r0, sl
 80084ca:	f7f8 fca3 	bl	8000e14 <__aeabi_fmul>
 80084ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084d0:	4604      	mov	r4, r0
 80084d2:	4648      	mov	r0, r9
 80084d4:	f7f8 fc9e 	bl	8000e14 <__aeabi_fmul>
 80084d8:	4601      	mov	r1, r0
 80084da:	4620      	mov	r0, r4
 80084dc:	f7f8 fb90 	bl	8000c00 <__aeabi_fsub>
 80084e0:	9a06      	ldr	r2, [sp, #24]
 80084e2:	9b04      	ldr	r3, [sp, #16]
 80084e4:	f8dd 9068 	ldr.w	r9, [sp, #104]	@ 0x68
 80084e8:	50d0      	str	r0, [r2, r3]
 80084ea:	4659      	mov	r1, fp
 80084ec:	4648      	mov	r0, r9
 80084ee:	f7f8 fc91 	bl	8000e14 <__aeabi_fmul>
 80084f2:	f8dd 8078 	ldr.w	r8, [sp, #120]	@ 0x78
 80084f6:	4604      	mov	r4, r0
 80084f8:	4631      	mov	r1, r6
 80084fa:	4640      	mov	r0, r8
 80084fc:	f7f8 fc8a 	bl	8000e14 <__aeabi_fmul>
 8008500:	4601      	mov	r1, r0
 8008502:	4620      	mov	r0, r4
 8008504:	f7f8 fb7e 	bl	8000c04 <__addsf3>
 8008508:	9b03      	ldr	r3, [sp, #12]
 800850a:	4631      	mov	r1, r6
 800850c:	469e      	mov	lr, r3
 800850e:	9e05      	ldr	r6, [sp, #20]
 8008510:	f84e 0006 	str.w	r0, [lr, r6]
 8008514:	4648      	mov	r0, r9
 8008516:	f7f8 fc7d 	bl	8000e14 <__aeabi_fmul>
 800851a:	4659      	mov	r1, fp
 800851c:	4604      	mov	r4, r0
 800851e:	4640      	mov	r0, r8
 8008520:	f7f8 fc78 	bl	8000e14 <__aeabi_fmul>
 8008524:	4601      	mov	r1, r0
 8008526:	4620      	mov	r0, r4
 8008528:	f7f8 fb6a 	bl	8000c00 <__aeabi_fsub>
 800852c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800852e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8008530:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008532:	4421      	add	r1, r4
 8008534:	460c      	mov	r4, r1
 8008536:	9b03      	ldr	r3, [sp, #12]
 8008538:	910a      	str	r1, [sp, #40]	@ 0x28
 800853a:	18b9      	adds	r1, r7, r2
 800853c:	9101      	str	r1, [sp, #4]
 800853e:	18a9      	adds	r1, r5, r2
 8008540:	9d06      	ldr	r5, [sp, #24]
 8008542:	4413      	add	r3, r2
 8008544:	9303      	str	r3, [sp, #12]
 8008546:	18ab      	adds	r3, r5, r2
 8008548:	9306      	str	r3, [sp, #24]
 800854a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800854c:	9102      	str	r1, [sp, #8]
 800854e:	42a3      	cmp	r3, r4
 8008550:	51a8      	str	r0, [r5, r6]
 8008552:	f63f ada1 	bhi.w	8008098 <arm_radix8_butterfly_f32+0x488>
 8008556:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8008558:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 800855a:	3301      	adds	r3, #1
 800855c:	461a      	mov	r2, r3
 800855e:	9325      	str	r3, [sp, #148]	@ 0x94
 8008560:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008562:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8008564:	440b      	add	r3, r1
 8008566:	9326      	str	r3, [sp, #152]	@ 0x98
 8008568:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 800856a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800856c:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 800856e:	440b      	add	r3, r1
 8008570:	9327      	str	r3, [sp, #156]	@ 0x9c
 8008572:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 8008574:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008576:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 8008578:	440b      	add	r3, r1
 800857a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800857c:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 800857e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8008580:	440b      	add	r3, r1
 8008582:	9328      	str	r3, [sp, #160]	@ 0xa0
 8008584:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8008586:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8008588:	440b      	add	r3, r1
 800858a:	932a      	str	r3, [sp, #168]	@ 0xa8
 800858c:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800858e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008590:	440b      	add	r3, r1
 8008592:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8008594:	9324      	str	r3, [sp, #144]	@ 0x90
 8008596:	4291      	cmp	r1, r2
 8008598:	4603      	mov	r3, r0
 800859a:	d004      	beq.n	80085a6 <arm_radix8_butterfly_f32+0x996>
 800859c:	4602      	mov	r2, r0
 800859e:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 80085a0:	440a      	add	r2, r1
 80085a2:	922e      	str	r2, [sp, #184]	@ 0xb8
 80085a4:	e53f      	b.n	8008026 <arm_radix8_butterfly_f32+0x416>
 80085a6:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	@ 0xd8
 80085aa:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 80085ac:	9314      	str	r3, [sp, #80]	@ 0x50
 80085ae:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085b0:	9317      	str	r3, [sp, #92]	@ 0x5c
 80085b2:	f7ff bb37 	b.w	8007c24 <arm_radix8_butterfly_f32+0x14>
 80085b6:	b039      	add	sp, #228	@ 0xe4
 80085b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085bc:	3f3504f3 	.word	0x3f3504f3

080085c0 <siprintf>:
 80085c0:	b40e      	push	{r1, r2, r3}
 80085c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80085c6:	b510      	push	{r4, lr}
 80085c8:	2400      	movs	r4, #0
 80085ca:	b09d      	sub	sp, #116	@ 0x74
 80085cc:	ab1f      	add	r3, sp, #124	@ 0x7c
 80085ce:	9002      	str	r0, [sp, #8]
 80085d0:	9006      	str	r0, [sp, #24]
 80085d2:	9107      	str	r1, [sp, #28]
 80085d4:	9104      	str	r1, [sp, #16]
 80085d6:	4809      	ldr	r0, [pc, #36]	@ (80085fc <siprintf+0x3c>)
 80085d8:	4909      	ldr	r1, [pc, #36]	@ (8008600 <siprintf+0x40>)
 80085da:	f853 2b04 	ldr.w	r2, [r3], #4
 80085de:	9105      	str	r1, [sp, #20]
 80085e0:	6800      	ldr	r0, [r0, #0]
 80085e2:	a902      	add	r1, sp, #8
 80085e4:	9301      	str	r3, [sp, #4]
 80085e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80085e8:	f000 f99a 	bl	8008920 <_svfiprintf_r>
 80085ec:	9b02      	ldr	r3, [sp, #8]
 80085ee:	701c      	strb	r4, [r3, #0]
 80085f0:	b01d      	add	sp, #116	@ 0x74
 80085f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085f6:	b003      	add	sp, #12
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	200020c8 	.word	0x200020c8
 8008600:	ffff0208 	.word	0xffff0208

08008604 <memset>:
 8008604:	4603      	mov	r3, r0
 8008606:	4402      	add	r2, r0
 8008608:	4293      	cmp	r3, r2
 800860a:	d100      	bne.n	800860e <memset+0xa>
 800860c:	4770      	bx	lr
 800860e:	f803 1b01 	strb.w	r1, [r3], #1
 8008612:	e7f9      	b.n	8008608 <memset+0x4>

08008614 <__errno>:
 8008614:	4b01      	ldr	r3, [pc, #4]	@ (800861c <__errno+0x8>)
 8008616:	6818      	ldr	r0, [r3, #0]
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	200020c8 	.word	0x200020c8

08008620 <__libc_init_array>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	2600      	movs	r6, #0
 8008624:	4d0c      	ldr	r5, [pc, #48]	@ (8008658 <__libc_init_array+0x38>)
 8008626:	4c0d      	ldr	r4, [pc, #52]	@ (800865c <__libc_init_array+0x3c>)
 8008628:	1b64      	subs	r4, r4, r5
 800862a:	10a4      	asrs	r4, r4, #2
 800862c:	42a6      	cmp	r6, r4
 800862e:	d109      	bne.n	8008644 <__libc_init_array+0x24>
 8008630:	f000 fd08 	bl	8009044 <_init>
 8008634:	2600      	movs	r6, #0
 8008636:	4d0a      	ldr	r5, [pc, #40]	@ (8008660 <__libc_init_array+0x40>)
 8008638:	4c0a      	ldr	r4, [pc, #40]	@ (8008664 <__libc_init_array+0x44>)
 800863a:	1b64      	subs	r4, r4, r5
 800863c:	10a4      	asrs	r4, r4, #2
 800863e:	42a6      	cmp	r6, r4
 8008640:	d105      	bne.n	800864e <__libc_init_array+0x2e>
 8008642:	bd70      	pop	{r4, r5, r6, pc}
 8008644:	f855 3b04 	ldr.w	r3, [r5], #4
 8008648:	4798      	blx	r3
 800864a:	3601      	adds	r6, #1
 800864c:	e7ee      	b.n	800862c <__libc_init_array+0xc>
 800864e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008652:	4798      	blx	r3
 8008654:	3601      	adds	r6, #1
 8008656:	e7f2      	b.n	800863e <__libc_init_array+0x1e>
 8008658:	0801d46c 	.word	0x0801d46c
 800865c:	0801d46c 	.word	0x0801d46c
 8008660:	0801d46c 	.word	0x0801d46c
 8008664:	0801d470 	.word	0x0801d470

08008668 <__retarget_lock_acquire_recursive>:
 8008668:	4770      	bx	lr

0800866a <__retarget_lock_release_recursive>:
 800866a:	4770      	bx	lr

0800866c <strcpy>:
 800866c:	4603      	mov	r3, r0
 800866e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008672:	f803 2b01 	strb.w	r2, [r3], #1
 8008676:	2a00      	cmp	r2, #0
 8008678:	d1f9      	bne.n	800866e <strcpy+0x2>
 800867a:	4770      	bx	lr

0800867c <_free_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4605      	mov	r5, r0
 8008680:	2900      	cmp	r1, #0
 8008682:	d040      	beq.n	8008706 <_free_r+0x8a>
 8008684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008688:	1f0c      	subs	r4, r1, #4
 800868a:	2b00      	cmp	r3, #0
 800868c:	bfb8      	it	lt
 800868e:	18e4      	addlt	r4, r4, r3
 8008690:	f000 f8de 	bl	8008850 <__malloc_lock>
 8008694:	4a1c      	ldr	r2, [pc, #112]	@ (8008708 <_free_r+0x8c>)
 8008696:	6813      	ldr	r3, [r2, #0]
 8008698:	b933      	cbnz	r3, 80086a8 <_free_r+0x2c>
 800869a:	6063      	str	r3, [r4, #4]
 800869c:	6014      	str	r4, [r2, #0]
 800869e:	4628      	mov	r0, r5
 80086a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086a4:	f000 b8da 	b.w	800885c <__malloc_unlock>
 80086a8:	42a3      	cmp	r3, r4
 80086aa:	d908      	bls.n	80086be <_free_r+0x42>
 80086ac:	6820      	ldr	r0, [r4, #0]
 80086ae:	1821      	adds	r1, r4, r0
 80086b0:	428b      	cmp	r3, r1
 80086b2:	bf01      	itttt	eq
 80086b4:	6819      	ldreq	r1, [r3, #0]
 80086b6:	685b      	ldreq	r3, [r3, #4]
 80086b8:	1809      	addeq	r1, r1, r0
 80086ba:	6021      	streq	r1, [r4, #0]
 80086bc:	e7ed      	b.n	800869a <_free_r+0x1e>
 80086be:	461a      	mov	r2, r3
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	b10b      	cbz	r3, 80086c8 <_free_r+0x4c>
 80086c4:	42a3      	cmp	r3, r4
 80086c6:	d9fa      	bls.n	80086be <_free_r+0x42>
 80086c8:	6811      	ldr	r1, [r2, #0]
 80086ca:	1850      	adds	r0, r2, r1
 80086cc:	42a0      	cmp	r0, r4
 80086ce:	d10b      	bne.n	80086e8 <_free_r+0x6c>
 80086d0:	6820      	ldr	r0, [r4, #0]
 80086d2:	4401      	add	r1, r0
 80086d4:	1850      	adds	r0, r2, r1
 80086d6:	4283      	cmp	r3, r0
 80086d8:	6011      	str	r1, [r2, #0]
 80086da:	d1e0      	bne.n	800869e <_free_r+0x22>
 80086dc:	6818      	ldr	r0, [r3, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	4408      	add	r0, r1
 80086e2:	6010      	str	r0, [r2, #0]
 80086e4:	6053      	str	r3, [r2, #4]
 80086e6:	e7da      	b.n	800869e <_free_r+0x22>
 80086e8:	d902      	bls.n	80086f0 <_free_r+0x74>
 80086ea:	230c      	movs	r3, #12
 80086ec:	602b      	str	r3, [r5, #0]
 80086ee:	e7d6      	b.n	800869e <_free_r+0x22>
 80086f0:	6820      	ldr	r0, [r4, #0]
 80086f2:	1821      	adds	r1, r4, r0
 80086f4:	428b      	cmp	r3, r1
 80086f6:	bf01      	itttt	eq
 80086f8:	6819      	ldreq	r1, [r3, #0]
 80086fa:	685b      	ldreq	r3, [r3, #4]
 80086fc:	1809      	addeq	r1, r1, r0
 80086fe:	6021      	streq	r1, [r4, #0]
 8008700:	6063      	str	r3, [r4, #4]
 8008702:	6054      	str	r4, [r2, #4]
 8008704:	e7cb      	b.n	800869e <_free_r+0x22>
 8008706:	bd38      	pop	{r3, r4, r5, pc}
 8008708:	200063f0 	.word	0x200063f0

0800870c <sbrk_aligned>:
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	4e0f      	ldr	r6, [pc, #60]	@ (800874c <sbrk_aligned+0x40>)
 8008710:	460c      	mov	r4, r1
 8008712:	6831      	ldr	r1, [r6, #0]
 8008714:	4605      	mov	r5, r0
 8008716:	b911      	cbnz	r1, 800871e <sbrk_aligned+0x12>
 8008718:	f000 fba8 	bl	8008e6c <_sbrk_r>
 800871c:	6030      	str	r0, [r6, #0]
 800871e:	4621      	mov	r1, r4
 8008720:	4628      	mov	r0, r5
 8008722:	f000 fba3 	bl	8008e6c <_sbrk_r>
 8008726:	1c43      	adds	r3, r0, #1
 8008728:	d103      	bne.n	8008732 <sbrk_aligned+0x26>
 800872a:	f04f 34ff 	mov.w	r4, #4294967295
 800872e:	4620      	mov	r0, r4
 8008730:	bd70      	pop	{r4, r5, r6, pc}
 8008732:	1cc4      	adds	r4, r0, #3
 8008734:	f024 0403 	bic.w	r4, r4, #3
 8008738:	42a0      	cmp	r0, r4
 800873a:	d0f8      	beq.n	800872e <sbrk_aligned+0x22>
 800873c:	1a21      	subs	r1, r4, r0
 800873e:	4628      	mov	r0, r5
 8008740:	f000 fb94 	bl	8008e6c <_sbrk_r>
 8008744:	3001      	adds	r0, #1
 8008746:	d1f2      	bne.n	800872e <sbrk_aligned+0x22>
 8008748:	e7ef      	b.n	800872a <sbrk_aligned+0x1e>
 800874a:	bf00      	nop
 800874c:	200063ec 	.word	0x200063ec

08008750 <_malloc_r>:
 8008750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008754:	1ccd      	adds	r5, r1, #3
 8008756:	f025 0503 	bic.w	r5, r5, #3
 800875a:	3508      	adds	r5, #8
 800875c:	2d0c      	cmp	r5, #12
 800875e:	bf38      	it	cc
 8008760:	250c      	movcc	r5, #12
 8008762:	2d00      	cmp	r5, #0
 8008764:	4606      	mov	r6, r0
 8008766:	db01      	blt.n	800876c <_malloc_r+0x1c>
 8008768:	42a9      	cmp	r1, r5
 800876a:	d904      	bls.n	8008776 <_malloc_r+0x26>
 800876c:	230c      	movs	r3, #12
 800876e:	6033      	str	r3, [r6, #0]
 8008770:	2000      	movs	r0, #0
 8008772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008776:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800884c <_malloc_r+0xfc>
 800877a:	f000 f869 	bl	8008850 <__malloc_lock>
 800877e:	f8d8 3000 	ldr.w	r3, [r8]
 8008782:	461c      	mov	r4, r3
 8008784:	bb44      	cbnz	r4, 80087d8 <_malloc_r+0x88>
 8008786:	4629      	mov	r1, r5
 8008788:	4630      	mov	r0, r6
 800878a:	f7ff ffbf 	bl	800870c <sbrk_aligned>
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	4604      	mov	r4, r0
 8008792:	d158      	bne.n	8008846 <_malloc_r+0xf6>
 8008794:	f8d8 4000 	ldr.w	r4, [r8]
 8008798:	4627      	mov	r7, r4
 800879a:	2f00      	cmp	r7, #0
 800879c:	d143      	bne.n	8008826 <_malloc_r+0xd6>
 800879e:	2c00      	cmp	r4, #0
 80087a0:	d04b      	beq.n	800883a <_malloc_r+0xea>
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	4639      	mov	r1, r7
 80087a6:	4630      	mov	r0, r6
 80087a8:	eb04 0903 	add.w	r9, r4, r3
 80087ac:	f000 fb5e 	bl	8008e6c <_sbrk_r>
 80087b0:	4581      	cmp	r9, r0
 80087b2:	d142      	bne.n	800883a <_malloc_r+0xea>
 80087b4:	6821      	ldr	r1, [r4, #0]
 80087b6:	4630      	mov	r0, r6
 80087b8:	1a6d      	subs	r5, r5, r1
 80087ba:	4629      	mov	r1, r5
 80087bc:	f7ff ffa6 	bl	800870c <sbrk_aligned>
 80087c0:	3001      	adds	r0, #1
 80087c2:	d03a      	beq.n	800883a <_malloc_r+0xea>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	442b      	add	r3, r5
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	f8d8 3000 	ldr.w	r3, [r8]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	bb62      	cbnz	r2, 800882c <_malloc_r+0xdc>
 80087d2:	f8c8 7000 	str.w	r7, [r8]
 80087d6:	e00f      	b.n	80087f8 <_malloc_r+0xa8>
 80087d8:	6822      	ldr	r2, [r4, #0]
 80087da:	1b52      	subs	r2, r2, r5
 80087dc:	d420      	bmi.n	8008820 <_malloc_r+0xd0>
 80087de:	2a0b      	cmp	r2, #11
 80087e0:	d917      	bls.n	8008812 <_malloc_r+0xc2>
 80087e2:	1961      	adds	r1, r4, r5
 80087e4:	42a3      	cmp	r3, r4
 80087e6:	6025      	str	r5, [r4, #0]
 80087e8:	bf18      	it	ne
 80087ea:	6059      	strne	r1, [r3, #4]
 80087ec:	6863      	ldr	r3, [r4, #4]
 80087ee:	bf08      	it	eq
 80087f0:	f8c8 1000 	streq.w	r1, [r8]
 80087f4:	5162      	str	r2, [r4, r5]
 80087f6:	604b      	str	r3, [r1, #4]
 80087f8:	4630      	mov	r0, r6
 80087fa:	f000 f82f 	bl	800885c <__malloc_unlock>
 80087fe:	f104 000b 	add.w	r0, r4, #11
 8008802:	1d23      	adds	r3, r4, #4
 8008804:	f020 0007 	bic.w	r0, r0, #7
 8008808:	1ac2      	subs	r2, r0, r3
 800880a:	bf1c      	itt	ne
 800880c:	1a1b      	subne	r3, r3, r0
 800880e:	50a3      	strne	r3, [r4, r2]
 8008810:	e7af      	b.n	8008772 <_malloc_r+0x22>
 8008812:	6862      	ldr	r2, [r4, #4]
 8008814:	42a3      	cmp	r3, r4
 8008816:	bf0c      	ite	eq
 8008818:	f8c8 2000 	streq.w	r2, [r8]
 800881c:	605a      	strne	r2, [r3, #4]
 800881e:	e7eb      	b.n	80087f8 <_malloc_r+0xa8>
 8008820:	4623      	mov	r3, r4
 8008822:	6864      	ldr	r4, [r4, #4]
 8008824:	e7ae      	b.n	8008784 <_malloc_r+0x34>
 8008826:	463c      	mov	r4, r7
 8008828:	687f      	ldr	r7, [r7, #4]
 800882a:	e7b6      	b.n	800879a <_malloc_r+0x4a>
 800882c:	461a      	mov	r2, r3
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	42a3      	cmp	r3, r4
 8008832:	d1fb      	bne.n	800882c <_malloc_r+0xdc>
 8008834:	2300      	movs	r3, #0
 8008836:	6053      	str	r3, [r2, #4]
 8008838:	e7de      	b.n	80087f8 <_malloc_r+0xa8>
 800883a:	230c      	movs	r3, #12
 800883c:	4630      	mov	r0, r6
 800883e:	6033      	str	r3, [r6, #0]
 8008840:	f000 f80c 	bl	800885c <__malloc_unlock>
 8008844:	e794      	b.n	8008770 <_malloc_r+0x20>
 8008846:	6005      	str	r5, [r0, #0]
 8008848:	e7d6      	b.n	80087f8 <_malloc_r+0xa8>
 800884a:	bf00      	nop
 800884c:	200063f0 	.word	0x200063f0

08008850 <__malloc_lock>:
 8008850:	4801      	ldr	r0, [pc, #4]	@ (8008858 <__malloc_lock+0x8>)
 8008852:	f7ff bf09 	b.w	8008668 <__retarget_lock_acquire_recursive>
 8008856:	bf00      	nop
 8008858:	200063e8 	.word	0x200063e8

0800885c <__malloc_unlock>:
 800885c:	4801      	ldr	r0, [pc, #4]	@ (8008864 <__malloc_unlock+0x8>)
 800885e:	f7ff bf04 	b.w	800866a <__retarget_lock_release_recursive>
 8008862:	bf00      	nop
 8008864:	200063e8 	.word	0x200063e8

08008868 <__ssputs_r>:
 8008868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800886c:	461f      	mov	r7, r3
 800886e:	688e      	ldr	r6, [r1, #8]
 8008870:	4682      	mov	sl, r0
 8008872:	42be      	cmp	r6, r7
 8008874:	460c      	mov	r4, r1
 8008876:	4690      	mov	r8, r2
 8008878:	680b      	ldr	r3, [r1, #0]
 800887a:	d82d      	bhi.n	80088d8 <__ssputs_r+0x70>
 800887c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008880:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008884:	d026      	beq.n	80088d4 <__ssputs_r+0x6c>
 8008886:	6965      	ldr	r5, [r4, #20]
 8008888:	6909      	ldr	r1, [r1, #16]
 800888a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800888e:	eba3 0901 	sub.w	r9, r3, r1
 8008892:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008896:	1c7b      	adds	r3, r7, #1
 8008898:	444b      	add	r3, r9
 800889a:	106d      	asrs	r5, r5, #1
 800889c:	429d      	cmp	r5, r3
 800889e:	bf38      	it	cc
 80088a0:	461d      	movcc	r5, r3
 80088a2:	0553      	lsls	r3, r2, #21
 80088a4:	d527      	bpl.n	80088f6 <__ssputs_r+0x8e>
 80088a6:	4629      	mov	r1, r5
 80088a8:	f7ff ff52 	bl	8008750 <_malloc_r>
 80088ac:	4606      	mov	r6, r0
 80088ae:	b360      	cbz	r0, 800890a <__ssputs_r+0xa2>
 80088b0:	464a      	mov	r2, r9
 80088b2:	6921      	ldr	r1, [r4, #16]
 80088b4:	f000 faf8 	bl	8008ea8 <memcpy>
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80088be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088c2:	81a3      	strh	r3, [r4, #12]
 80088c4:	6126      	str	r6, [r4, #16]
 80088c6:	444e      	add	r6, r9
 80088c8:	6026      	str	r6, [r4, #0]
 80088ca:	463e      	mov	r6, r7
 80088cc:	6165      	str	r5, [r4, #20]
 80088ce:	eba5 0509 	sub.w	r5, r5, r9
 80088d2:	60a5      	str	r5, [r4, #8]
 80088d4:	42be      	cmp	r6, r7
 80088d6:	d900      	bls.n	80088da <__ssputs_r+0x72>
 80088d8:	463e      	mov	r6, r7
 80088da:	4632      	mov	r2, r6
 80088dc:	4641      	mov	r1, r8
 80088de:	6820      	ldr	r0, [r4, #0]
 80088e0:	f000 faaa 	bl	8008e38 <memmove>
 80088e4:	2000      	movs	r0, #0
 80088e6:	68a3      	ldr	r3, [r4, #8]
 80088e8:	1b9b      	subs	r3, r3, r6
 80088ea:	60a3      	str	r3, [r4, #8]
 80088ec:	6823      	ldr	r3, [r4, #0]
 80088ee:	4433      	add	r3, r6
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f6:	462a      	mov	r2, r5
 80088f8:	f000 fae4 	bl	8008ec4 <_realloc_r>
 80088fc:	4606      	mov	r6, r0
 80088fe:	2800      	cmp	r0, #0
 8008900:	d1e0      	bne.n	80088c4 <__ssputs_r+0x5c>
 8008902:	4650      	mov	r0, sl
 8008904:	6921      	ldr	r1, [r4, #16]
 8008906:	f7ff feb9 	bl	800867c <_free_r>
 800890a:	230c      	movs	r3, #12
 800890c:	f8ca 3000 	str.w	r3, [sl]
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	f04f 30ff 	mov.w	r0, #4294967295
 8008916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	e7e9      	b.n	80088f2 <__ssputs_r+0x8a>
	...

08008920 <_svfiprintf_r>:
 8008920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008924:	4698      	mov	r8, r3
 8008926:	898b      	ldrh	r3, [r1, #12]
 8008928:	4607      	mov	r7, r0
 800892a:	061b      	lsls	r3, r3, #24
 800892c:	460d      	mov	r5, r1
 800892e:	4614      	mov	r4, r2
 8008930:	b09d      	sub	sp, #116	@ 0x74
 8008932:	d510      	bpl.n	8008956 <_svfiprintf_r+0x36>
 8008934:	690b      	ldr	r3, [r1, #16]
 8008936:	b973      	cbnz	r3, 8008956 <_svfiprintf_r+0x36>
 8008938:	2140      	movs	r1, #64	@ 0x40
 800893a:	f7ff ff09 	bl	8008750 <_malloc_r>
 800893e:	6028      	str	r0, [r5, #0]
 8008940:	6128      	str	r0, [r5, #16]
 8008942:	b930      	cbnz	r0, 8008952 <_svfiprintf_r+0x32>
 8008944:	230c      	movs	r3, #12
 8008946:	603b      	str	r3, [r7, #0]
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	b01d      	add	sp, #116	@ 0x74
 800894e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008952:	2340      	movs	r3, #64	@ 0x40
 8008954:	616b      	str	r3, [r5, #20]
 8008956:	2300      	movs	r3, #0
 8008958:	9309      	str	r3, [sp, #36]	@ 0x24
 800895a:	2320      	movs	r3, #32
 800895c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008960:	2330      	movs	r3, #48	@ 0x30
 8008962:	f04f 0901 	mov.w	r9, #1
 8008966:	f8cd 800c 	str.w	r8, [sp, #12]
 800896a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008b04 <_svfiprintf_r+0x1e4>
 800896e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008972:	4623      	mov	r3, r4
 8008974:	469a      	mov	sl, r3
 8008976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800897a:	b10a      	cbz	r2, 8008980 <_svfiprintf_r+0x60>
 800897c:	2a25      	cmp	r2, #37	@ 0x25
 800897e:	d1f9      	bne.n	8008974 <_svfiprintf_r+0x54>
 8008980:	ebba 0b04 	subs.w	fp, sl, r4
 8008984:	d00b      	beq.n	800899e <_svfiprintf_r+0x7e>
 8008986:	465b      	mov	r3, fp
 8008988:	4622      	mov	r2, r4
 800898a:	4629      	mov	r1, r5
 800898c:	4638      	mov	r0, r7
 800898e:	f7ff ff6b 	bl	8008868 <__ssputs_r>
 8008992:	3001      	adds	r0, #1
 8008994:	f000 80a7 	beq.w	8008ae6 <_svfiprintf_r+0x1c6>
 8008998:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800899a:	445a      	add	r2, fp
 800899c:	9209      	str	r2, [sp, #36]	@ 0x24
 800899e:	f89a 3000 	ldrb.w	r3, [sl]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 809f 	beq.w	8008ae6 <_svfiprintf_r+0x1c6>
 80089a8:	2300      	movs	r3, #0
 80089aa:	f04f 32ff 	mov.w	r2, #4294967295
 80089ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089b2:	f10a 0a01 	add.w	sl, sl, #1
 80089b6:	9304      	str	r3, [sp, #16]
 80089b8:	9307      	str	r3, [sp, #28]
 80089ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089be:	931a      	str	r3, [sp, #104]	@ 0x68
 80089c0:	4654      	mov	r4, sl
 80089c2:	2205      	movs	r2, #5
 80089c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c8:	484e      	ldr	r0, [pc, #312]	@ (8008b04 <_svfiprintf_r+0x1e4>)
 80089ca:	f000 fa5f 	bl	8008e8c <memchr>
 80089ce:	9a04      	ldr	r2, [sp, #16]
 80089d0:	b9d8      	cbnz	r0, 8008a0a <_svfiprintf_r+0xea>
 80089d2:	06d0      	lsls	r0, r2, #27
 80089d4:	bf44      	itt	mi
 80089d6:	2320      	movmi	r3, #32
 80089d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089dc:	0711      	lsls	r1, r2, #28
 80089de:	bf44      	itt	mi
 80089e0:	232b      	movmi	r3, #43	@ 0x2b
 80089e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089e6:	f89a 3000 	ldrb.w	r3, [sl]
 80089ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80089ec:	d015      	beq.n	8008a1a <_svfiprintf_r+0xfa>
 80089ee:	4654      	mov	r4, sl
 80089f0:	2000      	movs	r0, #0
 80089f2:	f04f 0c0a 	mov.w	ip, #10
 80089f6:	9a07      	ldr	r2, [sp, #28]
 80089f8:	4621      	mov	r1, r4
 80089fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089fe:	3b30      	subs	r3, #48	@ 0x30
 8008a00:	2b09      	cmp	r3, #9
 8008a02:	d94b      	bls.n	8008a9c <_svfiprintf_r+0x17c>
 8008a04:	b1b0      	cbz	r0, 8008a34 <_svfiprintf_r+0x114>
 8008a06:	9207      	str	r2, [sp, #28]
 8008a08:	e014      	b.n	8008a34 <_svfiprintf_r+0x114>
 8008a0a:	eba0 0308 	sub.w	r3, r0, r8
 8008a0e:	fa09 f303 	lsl.w	r3, r9, r3
 8008a12:	4313      	orrs	r3, r2
 8008a14:	46a2      	mov	sl, r4
 8008a16:	9304      	str	r3, [sp, #16]
 8008a18:	e7d2      	b.n	80089c0 <_svfiprintf_r+0xa0>
 8008a1a:	9b03      	ldr	r3, [sp, #12]
 8008a1c:	1d19      	adds	r1, r3, #4
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	9103      	str	r1, [sp, #12]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	bfbb      	ittet	lt
 8008a26:	425b      	neglt	r3, r3
 8008a28:	f042 0202 	orrlt.w	r2, r2, #2
 8008a2c:	9307      	strge	r3, [sp, #28]
 8008a2e:	9307      	strlt	r3, [sp, #28]
 8008a30:	bfb8      	it	lt
 8008a32:	9204      	strlt	r2, [sp, #16]
 8008a34:	7823      	ldrb	r3, [r4, #0]
 8008a36:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a38:	d10a      	bne.n	8008a50 <_svfiprintf_r+0x130>
 8008a3a:	7863      	ldrb	r3, [r4, #1]
 8008a3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a3e:	d132      	bne.n	8008aa6 <_svfiprintf_r+0x186>
 8008a40:	9b03      	ldr	r3, [sp, #12]
 8008a42:	3402      	adds	r4, #2
 8008a44:	1d1a      	adds	r2, r3, #4
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	9203      	str	r2, [sp, #12]
 8008a4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a4e:	9305      	str	r3, [sp, #20]
 8008a50:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008b08 <_svfiprintf_r+0x1e8>
 8008a54:	2203      	movs	r2, #3
 8008a56:	4650      	mov	r0, sl
 8008a58:	7821      	ldrb	r1, [r4, #0]
 8008a5a:	f000 fa17 	bl	8008e8c <memchr>
 8008a5e:	b138      	cbz	r0, 8008a70 <_svfiprintf_r+0x150>
 8008a60:	2240      	movs	r2, #64	@ 0x40
 8008a62:	9b04      	ldr	r3, [sp, #16]
 8008a64:	eba0 000a 	sub.w	r0, r0, sl
 8008a68:	4082      	lsls	r2, r0
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	3401      	adds	r4, #1
 8008a6e:	9304      	str	r3, [sp, #16]
 8008a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a74:	2206      	movs	r2, #6
 8008a76:	4825      	ldr	r0, [pc, #148]	@ (8008b0c <_svfiprintf_r+0x1ec>)
 8008a78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a7c:	f000 fa06 	bl	8008e8c <memchr>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d036      	beq.n	8008af2 <_svfiprintf_r+0x1d2>
 8008a84:	4b22      	ldr	r3, [pc, #136]	@ (8008b10 <_svfiprintf_r+0x1f0>)
 8008a86:	bb1b      	cbnz	r3, 8008ad0 <_svfiprintf_r+0x1b0>
 8008a88:	9b03      	ldr	r3, [sp, #12]
 8008a8a:	3307      	adds	r3, #7
 8008a8c:	f023 0307 	bic.w	r3, r3, #7
 8008a90:	3308      	adds	r3, #8
 8008a92:	9303      	str	r3, [sp, #12]
 8008a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a96:	4433      	add	r3, r6
 8008a98:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a9a:	e76a      	b.n	8008972 <_svfiprintf_r+0x52>
 8008a9c:	460c      	mov	r4, r1
 8008a9e:	2001      	movs	r0, #1
 8008aa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aa4:	e7a8      	b.n	80089f8 <_svfiprintf_r+0xd8>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f04f 0c0a 	mov.w	ip, #10
 8008aac:	4619      	mov	r1, r3
 8008aae:	3401      	adds	r4, #1
 8008ab0:	9305      	str	r3, [sp, #20]
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ab8:	3a30      	subs	r2, #48	@ 0x30
 8008aba:	2a09      	cmp	r2, #9
 8008abc:	d903      	bls.n	8008ac6 <_svfiprintf_r+0x1a6>
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0c6      	beq.n	8008a50 <_svfiprintf_r+0x130>
 8008ac2:	9105      	str	r1, [sp, #20]
 8008ac4:	e7c4      	b.n	8008a50 <_svfiprintf_r+0x130>
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	2301      	movs	r3, #1
 8008aca:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ace:	e7f0      	b.n	8008ab2 <_svfiprintf_r+0x192>
 8008ad0:	ab03      	add	r3, sp, #12
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	462a      	mov	r2, r5
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8008b14 <_svfiprintf_r+0x1f4>)
 8008ada:	a904      	add	r1, sp, #16
 8008adc:	f3af 8000 	nop.w
 8008ae0:	1c42      	adds	r2, r0, #1
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	d1d6      	bne.n	8008a94 <_svfiprintf_r+0x174>
 8008ae6:	89ab      	ldrh	r3, [r5, #12]
 8008ae8:	065b      	lsls	r3, r3, #25
 8008aea:	f53f af2d 	bmi.w	8008948 <_svfiprintf_r+0x28>
 8008aee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008af0:	e72c      	b.n	800894c <_svfiprintf_r+0x2c>
 8008af2:	ab03      	add	r3, sp, #12
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	462a      	mov	r2, r5
 8008af8:	4638      	mov	r0, r7
 8008afa:	4b06      	ldr	r3, [pc, #24]	@ (8008b14 <_svfiprintf_r+0x1f4>)
 8008afc:	a904      	add	r1, sp, #16
 8008afe:	f000 f87d 	bl	8008bfc <_printf_i>
 8008b02:	e7ed      	b.n	8008ae0 <_svfiprintf_r+0x1c0>
 8008b04:	0801d428 	.word	0x0801d428
 8008b08:	0801d42e 	.word	0x0801d42e
 8008b0c:	0801d432 	.word	0x0801d432
 8008b10:	00000000 	.word	0x00000000
 8008b14:	08008869 	.word	0x08008869

08008b18 <_printf_common>:
 8008b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b1c:	4616      	mov	r6, r2
 8008b1e:	4698      	mov	r8, r3
 8008b20:	688a      	ldr	r2, [r1, #8]
 8008b22:	690b      	ldr	r3, [r1, #16]
 8008b24:	4607      	mov	r7, r0
 8008b26:	4293      	cmp	r3, r2
 8008b28:	bfb8      	it	lt
 8008b2a:	4613      	movlt	r3, r2
 8008b2c:	6033      	str	r3, [r6, #0]
 8008b2e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b32:	460c      	mov	r4, r1
 8008b34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b38:	b10a      	cbz	r2, 8008b3e <_printf_common+0x26>
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	6033      	str	r3, [r6, #0]
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	0699      	lsls	r1, r3, #26
 8008b42:	bf42      	ittt	mi
 8008b44:	6833      	ldrmi	r3, [r6, #0]
 8008b46:	3302      	addmi	r3, #2
 8008b48:	6033      	strmi	r3, [r6, #0]
 8008b4a:	6825      	ldr	r5, [r4, #0]
 8008b4c:	f015 0506 	ands.w	r5, r5, #6
 8008b50:	d106      	bne.n	8008b60 <_printf_common+0x48>
 8008b52:	f104 0a19 	add.w	sl, r4, #25
 8008b56:	68e3      	ldr	r3, [r4, #12]
 8008b58:	6832      	ldr	r2, [r6, #0]
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	42ab      	cmp	r3, r5
 8008b5e:	dc2b      	bgt.n	8008bb8 <_printf_common+0xa0>
 8008b60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b64:	6822      	ldr	r2, [r4, #0]
 8008b66:	3b00      	subs	r3, #0
 8008b68:	bf18      	it	ne
 8008b6a:	2301      	movne	r3, #1
 8008b6c:	0692      	lsls	r2, r2, #26
 8008b6e:	d430      	bmi.n	8008bd2 <_printf_common+0xba>
 8008b70:	4641      	mov	r1, r8
 8008b72:	4638      	mov	r0, r7
 8008b74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b78:	47c8      	blx	r9
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d023      	beq.n	8008bc6 <_printf_common+0xae>
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	6922      	ldr	r2, [r4, #16]
 8008b82:	f003 0306 	and.w	r3, r3, #6
 8008b86:	2b04      	cmp	r3, #4
 8008b88:	bf14      	ite	ne
 8008b8a:	2500      	movne	r5, #0
 8008b8c:	6833      	ldreq	r3, [r6, #0]
 8008b8e:	f04f 0600 	mov.w	r6, #0
 8008b92:	bf08      	it	eq
 8008b94:	68e5      	ldreq	r5, [r4, #12]
 8008b96:	f104 041a 	add.w	r4, r4, #26
 8008b9a:	bf08      	it	eq
 8008b9c:	1aed      	subeq	r5, r5, r3
 8008b9e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008ba2:	bf08      	it	eq
 8008ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	bfc4      	itt	gt
 8008bac:	1a9b      	subgt	r3, r3, r2
 8008bae:	18ed      	addgt	r5, r5, r3
 8008bb0:	42b5      	cmp	r5, r6
 8008bb2:	d11a      	bne.n	8008bea <_printf_common+0xd2>
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	e008      	b.n	8008bca <_printf_common+0xb2>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	4652      	mov	r2, sl
 8008bbc:	4641      	mov	r1, r8
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	47c8      	blx	r9
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	d103      	bne.n	8008bce <_printf_common+0xb6>
 8008bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	3501      	adds	r5, #1
 8008bd0:	e7c1      	b.n	8008b56 <_printf_common+0x3e>
 8008bd2:	2030      	movs	r0, #48	@ 0x30
 8008bd4:	18e1      	adds	r1, r4, r3
 8008bd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008bda:	1c5a      	adds	r2, r3, #1
 8008bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008be0:	4422      	add	r2, r4
 8008be2:	3302      	adds	r3, #2
 8008be4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008be8:	e7c2      	b.n	8008b70 <_printf_common+0x58>
 8008bea:	2301      	movs	r3, #1
 8008bec:	4622      	mov	r2, r4
 8008bee:	4641      	mov	r1, r8
 8008bf0:	4638      	mov	r0, r7
 8008bf2:	47c8      	blx	r9
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	d0e6      	beq.n	8008bc6 <_printf_common+0xae>
 8008bf8:	3601      	adds	r6, #1
 8008bfa:	e7d9      	b.n	8008bb0 <_printf_common+0x98>

08008bfc <_printf_i>:
 8008bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c00:	7e0f      	ldrb	r7, [r1, #24]
 8008c02:	4691      	mov	r9, r2
 8008c04:	2f78      	cmp	r7, #120	@ 0x78
 8008c06:	4680      	mov	r8, r0
 8008c08:	460c      	mov	r4, r1
 8008c0a:	469a      	mov	sl, r3
 8008c0c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c12:	d807      	bhi.n	8008c24 <_printf_i+0x28>
 8008c14:	2f62      	cmp	r7, #98	@ 0x62
 8008c16:	d80a      	bhi.n	8008c2e <_printf_i+0x32>
 8008c18:	2f00      	cmp	r7, #0
 8008c1a:	f000 80d1 	beq.w	8008dc0 <_printf_i+0x1c4>
 8008c1e:	2f58      	cmp	r7, #88	@ 0x58
 8008c20:	f000 80b8 	beq.w	8008d94 <_printf_i+0x198>
 8008c24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c2c:	e03a      	b.n	8008ca4 <_printf_i+0xa8>
 8008c2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c32:	2b15      	cmp	r3, #21
 8008c34:	d8f6      	bhi.n	8008c24 <_printf_i+0x28>
 8008c36:	a101      	add	r1, pc, #4	@ (adr r1, 8008c3c <_printf_i+0x40>)
 8008c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c3c:	08008c95 	.word	0x08008c95
 8008c40:	08008ca9 	.word	0x08008ca9
 8008c44:	08008c25 	.word	0x08008c25
 8008c48:	08008c25 	.word	0x08008c25
 8008c4c:	08008c25 	.word	0x08008c25
 8008c50:	08008c25 	.word	0x08008c25
 8008c54:	08008ca9 	.word	0x08008ca9
 8008c58:	08008c25 	.word	0x08008c25
 8008c5c:	08008c25 	.word	0x08008c25
 8008c60:	08008c25 	.word	0x08008c25
 8008c64:	08008c25 	.word	0x08008c25
 8008c68:	08008da7 	.word	0x08008da7
 8008c6c:	08008cd3 	.word	0x08008cd3
 8008c70:	08008d61 	.word	0x08008d61
 8008c74:	08008c25 	.word	0x08008c25
 8008c78:	08008c25 	.word	0x08008c25
 8008c7c:	08008dc9 	.word	0x08008dc9
 8008c80:	08008c25 	.word	0x08008c25
 8008c84:	08008cd3 	.word	0x08008cd3
 8008c88:	08008c25 	.word	0x08008c25
 8008c8c:	08008c25 	.word	0x08008c25
 8008c90:	08008d69 	.word	0x08008d69
 8008c94:	6833      	ldr	r3, [r6, #0]
 8008c96:	1d1a      	adds	r2, r3, #4
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6032      	str	r2, [r6, #0]
 8008c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ca0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e09c      	b.n	8008de2 <_printf_i+0x1e6>
 8008ca8:	6833      	ldr	r3, [r6, #0]
 8008caa:	6820      	ldr	r0, [r4, #0]
 8008cac:	1d19      	adds	r1, r3, #4
 8008cae:	6031      	str	r1, [r6, #0]
 8008cb0:	0606      	lsls	r6, r0, #24
 8008cb2:	d501      	bpl.n	8008cb8 <_printf_i+0xbc>
 8008cb4:	681d      	ldr	r5, [r3, #0]
 8008cb6:	e003      	b.n	8008cc0 <_printf_i+0xc4>
 8008cb8:	0645      	lsls	r5, r0, #25
 8008cba:	d5fb      	bpl.n	8008cb4 <_printf_i+0xb8>
 8008cbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008cc0:	2d00      	cmp	r5, #0
 8008cc2:	da03      	bge.n	8008ccc <_printf_i+0xd0>
 8008cc4:	232d      	movs	r3, #45	@ 0x2d
 8008cc6:	426d      	negs	r5, r5
 8008cc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ccc:	230a      	movs	r3, #10
 8008cce:	4858      	ldr	r0, [pc, #352]	@ (8008e30 <_printf_i+0x234>)
 8008cd0:	e011      	b.n	8008cf6 <_printf_i+0xfa>
 8008cd2:	6821      	ldr	r1, [r4, #0]
 8008cd4:	6833      	ldr	r3, [r6, #0]
 8008cd6:	0608      	lsls	r0, r1, #24
 8008cd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008cdc:	d402      	bmi.n	8008ce4 <_printf_i+0xe8>
 8008cde:	0649      	lsls	r1, r1, #25
 8008ce0:	bf48      	it	mi
 8008ce2:	b2ad      	uxthmi	r5, r5
 8008ce4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ce6:	6033      	str	r3, [r6, #0]
 8008ce8:	bf14      	ite	ne
 8008cea:	230a      	movne	r3, #10
 8008cec:	2308      	moveq	r3, #8
 8008cee:	4850      	ldr	r0, [pc, #320]	@ (8008e30 <_printf_i+0x234>)
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008cf6:	6866      	ldr	r6, [r4, #4]
 8008cf8:	2e00      	cmp	r6, #0
 8008cfa:	60a6      	str	r6, [r4, #8]
 8008cfc:	db05      	blt.n	8008d0a <_printf_i+0x10e>
 8008cfe:	6821      	ldr	r1, [r4, #0]
 8008d00:	432e      	orrs	r6, r5
 8008d02:	f021 0104 	bic.w	r1, r1, #4
 8008d06:	6021      	str	r1, [r4, #0]
 8008d08:	d04b      	beq.n	8008da2 <_printf_i+0x1a6>
 8008d0a:	4616      	mov	r6, r2
 8008d0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d10:	fb03 5711 	mls	r7, r3, r1, r5
 8008d14:	5dc7      	ldrb	r7, [r0, r7]
 8008d16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d1a:	462f      	mov	r7, r5
 8008d1c:	42bb      	cmp	r3, r7
 8008d1e:	460d      	mov	r5, r1
 8008d20:	d9f4      	bls.n	8008d0c <_printf_i+0x110>
 8008d22:	2b08      	cmp	r3, #8
 8008d24:	d10b      	bne.n	8008d3e <_printf_i+0x142>
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	07df      	lsls	r7, r3, #31
 8008d2a:	d508      	bpl.n	8008d3e <_printf_i+0x142>
 8008d2c:	6923      	ldr	r3, [r4, #16]
 8008d2e:	6861      	ldr	r1, [r4, #4]
 8008d30:	4299      	cmp	r1, r3
 8008d32:	bfde      	ittt	le
 8008d34:	2330      	movle	r3, #48	@ 0x30
 8008d36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d3e:	1b92      	subs	r2, r2, r6
 8008d40:	6122      	str	r2, [r4, #16]
 8008d42:	464b      	mov	r3, r9
 8008d44:	4621      	mov	r1, r4
 8008d46:	4640      	mov	r0, r8
 8008d48:	f8cd a000 	str.w	sl, [sp]
 8008d4c:	aa03      	add	r2, sp, #12
 8008d4e:	f7ff fee3 	bl	8008b18 <_printf_common>
 8008d52:	3001      	adds	r0, #1
 8008d54:	d14a      	bne.n	8008dec <_printf_i+0x1f0>
 8008d56:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5a:	b004      	add	sp, #16
 8008d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	f043 0320 	orr.w	r3, r3, #32
 8008d66:	6023      	str	r3, [r4, #0]
 8008d68:	2778      	movs	r7, #120	@ 0x78
 8008d6a:	4832      	ldr	r0, [pc, #200]	@ (8008e34 <_printf_i+0x238>)
 8008d6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	6831      	ldr	r1, [r6, #0]
 8008d74:	061f      	lsls	r7, r3, #24
 8008d76:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d7a:	d402      	bmi.n	8008d82 <_printf_i+0x186>
 8008d7c:	065f      	lsls	r7, r3, #25
 8008d7e:	bf48      	it	mi
 8008d80:	b2ad      	uxthmi	r5, r5
 8008d82:	6031      	str	r1, [r6, #0]
 8008d84:	07d9      	lsls	r1, r3, #31
 8008d86:	bf44      	itt	mi
 8008d88:	f043 0320 	orrmi.w	r3, r3, #32
 8008d8c:	6023      	strmi	r3, [r4, #0]
 8008d8e:	b11d      	cbz	r5, 8008d98 <_printf_i+0x19c>
 8008d90:	2310      	movs	r3, #16
 8008d92:	e7ad      	b.n	8008cf0 <_printf_i+0xf4>
 8008d94:	4826      	ldr	r0, [pc, #152]	@ (8008e30 <_printf_i+0x234>)
 8008d96:	e7e9      	b.n	8008d6c <_printf_i+0x170>
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	f023 0320 	bic.w	r3, r3, #32
 8008d9e:	6023      	str	r3, [r4, #0]
 8008da0:	e7f6      	b.n	8008d90 <_printf_i+0x194>
 8008da2:	4616      	mov	r6, r2
 8008da4:	e7bd      	b.n	8008d22 <_printf_i+0x126>
 8008da6:	6833      	ldr	r3, [r6, #0]
 8008da8:	6825      	ldr	r5, [r4, #0]
 8008daa:	1d18      	adds	r0, r3, #4
 8008dac:	6961      	ldr	r1, [r4, #20]
 8008dae:	6030      	str	r0, [r6, #0]
 8008db0:	062e      	lsls	r6, r5, #24
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	d501      	bpl.n	8008dba <_printf_i+0x1be>
 8008db6:	6019      	str	r1, [r3, #0]
 8008db8:	e002      	b.n	8008dc0 <_printf_i+0x1c4>
 8008dba:	0668      	lsls	r0, r5, #25
 8008dbc:	d5fb      	bpl.n	8008db6 <_printf_i+0x1ba>
 8008dbe:	8019      	strh	r1, [r3, #0]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	4616      	mov	r6, r2
 8008dc4:	6123      	str	r3, [r4, #16]
 8008dc6:	e7bc      	b.n	8008d42 <_printf_i+0x146>
 8008dc8:	6833      	ldr	r3, [r6, #0]
 8008dca:	2100      	movs	r1, #0
 8008dcc:	1d1a      	adds	r2, r3, #4
 8008dce:	6032      	str	r2, [r6, #0]
 8008dd0:	681e      	ldr	r6, [r3, #0]
 8008dd2:	6862      	ldr	r2, [r4, #4]
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f000 f859 	bl	8008e8c <memchr>
 8008dda:	b108      	cbz	r0, 8008de0 <_printf_i+0x1e4>
 8008ddc:	1b80      	subs	r0, r0, r6
 8008dde:	6060      	str	r0, [r4, #4]
 8008de0:	6863      	ldr	r3, [r4, #4]
 8008de2:	6123      	str	r3, [r4, #16]
 8008de4:	2300      	movs	r3, #0
 8008de6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dea:	e7aa      	b.n	8008d42 <_printf_i+0x146>
 8008dec:	4632      	mov	r2, r6
 8008dee:	4649      	mov	r1, r9
 8008df0:	4640      	mov	r0, r8
 8008df2:	6923      	ldr	r3, [r4, #16]
 8008df4:	47d0      	blx	sl
 8008df6:	3001      	adds	r0, #1
 8008df8:	d0ad      	beq.n	8008d56 <_printf_i+0x15a>
 8008dfa:	6823      	ldr	r3, [r4, #0]
 8008dfc:	079b      	lsls	r3, r3, #30
 8008dfe:	d413      	bmi.n	8008e28 <_printf_i+0x22c>
 8008e00:	68e0      	ldr	r0, [r4, #12]
 8008e02:	9b03      	ldr	r3, [sp, #12]
 8008e04:	4298      	cmp	r0, r3
 8008e06:	bfb8      	it	lt
 8008e08:	4618      	movlt	r0, r3
 8008e0a:	e7a6      	b.n	8008d5a <_printf_i+0x15e>
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	4632      	mov	r2, r6
 8008e10:	4649      	mov	r1, r9
 8008e12:	4640      	mov	r0, r8
 8008e14:	47d0      	blx	sl
 8008e16:	3001      	adds	r0, #1
 8008e18:	d09d      	beq.n	8008d56 <_printf_i+0x15a>
 8008e1a:	3501      	adds	r5, #1
 8008e1c:	68e3      	ldr	r3, [r4, #12]
 8008e1e:	9903      	ldr	r1, [sp, #12]
 8008e20:	1a5b      	subs	r3, r3, r1
 8008e22:	42ab      	cmp	r3, r5
 8008e24:	dcf2      	bgt.n	8008e0c <_printf_i+0x210>
 8008e26:	e7eb      	b.n	8008e00 <_printf_i+0x204>
 8008e28:	2500      	movs	r5, #0
 8008e2a:	f104 0619 	add.w	r6, r4, #25
 8008e2e:	e7f5      	b.n	8008e1c <_printf_i+0x220>
 8008e30:	0801d439 	.word	0x0801d439
 8008e34:	0801d44a 	.word	0x0801d44a

08008e38 <memmove>:
 8008e38:	4288      	cmp	r0, r1
 8008e3a:	b510      	push	{r4, lr}
 8008e3c:	eb01 0402 	add.w	r4, r1, r2
 8008e40:	d902      	bls.n	8008e48 <memmove+0x10>
 8008e42:	4284      	cmp	r4, r0
 8008e44:	4623      	mov	r3, r4
 8008e46:	d807      	bhi.n	8008e58 <memmove+0x20>
 8008e48:	1e43      	subs	r3, r0, #1
 8008e4a:	42a1      	cmp	r1, r4
 8008e4c:	d008      	beq.n	8008e60 <memmove+0x28>
 8008e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e56:	e7f8      	b.n	8008e4a <memmove+0x12>
 8008e58:	4601      	mov	r1, r0
 8008e5a:	4402      	add	r2, r0
 8008e5c:	428a      	cmp	r2, r1
 8008e5e:	d100      	bne.n	8008e62 <memmove+0x2a>
 8008e60:	bd10      	pop	{r4, pc}
 8008e62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e6a:	e7f7      	b.n	8008e5c <memmove+0x24>

08008e6c <_sbrk_r>:
 8008e6c:	b538      	push	{r3, r4, r5, lr}
 8008e6e:	2300      	movs	r3, #0
 8008e70:	4d05      	ldr	r5, [pc, #20]	@ (8008e88 <_sbrk_r+0x1c>)
 8008e72:	4604      	mov	r4, r0
 8008e74:	4608      	mov	r0, r1
 8008e76:	602b      	str	r3, [r5, #0]
 8008e78:	f7fa f96e 	bl	8003158 <_sbrk>
 8008e7c:	1c43      	adds	r3, r0, #1
 8008e7e:	d102      	bne.n	8008e86 <_sbrk_r+0x1a>
 8008e80:	682b      	ldr	r3, [r5, #0]
 8008e82:	b103      	cbz	r3, 8008e86 <_sbrk_r+0x1a>
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	bd38      	pop	{r3, r4, r5, pc}
 8008e88:	200063e4 	.word	0x200063e4

08008e8c <memchr>:
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	b510      	push	{r4, lr}
 8008e90:	b2c9      	uxtb	r1, r1
 8008e92:	4402      	add	r2, r0
 8008e94:	4293      	cmp	r3, r2
 8008e96:	4618      	mov	r0, r3
 8008e98:	d101      	bne.n	8008e9e <memchr+0x12>
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	e003      	b.n	8008ea6 <memchr+0x1a>
 8008e9e:	7804      	ldrb	r4, [r0, #0]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	428c      	cmp	r4, r1
 8008ea4:	d1f6      	bne.n	8008e94 <memchr+0x8>
 8008ea6:	bd10      	pop	{r4, pc}

08008ea8 <memcpy>:
 8008ea8:	440a      	add	r2, r1
 8008eaa:	4291      	cmp	r1, r2
 8008eac:	f100 33ff 	add.w	r3, r0, #4294967295
 8008eb0:	d100      	bne.n	8008eb4 <memcpy+0xc>
 8008eb2:	4770      	bx	lr
 8008eb4:	b510      	push	{r4, lr}
 8008eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eba:	4291      	cmp	r1, r2
 8008ebc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ec0:	d1f9      	bne.n	8008eb6 <memcpy+0xe>
 8008ec2:	bd10      	pop	{r4, pc}

08008ec4 <_realloc_r>:
 8008ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec8:	4607      	mov	r7, r0
 8008eca:	4614      	mov	r4, r2
 8008ecc:	460d      	mov	r5, r1
 8008ece:	b921      	cbnz	r1, 8008eda <_realloc_r+0x16>
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed6:	f7ff bc3b 	b.w	8008750 <_malloc_r>
 8008eda:	b92a      	cbnz	r2, 8008ee8 <_realloc_r+0x24>
 8008edc:	f7ff fbce 	bl	800867c <_free_r>
 8008ee0:	4625      	mov	r5, r4
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee8:	f000 f81a 	bl	8008f20 <_malloc_usable_size_r>
 8008eec:	4284      	cmp	r4, r0
 8008eee:	4606      	mov	r6, r0
 8008ef0:	d802      	bhi.n	8008ef8 <_realloc_r+0x34>
 8008ef2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ef6:	d8f4      	bhi.n	8008ee2 <_realloc_r+0x1e>
 8008ef8:	4621      	mov	r1, r4
 8008efa:	4638      	mov	r0, r7
 8008efc:	f7ff fc28 	bl	8008750 <_malloc_r>
 8008f00:	4680      	mov	r8, r0
 8008f02:	b908      	cbnz	r0, 8008f08 <_realloc_r+0x44>
 8008f04:	4645      	mov	r5, r8
 8008f06:	e7ec      	b.n	8008ee2 <_realloc_r+0x1e>
 8008f08:	42b4      	cmp	r4, r6
 8008f0a:	4622      	mov	r2, r4
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	bf28      	it	cs
 8008f10:	4632      	movcs	r2, r6
 8008f12:	f7ff ffc9 	bl	8008ea8 <memcpy>
 8008f16:	4629      	mov	r1, r5
 8008f18:	4638      	mov	r0, r7
 8008f1a:	f7ff fbaf 	bl	800867c <_free_r>
 8008f1e:	e7f1      	b.n	8008f04 <_realloc_r+0x40>

08008f20 <_malloc_usable_size_r>:
 8008f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f24:	1f18      	subs	r0, r3, #4
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bfbc      	itt	lt
 8008f2a:	580b      	ldrlt	r3, [r1, r0]
 8008f2c:	18c0      	addlt	r0, r0, r3
 8008f2e:	4770      	bx	lr

08008f30 <sqrtf>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4605      	mov	r5, r0
 8008f34:	f000 f816 	bl	8008f64 <__ieee754_sqrtf>
 8008f38:	4629      	mov	r1, r5
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f7f8 f92f 	bl	80011a0 <__aeabi_fcmpun>
 8008f42:	b968      	cbnz	r0, 8008f60 <sqrtf+0x30>
 8008f44:	2100      	movs	r1, #0
 8008f46:	4628      	mov	r0, r5
 8008f48:	f7f8 f902 	bl	8001150 <__aeabi_fcmplt>
 8008f4c:	b140      	cbz	r0, 8008f60 <sqrtf+0x30>
 8008f4e:	f7ff fb61 	bl	8008614 <__errno>
 8008f52:	2321      	movs	r3, #33	@ 0x21
 8008f54:	2100      	movs	r1, #0
 8008f56:	6003      	str	r3, [r0, #0]
 8008f58:	4608      	mov	r0, r1
 8008f5a:	f7f8 f80f 	bl	8000f7c <__aeabi_fdiv>
 8008f5e:	4604      	mov	r4, r0
 8008f60:	4620      	mov	r0, r4
 8008f62:	bd38      	pop	{r3, r4, r5, pc}

08008f64 <__ieee754_sqrtf>:
 8008f64:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8008f68:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f70:	4603      	mov	r3, r0
 8008f72:	4604      	mov	r4, r0
 8008f74:	d30a      	bcc.n	8008f8c <__ieee754_sqrtf+0x28>
 8008f76:	4601      	mov	r1, r0
 8008f78:	f7f7 ff4c 	bl	8000e14 <__aeabi_fmul>
 8008f7c:	4601      	mov	r1, r0
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f7f7 fe40 	bl	8000c04 <__addsf3>
 8008f84:	4604      	mov	r4, r0
 8008f86:	4620      	mov	r0, r4
 8008f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f8c:	2a00      	cmp	r2, #0
 8008f8e:	d0fa      	beq.n	8008f86 <__ieee754_sqrtf+0x22>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	da06      	bge.n	8008fa2 <__ieee754_sqrtf+0x3e>
 8008f94:	4601      	mov	r1, r0
 8008f96:	f7f7 fe33 	bl	8000c00 <__aeabi_fsub>
 8008f9a:	4601      	mov	r1, r0
 8008f9c:	f7f7 ffee 	bl	8000f7c <__aeabi_fdiv>
 8008fa0:	e7f0      	b.n	8008f84 <__ieee754_sqrtf+0x20>
 8008fa2:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8008fa6:	d03c      	beq.n	8009022 <__ieee754_sqrtf+0xbe>
 8008fa8:	15c2      	asrs	r2, r0, #23
 8008faa:	2400      	movs	r4, #0
 8008fac:	2019      	movs	r0, #25
 8008fae:	4626      	mov	r6, r4
 8008fb0:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8008fb4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008fb8:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8008fbc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008fc0:	07d2      	lsls	r2, r2, #31
 8008fc2:	bf58      	it	pl
 8008fc4:	005b      	lslpl	r3, r3, #1
 8008fc6:	106d      	asrs	r5, r5, #1
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	1872      	adds	r2, r6, r1
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	bfcf      	iteee	gt
 8008fd0:	461a      	movgt	r2, r3
 8008fd2:	1856      	addle	r6, r2, r1
 8008fd4:	1864      	addle	r4, r4, r1
 8008fd6:	1a9a      	suble	r2, r3, r2
 8008fd8:	3801      	subs	r0, #1
 8008fda:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8008fde:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008fe2:	d1f2      	bne.n	8008fca <__ieee754_sqrtf+0x66>
 8008fe4:	b1ba      	cbz	r2, 8009016 <__ieee754_sqrtf+0xb2>
 8008fe6:	4e15      	ldr	r6, [pc, #84]	@ (800903c <__ieee754_sqrtf+0xd8>)
 8008fe8:	4f15      	ldr	r7, [pc, #84]	@ (8009040 <__ieee754_sqrtf+0xdc>)
 8008fea:	6830      	ldr	r0, [r6, #0]
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	f7f7 fe07 	bl	8000c00 <__aeabi_fsub>
 8008ff2:	f8d6 8000 	ldr.w	r8, [r6]
 8008ff6:	4601      	mov	r1, r0
 8008ff8:	4640      	mov	r0, r8
 8008ffa:	f7f8 f8b3 	bl	8001164 <__aeabi_fcmple>
 8008ffe:	b150      	cbz	r0, 8009016 <__ieee754_sqrtf+0xb2>
 8009000:	6830      	ldr	r0, [r6, #0]
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	f7f7 fdfe 	bl	8000c04 <__addsf3>
 8009008:	6836      	ldr	r6, [r6, #0]
 800900a:	4601      	mov	r1, r0
 800900c:	4630      	mov	r0, r6
 800900e:	f7f8 f89f 	bl	8001150 <__aeabi_fcmplt>
 8009012:	b170      	cbz	r0, 8009032 <__ieee754_sqrtf+0xce>
 8009014:	3402      	adds	r4, #2
 8009016:	1064      	asrs	r4, r4, #1
 8009018:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800901c:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8009020:	e7b1      	b.n	8008f86 <__ieee754_sqrtf+0x22>
 8009022:	005b      	lsls	r3, r3, #1
 8009024:	0218      	lsls	r0, r3, #8
 8009026:	460a      	mov	r2, r1
 8009028:	f101 0101 	add.w	r1, r1, #1
 800902c:	d5f9      	bpl.n	8009022 <__ieee754_sqrtf+0xbe>
 800902e:	4252      	negs	r2, r2
 8009030:	e7bb      	b.n	8008faa <__ieee754_sqrtf+0x46>
 8009032:	3401      	adds	r4, #1
 8009034:	f024 0401 	bic.w	r4, r4, #1
 8009038:	e7ed      	b.n	8009016 <__ieee754_sqrtf+0xb2>
 800903a:	bf00      	nop
 800903c:	0801d460 	.word	0x0801d460
 8009040:	0801d45c 	.word	0x0801d45c

08009044 <_init>:
 8009044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009046:	bf00      	nop
 8009048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904a:	bc08      	pop	{r3}
 800904c:	469e      	mov	lr, r3
 800904e:	4770      	bx	lr

08009050 <_fini>:
 8009050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009052:	bf00      	nop
 8009054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009056:	bc08      	pop	{r3}
 8009058:	469e      	mov	lr, r3
 800905a:	4770      	bx	lr
