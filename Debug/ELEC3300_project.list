
ELEC3300_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a400  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014460  0800a5e8  0800a5e8  0000b5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ea48  0801ea48  00022128  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801ea48  0801ea48  0001fa48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ea50  0801ea50  00022128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ea50  0801ea50  0001fa50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ea54  0801ea54  0001fa54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002128  20000000  0801ea58  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004334  20002128  08020b80  00022128  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000645c  08020b80  0002245c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00022128  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107cc  00000000  00000000  00022151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f14  00000000  00000000  0003291d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00035838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b67  00000000  00000000  000367e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b59d  00000000  00000000  0003734f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a70  00000000  00000000  000528ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a189d  00000000  00000000  0006635c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00107bf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004830  00000000  00000000  00107cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0010c4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000037ff  00000000  00000000  0010c548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000070  00000000  00000000  0010fd47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20002128 	.word	0x20002128
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a5d0 	.word	0x0800a5d0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000212c 	.word	0x2000212c
 8000224:	0800a5d0 	.word	0x0800a5d0

08000228 <arm_bitreversal_32>:
 8000228:	1c4b      	adds	r3, r1, #1
 800022a:	2b01      	cmp	r3, #1
 800022c:	bf98      	it	ls
 800022e:	4770      	bxls	lr
 8000230:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000234:	1c91      	adds	r1, r2, #2
 8000236:	089b      	lsrs	r3, r3, #2

08000238 <arm_bitreversal_32_0>:
 8000238:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800023c:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000240:	880a      	ldrh	r2, [r1, #0]
 8000242:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000246:	4480      	add	r8, r0
 8000248:	4481      	add	r9, r0
 800024a:	4402      	add	r2, r0
 800024c:	4484      	add	ip, r0
 800024e:	f8d9 7000 	ldr.w	r7, [r9]
 8000252:	f8d8 6000 	ldr.w	r6, [r8]
 8000256:	6815      	ldr	r5, [r2, #0]
 8000258:	f8dc 4000 	ldr.w	r4, [ip]
 800025c:	f8c9 6000 	str.w	r6, [r9]
 8000260:	f8c8 7000 	str.w	r7, [r8]
 8000264:	f8cc 5000 	str.w	r5, [ip]
 8000268:	6014      	str	r4, [r2, #0]
 800026a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800026e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000272:	6855      	ldr	r5, [r2, #4]
 8000274:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000278:	f8c9 6004 	str.w	r6, [r9, #4]
 800027c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000280:	f8cc 5004 	str.w	r5, [ip, #4]
 8000284:	6054      	str	r4, [r2, #4]
 8000286:	3108      	adds	r1, #8
 8000288:	3b01      	subs	r3, #1
 800028a:	d1d5      	bne.n	8000238 <arm_bitreversal_32_0>
 800028c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000290:	4770      	bx	lr

08000292 <arm_bitreversal_16>:
 8000292:	1c4b      	adds	r3, r1, #1
 8000294:	2b01      	cmp	r3, #1
 8000296:	bf98      	it	ls
 8000298:	4770      	bxls	lr
 800029a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	1c91      	adds	r1, r2, #2
 80002a0:	089b      	lsrs	r3, r3, #2

080002a2 <arm_bitreversal_16_0>:
 80002a2:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002a6:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002aa:	880a      	ldrh	r2, [r1, #0]
 80002ac:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002b0:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002b4:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002b8:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002bc:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002c0:	f8d9 7000 	ldr.w	r7, [r9]
 80002c4:	f8d8 6000 	ldr.w	r6, [r8]
 80002c8:	6815      	ldr	r5, [r2, #0]
 80002ca:	f8dc 4000 	ldr.w	r4, [ip]
 80002ce:	f8c9 6000 	str.w	r6, [r9]
 80002d2:	f8c8 7000 	str.w	r7, [r8]
 80002d6:	f8cc 5000 	str.w	r5, [ip]
 80002da:	6014      	str	r4, [r2, #0]
 80002dc:	3108      	adds	r1, #8
 80002de:	3b01      	subs	r3, #1
 80002e0:	d1df      	bne.n	80002a2 <arm_bitreversal_16_0>
 80002e2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002e6:	4770      	bx	lr

080002e8 <strcmp>:
 80002e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f0:	2a01      	cmp	r2, #1
 80002f2:	bf28      	it	cs
 80002f4:	429a      	cmpcs	r2, r3
 80002f6:	d0f7      	beq.n	80002e8 <strcmp>
 80002f8:	1ad0      	subs	r0, r2, r3
 80002fa:	4770      	bx	lr

080002fc <strlen>:
 80002fc:	4603      	mov	r3, r0
 80002fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000302:	2a00      	cmp	r2, #0
 8000304:	d1fb      	bne.n	80002fe <strlen+0x2>
 8000306:	1a18      	subs	r0, r3, r0
 8000308:	3801      	subs	r0, #1
 800030a:	4770      	bx	lr

0800030c <__aeabi_drsub>:
 800030c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000310:	e002      	b.n	8000318 <__adddf3>
 8000312:	bf00      	nop

08000314 <__aeabi_dsub>:
 8000314:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000318 <__adddf3>:
 8000318:	b530      	push	{r4, r5, lr}
 800031a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800031e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000322:	ea94 0f05 	teq	r4, r5
 8000326:	bf08      	it	eq
 8000328:	ea90 0f02 	teqeq	r0, r2
 800032c:	bf1f      	itttt	ne
 800032e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000332:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000336:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800033e:	f000 80e2 	beq.w	8000506 <__adddf3+0x1ee>
 8000342:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000346:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034a:	bfb8      	it	lt
 800034c:	426d      	neglt	r5, r5
 800034e:	dd0c      	ble.n	800036a <__adddf3+0x52>
 8000350:	442c      	add	r4, r5
 8000352:	ea80 0202 	eor.w	r2, r0, r2
 8000356:	ea81 0303 	eor.w	r3, r1, r3
 800035a:	ea82 0000 	eor.w	r0, r2, r0
 800035e:	ea83 0101 	eor.w	r1, r3, r1
 8000362:	ea80 0202 	eor.w	r2, r0, r2
 8000366:	ea81 0303 	eor.w	r3, r1, r3
 800036a:	2d36      	cmp	r5, #54	@ 0x36
 800036c:	bf88      	it	hi
 800036e:	bd30      	pophi	{r4, r5, pc}
 8000370:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000374:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000378:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800037c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000380:	d002      	beq.n	8000388 <__adddf3+0x70>
 8000382:	4240      	negs	r0, r0
 8000384:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000388:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800038c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000390:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x84>
 8000396:	4252      	negs	r2, r2
 8000398:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039c:	ea94 0f05 	teq	r4, r5
 80003a0:	f000 80a7 	beq.w	80004f2 <__adddf3+0x1da>
 80003a4:	f1a4 0401 	sub.w	r4, r4, #1
 80003a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80003ac:	db0d      	blt.n	80003ca <__adddf3+0xb2>
 80003ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b2:	fa22 f205 	lsr.w	r2, r2, r5
 80003b6:	1880      	adds	r0, r0, r2
 80003b8:	f141 0100 	adc.w	r1, r1, #0
 80003bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c0:	1880      	adds	r0, r0, r2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	4159      	adcs	r1, r3
 80003c8:	e00e      	b.n	80003e8 <__adddf3+0xd0>
 80003ca:	f1a5 0520 	sub.w	r5, r5, #32
 80003ce:	f10e 0e20 	add.w	lr, lr, #32
 80003d2:	2a01      	cmp	r2, #1
 80003d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003d8:	bf28      	it	cs
 80003da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003de:	fa43 f305 	asr.w	r3, r3, r5
 80003e2:	18c0      	adds	r0, r0, r3
 80003e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ec:	d507      	bpl.n	80003fe <__adddf3+0xe6>
 80003ee:	f04f 0e00 	mov.w	lr, #0
 80003f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80003fe:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000402:	d31b      	bcc.n	800043c <__adddf3+0x124>
 8000404:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000408:	d30c      	bcc.n	8000424 <__adddf3+0x10c>
 800040a:	0849      	lsrs	r1, r1, #1
 800040c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000410:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000414:	f104 0401 	add.w	r4, r4, #1
 8000418:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800041c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000420:	f080 809a 	bcs.w	8000558 <__adddf3+0x240>
 8000424:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000428:	bf08      	it	eq
 800042a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800042e:	f150 0000 	adcs.w	r0, r0, #0
 8000432:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000436:	ea41 0105 	orr.w	r1, r1, r5
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000440:	4140      	adcs	r0, r0
 8000442:	eb41 0101 	adc.w	r1, r1, r1
 8000446:	3c01      	subs	r4, #1
 8000448:	bf28      	it	cs
 800044a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800044e:	d2e9      	bcs.n	8000424 <__adddf3+0x10c>
 8000450:	f091 0f00 	teq	r1, #0
 8000454:	bf04      	itt	eq
 8000456:	4601      	moveq	r1, r0
 8000458:	2000      	moveq	r0, #0
 800045a:	fab1 f381 	clz	r3, r1
 800045e:	bf08      	it	eq
 8000460:	3320      	addeq	r3, #32
 8000462:	f1a3 030b 	sub.w	r3, r3, #11
 8000466:	f1b3 0220 	subs.w	r2, r3, #32
 800046a:	da0c      	bge.n	8000486 <__adddf3+0x16e>
 800046c:	320c      	adds	r2, #12
 800046e:	dd08      	ble.n	8000482 <__adddf3+0x16a>
 8000470:	f102 0c14 	add.w	ip, r2, #20
 8000474:	f1c2 020c 	rsb	r2, r2, #12
 8000478:	fa01 f00c 	lsl.w	r0, r1, ip
 800047c:	fa21 f102 	lsr.w	r1, r1, r2
 8000480:	e00c      	b.n	800049c <__adddf3+0x184>
 8000482:	f102 0214 	add.w	r2, r2, #20
 8000486:	bfd8      	it	le
 8000488:	f1c2 0c20 	rsble	ip, r2, #32
 800048c:	fa01 f102 	lsl.w	r1, r1, r2
 8000490:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000494:	bfdc      	itt	le
 8000496:	ea41 010c 	orrle.w	r1, r1, ip
 800049a:	4090      	lslle	r0, r2
 800049c:	1ae4      	subs	r4, r4, r3
 800049e:	bfa2      	ittt	ge
 80004a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a4:	4329      	orrge	r1, r5
 80004a6:	bd30      	popge	{r4, r5, pc}
 80004a8:	ea6f 0404 	mvn.w	r4, r4
 80004ac:	3c1f      	subs	r4, #31
 80004ae:	da1c      	bge.n	80004ea <__adddf3+0x1d2>
 80004b0:	340c      	adds	r4, #12
 80004b2:	dc0e      	bgt.n	80004d2 <__adddf3+0x1ba>
 80004b4:	f104 0414 	add.w	r4, r4, #20
 80004b8:	f1c4 0220 	rsb	r2, r4, #32
 80004bc:	fa20 f004 	lsr.w	r0, r0, r4
 80004c0:	fa01 f302 	lsl.w	r3, r1, r2
 80004c4:	ea40 0003 	orr.w	r0, r0, r3
 80004c8:	fa21 f304 	lsr.w	r3, r1, r4
 80004cc:	ea45 0103 	orr.w	r1, r5, r3
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	f1c4 040c 	rsb	r4, r4, #12
 80004d6:	f1c4 0220 	rsb	r2, r4, #32
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 f304 	lsl.w	r3, r1, r4
 80004e2:	ea40 0003 	orr.w	r0, r0, r3
 80004e6:	4629      	mov	r1, r5
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	fa21 f004 	lsr.w	r0, r1, r4
 80004ee:	4629      	mov	r1, r5
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	f094 0f00 	teq	r4, #0
 80004f6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004fa:	bf06      	itte	eq
 80004fc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000500:	3401      	addeq	r4, #1
 8000502:	3d01      	subne	r5, #1
 8000504:	e74e      	b.n	80003a4 <__adddf3+0x8c>
 8000506:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050a:	bf18      	it	ne
 800050c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000510:	d029      	beq.n	8000566 <__adddf3+0x24e>
 8000512:	ea94 0f05 	teq	r4, r5
 8000516:	bf08      	it	eq
 8000518:	ea90 0f02 	teqeq	r0, r2
 800051c:	d005      	beq.n	800052a <__adddf3+0x212>
 800051e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000522:	bf04      	itt	eq
 8000524:	4619      	moveq	r1, r3
 8000526:	4610      	moveq	r0, r2
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea91 0f03 	teq	r1, r3
 800052e:	bf1e      	ittt	ne
 8000530:	2100      	movne	r1, #0
 8000532:	2000      	movne	r0, #0
 8000534:	bd30      	popne	{r4, r5, pc}
 8000536:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053a:	d105      	bne.n	8000548 <__adddf3+0x230>
 800053c:	0040      	lsls	r0, r0, #1
 800053e:	4149      	adcs	r1, r1
 8000540:	bf28      	it	cs
 8000542:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000546:	bd30      	pop	{r4, r5, pc}
 8000548:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800054c:	bf3c      	itt	cc
 800054e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000552:	bd30      	popcc	{r4, r5, pc}
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000558:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800055c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000560:	f04f 0000 	mov.w	r0, #0
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056a:	bf1a      	itte	ne
 800056c:	4619      	movne	r1, r3
 800056e:	4610      	movne	r0, r2
 8000570:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000574:	bf1c      	itt	ne
 8000576:	460b      	movne	r3, r1
 8000578:	4602      	movne	r2, r0
 800057a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800057e:	bf06      	itte	eq
 8000580:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000584:	ea91 0f03 	teqeq	r1, r3
 8000588:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	bf00      	nop

08000590 <__aeabi_ui2d>:
 8000590:	f090 0f00 	teq	r0, #0
 8000594:	bf04      	itt	eq
 8000596:	2100      	moveq	r1, #0
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a4:	f04f 0500 	mov.w	r5, #0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e750      	b.n	8000450 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_i2d>:
 80005b0:	f090 0f00 	teq	r0, #0
 80005b4:	bf04      	itt	eq
 80005b6:	2100      	moveq	r1, #0
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005c8:	bf48      	it	mi
 80005ca:	4240      	negmi	r0, r0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e73e      	b.n	8000450 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_f2d>:
 80005d4:	0042      	lsls	r2, r0, #1
 80005d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005da:	ea4f 0131 	mov.w	r1, r1, rrx
 80005de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e2:	bf1f      	itttt	ne
 80005e4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005e8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005ec:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005f0:	4770      	bxne	lr
 80005f2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005f6:	bf08      	it	eq
 80005f8:	4770      	bxeq	lr
 80005fa:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005fe:	bf04      	itt	eq
 8000600:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000604:	4770      	bxeq	lr
 8000606:	b530      	push	{r4, r5, lr}
 8000608:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800060c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	e71c      	b.n	8000450 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_ul2d>:
 8000618:	ea50 0201 	orrs.w	r2, r0, r1
 800061c:	bf08      	it	eq
 800061e:	4770      	bxeq	lr
 8000620:	b530      	push	{r4, r5, lr}
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	e00a      	b.n	800063e <__aeabi_l2d+0x16>

08000628 <__aeabi_l2d>:
 8000628:	ea50 0201 	orrs.w	r2, r0, r1
 800062c:	bf08      	it	eq
 800062e:	4770      	bxeq	lr
 8000630:	b530      	push	{r4, r5, lr}
 8000632:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000636:	d502      	bpl.n	800063e <__aeabi_l2d+0x16>
 8000638:	4240      	negs	r0, r0
 800063a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800063e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000642:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000646:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064a:	f43f aed8 	beq.w	80003fe <__adddf3+0xe6>
 800064e:	f04f 0203 	mov.w	r2, #3
 8000652:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000656:	bf18      	it	ne
 8000658:	3203      	addne	r2, #3
 800065a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065e:	bf18      	it	ne
 8000660:	3203      	addne	r2, #3
 8000662:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000666:	f1c2 0320 	rsb	r3, r2, #32
 800066a:	fa00 fc03 	lsl.w	ip, r0, r3
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	fa01 fe03 	lsl.w	lr, r1, r3
 8000676:	ea40 000e 	orr.w	r0, r0, lr
 800067a:	fa21 f102 	lsr.w	r1, r1, r2
 800067e:	4414      	add	r4, r2
 8000680:	e6bd      	b.n	80003fe <__adddf3+0xe6>
 8000682:	bf00      	nop

08000684 <__aeabi_dmul>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800068a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800068e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000692:	bf1d      	ittte	ne
 8000694:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000698:	ea94 0f0c 	teqne	r4, ip
 800069c:	ea95 0f0c 	teqne	r5, ip
 80006a0:	f000 f8de 	bleq	8000860 <__aeabi_dmul+0x1dc>
 80006a4:	442c      	add	r4, r5
 80006a6:	ea81 0603 	eor.w	r6, r1, r3
 80006aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006b6:	bf18      	it	ne
 80006b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006c4:	d038      	beq.n	8000738 <__aeabi_dmul+0xb4>
 80006c6:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006d2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006d6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006da:	f04f 0600 	mov.w	r6, #0
 80006de:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006e2:	f09c 0f00 	teq	ip, #0
 80006e6:	bf18      	it	ne
 80006e8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006ec:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006f0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006f4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006f8:	d204      	bcs.n	8000704 <__aeabi_dmul+0x80>
 80006fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006fe:	416d      	adcs	r5, r5
 8000700:	eb46 0606 	adc.w	r6, r6, r6
 8000704:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000708:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800070c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000710:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000714:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000718:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800071c:	bf88      	it	hi
 800071e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000722:	d81e      	bhi.n	8000762 <__aeabi_dmul+0xde>
 8000724:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000728:	bf08      	it	eq
 800072a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800072e:	f150 0000 	adcs.w	r0, r0, #0
 8000732:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800073c:	ea46 0101 	orr.w	r1, r6, r1
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800074c:	bfc2      	ittt	gt
 800074e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000752:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000756:	bd70      	popgt	{r4, r5, r6, pc}
 8000758:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800075c:	f04f 0e00 	mov.w	lr, #0
 8000760:	3c01      	subs	r4, #1
 8000762:	f300 80ab 	bgt.w	80008bc <__aeabi_dmul+0x238>
 8000766:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800076a:	bfde      	ittt	le
 800076c:	2000      	movle	r0, #0
 800076e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000772:	bd70      	pople	{r4, r5, r6, pc}
 8000774:	f1c4 0400 	rsb	r4, r4, #0
 8000778:	3c20      	subs	r4, #32
 800077a:	da35      	bge.n	80007e8 <__aeabi_dmul+0x164>
 800077c:	340c      	adds	r4, #12
 800077e:	dc1b      	bgt.n	80007b8 <__aeabi_dmul+0x134>
 8000780:	f104 0414 	add.w	r4, r4, #20
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f305 	lsl.w	r3, r0, r5
 800078c:	fa20 f004 	lsr.w	r0, r0, r4
 8000790:	fa01 f205 	lsl.w	r2, r1, r5
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800079c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	fa21 f604 	lsr.w	r6, r1, r4
 80007a8:	eb42 0106 	adc.w	r1, r2, r6
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f1c4 040c 	rsb	r4, r4, #12
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f304 	lsl.w	r3, r0, r4
 80007c4:	fa20 f005 	lsr.w	r0, r0, r5
 80007c8:	fa01 f204 	lsl.w	r2, r1, r4
 80007cc:	ea40 0002 	orr.w	r0, r0, r2
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	f141 0100 	adc.w	r1, r1, #0
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f205 	lsl.w	r2, r0, r5
 80007f0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007f4:	fa20 f304 	lsr.w	r3, r0, r4
 80007f8:	fa01 f205 	lsl.w	r2, r1, r5
 80007fc:	ea43 0302 	orr.w	r3, r3, r2
 8000800:	fa21 f004 	lsr.w	r0, r1, r4
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	fa21 f204 	lsr.w	r2, r1, r4
 800080c:	ea20 0002 	bic.w	r0, r0, r2
 8000810:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000814:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000818:	bf08      	it	eq
 800081a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	f094 0f00 	teq	r4, #0
 8000824:	d10f      	bne.n	8000846 <__aeabi_dmul+0x1c2>
 8000826:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800082a:	0040      	lsls	r0, r0, #1
 800082c:	eb41 0101 	adc.w	r1, r1, r1
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf08      	it	eq
 8000836:	3c01      	subeq	r4, #1
 8000838:	d0f7      	beq.n	800082a <__aeabi_dmul+0x1a6>
 800083a:	ea41 0106 	orr.w	r1, r1, r6
 800083e:	f095 0f00 	teq	r5, #0
 8000842:	bf18      	it	ne
 8000844:	4770      	bxne	lr
 8000846:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800084a:	0052      	lsls	r2, r2, #1
 800084c:	eb43 0303 	adc.w	r3, r3, r3
 8000850:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000854:	bf08      	it	eq
 8000856:	3d01      	subeq	r5, #1
 8000858:	d0f7      	beq.n	800084a <__aeabi_dmul+0x1c6>
 800085a:	ea43 0306 	orr.w	r3, r3, r6
 800085e:	4770      	bx	lr
 8000860:	ea94 0f0c 	teq	r4, ip
 8000864:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000868:	bf18      	it	ne
 800086a:	ea95 0f0c 	teqne	r5, ip
 800086e:	d00c      	beq.n	800088a <__aeabi_dmul+0x206>
 8000870:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000874:	bf18      	it	ne
 8000876:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087a:	d1d1      	bne.n	8000820 <__aeabi_dmul+0x19c>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800088e:	bf06      	itte	eq
 8000890:	4610      	moveq	r0, r2
 8000892:	4619      	moveq	r1, r3
 8000894:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000898:	d019      	beq.n	80008ce <__aeabi_dmul+0x24a>
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	d102      	bne.n	80008a6 <__aeabi_dmul+0x222>
 80008a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008a4:	d113      	bne.n	80008ce <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	d105      	bne.n	80008b8 <__aeabi_dmul+0x234>
 80008ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008b0:	bf1c      	itt	ne
 80008b2:	4610      	movne	r0, r2
 80008b4:	4619      	movne	r1, r3
 80008b6:	d10a      	bne.n	80008ce <__aeabi_dmul+0x24a>
 80008b8:	ea81 0103 	eor.w	r1, r1, r3
 80008bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008c0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008c8:	f04f 0000 	mov.w	r0, #0
 80008cc:	bd70      	pop	{r4, r5, r6, pc}
 80008ce:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008d2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008d6:	bd70      	pop	{r4, r5, r6, pc}

080008d8 <__aeabi_ddiv>:
 80008d8:	b570      	push	{r4, r5, r6, lr}
 80008da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008e6:	bf1d      	ittte	ne
 80008e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008ec:	ea94 0f0c 	teqne	r4, ip
 80008f0:	ea95 0f0c 	teqne	r5, ip
 80008f4:	f000 f8a7 	bleq	8000a46 <__aeabi_ddiv+0x16e>
 80008f8:	eba4 0405 	sub.w	r4, r4, r5
 80008fc:	ea81 0e03 	eor.w	lr, r1, r3
 8000900:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000904:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000908:	f000 8088 	beq.w	8000a1c <__aeabi_ddiv+0x144>
 800090c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000910:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000914:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000918:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800091c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000920:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000924:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000928:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800092c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000930:	429d      	cmp	r5, r3
 8000932:	bf08      	it	eq
 8000934:	4296      	cmpeq	r6, r2
 8000936:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800093a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800093e:	d202      	bcs.n	8000946 <__aeabi_ddiv+0x6e>
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	1ab6      	subs	r6, r6, r2
 8000948:	eb65 0503 	sbc.w	r5, r5, r3
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000956:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 000c 	orrcs.w	r0, r0, ip
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	ea4f 0232 	mov.w	r2, r2, rrx
 800098a:	ebb6 0e02 	subs.w	lr, r6, r2
 800098e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000992:	bf22      	ittt	cs
 8000994:	1ab6      	subcs	r6, r6, r2
 8000996:	4675      	movcs	r5, lr
 8000998:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800099c:	085b      	lsrs	r3, r3, #1
 800099e:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009aa:	bf22      	ittt	cs
 80009ac:	1ab6      	subcs	r6, r6, r2
 80009ae:	4675      	movcs	r5, lr
 80009b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009b4:	ea55 0e06 	orrs.w	lr, r5, r6
 80009b8:	d018      	beq.n	80009ec <__aeabi_ddiv+0x114>
 80009ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009d6:	d1c0      	bne.n	800095a <__aeabi_ddiv+0x82>
 80009d8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009dc:	d10b      	bne.n	80009f6 <__aeabi_ddiv+0x11e>
 80009de:	ea41 0100 	orr.w	r1, r1, r0
 80009e2:	f04f 0000 	mov.w	r0, #0
 80009e6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ea:	e7b6      	b.n	800095a <__aeabi_ddiv+0x82>
 80009ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009f0:	bf04      	itt	eq
 80009f2:	4301      	orreq	r1, r0
 80009f4:	2000      	moveq	r0, #0
 80009f6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009fa:	bf88      	it	hi
 80009fc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a00:	f63f aeaf 	bhi.w	8000762 <__aeabi_dmul+0xde>
 8000a04:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a08:	bf04      	itt	eq
 8000a0a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a12:	f150 0000 	adcs.w	r0, r0, #0
 8000a16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a28:	bfc2      	ittt	gt
 8000a2a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a32:	bd70      	popgt	{r4, r5, r6, pc}
 8000a34:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a38:	f04f 0e00 	mov.w	lr, #0
 8000a3c:	3c01      	subs	r4, #1
 8000a3e:	e690      	b.n	8000762 <__aeabi_dmul+0xde>
 8000a40:	ea45 0e06 	orr.w	lr, r5, r6
 8000a44:	e68d      	b.n	8000762 <__aeabi_dmul+0xde>
 8000a46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a4a:	ea94 0f0c 	teq	r4, ip
 8000a4e:	bf08      	it	eq
 8000a50:	ea95 0f0c 	teqeq	r5, ip
 8000a54:	f43f af3b 	beq.w	80008ce <__aeabi_dmul+0x24a>
 8000a58:	ea94 0f0c 	teq	r4, ip
 8000a5c:	d10a      	bne.n	8000a74 <__aeabi_ddiv+0x19c>
 8000a5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a62:	f47f af34 	bne.w	80008ce <__aeabi_dmul+0x24a>
 8000a66:	ea95 0f0c 	teq	r5, ip
 8000a6a:	f47f af25 	bne.w	80008b8 <__aeabi_dmul+0x234>
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4619      	mov	r1, r3
 8000a72:	e72c      	b.n	80008ce <__aeabi_dmul+0x24a>
 8000a74:	ea95 0f0c 	teq	r5, ip
 8000a78:	d106      	bne.n	8000a88 <__aeabi_ddiv+0x1b0>
 8000a7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a7e:	f43f aefd 	beq.w	800087c <__aeabi_dmul+0x1f8>
 8000a82:	4610      	mov	r0, r2
 8000a84:	4619      	mov	r1, r3
 8000a86:	e722      	b.n	80008ce <__aeabi_dmul+0x24a>
 8000a88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a8c:	bf18      	it	ne
 8000a8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a92:	f47f aec5 	bne.w	8000820 <__aeabi_dmul+0x19c>
 8000a96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a9a:	f47f af0d 	bne.w	80008b8 <__aeabi_dmul+0x234>
 8000a9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000aa2:	f47f aeeb 	bne.w	800087c <__aeabi_dmul+0x1f8>
 8000aa6:	e712      	b.n	80008ce <__aeabi_dmul+0x24a>

08000aa8 <__gedf2>:
 8000aa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000aac:	e006      	b.n	8000abc <__cmpdf2+0x4>
 8000aae:	bf00      	nop

08000ab0 <__ledf2>:
 8000ab0:	f04f 0c01 	mov.w	ip, #1
 8000ab4:	e002      	b.n	8000abc <__cmpdf2+0x4>
 8000ab6:	bf00      	nop

08000ab8 <__cmpdf2>:
 8000ab8:	f04f 0c01 	mov.w	ip, #1
 8000abc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ad2:	d01b      	beq.n	8000b0c <__cmpdf2+0x54>
 8000ad4:	b001      	add	sp, #4
 8000ad6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ada:	bf0c      	ite	eq
 8000adc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ae0:	ea91 0f03 	teqne	r1, r3
 8000ae4:	bf02      	ittt	eq
 8000ae6:	ea90 0f02 	teqeq	r0, r2
 8000aea:	2000      	moveq	r0, #0
 8000aec:	4770      	bxeq	lr
 8000aee:	f110 0f00 	cmn.w	r0, #0
 8000af2:	ea91 0f03 	teq	r1, r3
 8000af6:	bf58      	it	pl
 8000af8:	4299      	cmppl	r1, r3
 8000afa:	bf08      	it	eq
 8000afc:	4290      	cmpeq	r0, r2
 8000afe:	bf2c      	ite	cs
 8000b00:	17d8      	asrcs	r0, r3, #31
 8000b02:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b06:	f040 0001 	orr.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__cmpdf2+0x64>
 8000b16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1a:	d107      	bne.n	8000b2c <__cmpdf2+0x74>
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d1d6      	bne.n	8000ad4 <__cmpdf2+0x1c>
 8000b26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2a:	d0d3      	beq.n	8000ad4 <__cmpdf2+0x1c>
 8000b2c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_cdrcmple>:
 8000b34:	4684      	mov	ip, r0
 8000b36:	4610      	mov	r0, r2
 8000b38:	4662      	mov	r2, ip
 8000b3a:	468c      	mov	ip, r1
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4663      	mov	r3, ip
 8000b40:	e000      	b.n	8000b44 <__aeabi_cdcmpeq>
 8000b42:	bf00      	nop

08000b44 <__aeabi_cdcmpeq>:
 8000b44:	b501      	push	{r0, lr}
 8000b46:	f7ff ffb7 	bl	8000ab8 <__cmpdf2>
 8000b4a:	2800      	cmp	r0, #0
 8000b4c:	bf48      	it	mi
 8000b4e:	f110 0f00 	cmnmi.w	r0, #0
 8000b52:	bd01      	pop	{r0, pc}

08000b54 <__aeabi_dcmpeq>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff fff4 	bl	8000b44 <__aeabi_cdcmpeq>
 8000b5c:	bf0c      	ite	eq
 8000b5e:	2001      	moveq	r0, #1
 8000b60:	2000      	movne	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmplt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffea 	bl	8000b44 <__aeabi_cdcmpeq>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmple>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffe0 	bl	8000b44 <__aeabi_cdcmpeq>
 8000b84:	bf94      	ite	ls
 8000b86:	2001      	movls	r0, #1
 8000b88:	2000      	movhi	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmpge>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffce 	bl	8000b34 <__aeabi_cdrcmple>
 8000b98:	bf94      	ite	ls
 8000b9a:	2001      	movls	r0, #1
 8000b9c:	2000      	movhi	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_dcmpgt>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff ffc4 	bl	8000b34 <__aeabi_cdrcmple>
 8000bac:	bf34      	ite	cc
 8000bae:	2001      	movcc	r0, #1
 8000bb0:	2000      	movcs	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	@ 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_fmul>:
 8000e14:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e1c:	bf1e      	ittt	ne
 8000e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e22:	ea92 0f0c 	teqne	r2, ip
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d06f      	beq.n	8000f0c <__aeabi_fmul+0xf8>
 8000e2c:	441a      	add	r2, r3
 8000e2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e32:	0240      	lsls	r0, r0, #9
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e3a:	d01e      	beq.n	8000e7a <__aeabi_fmul+0x66>
 8000e3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e48:	fba0 3101 	umull	r3, r1, r0, r1
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e50:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e54:	bf3e      	ittt	cc
 8000e56:	0049      	lslcc	r1, r1, #1
 8000e58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	ea40 0001 	orr.w	r0, r0, r1
 8000e62:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e66:	2afd      	cmp	r2, #253	@ 0xfd
 8000e68:	d81d      	bhi.n	8000ea6 <__aeabi_fmul+0x92>
 8000e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e72:	bf08      	it	eq
 8000e74:	f020 0001 	biceq.w	r0, r0, #1
 8000e78:	4770      	bx	lr
 8000e7a:	f090 0f00 	teq	r0, #0
 8000e7e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e82:	bf08      	it	eq
 8000e84:	0249      	lsleq	r1, r1, #9
 8000e86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e90:	bfc2      	ittt	gt
 8000e92:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9a:	4770      	bxgt	lr
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	dc5d      	bgt.n	8000f64 <__aeabi_fmul+0x150>
 8000ea8:	f112 0f19 	cmn.w	r2, #25
 8000eac:	bfdc      	itt	le
 8000eae:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000eb2:	4770      	bxle	lr
 8000eb4:	f1c2 0200 	rsb	r2, r2, #0
 8000eb8:	0041      	lsls	r1, r0, #1
 8000eba:	fa21 f102 	lsr.w	r1, r1, r2
 8000ebe:	f1c2 0220 	rsb	r2, r2, #32
 8000ec2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eca:	f140 0000 	adc.w	r0, r0, #0
 8000ece:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ed2:	bf08      	it	eq
 8000ed4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed8:	4770      	bx	lr
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xce>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fmul+0xe6>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e78f      	b.n	8000e2c <__aeabi_fmul+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	bf18      	it	ne
 8000f16:	ea93 0f0c 	teqne	r3, ip
 8000f1a:	d00a      	beq.n	8000f32 <__aeabi_fmul+0x11e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	d1d8      	bne.n	8000eda <__aeabi_fmul+0xc6>
 8000f28:	ea80 0001 	eor.w	r0, r0, r1
 8000f2c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f090 0f00 	teq	r0, #0
 8000f36:	bf17      	itett	ne
 8000f38:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f3c:	4608      	moveq	r0, r1
 8000f3e:	f091 0f00 	teqne	r1, #0
 8000f42:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f46:	d014      	beq.n	8000f72 <__aeabi_fmul+0x15e>
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_fmul+0x13e>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	d10f      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f52:	ea93 0f0c 	teq	r3, ip
 8000f56:	d103      	bne.n	8000f60 <__aeabi_fmul+0x14c>
 8000f58:	024b      	lsls	r3, r1, #9
 8000f5a:	bf18      	it	ne
 8000f5c:	4608      	movne	r0, r1
 8000f5e:	d108      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f60:	ea80 0001 	eor.w	r0, r0, r1
 8000f64:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f70:	4770      	bx	lr
 8000f72:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f76:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f7a:	4770      	bx	lr

08000f7c <__aeabi_fdiv>:
 8000f7c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f84:	bf1e      	ittt	ne
 8000f86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f8a:	ea92 0f0c 	teqne	r2, ip
 8000f8e:	ea93 0f0c 	teqne	r3, ip
 8000f92:	d069      	beq.n	8001068 <__aeabi_fdiv+0xec>
 8000f94:	eba2 0203 	sub.w	r2, r2, r3
 8000f98:	ea80 0c01 	eor.w	ip, r0, r1
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fa2:	d037      	beq.n	8001014 <__aeabi_fdiv+0x98>
 8000fa4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	bf38      	it	cc
 8000fb8:	005b      	lslcc	r3, r3, #1
 8000fba:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000fbe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	bf24      	itt	cs
 8000fc6:	1a5b      	subcs	r3, r3, r1
 8000fc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd0:	bf24      	itt	cs
 8000fd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fde:	bf24      	itt	cs
 8000fe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fec:	bf24      	itt	cs
 8000fee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ff2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	bf18      	it	ne
 8000ffa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffe:	d1e0      	bne.n	8000fc2 <__aeabi_fdiv+0x46>
 8001000:	2afd      	cmp	r2, #253	@ 0xfd
 8001002:	f63f af50 	bhi.w	8000ea6 <__aeabi_fmul+0x92>
 8001006:	428b      	cmp	r3, r1
 8001008:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800100c:	bf08      	it	eq
 800100e:	f020 0001 	biceq.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001018:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800101c:	327f      	adds	r2, #127	@ 0x7f
 800101e:	bfc2      	ittt	gt
 8001020:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001024:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001028:	4770      	bxgt	lr
 800102a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	3a01      	subs	r2, #1
 8001034:	e737      	b.n	8000ea6 <__aeabi_fmul+0x92>
 8001036:	f092 0f00 	teq	r2, #0
 800103a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0040      	lsleq	r0, r0, #1
 8001042:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001046:	3a01      	subeq	r2, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xc2>
 800104a:	ea40 000c 	orr.w	r0, r0, ip
 800104e:	f093 0f00 	teq	r3, #0
 8001052:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001056:	bf02      	ittt	eq
 8001058:	0049      	lsleq	r1, r1, #1
 800105a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800105e:	3b01      	subeq	r3, #1
 8001060:	d0f9      	beq.n	8001056 <__aeabi_fdiv+0xda>
 8001062:	ea41 010c 	orr.w	r1, r1, ip
 8001066:	e795      	b.n	8000f94 <__aeabi_fdiv+0x18>
 8001068:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d108      	bne.n	8001084 <__aeabi_fdiv+0x108>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	f47f af7d 	bne.w	8000f72 <__aeabi_fmul+0x15e>
 8001078:	ea93 0f0c 	teq	r3, ip
 800107c:	f47f af70 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 8001080:	4608      	mov	r0, r1
 8001082:	e776      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	d104      	bne.n	8001094 <__aeabi_fdiv+0x118>
 800108a:	024b      	lsls	r3, r1, #9
 800108c:	f43f af4c 	beq.w	8000f28 <__aeabi_fmul+0x114>
 8001090:	4608      	mov	r0, r1
 8001092:	e76e      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001094:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001098:	bf18      	it	ne
 800109a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	d1ca      	bne.n	8001036 <__aeabi_fdiv+0xba>
 80010a0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010a4:	f47f af5c 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 80010a8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010ac:	f47f af3c 	bne.w	8000f28 <__aeabi_fmul+0x114>
 80010b0:	e75f      	b.n	8000f72 <__aeabi_fmul+0x15e>
 80010b2:	bf00      	nop

080010b4 <__gesf2>:
 80010b4:	f04f 3cff 	mov.w	ip, #4294967295
 80010b8:	e006      	b.n	80010c8 <__cmpsf2+0x4>
 80010ba:	bf00      	nop

080010bc <__lesf2>:
 80010bc:	f04f 0c01 	mov.w	ip, #1
 80010c0:	e002      	b.n	80010c8 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__cmpsf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d8:	bf18      	it	ne
 80010da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010de:	d011      	beq.n	8001104 <__cmpsf2+0x40>
 80010e0:	b001      	add	sp, #4
 80010e2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010e6:	bf18      	it	ne
 80010e8:	ea90 0f01 	teqne	r0, r1
 80010ec:	bf58      	it	pl
 80010ee:	ebb2 0003 	subspl.w	r0, r2, r3
 80010f2:	bf88      	it	hi
 80010f4:	17c8      	asrhi	r0, r1, #31
 80010f6:	bf38      	it	cc
 80010f8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010fc:	bf18      	it	ne
 80010fe:	f040 0001 	orrne.w	r0, r0, #1
 8001102:	4770      	bx	lr
 8001104:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001108:	d102      	bne.n	8001110 <__cmpsf2+0x4c>
 800110a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110e:	d105      	bne.n	800111c <__cmpsf2+0x58>
 8001110:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001114:	d1e4      	bne.n	80010e0 <__cmpsf2+0x1c>
 8001116:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111a:	d0e1      	beq.n	80010e0 <__cmpsf2+0x1c>
 800111c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <__aeabi_cfrcmple>:
 8001124:	4684      	mov	ip, r0
 8001126:	4608      	mov	r0, r1
 8001128:	4661      	mov	r1, ip
 800112a:	e7ff      	b.n	800112c <__aeabi_cfcmpeq>

0800112c <__aeabi_cfcmpeq>:
 800112c:	b50f      	push	{r0, r1, r2, r3, lr}
 800112e:	f7ff ffc9 	bl	80010c4 <__cmpsf2>
 8001132:	2800      	cmp	r0, #0
 8001134:	bf48      	it	mi
 8001136:	f110 0f00 	cmnmi.w	r0, #0
 800113a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800113c <__aeabi_fcmpeq>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff fff4 	bl	800112c <__aeabi_cfcmpeq>
 8001144:	bf0c      	ite	eq
 8001146:	2001      	moveq	r0, #1
 8001148:	2000      	movne	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_fcmplt>:
 8001150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001154:	f7ff ffea 	bl	800112c <__aeabi_cfcmpeq>
 8001158:	bf34      	ite	cc
 800115a:	2001      	movcc	r0, #1
 800115c:	2000      	movcs	r0, #0
 800115e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001162:	bf00      	nop

08001164 <__aeabi_fcmple>:
 8001164:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001168:	f7ff ffe0 	bl	800112c <__aeabi_cfcmpeq>
 800116c:	bf94      	ite	ls
 800116e:	2001      	movls	r0, #1
 8001170:	2000      	movhi	r0, #0
 8001172:	f85d fb08 	ldr.w	pc, [sp], #8
 8001176:	bf00      	nop

08001178 <__aeabi_fcmpge>:
 8001178:	f84d ed08 	str.w	lr, [sp, #-8]!
 800117c:	f7ff ffd2 	bl	8001124 <__aeabi_cfrcmple>
 8001180:	bf94      	ite	ls
 8001182:	2001      	movls	r0, #1
 8001184:	2000      	movhi	r0, #0
 8001186:	f85d fb08 	ldr.w	pc, [sp], #8
 800118a:	bf00      	nop

0800118c <__aeabi_fcmpgt>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff ffc8 	bl	8001124 <__aeabi_cfrcmple>
 8001194:	bf34      	ite	cc
 8001196:	2001      	movcc	r0, #1
 8001198:	2000      	movcs	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_fcmpun>:
 80011a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011ac:	d102      	bne.n	80011b4 <__aeabi_fcmpun+0x14>
 80011ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011b2:	d108      	bne.n	80011c6 <__aeabi_fcmpun+0x26>
 80011b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011b8:	d102      	bne.n	80011c0 <__aeabi_fcmpun+0x20>
 80011ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011be:	d102      	bne.n	80011c6 <__aeabi_fcmpun+0x26>
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	f04f 0001 	mov.w	r0, #1
 80011ca:	4770      	bx	lr

080011cc <__aeabi_f2iz>:
 80011cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011d4:	d30f      	bcc.n	80011f6 <__aeabi_f2iz+0x2a>
 80011d6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011de:	d90d      	bls.n	80011fc <__aeabi_f2iz+0x30>
 80011e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011e8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80011ec:	fa23 f002 	lsr.w	r0, r3, r2
 80011f0:	bf18      	it	ne
 80011f2:	4240      	negne	r0, r0
 80011f4:	4770      	bx	lr
 80011f6:	f04f 0000 	mov.w	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001200:	d101      	bne.n	8001206 <__aeabi_f2iz+0x3a>
 8001202:	0242      	lsls	r2, r0, #9
 8001204:	d105      	bne.n	8001212 <__aeabi_f2iz+0x46>
 8001206:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800120a:	bf08      	it	eq
 800120c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr

08001218 <__aeabi_f2uiz>:
 8001218:	0042      	lsls	r2, r0, #1
 800121a:	d20e      	bcs.n	800123a <__aeabi_f2uiz+0x22>
 800121c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001220:	d30b      	bcc.n	800123a <__aeabi_f2uiz+0x22>
 8001222:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001226:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800122a:	d409      	bmi.n	8001240 <__aeabi_f2uiz+0x28>
 800122c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001230:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001234:	fa23 f002 	lsr.w	r0, r3, r2
 8001238:	4770      	bx	lr
 800123a:	f04f 0000 	mov.w	r0, #0
 800123e:	4770      	bx	lr
 8001240:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001244:	d101      	bne.n	800124a <__aeabi_f2uiz+0x32>
 8001246:	0242      	lsls	r2, r0, #9
 8001248:	d102      	bne.n	8001250 <__aeabi_f2uiz+0x38>
 800124a:	f04f 30ff 	mov.w	r0, #4294967295
 800124e:	4770      	bx	lr
 8001250:	f04f 0000 	mov.w	r0, #0
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop

08001258 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	e002      	b.n	8001268 <Delay+0x10>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3b01      	subs	r3, #1
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f9      	bne.n	8001262 <Delay+0xa>
 800126e:	bf00      	nop
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr

0800127a <LCD_INIT>:

void LCD_INIT ( void )
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001280:	2001      	movs	r0, #1
 8001282:	f000 f829 	bl	80012d8 <LCD_BackLed_Control>
	LCD_Rst();
 8001286:	f000 f80f 	bl	80012a8 <LCD_Rst>
	LCD_REG_Config();
 800128a:	f000 f85f 	bl	800134c <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800128e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001298:	22f0      	movs	r2, #240	@ 0xf0
 800129a:	2100      	movs	r1, #0
 800129c:	2000      	movs	r0, #0
 800129e:	f000 f9e6 	bl	800166e <LCD_Clear>
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <LCD_Rst>:


void LCD_Rst ( void )
{			
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2102      	movs	r1, #2
 80012b0:	4807      	ldr	r0, [pc, #28]	@ (80012d0 <LCD_Rst+0x28>)
 80012b2:	f005 f96c 	bl	800658e <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80012b6:	4807      	ldr	r0, [pc, #28]	@ (80012d4 <LCD_Rst+0x2c>)
 80012b8:	f7ff ffce 	bl	8001258 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2102      	movs	r1, #2
 80012c0:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <LCD_Rst+0x28>)
 80012c2:	f005 f964 	bl	800658e <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80012c6:	4803      	ldr	r0, [pc, #12]	@ (80012d4 <LCD_Rst+0x2c>)
 80012c8:	f7ff ffc6 	bl	8001258 <Delay>
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40011800 	.word	0x40011800
 80012d4:	0002bffc 	.word	0x0002bffc

080012d8 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012ee:	4807      	ldr	r0, [pc, #28]	@ (800130c <LCD_BackLed_Control+0x34>)
 80012f0:	f005 f94d 	bl	800658e <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80012f4:	e005      	b.n	8001302 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012fc:	4803      	ldr	r0, [pc, #12]	@ (800130c <LCD_BackLed_Control+0x34>)
 80012fe:	f005 f946 	bl	800658e <HAL_GPIO_WritePin>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40011400 	.word	0x40011400

08001310 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800131a:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	8013      	strh	r3, [r2, #0]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001336:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <LCD_Write_Data+0x1c>)
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	8013      	strh	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	60020000 	.word	0x60020000

0800134c <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001350:	20cf      	movs	r0, #207	@ 0xcf
 8001352:	f7ff ffdd 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff ffe8 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 800135c:	2081      	movs	r0, #129	@ 0x81
 800135e:	f7ff ffe5 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001362:	2030      	movs	r0, #48	@ 0x30
 8001364:	f7ff ffe2 	bl	800132c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001368:	20ed      	movs	r0, #237	@ 0xed
 800136a:	f7ff ffd1 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800136e:	2064      	movs	r0, #100	@ 0x64
 8001370:	f7ff ffdc 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001374:	2003      	movs	r0, #3
 8001376:	f7ff ffd9 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800137a:	2012      	movs	r0, #18
 800137c:	f7ff ffd6 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001380:	2081      	movs	r0, #129	@ 0x81
 8001382:	f7ff ffd3 	bl	800132c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001386:	20e8      	movs	r0, #232	@ 0xe8
 8001388:	f7ff ffc2 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800138c:	2085      	movs	r0, #133	@ 0x85
 800138e:	f7ff ffcd 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001392:	2010      	movs	r0, #16
 8001394:	f7ff ffca 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001398:	2078      	movs	r0, #120	@ 0x78
 800139a:	f7ff ffc7 	bl	800132c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800139e:	20cb      	movs	r0, #203	@ 0xcb
 80013a0:	f7ff ffb6 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80013a4:	2039      	movs	r0, #57	@ 0x39
 80013a6:	f7ff ffc1 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80013aa:	202c      	movs	r0, #44	@ 0x2c
 80013ac:	f7ff ffbe 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff ffbb 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80013b6:	2034      	movs	r0, #52	@ 0x34
 80013b8:	f7ff ffb8 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80013bc:	2002      	movs	r0, #2
 80013be:	f7ff ffb5 	bl	800132c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80013c2:	20f7      	movs	r0, #247	@ 0xf7
 80013c4:	f7ff ffa4 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80013c8:	2020      	movs	r0, #32
 80013ca:	f7ff ffaf 	bl	800132c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80013ce:	20ea      	movs	r0, #234	@ 0xea
 80013d0:	f7ff ff9e 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff ffa9 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff ffa6 	bl	800132c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80013e0:	20b1      	movs	r0, #177	@ 0xb1
 80013e2:	f7ff ff95 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80013e6:	2000      	movs	r0, #0
 80013e8:	f7ff ffa0 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80013ec:	201b      	movs	r0, #27
 80013ee:	f7ff ff9d 	bl	800132c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80013f2:	20b6      	movs	r0, #182	@ 0xb6
 80013f4:	f7ff ff8c 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80013f8:	200a      	movs	r0, #10
 80013fa:	f7ff ff97 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80013fe:	20a2      	movs	r0, #162	@ 0xa2
 8001400:	f7ff ff94 	bl	800132c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001404:	20c0      	movs	r0, #192	@ 0xc0
 8001406:	f7ff ff83 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800140a:	2035      	movs	r0, #53	@ 0x35
 800140c:	f7ff ff8e 	bl	800132c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001410:	20c1      	movs	r0, #193	@ 0xc1
 8001412:	f7ff ff7d 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001416:	2011      	movs	r0, #17
 8001418:	f7ff ff88 	bl	800132c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800141c:	20c5      	movs	r0, #197	@ 0xc5
 800141e:	f7ff ff77 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001422:	2045      	movs	r0, #69	@ 0x45
 8001424:	f7ff ff82 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001428:	2045      	movs	r0, #69	@ 0x45
 800142a:	f7ff ff7f 	bl	800132c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800142e:	20c7      	movs	r0, #199	@ 0xc7
 8001430:	f7ff ff6e 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001434:	20a2      	movs	r0, #162	@ 0xa2
 8001436:	f7ff ff79 	bl	800132c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800143a:	20f2      	movs	r0, #242	@ 0xf2
 800143c:	f7ff ff68 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff ff73 	bl	800132c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001446:	2026      	movs	r0, #38	@ 0x26
 8001448:	f7ff ff62 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 800144c:	2001      	movs	r0, #1
 800144e:	f7ff ff6d 	bl	800132c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001452:	20e0      	movs	r0, #224	@ 0xe0
 8001454:	f7ff ff5c 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001458:	200f      	movs	r0, #15
 800145a:	f7ff ff67 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800145e:	2026      	movs	r0, #38	@ 0x26
 8001460:	f7ff ff64 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001464:	2024      	movs	r0, #36	@ 0x24
 8001466:	f7ff ff61 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800146a:	200b      	movs	r0, #11
 800146c:	f7ff ff5e 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001470:	200e      	movs	r0, #14
 8001472:	f7ff ff5b 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001476:	2009      	movs	r0, #9
 8001478:	f7ff ff58 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 800147c:	2054      	movs	r0, #84	@ 0x54
 800147e:	f7ff ff55 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001482:	20a8      	movs	r0, #168	@ 0xa8
 8001484:	f7ff ff52 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001488:	2046      	movs	r0, #70	@ 0x46
 800148a:	f7ff ff4f 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800148e:	200c      	movs	r0, #12
 8001490:	f7ff ff4c 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001494:	2017      	movs	r0, #23
 8001496:	f7ff ff49 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800149a:	2009      	movs	r0, #9
 800149c:	f7ff ff46 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80014a0:	200f      	movs	r0, #15
 80014a2:	f7ff ff43 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80014a6:	2007      	movs	r0, #7
 80014a8:	f7ff ff40 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff ff3d 	bl	800132c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80014b2:	20e1      	movs	r0, #225	@ 0xe1
 80014b4:	f7ff ff2c 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff ff37 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80014be:	2019      	movs	r0, #25
 80014c0:	f7ff ff34 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80014c4:	201b      	movs	r0, #27
 80014c6:	f7ff ff31 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80014ca:	2004      	movs	r0, #4
 80014cc:	f7ff ff2e 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80014d0:	2010      	movs	r0, #16
 80014d2:	f7ff ff2b 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80014d6:	2007      	movs	r0, #7
 80014d8:	f7ff ff28 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80014dc:	202a      	movs	r0, #42	@ 0x2a
 80014de:	f7ff ff25 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80014e2:	2047      	movs	r0, #71	@ 0x47
 80014e4:	f7ff ff22 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80014e8:	2039      	movs	r0, #57	@ 0x39
 80014ea:	f7ff ff1f 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80014ee:	2003      	movs	r0, #3
 80014f0:	f7ff ff1c 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80014f4:	2006      	movs	r0, #6
 80014f6:	f7ff ff19 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80014fa:	2006      	movs	r0, #6
 80014fc:	f7ff ff16 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001500:	2030      	movs	r0, #48	@ 0x30
 8001502:	f7ff ff13 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001506:	2038      	movs	r0, #56	@ 0x38
 8001508:	f7ff ff10 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800150c:	200f      	movs	r0, #15
 800150e:	f7ff ff0d 	bl	800132c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001512:	2036      	movs	r0, #54	@ 0x36
 8001514:	f7ff fefc 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001518:	20c8      	movs	r0, #200	@ 0xc8
 800151a:	f7ff ff07 	bl	800132c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800151e:	202a      	movs	r0, #42	@ 0x2a
 8001520:	f7ff fef6 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff ff01 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff fefe 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff fefb 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001536:	20ef      	movs	r0, #239	@ 0xef
 8001538:	f7ff fef8 	bl	800132c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 800153c:	202b      	movs	r0, #43	@ 0x2b
 800153e:	f7ff fee7 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001542:	2000      	movs	r0, #0
 8001544:	f7ff fef2 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff feef 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800154e:	2001      	movs	r0, #1
 8001550:	f7ff feec 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001554:	203f      	movs	r0, #63	@ 0x3f
 8001556:	f7ff fee9 	bl	800132c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800155a:	203a      	movs	r0, #58	@ 0x3a
 800155c:	f7ff fed8 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001560:	2055      	movs	r0, #85	@ 0x55
 8001562:	f7ff fee3 	bl	800132c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001566:	2011      	movs	r0, #17
 8001568:	f7ff fed2 	bl	8001310 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 800156c:	4803      	ldr	r0, [pc, #12]	@ (800157c <LCD_REG_Config+0x230>)
 800156e:	f7ff fe73 	bl	8001258 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001572:	2029      	movs	r0, #41	@ 0x29
 8001574:	f7ff fecc 	bl	8001310 <LCD_Write_Cmd>
	
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	0002bffc 	.word	0x0002bffc

08001580 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4604      	mov	r4, r0
 8001588:	4608      	mov	r0, r1
 800158a:	4611      	mov	r1, r2
 800158c:	461a      	mov	r2, r3
 800158e:	4623      	mov	r3, r4
 8001590:	80fb      	strh	r3, [r7, #6]
 8001592:	4603      	mov	r3, r0
 8001594:	80bb      	strh	r3, [r7, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	807b      	strh	r3, [r7, #2]
 800159a:	4613      	mov	r3, r2
 800159c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800159e:	202a      	movs	r0, #42	@ 0x2a
 80015a0:	f7ff feb6 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	0a1b      	lsrs	r3, r3, #8
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff febe 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff feb8 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80015bc:	88fa      	ldrh	r2, [r7, #6]
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	4413      	add	r3, r2
 80015c2:	3b01      	subs	r3, #1
 80015c4:	121b      	asrs	r3, r3, #8
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff feaf 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80015ce:	88fa      	ldrh	r2, [r7, #6]
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	4413      	add	r3, r2
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3b01      	subs	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fea4 	bl	800132c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80015e4:	202b      	movs	r0, #43	@ 0x2b
 80015e6:	f7ff fe93 	bl	8001310 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80015ea:	88bb      	ldrh	r3, [r7, #4]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fe9b 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fe95 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001602:	88ba      	ldrh	r2, [r7, #4]
 8001604:	883b      	ldrh	r3, [r7, #0]
 8001606:	4413      	add	r3, r2
 8001608:	3b01      	subs	r3, #1
 800160a:	121b      	asrs	r3, r3, #8
 800160c:	b29b      	uxth	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fe8c 	bl	800132c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001614:	88ba      	ldrh	r2, [r7, #4]
 8001616:	883b      	ldrh	r3, [r7, #0]
 8001618:	4413      	add	r3, r2
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b29b      	uxth	r3, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	b29b      	uxth	r3, r3
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fe81 	bl	800132c <LCD_Write_Data>
	
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bd90      	pop	{r4, r7, pc}

08001632 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	460b      	mov	r3, r1
 800163c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001642:	202c      	movs	r0, #44	@ 0x2c
 8001644:	f7ff fe64 	bl	8001310 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	e006      	b.n	800165c <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fe6b 	bl	800132c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3301      	adds	r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	d3f4      	bcc.n	800164e <LCD_FillColor+0x1c>
		
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800166e:	b590      	push	{r4, r7, lr}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	4604      	mov	r4, r0
 8001676:	4608      	mov	r0, r1
 8001678:	4611      	mov	r1, r2
 800167a:	461a      	mov	r2, r3
 800167c:	4623      	mov	r3, r4
 800167e:	80fb      	strh	r3, [r7, #6]
 8001680:	4603      	mov	r3, r0
 8001682:	80bb      	strh	r3, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
 8001688:	4613      	mov	r3, r2
 800168a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800168c:	883b      	ldrh	r3, [r7, #0]
 800168e:	887a      	ldrh	r2, [r7, #2]
 8001690:	88b9      	ldrh	r1, [r7, #4]
 8001692:	88f8      	ldrh	r0, [r7, #6]
 8001694:	f7ff ff74 	bl	8001580 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	883a      	ldrh	r2, [r7, #0]
 800169c:	fb02 f303 	mul.w	r3, r2, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	8b3b      	ldrh	r3, [r7, #24]
 80016a4:	4619      	mov	r1, r3
 80016a6:	4610      	mov	r0, r2
 80016a8:	f7ff ffc3 	bl	8001632 <LCD_FillColor>
	
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}

080016b4 <LCD_DrawLine>:
}



void LCD_DrawLine ( uint16_t usC1, uint16_t usP1, uint16_t usC2, uint16_t usP2, uint16_t usColor )
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b08d      	sub	sp, #52	@ 0x34
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4604      	mov	r4, r0
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4623      	mov	r3, r4
 80016c4:	80fb      	strh	r3, [r7, #6]
 80016c6:	4603      	mov	r3, r0
 80016c8:	80bb      	strh	r3, [r7, #4]
 80016ca:	460b      	mov	r3, r1
 80016cc:	807b      	strh	r3, [r7, #2]
 80016ce:	4613      	mov	r3, r2
 80016d0:	803b      	strh	r3, [r7, #0]
	uint16_t us; 
	uint16_t usC_Current, usP_Current;
	
	int32_t lError_C = 0, lError_P = 0, lDelta_C, lDelta_P, lDistance; 
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
	int32_t lIncrease_C, lIncrease_P; 	
	
	
	lDelta_C = usC2 - usC1;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	61fb      	str	r3, [r7, #28]
	lDelta_P = usP2 - usP1; 
 80016e2:	883a      	ldrh	r2, [r7, #0]
 80016e4:	88bb      	ldrh	r3, [r7, #4]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	61bb      	str	r3, [r7, #24]
	
	usC_Current = usC1; 
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	usP_Current = usP1; 
 80016ee:	88bb      	ldrh	r3, [r7, #4]
 80016f0:	857b      	strh	r3, [r7, #42]	@ 0x2a
	
	
	if ( lDelta_C > 0 ) 
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dd02      	ble.n	80016fe <LCD_DrawLine+0x4a>
		lIncrease_C = 1;  
 80016f8:	2301      	movs	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	e00b      	b.n	8001716 <LCD_DrawLine+0x62>
	
	else if ( lDelta_C == 0 ) 
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <LCD_DrawLine+0x56>
		lIncrease_C = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	e005      	b.n	8001716 <LCD_DrawLine+0x62>
	
	else 
  	{ 
    		lIncrease_C = -1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	613b      	str	r3, [r7, #16]
    		lDelta_C = - lDelta_C;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	425b      	negs	r3, r3
 8001714:	61fb      	str	r3, [r7, #28]
  	} 

	
	if ( lDelta_P > 0 )
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	dd02      	ble.n	8001722 <LCD_DrawLine+0x6e>
		lIncrease_P = 1; 
 800171c:	2301      	movs	r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e00b      	b.n	800173a <LCD_DrawLine+0x86>
	
	else if ( lDelta_P == 0 )
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <LCD_DrawLine+0x7a>
		lIncrease_P = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e005      	b.n	800173a <LCD_DrawLine+0x86>
	else 
	{
  		lIncrease_P = -1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	60fb      	str	r3, [r7, #12]
    		lDelta_P = - lDelta_P;
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	425b      	negs	r3, r3
 8001738:	61bb      	str	r3, [r7, #24]
 	} 

	if (  lDelta_C > lDelta_P )
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	429a      	cmp	r2, r3
 8001740:	dd02      	ble.n	8001748 <LCD_DrawLine+0x94>
		lDistance = lDelta_C; 
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e001      	b.n	800174c <LCD_DrawLine+0x98>
	
	else 
		lDistance = lDelta_P; 
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	617b      	str	r3, [r7, #20]
	
	
	for ( us = 0; us <= lDistance + 1; us ++ ) 
 800174c:	2300      	movs	r3, #0
 800174e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001750:	e02b      	b.n	80017aa <LCD_DrawLine+0xf6>
	{  
		LCD_DrawDot ( usC_Current, usP_Current, usColor );
 8001752:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001756:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8001758:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f82f 	bl	80017be <LCD_DrawDot>
		
		lError_C += lDelta_C ; 
 8001760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
		lError_P += lDelta_P ; 
 8001768:	6a3a      	ldr	r2, [r7, #32]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4413      	add	r3, r2
 800176e:	623b      	str	r3, [r7, #32]
		
		if ( lError_C > lDistance ) 
 8001770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	429a      	cmp	r2, r3
 8001776:	dd08      	ble.n	800178a <LCD_DrawLine+0xd6>
		{ 
			lError_C -= lDistance; 
 8001778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
			usC_Current += lIncrease_C; 
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	b29a      	uxth	r2, r3
 8001784:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001786:	4413      	add	r3, r2
 8001788:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		}  
		
		if ( lError_P > lDistance ) 
 800178a:	6a3a      	ldr	r2, [r7, #32]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	429a      	cmp	r2, r3
 8001790:	dd08      	ble.n	80017a4 <LCD_DrawLine+0xf0>
		{ 
			lError_P -= lDistance; 
 8001792:	6a3a      	ldr	r2, [r7, #32]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	623b      	str	r3, [r7, #32]
			usP_Current += lIncrease_P; 
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	b29a      	uxth	r2, r3
 800179e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80017a0:	4413      	add	r3, r2
 80017a2:	857b      	strh	r3, [r7, #42]	@ 0x2a
	for ( us = 0; us <= lDistance + 1; us ++ ) 
 80017a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017a6:	3301      	adds	r3, #1
 80017a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80017aa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3301      	adds	r3, #1
 80017b0:	429a      	cmp	r2, r3
 80017b2:	ddce      	ble.n	8001752 <LCD_DrawLine+0x9e>
		} 
		
	}  
	
	
}   
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3734      	adds	r7, #52	@ 0x34
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd90      	pop	{r4, r7, pc}

080017be <LCD_DrawDot>:




void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	80fb      	strh	r3, [r7, #6]
 80017c8:	460b      	mov	r3, r1
 80017ca:	80bb      	strh	r3, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	807b      	strh	r3, [r7, #2]
	if (( usCOLUMN < LCD_DispWindow_COLUMN ) && ( usPAGE < LCD_DispWindow_PAGE ))
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	2bef      	cmp	r3, #239	@ 0xef
 80017d4:	d809      	bhi.n	80017ea <LCD_DrawDot+0x2c>
 80017d6:	88bb      	ldrh	r3, [r7, #4]
 80017d8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80017dc:	d205      	bcs.n	80017ea <LCD_DrawDot+0x2c>
	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 80017de:	88b9      	ldrh	r1, [r7, #4]
 80017e0:	88f8      	ldrh	r0, [r7, #6]
 80017e2:	2301      	movs	r3, #1
 80017e4:	2201      	movs	r2, #1
 80017e6:	f7ff fecb 	bl	8001580 <LCD_OpenWindow>
	LCD_FillColor (1, usColor);
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	4619      	mov	r1, r3
 80017ee:	2001      	movs	r0, #1
 80017f0:	f7ff ff1f 	bl	8001632 <LCD_FillColor>

}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <LCD_DrawChar_Color>:
{	

}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	4604      	mov	r4, r0
 8001804:	4608      	mov	r0, r1
 8001806:	4611      	mov	r1, r2
 8001808:	461a      	mov	r2, r3
 800180a:	4623      	mov	r3, r4
 800180c:	80fb      	strh	r3, [r7, #6]
 800180e:	4603      	mov	r3, r0
 8001810:	80bb      	strh	r3, [r7, #4]
 8001812:	460b      	mov	r3, r1
 8001814:	70fb      	strb	r3, [r7, #3]
 8001816:	4613      	mov	r3, r2
 8001818:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	3b20      	subs	r3, #32
 800181e:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001820:	88b9      	ldrh	r1, [r7, #4]
 8001822:	88f8      	ldrh	r0, [r7, #6]
 8001824:	2310      	movs	r3, #16
 8001826:	2208      	movs	r2, #8
 8001828:	f7ff feaa 	bl	8001580 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 800182c:	202c      	movs	r0, #44	@ 0x2c
 800182e:	f7ff fd6f 	bl	8001310 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001832:	2300      	movs	r3, #0
 8001834:	73bb      	strb	r3, [r7, #14]
 8001836:	e024      	b.n	8001882 <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001838:	7b3a      	ldrb	r2, [r7, #12]
 800183a:	7bbb      	ldrb	r3, [r7, #14]
 800183c:	4915      	ldr	r1, [pc, #84]	@ (8001894 <LCD_DrawChar_Color+0x98>)
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	440a      	add	r2, r1
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001848:	2300      	movs	r3, #0
 800184a:	737b      	strb	r3, [r7, #13]
 800184c:	e013      	b.n	8001876 <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d004      	beq.n	8001862 <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 8001858:	8c3b      	ldrh	r3, [r7, #32]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fd66 	bl	800132c <LCD_Write_Data>
 8001860:	e003      	b.n	800186a <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 8001862:	883b      	ldrh	r3, [r7, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fd61 	bl	800132c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	085b      	lsrs	r3, r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001870:	7b7b      	ldrb	r3, [r7, #13]
 8001872:	3301      	adds	r3, #1
 8001874:	737b      	strb	r3, [r7, #13]
 8001876:	7b7b      	ldrb	r3, [r7, #13]
 8001878:	2b07      	cmp	r3, #7
 800187a:	d9e8      	bls.n	800184e <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800187c:	7bbb      	ldrb	r3, [r7, #14]
 800187e:	3301      	adds	r3, #1
 8001880:	73bb      	strb	r3, [r7, #14]
 8001882:	7bbb      	ldrb	r3, [r7, #14]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d9d7      	bls.n	8001838 <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bd90      	pop	{r4, r7, pc}
 8001892:	bf00      	nop
 8001894:	0800a750 	.word	0x0800a750

08001898 <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af02      	add	r7, sp, #8
 800189e:	4603      	mov	r3, r0
 80018a0:	460a      	mov	r2, r1
 80018a2:	80fb      	strh	r3, [r7, #6]
 80018a4:	4613      	mov	r3, r2
 80018a6:	80bb      	strh	r3, [r7, #4]
  LCD_Clear ( usX - 10, usY, 20, 1, RED);
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	3b0a      	subs	r3, #10
 80018ac:	b298      	uxth	r0, r3
 80018ae:	88b9      	ldrh	r1, [r7, #4]
 80018b0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2301      	movs	r3, #1
 80018b8:	2214      	movs	r2, #20
 80018ba:	f7ff fed8 	bl	800166e <LCD_Clear>
  LCD_Clear ( usX, usY - 10, 1, 20, RED);
 80018be:	88bb      	ldrh	r3, [r7, #4]
 80018c0:	3b0a      	subs	r3, #10
 80018c2:	b299      	uxth	r1, r3
 80018c4:	88f8      	ldrh	r0, [r7, #6]
 80018c6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2314      	movs	r3, #20
 80018ce:	2201      	movs	r2, #1
 80018d0:	f7ff fecd 	bl	800166e <LCD_Clear>
	
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b087      	sub	sp, #28
 80018e0:	af02      	add	r7, sp, #8
 80018e2:	60ba      	str	r2, [r7, #8]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	81fb      	strh	r3, [r7, #14]
 80018ea:	460b      	mov	r3, r1
 80018ec:	81bb      	strh	r3, [r7, #12]
 80018ee:	4613      	mov	r3, r2
 80018f0:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80018f2:	e01f      	b.n	8001934 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80018f4:	89fb      	ldrh	r3, [r7, #14]
 80018f6:	2be8      	cmp	r3, #232	@ 0xe8
 80018f8:	d904      	bls.n	8001904 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80018fa:	2300      	movs	r3, #0
 80018fc:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 80018fe:	89bb      	ldrh	r3, [r7, #12]
 8001900:	3310      	adds	r3, #16
 8001902:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001904:	89bb      	ldrh	r3, [r7, #12]
 8001906:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 800190a:	d903      	bls.n	8001914 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800190c:	2300      	movs	r3, #0
 800190e:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8001910:	2300      	movs	r3, #0
 8001912:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	88fc      	ldrh	r4, [r7, #6]
 800191a:	89b9      	ldrh	r1, [r7, #12]
 800191c:	89f8      	ldrh	r0, [r7, #14]
 800191e:	8c3b      	ldrh	r3, [r7, #32]
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	4623      	mov	r3, r4
 8001924:	f7ff ff6a 	bl	80017fc <LCD_DrawChar_Color>
		
		pStr ++;
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	3301      	adds	r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 800192e:	89fb      	ldrh	r3, [r7, #14]
 8001930:	3308      	adds	r3, #8
 8001932:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1db      	bne.n	80018f4 <LCD_DrawString_Color+0x18>
		
	}
	
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
	...

08001948 <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{	
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	3b01      	subs	r3, #1
 8001956:	2b03      	cmp	r3, #3
 8001958:	f200 80a0 	bhi.w	8001a9c <LCD_GramScan+0x154>
 800195c:	a201      	add	r2, pc, #4	@ (adr r2, 8001964 <LCD_GramScan+0x1c>)
 800195e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001962:	bf00      	nop
 8001964:	08001975 	.word	0x08001975
 8001968:	080019bf 	.word	0x080019bf
 800196c:	08001a09 	.word	0x08001a09
 8001970:	08001a53 	.word	0x08001a53

//		____ x(240)      
//	 |  
//	 |	y(320)        
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001974:	2036      	movs	r0, #54	@ 0x36
 8001976:	f7ff fccb 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0xC8 );   
 800197a:	20c8      	movs	r0, #200	@ 0xc8
 800197c:	f7ff fcd6 	bl	800132c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001980:	202a      	movs	r0, #42	@ 0x2a
 8001982:	f7ff fcc5 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* x start */	
 8001986:	2000      	movs	r0, #0
 8001988:	f7ff fcd0 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff fccd 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );  /* x end */	
 8001992:	2000      	movs	r0, #0
 8001994:	f7ff fcca 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );
 8001998:	20ef      	movs	r0, #239	@ 0xef
 800199a:	f7ff fcc7 	bl	800132c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 800199e:	202b      	movs	r0, #43	@ 0x2b
 80019a0:	f7ff fcb6 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* y start */  
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff fcc1 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80019aa:	2000      	movs	r0, #0
 80019ac:	f7ff fcbe 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );	/* y end */   
 80019b0:	2001      	movs	r0, #1
 80019b2:	f7ff fcbb 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );
 80019b6:	203f      	movs	r0, #63	@ 0x3f
 80019b8:	f7ff fcb8 	bl	800132c <LCD_Write_Data>
					
		  break;
 80019bc:	e06e      	b.n	8001a9c <LCD_GramScan+0x154>

//		|x(320)            
//		|
//		|___ y(240)
		  
			LCD_Write_Cmd ( 0x36 ); 
 80019be:	2036      	movs	r0, #54	@ 0x36
 80019c0:	f7ff fca6 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x68 );	
 80019c4:	2068      	movs	r0, #104	@ 0x68
 80019c6:	f7ff fcb1 	bl	800132c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 80019ca:	202a      	movs	r0, #42	@ 0x2a
 80019cc:	f7ff fca0 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff fcab 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80019d6:	2000      	movs	r0, #0
 80019d8:	f7ff fca8 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 80019dc:	2001      	movs	r0, #1
 80019de:	f7ff fca5 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 80019e2:	203f      	movs	r0, #63	@ 0x3f
 80019e4:	f7ff fca2 	bl	800132c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 80019e8:	202b      	movs	r0, #43	@ 0x2b
 80019ea:	f7ff fc91 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80019ee:	2000      	movs	r0, #0
 80019f0:	f7ff fc9c 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7ff fc99 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7ff fc96 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );		
 8001a00:	20ef      	movs	r0, #239	@ 0xef
 8001a02:	f7ff fc93 	bl	800132c <LCD_Write_Data>
		
		  break;
 8001a06:	e049      	b.n	8001a9c <LCD_GramScan+0x154>

//		           |x(320)   
//		           |           
//		y(240) ____|
		
			LCD_Write_Cmd ( 0x36 ); 
 8001a08:	2036      	movs	r0, #54	@ 0x36
 8001a0a:	f7ff fc81 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x28 );	
 8001a0e:	2028      	movs	r0, #40	@ 0x28
 8001a10:	f7ff fc8c 	bl	800132c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001a14:	202a      	movs	r0, #42	@ 0x2a
 8001a16:	f7ff fc7b 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff fc86 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff fc83 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001a26:	2001      	movs	r0, #1
 8001a28:	f7ff fc80 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8001a2c:	203f      	movs	r0, #63	@ 0x3f
 8001a2e:	f7ff fc7d 	bl	800132c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001a32:	202b      	movs	r0, #43	@ 0x2b
 8001a34:	f7ff fc6c 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f7ff fc77 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff fc74 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a44:	2000      	movs	r0, #0
 8001a46:	f7ff fc71 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );			
 8001a4a:	20ef      	movs	r0, #239	@ 0xef
 8001a4c:	f7ff fc6e 	bl	800132c <LCD_Write_Data>
		  
		  break;
 8001a50:	e024      	b.n	8001a9c <LCD_GramScan+0x154>

//		|y(320)              
//		|
//		|___ x(240)			
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001a52:	2036      	movs	r0, #54	@ 0x36
 8001a54:	f7ff fc5c 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x48 );	
 8001a58:	2048      	movs	r0, #72	@ 0x48
 8001a5a:	f7ff fc67 	bl	800132c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001a5e:	202a      	movs	r0, #42	@ 0x2a
 8001a60:	f7ff fc56 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001a64:	2000      	movs	r0, #0
 8001a66:	f7ff fc61 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f7ff fc5e 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff fc5b 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );	
 8001a76:	20ef      	movs	r0, #239	@ 0xef
 8001a78:	f7ff fc58 	bl	800132c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001a7c:	202b      	movs	r0, #43	@ 0x2b
 8001a7e:	f7ff fc47 	bl	8001310 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff fc52 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff fc4f 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f7ff fc4c 	bl	800132c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );		
 8001a94:	203f      	movs	r0, #63	@ 0x3f
 8001a96:	f7ff fc49 	bl	800132c <LCD_Write_Data>
		
	    break;
 8001a9a:	bf00      	nop
		
	}
	
	
	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 8001a9c:	202c      	movs	r0, #44	@ 0x2c
 8001a9e:	f7ff fc37 	bl	8001310 <LCD_Write_Cmd>
	
	
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop

08001aac <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
    if(in >= 0.0f)
 8001ab6:	f04f 0100 	mov.w	r1, #0
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff fb5c 	bl	8001178 <__aeabi_fcmpge>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d007      	beq.n	8001ad6 <arm_sqrt_f32+0x2a>
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined ( __ICCARM__ ) && (__VER__ >= 6040000)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f008 fcf8 	bl	800a4bc <sqrtf>
 8001acc:	4602      	mov	r2, r0
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	601a      	str	r2, [r3, #0]
#endif

      return (ARM_MATH_SUCCESS);
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e005      	b.n	8001ae2 <arm_sqrt_f32+0x36>
    }
    else
    {
      *pOut = 0.0f;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <apply_hann_window>:
  * @brief  Apply Hann window to input data to reduce spectral leakage
  * @param  data: Input data array
  * @param  N: Number of samples
  * @retval None
  */
void apply_hann_window(float *data, uint32_t N) {
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  for (uint32_t i = 0; i < N; i++) {
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	e035      	b.n	8001b68 <apply_hann_window+0x7c>
    data[i] *= 0.5f * (1.0f - arm_cos_f32(2.0f * PI * i / (N - 1)));
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f7ff f931 	bl	8000d64 <__aeabi_ui2f>
 8001b02:	4603      	mov	r3, r0
 8001b04:	491d      	ldr	r1, [pc, #116]	@ (8001b7c <apply_hann_window+0x90>)
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f984 	bl	8000e14 <__aeabi_fmul>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461c      	mov	r4, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff f925 	bl	8000d64 <__aeabi_ui2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4620      	mov	r0, r4
 8001b20:	f7ff fa2c 	bl	8000f7c <__aeabi_fdiv>
 8001b24:	4603      	mov	r3, r0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f007 faf4 	bl	8009114 <arm_cos_f32>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001b34:	f7ff f864 	bl	8000c00 <__aeabi_fsub>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f968 	bl	8000e14 <__aeabi_fmul>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4618      	mov	r0, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	6819      	ldr	r1, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	18d4      	adds	r4, r2, r3
 8001b5a:	f7ff f95b 	bl	8000e14 <__aeabi_fmul>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6023      	str	r3, [r4, #0]
  for (uint32_t i = 0; i < N; i++) {
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	3301      	adds	r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d3c5      	bcc.n	8001afc <apply_hann_window+0x10>
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd90      	pop	{r4, r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40c90fdb 	.word	0x40c90fdb

08001b80 <high_pass_filter>:
  * @brief  Apply a simple high-pass filter to remove low-frequency noise
  * @param  data: Input data array
  * @param  N: Number of samples
  * @retval None
  */
void high_pass_filter(float *data, uint32_t N) {
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  // Simple first-order high-pass filter with cutoff ~30 Hz
  float alpha = 0.99f; // Increased to attenuate frequencies below 50 Hz
 8001b8a:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <high_pass_filter+0x90>)
 8001b8c:	60fb      	str	r3, [r7, #12]
  float prev = 0.0f;
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < N; i++) {
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	e031      	b.n	8001bfe <high_pass_filter+0x7e>
    float curr = data[i];
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60bb      	str	r3, [r7, #8]
    data[i] = alpha * (prev + data[i] - (i > 0 ? data[i-1] : 0.0f));
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6979      	ldr	r1, [r7, #20]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f826 	bl	8000c04 <__addsf3>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d008      	beq.n	8001bd4 <high_pass_filter+0x54>
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	e001      	b.n	8001bd8 <high_pass_filter+0x58>
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f7ff f811 	bl	8000c00 <__aeabi_fsub>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4618      	mov	r0, r3
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	18d4      	adds	r4, r2, r3
 8001bea:	68f9      	ldr	r1, [r7, #12]
 8001bec:	f7ff f912 	bl	8000e14 <__aeabi_fmul>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	6023      	str	r3, [r4, #0]
    prev = curr;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < N; i++) {
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3c9      	bcc.n	8001b9a <high_pass_filter+0x1a>
  }
}
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd90      	pop	{r4, r7, pc}
 8001c10:	3f7d70a4 	.word	0x3f7d70a4

08001c14 <find_dominant_freq_e2>:
  * @brief  Find dominant frequency for E2 without subharmonic correction
  * @param  fft_out: FFT output array (complex interleaved)
  * @param  N: FFT size
  * @retval Dominant frequency in Hz
  */
float find_dominant_freq_e2(float *fft_out, uint32_t N) {
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b095      	sub	sp, #84	@ 0x54
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  float max_mag = 0.0f;
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t max_idx = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t min_idx = (uint32_t)(50.0f * N / SAMPLING_RATE); // Min 50 Hz
 8001c28:	6838      	ldr	r0, [r7, #0]
 8001c2a:	f7ff f89b 	bl	8000d64 <__aeabi_ui2f>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4950      	ldr	r1, [pc, #320]	@ (8001d74 <find_dominant_freq_e2+0x160>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f8ee 	bl	8000e14 <__aeabi_fmul>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	494f      	ldr	r1, [pc, #316]	@ (8001d78 <find_dominant_freq_e2+0x164>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff f99d 	bl	8000f7c <__aeabi_fdiv>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fae7 	bl	8001218 <__aeabi_f2uiz>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t max_idx_limit = (uint32_t)(400.0f * N / SAMPLING_RATE); // Max 400 Hz
 8001c4e:	6838      	ldr	r0, [r7, #0]
 8001c50:	f7ff f888 	bl	8000d64 <__aeabi_ui2f>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4949      	ldr	r1, [pc, #292]	@ (8001d7c <find_dominant_freq_e2+0x168>)
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff f8db 	bl	8000e14 <__aeabi_fmul>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4945      	ldr	r1, [pc, #276]	@ (8001d78 <find_dominant_freq_e2+0x164>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f98a 	bl	8000f7c <__aeabi_fdiv>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fad4 	bl	8001218 <__aeabi_f2uiz>
 8001c70:	4603      	mov	r3, r0
 8001c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (uint32_t i = min_idx; i < max_idx_limit && i < N / 2; i++) {
 8001c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c78:	e039      	b.n	8001cee <find_dominant_freq_e2+0xda>
    float mag;
    arm_sqrt_f32(fft_out[2*i] * fft_out[2*i] + fft_out[2*i+1] * fft_out[2*i+1], &mag);
 8001c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7ff f8c0 	bl	8000e14 <__aeabi_fmul>
 8001c94:	4603      	mov	r3, r0
 8001c96:	461c      	mov	r4, r3
 8001c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	3304      	adds	r3, #4
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7ff f8af 	bl	8000e14 <__aeabi_fmul>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f7fe ffa2 	bl	8000c04 <__addsf3>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	f107 0318 	add.w	r3, r7, #24
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4610      	mov	r0, r2
 8001ccc:	f7ff feee 	bl	8001aac <arm_sqrt_f32>
    if (mag > max_mag) {
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cd6:	f7ff fa3b 	bl	8001150 <__aeabi_fcmplt>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <find_dominant_freq_e2+0xd4>
      max_mag = mag;
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	647b      	str	r3, [r7, #68]	@ 0x44
      max_idx = i;
 8001ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ce6:	643b      	str	r3, [r7, #64]	@ 0x40
  for (uint32_t i = min_idx; i < max_idx_limit && i < N / 2; i++) {
 8001ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cea:	3301      	adds	r3, #1
 8001cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d204      	bcs.n	8001d00 <find_dominant_freq_e2+0xec>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d3bc      	bcc.n	8001c7a <find_dominant_freq_e2+0x66>
    }
  }
  // Check for sufficient signal strength
  float threshold = (max_idx * SAMPLING_RATE / N > 300.0f) ? 0.02f : MIN_MAG_THRESHOLD;
 8001d00:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001d02:	f7ff f82f 	bl	8000d64 <__aeabi_ui2f>
 8001d06:	4603      	mov	r3, r0
 8001d08:	491b      	ldr	r1, [pc, #108]	@ (8001d78 <find_dominant_freq_e2+0x164>)
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f882 	bl	8000e14 <__aeabi_fmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461c      	mov	r4, r3
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	f7ff f825 	bl	8000d64 <__aeabi_ui2f>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4620      	mov	r0, r4
 8001d20:	f7ff f92c 	bl	8000f7c <__aeabi_fdiv>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4916      	ldr	r1, [pc, #88]	@ (8001d80 <find_dominant_freq_e2+0x16c>)
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fa2f 	bl	800118c <__aeabi_fcmpgt>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <find_dominant_freq_e2+0x124>
 8001d34:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <find_dominant_freq_e2+0x170>)
 8001d36:	e000      	b.n	8001d3a <find_dominant_freq_e2+0x126>
 8001d38:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <find_dominant_freq_e2+0x174>)
 8001d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (max_mag < threshold) {
 8001d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d3e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d40:	f7ff fa06 	bl	8001150 <__aeabi_fcmplt>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d026      	beq.n	8001d98 <find_dominant_freq_e2+0x184>
    if (screen_state == STATE_DATA_DISPLAY) {
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <find_dominant_freq_e2+0x178>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d108      	bne.n	8001d64 <find_dominant_freq_e2+0x150>
      LCD_DrawString_Color(20, 140, "No Signal          ", WHITE, BLACK);
 8001d52:	2300      	movs	r3, #0
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001d90 <find_dominant_freq_e2+0x17c>)
 8001d5c:	218c      	movs	r1, #140	@ 0x8c
 8001d5e:	2014      	movs	r0, #20
 8001d60:	f7ff fdbc 	bl	80018dc <LCD_DrawString_Color>
    }
    global_raw_freq = 0.0f;
 8001d64:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <find_dominant_freq_e2+0x180>)
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
    return 0.0f; // Return 0 Hz for no valid signal
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	e176      	b.n	8002060 <find_dominant_freq_e2+0x44c>
 8001d72:	bf00      	nop
 8001d74:	42480000 	.word	0x42480000
 8001d78:	458012e1 	.word	0x458012e1
 8001d7c:	43c80000 	.word	0x43c80000
 8001d80:	43960000 	.word	0x43960000
 8001d84:	3ca3d70a 	.word	0x3ca3d70a
 8001d88:	3dcccccd 	.word	0x3dcccccd
 8001d8c:	200062f8 	.word	0x200062f8
 8001d90:	0800a610 	.word	0x0800a610
 8001d94:	200062f4 	.word	0x200062f4
  }

  float freq = (float)max_idx * SAMPLING_RATE / N;
 8001d98:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001d9a:	f7fe ffe3 	bl	8000d64 <__aeabi_ui2f>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	49a5      	ldr	r1, [pc, #660]	@ (8002038 <find_dominant_freq_e2+0x424>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f836 	bl	8000e14 <__aeabi_fmul>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461c      	mov	r4, r3
 8001dac:	6838      	ldr	r0, [r7, #0]
 8001dae:	f7fe ffd9 	bl	8000d64 <__aeabi_ui2f>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4619      	mov	r1, r3
 8001db6:	4620      	mov	r0, r4
 8001db8:	f7ff f8e0 	bl	8000f7c <__aeabi_fdiv>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (max_idx > 0 && max_idx < N / 2 - 1) {
 8001dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80bd 	beq.w	8001f42 <find_dominant_freq_e2+0x32e>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	085b      	lsrs	r3, r3, #1
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	f080 80b6 	bcs.w	8001f42 <find_dominant_freq_e2+0x32e>
    float y1, y2, y3;
    arm_sqrt_f32(fft_out[2*(max_idx-1)] * fft_out[2*(max_idx-1)] + fft_out[2*(max_idx-1)+1] * fft_out[2*(max_idx-1)+1], &y1);
 8001dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	6818      	ldr	r0, [r3, #0]
 8001de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001de4:	3b01      	subs	r3, #1
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4619      	mov	r1, r3
 8001df0:	f7ff f810 	bl	8000e14 <__aeabi_fmul>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461c      	mov	r4, r3
 8001df8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	3304      	adds	r3, #4
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe fffd 	bl	8000e14 <__aeabi_fmul>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f7fe fef0 	bl	8000c04 <__addsf3>
 8001e24:	4603      	mov	r3, r0
 8001e26:	461a      	mov	r2, r3
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4610      	mov	r0, r2
 8001e30:	f7ff fe3c 	bl	8001aac <arm_sqrt_f32>
    y2 = max_mag;
 8001e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
    arm_sqrt_f32(fft_out[2*(max_idx+1)] * fft_out[2*(max_idx+1)] + fft_out[2*(max_idx+1)+1] * fft_out[2*(max_idx+1)+1], &y3);
 8001e38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e46:	3301      	adds	r3, #1
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4619      	mov	r1, r3
 8001e52:	f7fe ffdf 	bl	8000e14 <__aeabi_fmul>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461c      	mov	r4, r3
 8001e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	3304      	adds	r3, #4
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	3304      	adds	r3, #4
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4619      	mov	r1, r3
 8001e78:	f7fe ffcc 	bl	8000e14 <__aeabi_fmul>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4620      	mov	r0, r4
 8001e82:	f7fe febf 	bl	8000c04 <__addsf3>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	f107 0310 	add.w	r3, r7, #16
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4610      	mov	r0, r2
 8001e92:	f7ff fe0b 	bl	8001aac <arm_sqrt_f32>
    float p = (y3 - y1) / (2.0f * (2.0f * y2 - y1 - y3));
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe feaf 	bl	8000c00 <__aeabi_fsub>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461c      	mov	r4, r3
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe feaa 	bl	8000c04 <__addsf3>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4610      	mov	r0, r2
 8001eba:	f7fe fea1 	bl	8000c00 <__aeabi_fsub>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	f7fe fe9a 	bl	8000c00 <__aeabi_fsub>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fe97 	bl	8000c04 <__addsf3>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4620      	mov	r0, r4
 8001edc:	f7ff f84e 	bl	8000f7c <__aeabi_fdiv>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (p < -0.5f) p = -0.5f;
 8001ee4:	f04f 413f 	mov.w	r1, #3204448256	@ 0xbf000000
 8001ee8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001eea:	f7ff f931 	bl	8001150 <__aeabi_fcmplt>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <find_dominant_freq_e2+0x2e6>
 8001ef4:	f04f 433f 	mov.w	r3, #3204448256	@ 0xbf000000
 8001ef8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (p > 0.5f) p = 0.5f;
 8001efa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001efe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f00:	f7ff f944 	bl	800118c <__aeabi_fcmpgt>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <find_dominant_freq_e2+0x2fc>
 8001f0a:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001f0e:	637b      	str	r3, [r7, #52]	@ 0x34
    freq = (float)(max_idx + p) * SAMPLING_RATE / N;
 8001f10:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001f12:	f7fe ff27 	bl	8000d64 <__aeabi_ui2f>
 8001f16:	4603      	mov	r3, r0
 8001f18:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fe72 	bl	8000c04 <__addsf3>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4945      	ldr	r1, [pc, #276]	@ (8002038 <find_dominant_freq_e2+0x424>)
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe ff75 	bl	8000e14 <__aeabi_fmul>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461c      	mov	r4, r3
 8001f2e:	6838      	ldr	r0, [r7, #0]
 8001f30:	f7fe ff18 	bl	8000d64 <__aeabi_ui2f>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4619      	mov	r1, r3
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f7ff f81f 	bl	8000f7c <__aeabi_fdiv>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	63bb      	str	r3, [r7, #56]	@ 0x38
  }

  // Store raw frequency
  global_raw_freq = freq;
 8001f42:	4a3e      	ldr	r2, [pc, #248]	@ (800203c <find_dominant_freq_e2+0x428>)
 8001f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f46:	6013      	str	r3, [r2, #0]

  // Harmonic correction: Check for second harmonic (freq > 150 Hz, fund ~82.41 Hz)
  if (freq > 150.0f) {
 8001f48:	493d      	ldr	r1, [pc, #244]	@ (8002040 <find_dominant_freq_e2+0x42c>)
 8001f4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001f4c:	f7ff f91e 	bl	800118c <__aeabi_fcmpgt>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d065      	beq.n	8002022 <find_dominant_freq_e2+0x40e>
    float fund = freq / 2;
 8001f56:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001f5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001f5c:	f7ff f80e 	bl	8000f7c <__aeabi_fdiv>
 8001f60:	4603      	mov	r3, r0
 8001f62:	623b      	str	r3, [r7, #32]
    if (fund < 100.0f && fabs(fund - note_freqs[0]) < note_tolerances[0]) { // Check E2 fundamental
 8001f64:	4937      	ldr	r1, [pc, #220]	@ (8002044 <find_dominant_freq_e2+0x430>)
 8001f66:	6a38      	ldr	r0, [r7, #32]
 8001f68:	f7ff f8f2 	bl	8001150 <__aeabi_fcmplt>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d057      	beq.n	8002022 <find_dominant_freq_e2+0x40e>
 8001f72:	4b35      	ldr	r3, [pc, #212]	@ (8002048 <find_dominant_freq_e2+0x434>)
 8001f74:	4619      	mov	r1, r3
 8001f76:	6a38      	ldr	r0, [r7, #32]
 8001f78:	f7fe fe42 	bl	8000c00 <__aeabi_fsub>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f82:	4a32      	ldr	r2, [pc, #200]	@ (800204c <find_dominant_freq_e2+0x438>)
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff f8e2 	bl	8001150 <__aeabi_fcmplt>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d047      	beq.n	8002022 <find_dominant_freq_e2+0x40e>
      uint32_t fund_idx = (uint32_t)(fund * N / SAMPLING_RATE);
 8001f92:	6838      	ldr	r0, [r7, #0]
 8001f94:	f7fe fee6 	bl	8000d64 <__aeabi_ui2f>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	6a39      	ldr	r1, [r7, #32]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe ff39 	bl	8000e14 <__aeabi_fmul>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4924      	ldr	r1, [pc, #144]	@ (8002038 <find_dominant_freq_e2+0x424>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe ffe8 	bl	8000f7c <__aeabi_fdiv>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f932 	bl	8001218 <__aeabi_f2uiz>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	61fb      	str	r3, [r7, #28]
      float fund_mag;
      arm_sqrt_f32(fft_out[2*fund_idx] * fft_out[2*fund_idx] + fft_out[2*fund_idx+1] * fft_out[2*fund_idx+1], &fund_mag);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7fe ff21 	bl	8000e14 <__aeabi_fmul>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461c      	mov	r4, r3
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	3304      	adds	r3, #4
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f7fe ff10 	bl	8000e14 <__aeabi_fmul>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f7fe fe03 	bl	8000c04 <__addsf3>
 8001ffe:	4603      	mov	r3, r0
 8002000:	461a      	mov	r2, r3
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	4619      	mov	r1, r3
 8002008:	4610      	mov	r0, r2
 800200a:	f7ff fd4f 	bl	8001aac <arm_sqrt_f32>
      if (fund_mag > MIN_MAG_THRESHOLD / 4.0f) {
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	490f      	ldr	r1, [pc, #60]	@ (8002050 <find_dominant_freq_e2+0x43c>)
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff f8ba 	bl	800118c <__aeabi_fcmpgt>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <find_dominant_freq_e2+0x40e>
        freq = fund;
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	63bb      	str	r3, [r7, #56]	@ 0x38
  }

  // No subharmonic correction for E2 to prevent doubling of 70-80 Hz

  // Apply 2 Hz offset to final frequency
  global_raw_freq = freq + 2.0f;
 8002022:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002026:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002028:	f7fe fdec 	bl	8000c04 <__addsf3>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	4b02      	ldr	r3, [pc, #8]	@ (800203c <find_dominant_freq_e2+0x428>)
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	e00e      	b.n	8002054 <find_dominant_freq_e2+0x440>
 8002036:	bf00      	nop
 8002038:	458012e1 	.word	0x458012e1
 800203c:	200062f4 	.word	0x200062f4
 8002040:	43160000 	.word	0x43160000
 8002044:	42c80000 	.word	0x42c80000
 8002048:	42a4d1ec 	.word	0x42a4d1ec
 800204c:	40a00000 	.word	0x40a00000
 8002050:	3ccccccd 	.word	0x3ccccccd
  return freq + 2.0f;
 8002054:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002058:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800205a:	f7fe fdd3 	bl	8000c04 <__addsf3>
 800205e:	4603      	mov	r3, r0
}
 8002060:	4618      	mov	r0, r3
 8002062:	374c      	adds	r7, #76	@ 0x4c
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}

08002068 <find_dominant_freq>:
  * @brief  Find dominant frequency from FFT output with enhanced harmonic and sharp note correction
  * @param  fft_out: FFT output array (complex interleaved)
  * @param  N: FFT size
  * @retval Dominant frequency in Hz
  */
float find_dominant_freq(float *fft_out, uint32_t N) {
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b0a5      	sub	sp, #148	@ 0x94
 800206c:	af02      	add	r7, sp, #8
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  // Use E2-specific function if E2 is selected
  if (selected_note_idx == 0) {
 8002072:	4b5e      	ldr	r3, [pc, #376]	@ (80021ec <find_dominant_freq+0x184>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <find_dominant_freq+0x20>
    return find_dominant_freq_e2(fft_out, N);
 800207a:	6839      	ldr	r1, [r7, #0]
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff fdc9 	bl	8001c14 <find_dominant_freq_e2>
 8002082:	4603      	mov	r3, r0
 8002084:	f000 bc18 	b.w	80028b8 <find_dominant_freq+0x850>
  }

  float max_mag = 0.0f;
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t max_idx = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  uint32_t min_idx = (uint32_t)(50.0f * N / SAMPLING_RATE); // Min 50 Hz
 8002096:	6838      	ldr	r0, [r7, #0]
 8002098:	f7fe fe64 	bl	8000d64 <__aeabi_ui2f>
 800209c:	4603      	mov	r3, r0
 800209e:	4954      	ldr	r1, [pc, #336]	@ (80021f0 <find_dominant_freq+0x188>)
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe feb7 	bl	8000e14 <__aeabi_fmul>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4952      	ldr	r1, [pc, #328]	@ (80021f4 <find_dominant_freq+0x18c>)
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe ff66 	bl	8000f7c <__aeabi_fdiv>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f8b0 	bl	8001218 <__aeabi_f2uiz>
 80020b8:	4603      	mov	r3, r0
 80020ba:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t max_idx_limit = (uint32_t)(400.0f * N / SAMPLING_RATE); // Max 400 Hz
 80020bc:	6838      	ldr	r0, [r7, #0]
 80020be:	f7fe fe51 	bl	8000d64 <__aeabi_ui2f>
 80020c2:	4603      	mov	r3, r0
 80020c4:	494c      	ldr	r1, [pc, #304]	@ (80021f8 <find_dominant_freq+0x190>)
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fea4 	bl	8000e14 <__aeabi_fmul>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4949      	ldr	r1, [pc, #292]	@ (80021f4 <find_dominant_freq+0x18c>)
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe ff53 	bl	8000f7c <__aeabi_fdiv>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff f89d 	bl	8001218 <__aeabi_f2uiz>
 80020de:	4603      	mov	r3, r0
 80020e0:	663b      	str	r3, [r7, #96]	@ 0x60
  for (uint32_t i = min_idx; i < max_idx_limit && i < N / 2; i++) {
 80020e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020e6:	e03c      	b.n	8002162 <find_dominant_freq+0xfa>
    float mag;
    arm_sqrt_f32(fft_out[2*i] * fft_out[2*i] + fft_out[2*i+1] * fft_out[2*i+1], &mag);
 80020e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	f7fe fe89 	bl	8000e14 <__aeabi_fmul>
 8002102:	4603      	mov	r3, r0
 8002104:	461c      	mov	r4, r3
 8002106:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	3304      	adds	r3, #4
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	3304      	adds	r3, #4
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4619      	mov	r1, r3
 8002120:	f7fe fe78 	bl	8000e14 <__aeabi_fmul>
 8002124:	4603      	mov	r3, r0
 8002126:	4619      	mov	r1, r3
 8002128:	4620      	mov	r0, r4
 800212a:	f7fe fd6b 	bl	8000c04 <__addsf3>
 800212e:	4603      	mov	r3, r0
 8002130:	461a      	mov	r2, r3
 8002132:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002136:	4619      	mov	r1, r3
 8002138:	4610      	mov	r0, r2
 800213a:	f7ff fcb7 	bl	8001aac <arm_sqrt_f32>
    if (mag > max_mag) {
 800213e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002140:	4619      	mov	r1, r3
 8002142:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002146:	f7ff f803 	bl	8001150 <__aeabi_fcmplt>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <find_dominant_freq+0xf4>
      max_mag = mag;
 8002150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002152:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      max_idx = i;
 8002156:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002158:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  for (uint32_t i = min_idx; i < max_idx_limit && i < N / 2; i++) {
 800215c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800215e:	3301      	adds	r3, #1
 8002160:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002162:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002164:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002166:	429a      	cmp	r2, r3
 8002168:	d204      	bcs.n	8002174 <find_dominant_freq+0x10c>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	085b      	lsrs	r3, r3, #1
 800216e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002170:	429a      	cmp	r2, r3
 8002172:	d3b9      	bcc.n	80020e8 <find_dominant_freq+0x80>
    }
  }
  // Check for sufficient signal strength
  float threshold = (max_idx * SAMPLING_RATE / N > 300.0f) ? 0.02f : MIN_MAG_THRESHOLD;
 8002174:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002178:	f7fe fdf4 	bl	8000d64 <__aeabi_ui2f>
 800217c:	4603      	mov	r3, r0
 800217e:	491d      	ldr	r1, [pc, #116]	@ (80021f4 <find_dominant_freq+0x18c>)
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fe47 	bl	8000e14 <__aeabi_fmul>
 8002186:	4603      	mov	r3, r0
 8002188:	461c      	mov	r4, r3
 800218a:	6838      	ldr	r0, [r7, #0]
 800218c:	f7fe fdea 	bl	8000d64 <__aeabi_ui2f>
 8002190:	4603      	mov	r3, r0
 8002192:	4619      	mov	r1, r3
 8002194:	4620      	mov	r0, r4
 8002196:	f7fe fef1 	bl	8000f7c <__aeabi_fdiv>
 800219a:	4603      	mov	r3, r0
 800219c:	4917      	ldr	r1, [pc, #92]	@ (80021fc <find_dominant_freq+0x194>)
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fff4 	bl	800118c <__aeabi_fcmpgt>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <find_dominant_freq+0x146>
 80021aa:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <find_dominant_freq+0x198>)
 80021ac:	e000      	b.n	80021b0 <find_dominant_freq+0x148>
 80021ae:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <find_dominant_freq+0x19c>)
 80021b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (max_mag < threshold) {
 80021b2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80021b4:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80021b8:	f7fe ffca 	bl	8001150 <__aeabi_fcmplt>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d028      	beq.n	8002214 <find_dominant_freq+0x1ac>
    if (screen_state == STATE_DATA_DISPLAY) {
 80021c2:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <find_dominant_freq+0x1a0>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d108      	bne.n	80021dc <find_dominant_freq+0x174>
      LCD_DrawString_Color(20, 140, "No Signal          ", WHITE, BLACK);
 80021ca:	2300      	movs	r3, #0
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021d2:	4a0e      	ldr	r2, [pc, #56]	@ (800220c <find_dominant_freq+0x1a4>)
 80021d4:	218c      	movs	r1, #140	@ 0x8c
 80021d6:	2014      	movs	r0, #20
 80021d8:	f7ff fb80 	bl	80018dc <LCD_DrawString_Color>
    }
    global_raw_freq = 0.0f;
 80021dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <find_dominant_freq+0x1a8>)
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
    return 0.0f; // Return 0 Hz for no valid signal
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	e366      	b.n	80028b8 <find_dominant_freq+0x850>
 80021ea:	bf00      	nop
 80021ec:	20002098 	.word	0x20002098
 80021f0:	42480000 	.word	0x42480000
 80021f4:	458012e1 	.word	0x458012e1
 80021f8:	43c80000 	.word	0x43c80000
 80021fc:	43960000 	.word	0x43960000
 8002200:	3ca3d70a 	.word	0x3ca3d70a
 8002204:	3dcccccd 	.word	0x3dcccccd
 8002208:	200062f8 	.word	0x200062f8
 800220c:	0800a610 	.word	0x0800a610
 8002210:	200062f4 	.word	0x200062f4
  }

  float freq = (float)max_idx * SAMPLING_RATE / N;
 8002214:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002218:	f7fe fda4 	bl	8000d64 <__aeabi_ui2f>
 800221c:	4603      	mov	r3, r0
 800221e:	498e      	ldr	r1, [pc, #568]	@ (8002458 <find_dominant_freq+0x3f0>)
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe fdf7 	bl	8000e14 <__aeabi_fmul>
 8002226:	4603      	mov	r3, r0
 8002228:	461c      	mov	r4, r3
 800222a:	6838      	ldr	r0, [r7, #0]
 800222c:	f7fe fd9a 	bl	8000d64 <__aeabi_ui2f>
 8002230:	4603      	mov	r3, r0
 8002232:	4619      	mov	r1, r3
 8002234:	4620      	mov	r0, r4
 8002236:	f7fe fea1 	bl	8000f7c <__aeabi_fdiv>
 800223a:	4603      	mov	r3, r0
 800223c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (max_idx > 0 && max_idx < N / 2 - 1) {
 800223e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80c8 	beq.w	80023d8 <find_dominant_freq+0x370>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	3b01      	subs	r3, #1
 800224e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002252:	429a      	cmp	r2, r3
 8002254:	f080 80c0 	bcs.w	80023d8 <find_dominant_freq+0x370>
    float y1, y2, y3;
    arm_sqrt_f32(fft_out[2*(max_idx-1)] * fft_out[2*(max_idx-1)] + fft_out[2*(max_idx-1)+1] * fft_out[2*(max_idx-1)+1], &y1);
 8002258:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800225c:	3b01      	subs	r3, #1
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	4413      	add	r3, r2
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800226a:	3b01      	subs	r3, #1
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	f7fe fdcd 	bl	8000e14 <__aeabi_fmul>
 800227a:	4603      	mov	r3, r0
 800227c:	461c      	mov	r4, r3
 800227e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002282:	3b01      	subs	r3, #1
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	3304      	adds	r3, #4
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002292:	3b01      	subs	r3, #1
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	3304      	adds	r3, #4
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4619      	mov	r1, r3
 80022a0:	f7fe fdb8 	bl	8000e14 <__aeabi_fmul>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4619      	mov	r1, r3
 80022a8:	4620      	mov	r0, r4
 80022aa:	f7fe fcab 	bl	8000c04 <__addsf3>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022b6:	4619      	mov	r1, r3
 80022b8:	4610      	mov	r0, r2
 80022ba:	f7ff fbf7 	bl	8001aac <arm_sqrt_f32>
    y2 = max_mag;
 80022be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022c2:	65bb      	str	r3, [r7, #88]	@ 0x58
    arm_sqrt_f32(fft_out[2*(max_idx+1)] * fft_out[2*(max_idx+1)] + fft_out[2*(max_idx+1)+1] * fft_out[2*(max_idx+1)+1], &y3);
 80022c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022c8:	3301      	adds	r3, #1
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022d6:	3301      	adds	r3, #1
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f7fe fd97 	bl	8000e14 <__aeabi_fmul>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461c      	mov	r4, r3
 80022ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022ee:	3301      	adds	r3, #1
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	3304      	adds	r3, #4
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022fe:	3301      	adds	r3, #1
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	3304      	adds	r3, #4
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	4413      	add	r3, r2
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe fd82 	bl	8000e14 <__aeabi_fmul>
 8002310:	4603      	mov	r3, r0
 8002312:	4619      	mov	r1, r3
 8002314:	4620      	mov	r0, r4
 8002316:	f7fe fc75 	bl	8000c04 <__addsf3>
 800231a:	4603      	mov	r3, r0
 800231c:	461a      	mov	r2, r3
 800231e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002322:	4619      	mov	r1, r3
 8002324:	4610      	mov	r0, r2
 8002326:	f7ff fbc1 	bl	8001aac <arm_sqrt_f32>
    float p = (y3 - y1) / (2.0f * (2.0f * y2 - y1 - y3));
 800232a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe fc65 	bl	8000c00 <__aeabi_fsub>
 8002336:	4603      	mov	r3, r0
 8002338:	461c      	mov	r4, r3
 800233a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800233c:	4619      	mov	r1, r3
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fc60 	bl	8000c04 <__addsf3>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234a:	4619      	mov	r1, r3
 800234c:	4610      	mov	r0, r2
 800234e:	f7fe fc57 	bl	8000c00 <__aeabi_fsub>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002358:	4619      	mov	r1, r3
 800235a:	4610      	mov	r0, r2
 800235c:	f7fe fc50 	bl	8000c00 <__aeabi_fsub>
 8002360:	4603      	mov	r3, r0
 8002362:	4619      	mov	r1, r3
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fc4d 	bl	8000c04 <__addsf3>
 800236a:	4603      	mov	r3, r0
 800236c:	4619      	mov	r1, r3
 800236e:	4620      	mov	r0, r4
 8002370:	f7fe fe04 	bl	8000f7c <__aeabi_fdiv>
 8002374:	4603      	mov	r3, r0
 8002376:	677b      	str	r3, [r7, #116]	@ 0x74
    if (p < -0.5f) p = -0.5f;
 8002378:	f04f 413f 	mov.w	r1, #3204448256	@ 0xbf000000
 800237c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800237e:	f7fe fee7 	bl	8001150 <__aeabi_fcmplt>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <find_dominant_freq+0x326>
 8002388:	f04f 433f 	mov.w	r3, #3204448256	@ 0xbf000000
 800238c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (p > 0.5f) p = 0.5f;
 800238e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002392:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002394:	f7fe fefa 	bl	800118c <__aeabi_fcmpgt>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <find_dominant_freq+0x33c>
 800239e:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80023a2:	677b      	str	r3, [r7, #116]	@ 0x74
    freq = (float)(max_idx + p) * SAMPLING_RATE / N;
 80023a4:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80023a8:	f7fe fcdc 	bl	8000d64 <__aeabi_ui2f>
 80023ac:	4603      	mov	r3, r0
 80023ae:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe fc27 	bl	8000c04 <__addsf3>
 80023b6:	4603      	mov	r3, r0
 80023b8:	4927      	ldr	r1, [pc, #156]	@ (8002458 <find_dominant_freq+0x3f0>)
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe fd2a 	bl	8000e14 <__aeabi_fmul>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461c      	mov	r4, r3
 80023c4:	6838      	ldr	r0, [r7, #0]
 80023c6:	f7fe fccd 	bl	8000d64 <__aeabi_ui2f>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4619      	mov	r1, r3
 80023ce:	4620      	mov	r0, r4
 80023d0:	f7fe fdd4 	bl	8000f7c <__aeabi_fdiv>
 80023d4:	4603      	mov	r3, r0
 80023d6:	67bb      	str	r3, [r7, #120]	@ 0x78
  }

  // Store raw frequency
  global_raw_freq = freq;
 80023d8:	4a20      	ldr	r2, [pc, #128]	@ (800245c <find_dominant_freq+0x3f4>)
 80023da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023dc:	6013      	str	r3, [r2, #0]

  // Early check for E4 fundamental (329.63 Hz, index 5)
  if (selected_note_idx == 5 && fabs(freq - note_freqs[5]) < note_tolerances[5]) {
 80023de:	4b20      	ldr	r3, [pc, #128]	@ (8002460 <find_dominant_freq+0x3f8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d11f      	bne.n	8002426 <find_dominant_freq+0x3be>
 80023e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002464 <find_dominant_freq+0x3fc>)
 80023e8:	4619      	mov	r1, r3
 80023ea:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80023ec:	f7fe fc08 	bl	8000c00 <__aeabi_fsub>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002468 <find_dominant_freq+0x400>)
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fea8 	bl	8001150 <__aeabi_fcmplt>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00f      	beq.n	8002426 <find_dominant_freq+0x3be>
    global_raw_freq = freq + 2.0f; // Apply 2 Hz offset
 8002406:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800240a:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800240c:	f7fe fbfa 	bl	8000c04 <__addsf3>
 8002410:	4603      	mov	r3, r0
 8002412:	461a      	mov	r2, r3
 8002414:	4b11      	ldr	r3, [pc, #68]	@ (800245c <find_dominant_freq+0x3f4>)
 8002416:	601a      	str	r2, [r3, #0]
    return freq + 2.0f; // Accept E4 and nearby frequencies (including F4, F#4)
 8002418:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800241c:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800241e:	f7fe fbf1 	bl	8000c04 <__addsf3>
 8002422:	4603      	mov	r3, r0
 8002424:	e248      	b.n	80028b8 <find_dominant_freq+0x850>
  }

  // Harmonic correction: Check for second harmonic (freq > 150 Hz, fund < 200 Hz)
  if (freq > 150.0f) {
 8002426:	4911      	ldr	r1, [pc, #68]	@ (800246c <find_dominant_freq+0x404>)
 8002428:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800242a:	f7fe feaf 	bl	800118c <__aeabi_fcmpgt>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 808b 	beq.w	800254c <find_dominant_freq+0x4e4>
    float fund = freq / 2;
 8002436:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800243a:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800243c:	f7fe fd9e 	bl	8000f7c <__aeabi_fdiv>
 8002440:	4603      	mov	r3, r0
 8002442:	657b      	str	r3, [r7, #84]	@ 0x54
    if (fund < 200.0f) { // Only check if fundamental is in plausible range
 8002444:	490a      	ldr	r1, [pc, #40]	@ (8002470 <find_dominant_freq+0x408>)
 8002446:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002448:	f7fe fe82 	bl	8001150 <__aeabi_fcmplt>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d07c      	beq.n	800254c <find_dominant_freq+0x4e4>
      for (int i = 0; i < 6; i++) {
 8002452:	2300      	movs	r3, #0
 8002454:	673b      	str	r3, [r7, #112]	@ 0x70
 8002456:	e076      	b.n	8002546 <find_dominant_freq+0x4de>
 8002458:	458012e1 	.word	0x458012e1
 800245c:	200062f4 	.word	0x200062f4
 8002460:	20002098 	.word	0x20002098
 8002464:	43a4d0a4 	.word	0x43a4d0a4
 8002468:	42200000 	.word	0x42200000
 800246c:	43160000 	.word	0x43160000
 8002470:	43480000 	.word	0x43480000
        if (fabs(fund - note_freqs[i]) < note_tolerances[i]) {
 8002474:	4aa3      	ldr	r2, [pc, #652]	@ (8002704 <find_dominant_freq+0x69c>)
 8002476:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	4619      	mov	r1, r3
 800247e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002480:	f7fe fbbe 	bl	8000c00 <__aeabi_fsub>
 8002484:	4603      	mov	r3, r0
 8002486:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800248a:	499f      	ldr	r1, [pc, #636]	@ (8002708 <find_dominant_freq+0x6a0>)
 800248c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800248e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002492:	4619      	mov	r1, r3
 8002494:	4610      	mov	r0, r2
 8002496:	f7fe fe5b 	bl	8001150 <__aeabi_fcmplt>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d04f      	beq.n	8002540 <find_dominant_freq+0x4d8>
          // Verify fundamental bin magnitude
          uint32_t fund_idx = (uint32_t)(fund * N / SAMPLING_RATE);
 80024a0:	6838      	ldr	r0, [r7, #0]
 80024a2:	f7fe fc5f 	bl	8000d64 <__aeabi_ui2f>
 80024a6:	4603      	mov	r3, r0
 80024a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fcb2 	bl	8000e14 <__aeabi_fmul>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4996      	ldr	r1, [pc, #600]	@ (800270c <find_dominant_freq+0x6a4>)
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fd61 	bl	8000f7c <__aeabi_fdiv>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe feab 	bl	8001218 <__aeabi_f2uiz>
 80024c2:	4603      	mov	r3, r0
 80024c4:	653b      	str	r3, [r7, #80]	@ 0x50
          float fund_mag;
          arm_sqrt_f32(fft_out[2*fund_idx] * fft_out[2*fund_idx] + fft_out[2*fund_idx+1] * fft_out[2*fund_idx+1], &fund_mag);
 80024c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	4413      	add	r3, r2
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4619      	mov	r1, r3
 80024dc:	f7fe fc9a 	bl	8000e14 <__aeabi_fmul>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461c      	mov	r4, r3
 80024e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	3304      	adds	r3, #4
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	3304      	adds	r3, #4
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4619      	mov	r1, r3
 80024fe:	f7fe fc89 	bl	8000e14 <__aeabi_fmul>
 8002502:	4603      	mov	r3, r0
 8002504:	4619      	mov	r1, r3
 8002506:	4620      	mov	r0, r4
 8002508:	f7fe fb7c 	bl	8000c04 <__addsf3>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002514:	4619      	mov	r1, r3
 8002516:	4610      	mov	r0, r2
 8002518:	f7ff fac8 	bl	8001aac <arm_sqrt_f32>
          float mag_threshold = (i == 0) ? MIN_MAG_THRESHOLD / 4.0f : MIN_MAG_THRESHOLD / 2.0f;
 800251c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <find_dominant_freq+0x4be>
 8002522:	4b7b      	ldr	r3, [pc, #492]	@ (8002710 <find_dominant_freq+0x6a8>)
 8002524:	e000      	b.n	8002528 <find_dominant_freq+0x4c0>
 8002526:	4b7b      	ldr	r3, [pc, #492]	@ (8002714 <find_dominant_freq+0x6ac>)
 8002528:	64fb      	str	r3, [r7, #76]	@ 0x4c
          if (fund_mag > mag_threshold) {
 800252a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800252c:	4619      	mov	r1, r3
 800252e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002530:	f7fe fe0e 	bl	8001150 <__aeabi_fcmplt>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <find_dominant_freq+0x4d8>
            freq = fund;
 800253a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800253c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800253e:	e005      	b.n	800254c <find_dominant_freq+0x4e4>
      for (int i = 0; i < 6; i++) {
 8002540:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002542:	3301      	adds	r3, #1
 8002544:	673b      	str	r3, [r7, #112]	@ 0x70
 8002546:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002548:	2b05      	cmp	r3, #5
 800254a:	dd93      	ble.n	8002474 <find_dominant_freq+0x40c>
      }
    }
  }

  // Check for subharmonic (freq < 110 Hz, doubled freq matches a note)
  if (freq >= 50.0f && freq <= 400.0f) {
 800254c:	4972      	ldr	r1, [pc, #456]	@ (8002718 <find_dominant_freq+0x6b0>)
 800254e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002550:	f7fe fe12 	bl	8001178 <__aeabi_fcmpge>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80f0 	beq.w	800273c <find_dominant_freq+0x6d4>
 800255c:	496f      	ldr	r1, [pc, #444]	@ (800271c <find_dominant_freq+0x6b4>)
 800255e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002560:	f7fe fe00 	bl	8001164 <__aeabi_fcmple>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80e8 	beq.w	800273c <find_dominant_freq+0x6d4>
    if (freq < 110.0f) {
 800256c:	496c      	ldr	r1, [pc, #432]	@ (8002720 <find_dominant_freq+0x6b8>)
 800256e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002570:	f7fe fdee 	bl	8001150 <__aeabi_fcmplt>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 80e0 	beq.w	800273c <find_dominant_freq+0x6d4>
      float doubled = freq * 2;
 800257c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800257e:	4619      	mov	r1, r3
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fb3f 	bl	8000c04 <__addsf3>
 8002586:	4603      	mov	r3, r0
 8002588:	64bb      	str	r3, [r7, #72]	@ 0x48
      for (int i = 0; i < 6; i++) {
 800258a:	2300      	movs	r3, #0
 800258c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800258e:	e0d1      	b.n	8002734 <find_dominant_freq+0x6cc>
        if (fabs(doubled - note_freqs[i]) < note_tolerances[i]) {
 8002590:	4a5c      	ldr	r2, [pc, #368]	@ (8002704 <find_dominant_freq+0x69c>)
 8002592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002598:	4619      	mov	r1, r3
 800259a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800259c:	f7fe fb30 	bl	8000c00 <__aeabi_fsub>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025a6:	4958      	ldr	r1, [pc, #352]	@ (8002708 <find_dominant_freq+0x6a0>)
 80025a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025ae:	4619      	mov	r1, r3
 80025b0:	4610      	mov	r0, r2
 80025b2:	f7fe fdcd 	bl	8001150 <__aeabi_fcmplt>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80b8 	beq.w	800272e <find_dominant_freq+0x6c6>
          // Skip doubling for E2 (i == 0) if freq >= 60 Hz
          if (i == 0 && freq >= 60.0f) continue;
 80025be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <find_dominant_freq+0x56c>
 80025c4:	4957      	ldr	r1, [pc, #348]	@ (8002724 <find_dominant_freq+0x6bc>)
 80025c6:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80025c8:	f7fe fdd6 	bl	8001178 <__aeabi_fcmpge>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 80ac 	bne.w	800272c <find_dominant_freq+0x6c4>
          uint32_t doubled_idx = (uint32_t)(doubled * N / SAMPLING_RATE);
 80025d4:	6838      	ldr	r0, [r7, #0]
 80025d6:	f7fe fbc5 	bl	8000d64 <__aeabi_ui2f>
 80025da:	4603      	mov	r3, r0
 80025dc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fc18 	bl	8000e14 <__aeabi_fmul>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4949      	ldr	r1, [pc, #292]	@ (800270c <find_dominant_freq+0x6a4>)
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fcc7 	bl	8000f7c <__aeabi_fdiv>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fe11 	bl	8001218 <__aeabi_f2uiz>
 80025f6:	4603      	mov	r3, r0
 80025f8:	647b      	str	r3, [r7, #68]	@ 0x44
          float doubled_mag;
          arm_sqrt_f32(fft_out[2*doubled_idx] * fft_out[2*doubled_idx] + fft_out[2*doubled_idx+1] * fft_out[2*doubled_idx+1], &doubled_mag);
 80025fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4619      	mov	r1, r3
 8002610:	f7fe fc00 	bl	8000e14 <__aeabi_fmul>
 8002614:	4603      	mov	r3, r0
 8002616:	461c      	mov	r4, r3
 8002618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	3304      	adds	r3, #4
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	3304      	adds	r3, #4
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4619      	mov	r1, r3
 8002632:	f7fe fbef 	bl	8000e14 <__aeabi_fmul>
 8002636:	4603      	mov	r3, r0
 8002638:	4619      	mov	r1, r3
 800263a:	4620      	mov	r0, r4
 800263c:	f7fe fae2 	bl	8000c04 <__addsf3>
 8002640:	4603      	mov	r3, r0
 8002642:	461a      	mov	r2, r3
 8002644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002648:	4619      	mov	r1, r3
 800264a:	4610      	mov	r0, r2
 800264c:	f7ff fa2e 	bl	8001aac <arm_sqrt_f32>
          float subharmonic_threshold = (i == 0) ? MIN_MAG_THRESHOLD : MIN_MAG_THRESHOLD / 2.0f;
 8002650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <find_dominant_freq+0x5f2>
 8002656:	4b34      	ldr	r3, [pc, #208]	@ (8002728 <find_dominant_freq+0x6c0>)
 8002658:	e000      	b.n	800265c <find_dominant_freq+0x5f4>
 800265a:	4b2e      	ldr	r3, [pc, #184]	@ (8002714 <find_dominant_freq+0x6ac>)
 800265c:	643b      	str	r3, [r7, #64]	@ 0x40
          // Ensure original freq magnitude is lower to confirm subharmonic
          uint32_t orig_idx = (uint32_t)(freq * N / SAMPLING_RATE);
 800265e:	6838      	ldr	r0, [r7, #0]
 8002660:	f7fe fb80 	bl	8000d64 <__aeabi_ui2f>
 8002664:	4603      	mov	r3, r0
 8002666:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fbd3 	bl	8000e14 <__aeabi_fmul>
 800266e:	4603      	mov	r3, r0
 8002670:	4926      	ldr	r1, [pc, #152]	@ (800270c <find_dominant_freq+0x6a4>)
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fc82 	bl	8000f7c <__aeabi_fdiv>
 8002678:	4603      	mov	r3, r0
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fdcc 	bl	8001218 <__aeabi_f2uiz>
 8002680:	4603      	mov	r3, r0
 8002682:	63fb      	str	r3, [r7, #60]	@ 0x3c
          float orig_mag;
          arm_sqrt_f32(fft_out[2*orig_idx] * fft_out[2*orig_idx] + fft_out[2*orig_idx+1] * fft_out[2*orig_idx+1], &orig_mag);
 8002684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	4413      	add	r3, r2
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	f7fe fbbb 	bl	8000e14 <__aeabi_fmul>
 800269e:	4603      	mov	r3, r0
 80026a0:	461c      	mov	r4, r3
 80026a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	3304      	adds	r3, #4
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	4413      	add	r3, r2
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	3304      	adds	r3, #4
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	4413      	add	r3, r2
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4619      	mov	r1, r3
 80026bc:	f7fe fbaa 	bl	8000e14 <__aeabi_fmul>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4619      	mov	r1, r3
 80026c4:	4620      	mov	r0, r4
 80026c6:	f7fe fa9d 	bl	8000c04 <__addsf3>
 80026ca:	4603      	mov	r3, r0
 80026cc:	461a      	mov	r2, r3
 80026ce:	f107 0320 	add.w	r3, r7, #32
 80026d2:	4619      	mov	r1, r3
 80026d4:	4610      	mov	r0, r2
 80026d6:	f7ff f9e9 	bl	8001aac <arm_sqrt_f32>
          if (doubled_mag > subharmonic_threshold && doubled_mag > orig_mag) {
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	4619      	mov	r1, r3
 80026de:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80026e0:	f7fe fd36 	bl	8001150 <__aeabi_fcmplt>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d021      	beq.n	800272e <find_dominant_freq+0x6c6>
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	6a3a      	ldr	r2, [r7, #32]
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fd4b 	bl	800118c <__aeabi_fcmpgt>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d018      	beq.n	800272e <find_dominant_freq+0x6c6>
            freq = doubled;
 80026fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002700:	e01c      	b.n	800273c <find_dominant_freq+0x6d4>
 8002702:	bf00      	nop
 8002704:	0800ad40 	.word	0x0800ad40
 8002708:	0800ad58 	.word	0x0800ad58
 800270c:	458012e1 	.word	0x458012e1
 8002710:	3ccccccd 	.word	0x3ccccccd
 8002714:	3d4ccccd 	.word	0x3d4ccccd
 8002718:	42480000 	.word	0x42480000
 800271c:	43c80000 	.word	0x43c80000
 8002720:	42dc0000 	.word	0x42dc0000
 8002724:	42700000 	.word	0x42700000
 8002728:	3dcccccd 	.word	0x3dcccccd
          if (i == 0 && freq >= 60.0f) continue;
 800272c:	bf00      	nop
      for (int i = 0; i < 6; i++) {
 800272e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002730:	3301      	adds	r3, #1
 8002732:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002736:	2b05      	cmp	r3, #5
 8002738:	f77f af2a 	ble.w	8002590 <find_dominant_freq+0x528>
      }
    }
  }

  // Sharp note correction for E4 (check for F4 ~349.23 Hz, F#4 ~369.99 Hz)
  if (freq >= 350.0f && freq <= 400.0f && selected_note_idx == 5) {
 800273c:	4960      	ldr	r1, [pc, #384]	@ (80028c0 <find_dominant_freq+0x858>)
 800273e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002740:	f7fe fd1a 	bl	8001178 <__aeabi_fcmpge>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80a7 	beq.w	800289a <find_dominant_freq+0x832>
 800274c:	495d      	ldr	r1, [pc, #372]	@ (80028c4 <find_dominant_freq+0x85c>)
 800274e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002750:	f7fe fd08 	bl	8001164 <__aeabi_fcmple>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 809f 	beq.w	800289a <find_dominant_freq+0x832>
 800275c:	4b5a      	ldr	r3, [pc, #360]	@ (80028c8 <find_dominant_freq+0x860>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b05      	cmp	r3, #5
 8002762:	f040 809a 	bne.w	800289a <find_dominant_freq+0x832>
    const float sharp_notes[] = {349.23f, 369.99f}; // F4, F#4
 8002766:	4a59      	ldr	r2, [pc, #356]	@ (80028cc <find_dominant_freq+0x864>)
 8002768:	f107 0318 	add.w	r3, r7, #24
 800276c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002770:	e883 0003 	stmia.w	r3, {r0, r1}
    const float sharp_tolerances[] = {10.0f, 10.0f}; // ±10 Hz for sharp notes
 8002774:	4a56      	ldr	r2, [pc, #344]	@ (80028d0 <find_dominant_freq+0x868>)
 8002776:	f107 0310 	add.w	r3, r7, #16
 800277a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800277e:	e883 0003 	stmia.w	r3, {r0, r1}
    for (int i = 0; i < 2; i++) {
 8002782:	2300      	movs	r3, #0
 8002784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002786:	e084      	b.n	8002892 <find_dominant_freq+0x82a>
      if (fabs(freq - sharp_notes[i]) < sharp_tolerances[i]) {
 8002788:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	3388      	adds	r3, #136	@ 0x88
 800278e:	443b      	add	r3, r7
 8002790:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8002794:	4619      	mov	r1, r3
 8002796:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002798:	f7fe fa32 	bl	8000c00 <__aeabi_fsub>
 800279c:	4603      	mov	r3, r0
 800279e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	3388      	adds	r3, #136	@ 0x88
 80027a8:	443b      	add	r3, r7
 80027aa:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80027ae:	4619      	mov	r1, r3
 80027b0:	4610      	mov	r0, r2
 80027b2:	f7fe fccd 	bl	8001150 <__aeabi_fcmplt>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d067      	beq.n	800288c <find_dominant_freq+0x824>
        uint32_t sharp_idx = (uint32_t)(sharp_notes[i] * N / SAMPLING_RATE);
 80027bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	3388      	adds	r3, #136	@ 0x88
 80027c2:	443b      	add	r3, r7
 80027c4:	f853 4c70 	ldr.w	r4, [r3, #-112]
 80027c8:	6838      	ldr	r0, [r7, #0]
 80027ca:	f7fe facb 	bl	8000d64 <__aeabi_ui2f>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4619      	mov	r1, r3
 80027d2:	4620      	mov	r0, r4
 80027d4:	f7fe fb1e 	bl	8000e14 <__aeabi_fmul>
 80027d8:	4603      	mov	r3, r0
 80027da:	493e      	ldr	r1, [pc, #248]	@ (80028d4 <find_dominant_freq+0x86c>)
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fbcd 	bl	8000f7c <__aeabi_fdiv>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe fd17 	bl	8001218 <__aeabi_f2uiz>
 80027ea:	4603      	mov	r3, r0
 80027ec:	63bb      	str	r3, [r7, #56]	@ 0x38
        float sharp_mag;
        arm_sqrt_f32(fft_out[2*sharp_idx] * fft_out[2*sharp_idx] + fft_out[2*sharp_idx+1] * fft_out[2*sharp_idx+1], &sharp_mag);
 80027ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	4413      	add	r3, r2
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4619      	mov	r1, r3
 8002804:	f7fe fb06 	bl	8000e14 <__aeabi_fmul>
 8002808:	4603      	mov	r3, r0
 800280a:	461c      	mov	r4, r3
 800280c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	3304      	adds	r3, #4
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	3304      	adds	r3, #4
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	f7fe faf5 	bl	8000e14 <__aeabi_fmul>
 800282a:	4603      	mov	r3, r0
 800282c:	4619      	mov	r1, r3
 800282e:	4620      	mov	r0, r4
 8002830:	f7fe f9e8 	bl	8000c04 <__addsf3>
 8002834:	4603      	mov	r3, r0
 8002836:	461a      	mov	r2, r3
 8002838:	f107 030c 	add.w	r3, r7, #12
 800283c:	4619      	mov	r1, r3
 800283e:	4610      	mov	r0, r2
 8002840:	f7ff f934 	bl	8001aac <arm_sqrt_f32>
        if (sharp_mag > 0.02f) {
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4924      	ldr	r1, [pc, #144]	@ (80028d8 <find_dominant_freq+0x870>)
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fc9f 	bl	800118c <__aeabi_fcmpgt>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01b      	beq.n	800288c <find_dominant_freq+0x824>
          global_raw_freq = sharp_notes[i] + 2.0f; // Apply 2 Hz offset
 8002854:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	3388      	adds	r3, #136	@ 0x88
 800285a:	443b      	add	r3, r7
 800285c:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8002860:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe f9cd 	bl	8000c04 <__addsf3>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <find_dominant_freq+0x874>)
 8002870:	601a      	str	r2, [r3, #0]
          return sharp_notes[i] + 2.0f; // Snap to known sharp note frequency
 8002872:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	3388      	adds	r3, #136	@ 0x88
 8002878:	443b      	add	r3, r7
 800287a:	f853 3c70 	ldr.w	r3, [r3, #-112]
 800287e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe f9be 	bl	8000c04 <__addsf3>
 8002888:	4603      	mov	r3, r0
 800288a:	e015      	b.n	80028b8 <find_dominant_freq+0x850>
    for (int i = 0; i < 2; i++) {
 800288c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800288e:	3301      	adds	r3, #1
 8002890:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002892:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002894:	2b01      	cmp	r3, #1
 8002896:	f77f af77 	ble.w	8002788 <find_dominant_freq+0x720>
      }
    }
  }

  // Apply 2 Hz offset to final frequency
  global_raw_freq = freq + 2.0f;
 800289a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800289e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80028a0:	f7fe f9b0 	bl	8000c04 <__addsf3>
 80028a4:	4603      	mov	r3, r0
 80028a6:	461a      	mov	r2, r3
 80028a8:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <find_dominant_freq+0x874>)
 80028aa:	601a      	str	r2, [r3, #0]
  return freq + 2.0f; // Return detected frequency with offset
 80028ac:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80028b0:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80028b2:	f7fe f9a7 	bl	8000c04 <__addsf3>
 80028b6:	4603      	mov	r3, r0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	378c      	adds	r7, #140	@ 0x8c
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd90      	pop	{r4, r7, pc}
 80028c0:	43af0000 	.word	0x43af0000
 80028c4:	43c80000 	.word	0x43c80000
 80028c8:	20002098 	.word	0x20002098
 80028cc:	0800a624 	.word	0x0800a624
 80028d0:	0800a62c 	.word	0x0800a62c
 80028d4:	458012e1 	.word	0x458012e1
 80028d8:	3ca3d70a 	.word	0x3ca3d70a
 80028dc:	200062f4 	.word	0x200062f4

080028e0 <map_to_note>:
  * @param  target_freq: Target note frequency
  * @param  note: Output buffer for note name
  * @param  status: Output buffer for tuning status
  * @retval None
  */
void map_to_note(float freq, float target_freq, char *note, char *status) {
 80028e0:	b5b0      	push	{r4, r5, r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	603b      	str	r3, [r7, #0]
  strcpy(note, note_names[selected_note_idx]); // Always set to selected note
 80028ee:	4b30      	ldr	r3, [pc, #192]	@ (80029b0 <map_to_note+0xd0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a30      	ldr	r2, [pc, #192]	@ (80029b4 <map_to_note+0xd4>)
 80028f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f8:	4619      	mov	r1, r3
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f007 f97c 	bl	8009bf8 <strcpy>
  if (freq < 50.0f) {
 8002900:	492d      	ldr	r1, [pc, #180]	@ (80029b8 <map_to_note+0xd8>)
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f7fe fc24 	bl	8001150 <__aeabi_fcmplt>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <map_to_note+0x42>
    strcpy(status, "No Signal");
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	492a      	ldr	r1, [pc, #168]	@ (80029bc <map_to_note+0xdc>)
 8002912:	461a      	mov	r2, r3
 8002914:	460b      	mov	r3, r1
 8002916:	cb03      	ldmia	r3!, {r0, r1}
 8002918:	6010      	str	r0, [r2, #0]
 800291a:	6051      	str	r1, [r2, #4]
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	8113      	strh	r3, [r2, #8]
    return;
 8002920:	e03c      	b.n	800299c <map_to_note+0xbc>
  }
  if (fabs(freq - target_freq) / target_freq < 0.02f)
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7fe f96b 	bl	8000c00 <__aeabi_fsub>
 800292a:	4603      	mov	r3, r0
 800292c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002930:	4618      	mov	r0, r3
 8002932:	f7fd fe4f 	bl	80005d4 <__aeabi_f2d>
 8002936:	4604      	mov	r4, r0
 8002938:	460d      	mov	r5, r1
 800293a:	68b8      	ldr	r0, [r7, #8]
 800293c:	f7fd fe4a 	bl	80005d4 <__aeabi_f2d>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4620      	mov	r0, r4
 8002946:	4629      	mov	r1, r5
 8002948:	f7fd ffc6 	bl	80008d8 <__aeabi_ddiv>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	a314      	add	r3, pc, #80	@ (adr r3, 80029a8 <map_to_note+0xc8>)
 8002956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295a:	f7fe f905 	bl	8000b68 <__aeabi_dcmplt>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <map_to_note+0x94>
    strcpy(status, "In Tune");
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4916      	ldr	r1, [pc, #88]	@ (80029c0 <map_to_note+0xe0>)
 8002968:	461a      	mov	r2, r3
 800296a:	460b      	mov	r3, r1
 800296c:	cb03      	ldmia	r3!, {r0, r1}
 800296e:	6010      	str	r0, [r2, #0]
 8002970:	6051      	str	r1, [r2, #4]
 8002972:	e013      	b.n	800299c <map_to_note+0xbc>
  else if (freq < target_freq)
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7fe fbea 	bl	8001150 <__aeabi_fcmplt>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <map_to_note+0xb0>
    strcpy(status, "Flat");
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	4a0f      	ldr	r2, [pc, #60]	@ (80029c4 <map_to_note+0xe4>)
 8002986:	6810      	ldr	r0, [r2, #0]
 8002988:	6018      	str	r0, [r3, #0]
 800298a:	7912      	ldrb	r2, [r2, #4]
 800298c:	711a      	strb	r2, [r3, #4]
 800298e:	e005      	b.n	800299c <map_to_note+0xbc>
  else
    strcpy(status, "Sharp");
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	4a0d      	ldr	r2, [pc, #52]	@ (80029c8 <map_to_note+0xe8>)
 8002994:	6810      	ldr	r0, [r2, #0]
 8002996:	6018      	str	r0, [r3, #0]
 8002998:	8892      	ldrh	r2, [r2, #4]
 800299a:	809a      	strh	r2, [r3, #4]
}
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bdb0      	pop	{r4, r5, r7, pc}
 80029a2:	bf00      	nop
 80029a4:	f3af 8000 	nop.w
 80029a8:	40000000 	.word	0x40000000
 80029ac:	3f947ae1 	.word	0x3f947ae1
 80029b0:	20002098 	.word	0x20002098
 80029b4:	20002000 	.word	0x20002000
 80029b8:	42480000 	.word	0x42480000
 80029bc:	0800a634 	.word	0x0800a634
 80029c0:	0800a640 	.word	0x0800a640
 80029c4:	0800a648 	.word	0x0800a648
 80029c8:	0800a650 	.word	0x0800a650

080029cc <motor_control>:
  * @brief  Control L298N motor driver
  * @param  direction: 1 (clockwise), -1 (counterclockwise), 0 (stop)
  * @param  enable: 1 (motor on), 0 (motor off)
  * @retval None
  */
void motor_control(int8_t direction, uint8_t enable) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	460a      	mov	r2, r1
 80029d6:	71fb      	strb	r3, [r7, #7]
 80029d8:	4613      	mov	r3, r2
 80029da:	71bb      	strb	r3, [r7, #6]
  if (enable) {
 80029dc:	79bb      	ldrb	r3, [r7, #6]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d032      	beq.n	8002a48 <motor_control+0x7c>
    // Use 100% duty cycle for E2, 75% for others
    uint16_t duty_cycle = (selected_note_idx == 0) ? PULSE_DUTY_CYCLE_E2 : PULSE_DUTY_CYCLE;
 80029e2:	4b20      	ldr	r3, [pc, #128]	@ (8002a64 <motor_control+0x98>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d102      	bne.n	80029f0 <motor_control+0x24>
 80029ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ee:	e001      	b.n	80029f4 <motor_control+0x28>
 80029f0:	f240 23ee 	movw	r3, #750	@ 0x2ee
 80029f4:	81fb      	strh	r3, [r7, #14]
    if (direction == 1) { // Clockwise (sharpen all strings)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d10f      	bne.n	8002a1e <motor_control+0x52>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);   // IN1 high
 80029fe:	2201      	movs	r2, #1
 8002a00:	2104      	movs	r1, #4
 8002a02:	4819      	ldr	r0, [pc, #100]	@ (8002a68 <motor_control+0x9c>)
 8002a04:	f003 fdc3 	bl	800658e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // IN2 low
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a0e:	4816      	ldr	r0, [pc, #88]	@ (8002a68 <motor_control+0x9c>)
 8002a10:	f003 fdbd 	bl	800658e <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, duty_cycle);
 8002a14:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <motor_control+0xa0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	89fa      	ldrh	r2, [r7, #14]
 8002a1a:	635a      	str	r2, [r3, #52]	@ 0x34
    }
  } else {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_8, GPIO_PIN_RESET); // Both low
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0); // PWM off
  }
}
 8002a1c:	e01e      	b.n	8002a5c <motor_control+0x90>
    } else if (direction == -1) { // Counterclockwise (flatten all strings)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d119      	bne.n	8002a5c <motor_control+0x90>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // IN1 low
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2104      	movs	r1, #4
 8002a2c:	480e      	ldr	r0, [pc, #56]	@ (8002a68 <motor_control+0x9c>)
 8002a2e:	f003 fdae 	bl	800658e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);   // IN2 high
 8002a32:	2201      	movs	r2, #1
 8002a34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a38:	480b      	ldr	r0, [pc, #44]	@ (8002a68 <motor_control+0x9c>)
 8002a3a:	f003 fda8 	bl	800658e <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, duty_cycle);
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <motor_control+0xa0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	89fa      	ldrh	r2, [r7, #14]
 8002a44:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002a46:	e009      	b.n	8002a5c <motor_control+0x90>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_8, GPIO_PIN_RESET); // Both low
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002a4e:	4806      	ldr	r0, [pc, #24]	@ (8002a68 <motor_control+0x9c>)
 8002a50:	f003 fd9d 	bl	800658e <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0); // PWM off
 8002a54:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <motor_control+0xa0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002a5c:	bf00      	nop
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20002098 	.word	0x20002098
 8002a68:	40010800 	.word	0x40010800
 8002a6c:	20002248 	.word	0x20002248

08002a70 <draw_buttons>:
/**
  * @brief  Draw buttons for guitar notes
  * @param  None
  * @retval None
  */
void draw_buttons(void) {
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af02      	add	r7, sp, #8
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a76:	b672      	cpsid	i
}
 8002a78:	bf00      	nop
  __disable_irq(); // Prevent interrupts during screen update
  LCD_Clear(0, 0, 240, 320, BACKGROUND); // Double clear for reliability
 8002a7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002a84:	22f0      	movs	r2, #240	@ 0xf0
 8002a86:	2100      	movs	r1, #0
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f7fe fdf0 	bl	800166e <LCD_Clear>
  LCD_Clear(0, 0, 240, 320, BACKGROUND);
 8002a8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002a98:	22f0      	movs	r2, #240	@ 0xf0
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7fe fde6 	bl	800166e <LCD_Clear>
  for (uint8_t i = 0; i < num_buttons; i++) {
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	71fb      	strb	r3, [r7, #7]
 8002aa6:	e09a      	b.n	8002bde <draw_buttons+0x16e>
    // Draw button rectangle
    LCD_DrawLine(buttons[i].x_min, buttons[i].y_min, buttons[i].x_max, buttons[i].y_min, BLACK);
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	4a52      	ldr	r2, [pc, #328]	@ (8002bf4 <draw_buttons+0x184>)
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	4413      	add	r3, r2
 8002ab0:	8818      	ldrh	r0, [r3, #0]
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	4a4f      	ldr	r2, [pc, #316]	@ (8002bf4 <draw_buttons+0x184>)
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	4413      	add	r3, r2
 8002aba:	3304      	adds	r3, #4
 8002abc:	8819      	ldrh	r1, [r3, #0]
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	4a4c      	ldr	r2, [pc, #304]	@ (8002bf4 <draw_buttons+0x184>)
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	881a      	ldrh	r2, [r3, #0]
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	4c49      	ldr	r4, [pc, #292]	@ (8002bf4 <draw_buttons+0x184>)
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	4423      	add	r3, r4
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	2400      	movs	r4, #0
 8002ad8:	9400      	str	r4, [sp, #0]
 8002ada:	f7fe fdeb 	bl	80016b4 <LCD_DrawLine>
    LCD_DrawLine(buttons[i].x_max, buttons[i].y_min, buttons[i].x_max, buttons[i].y_max, BLACK);
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	4a44      	ldr	r2, [pc, #272]	@ (8002bf4 <draw_buttons+0x184>)
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	8818      	ldrh	r0, [r3, #0]
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	4a41      	ldr	r2, [pc, #260]	@ (8002bf4 <draw_buttons+0x184>)
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	4413      	add	r3, r2
 8002af2:	3304      	adds	r3, #4
 8002af4:	8819      	ldrh	r1, [r3, #0]
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	4a3e      	ldr	r2, [pc, #248]	@ (8002bf4 <draw_buttons+0x184>)
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	4413      	add	r3, r2
 8002afe:	3302      	adds	r3, #2
 8002b00:	881a      	ldrh	r2, [r3, #0]
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	4c3b      	ldr	r4, [pc, #236]	@ (8002bf4 <draw_buttons+0x184>)
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	4423      	add	r3, r4
 8002b0a:	3306      	adds	r3, #6
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	2400      	movs	r4, #0
 8002b10:	9400      	str	r4, [sp, #0]
 8002b12:	f7fe fdcf 	bl	80016b4 <LCD_DrawLine>
    LCD_DrawLine(buttons[i].x_max, buttons[i].y_max, buttons[i].x_min, buttons[i].y_max, BLACK);
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	4a36      	ldr	r2, [pc, #216]	@ (8002bf4 <draw_buttons+0x184>)
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3302      	adds	r3, #2
 8002b20:	8818      	ldrh	r0, [r3, #0]
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	4a33      	ldr	r2, [pc, #204]	@ (8002bf4 <draw_buttons+0x184>)
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	4413      	add	r3, r2
 8002b2a:	3306      	adds	r3, #6
 8002b2c:	8819      	ldrh	r1, [r3, #0]
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	4a30      	ldr	r2, [pc, #192]	@ (8002bf4 <draw_buttons+0x184>)
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	4413      	add	r3, r2
 8002b36:	881a      	ldrh	r2, [r3, #0]
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	4c2e      	ldr	r4, [pc, #184]	@ (8002bf4 <draw_buttons+0x184>)
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	4423      	add	r3, r4
 8002b40:	3306      	adds	r3, #6
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	2400      	movs	r4, #0
 8002b46:	9400      	str	r4, [sp, #0]
 8002b48:	f7fe fdb4 	bl	80016b4 <LCD_DrawLine>
    LCD_DrawLine(buttons[i].x_min, buttons[i].y_max, buttons[i].x_min, buttons[i].y_min, BLACK);
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	4a29      	ldr	r2, [pc, #164]	@ (8002bf4 <draw_buttons+0x184>)
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	4413      	add	r3, r2
 8002b54:	8818      	ldrh	r0, [r3, #0]
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	4a26      	ldr	r2, [pc, #152]	@ (8002bf4 <draw_buttons+0x184>)
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3306      	adds	r3, #6
 8002b60:	8819      	ldrh	r1, [r3, #0]
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	4a23      	ldr	r2, [pc, #140]	@ (8002bf4 <draw_buttons+0x184>)
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	4413      	add	r3, r2
 8002b6a:	881a      	ldrh	r2, [r3, #0]
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	4c21      	ldr	r4, [pc, #132]	@ (8002bf4 <draw_buttons+0x184>)
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	4423      	add	r3, r4
 8002b74:	3304      	adds	r3, #4
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	2400      	movs	r4, #0
 8002b7a:	9400      	str	r4, [sp, #0]
 8002b7c:	f7fe fd9a 	bl	80016b4 <LCD_DrawLine>
    // Draw note name
    uint16_t text_x = buttons[i].x_min + (BUTTON_WIDTH - strlen(buttons[i].note) * 8) / 2;
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf4 <draw_buttons+0x184>)
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	4413      	add	r3, r2
 8002b88:	881c      	ldrh	r4, [r3, #0]
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	4a19      	ldr	r2, [pc, #100]	@ (8002bf4 <draw_buttons+0x184>)
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	4413      	add	r3, r2
 8002b92:	3308      	adds	r3, #8
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fbb0 	bl	80002fc <strlen>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8002ba4:	085b      	lsrs	r3, r3, #1
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	4423      	add	r3, r4
 8002baa:	80bb      	strh	r3, [r7, #4]
    uint16_t text_y = buttons[i].y_min + (BUTTON_HEIGHT - 16) / 2;
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	4a11      	ldr	r2, [pc, #68]	@ (8002bf4 <draw_buttons+0x184>)
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	807b      	strh	r3, [r7, #2]
    LCD_DrawString_Color(text_x, text_y, buttons[i].note, WHITE, BLACK);
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf4 <draw_buttons+0x184>)
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3308      	adds	r3, #8
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	8879      	ldrh	r1, [r7, #2]
 8002bca:	88b8      	ldrh	r0, [r7, #4]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bd4:	f7fe fe82 	bl	80018dc <LCD_DrawString_Color>
  for (uint8_t i = 0; i < num_buttons; i++) {
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	71fb      	strb	r3, [r7, #7]
 8002bde:	2206      	movs	r2, #6
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	4293      	cmp	r3, r2
 8002be4:	f4ff af60 	bcc.w	8002aa8 <draw_buttons+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 8002be8:	b662      	cpsie	i
}
 8002bea:	bf00      	nop
  }
  __enable_irq();
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd90      	pop	{r4, r7, pc}
 8002bf4:	20002018 	.word	0x20002018

08002bf8 <draw_data_screen>:
/**
  * @brief  Draw data screen with tuning information, Back button, and Start/Stop button
  * @param  None
  * @retval None
  */
void draw_data_screen(void) {
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af02      	add	r7, sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
 8002bfe:	b672      	cpsid	i
}
 8002c00:	bf00      	nop
  __disable_irq(); // Prevent interrupts during screen update
  LCD_Clear(0, 0, 240, 320, BACKGROUND);
 8002c02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002c0c:	22f0      	movs	r2, #240	@ 0xf0
 8002c0e:	2100      	movs	r1, #0
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7fe fd2c 	bl	800166e <LCD_Clear>
  // Draw Back button
  LCD_DrawLine(back_button.x_min, back_button.y_min, back_button.x_max, back_button.y_min, BLACK);
 8002c16:	4b58      	ldr	r3, [pc, #352]	@ (8002d78 <draw_data_screen+0x180>)
 8002c18:	8818      	ldrh	r0, [r3, #0]
 8002c1a:	4b57      	ldr	r3, [pc, #348]	@ (8002d78 <draw_data_screen+0x180>)
 8002c1c:	8899      	ldrh	r1, [r3, #4]
 8002c1e:	4b56      	ldr	r3, [pc, #344]	@ (8002d78 <draw_data_screen+0x180>)
 8002c20:	885a      	ldrh	r2, [r3, #2]
 8002c22:	4b55      	ldr	r3, [pc, #340]	@ (8002d78 <draw_data_screen+0x180>)
 8002c24:	889b      	ldrh	r3, [r3, #4]
 8002c26:	2400      	movs	r4, #0
 8002c28:	9400      	str	r4, [sp, #0]
 8002c2a:	f7fe fd43 	bl	80016b4 <LCD_DrawLine>
  LCD_DrawLine(back_button.x_max, back_button.y_min, back_button.x_max, back_button.y_max, BLACK);
 8002c2e:	4b52      	ldr	r3, [pc, #328]	@ (8002d78 <draw_data_screen+0x180>)
 8002c30:	8858      	ldrh	r0, [r3, #2]
 8002c32:	4b51      	ldr	r3, [pc, #324]	@ (8002d78 <draw_data_screen+0x180>)
 8002c34:	8899      	ldrh	r1, [r3, #4]
 8002c36:	4b50      	ldr	r3, [pc, #320]	@ (8002d78 <draw_data_screen+0x180>)
 8002c38:	885a      	ldrh	r2, [r3, #2]
 8002c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8002d78 <draw_data_screen+0x180>)
 8002c3c:	88db      	ldrh	r3, [r3, #6]
 8002c3e:	2400      	movs	r4, #0
 8002c40:	9400      	str	r4, [sp, #0]
 8002c42:	f7fe fd37 	bl	80016b4 <LCD_DrawLine>
  LCD_DrawLine(back_button.x_max, back_button.y_max, back_button.x_min, back_button.y_max, BLACK);
 8002c46:	4b4c      	ldr	r3, [pc, #304]	@ (8002d78 <draw_data_screen+0x180>)
 8002c48:	8858      	ldrh	r0, [r3, #2]
 8002c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002d78 <draw_data_screen+0x180>)
 8002c4c:	88d9      	ldrh	r1, [r3, #6]
 8002c4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d78 <draw_data_screen+0x180>)
 8002c50:	881a      	ldrh	r2, [r3, #0]
 8002c52:	4b49      	ldr	r3, [pc, #292]	@ (8002d78 <draw_data_screen+0x180>)
 8002c54:	88db      	ldrh	r3, [r3, #6]
 8002c56:	2400      	movs	r4, #0
 8002c58:	9400      	str	r4, [sp, #0]
 8002c5a:	f7fe fd2b 	bl	80016b4 <LCD_DrawLine>
  LCD_DrawLine(back_button.x_min, back_button.y_max, back_button.x_min, back_button.y_min, BLACK);
 8002c5e:	4b46      	ldr	r3, [pc, #280]	@ (8002d78 <draw_data_screen+0x180>)
 8002c60:	8818      	ldrh	r0, [r3, #0]
 8002c62:	4b45      	ldr	r3, [pc, #276]	@ (8002d78 <draw_data_screen+0x180>)
 8002c64:	88d9      	ldrh	r1, [r3, #6]
 8002c66:	4b44      	ldr	r3, [pc, #272]	@ (8002d78 <draw_data_screen+0x180>)
 8002c68:	881a      	ldrh	r2, [r3, #0]
 8002c6a:	4b43      	ldr	r3, [pc, #268]	@ (8002d78 <draw_data_screen+0x180>)
 8002c6c:	889b      	ldrh	r3, [r3, #4]
 8002c6e:	2400      	movs	r4, #0
 8002c70:	9400      	str	r4, [sp, #0]
 8002c72:	f7fe fd1f 	bl	80016b4 <LCD_DrawLine>
  uint16_t text_x = back_button.x_min + (BACK_BUTTON_WIDTH - strlen(back_button.note) * 8) / 2;
 8002c76:	4b40      	ldr	r3, [pc, #256]	@ (8002d78 <draw_data_screen+0x180>)
 8002c78:	881c      	ldrh	r4, [r3, #0]
 8002c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d78 <draw_data_screen+0x180>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd fb3c 	bl	80002fc <strlen>
 8002c84:	4603      	mov	r3, r0
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	4423      	add	r3, r4
 8002c92:	80fb      	strh	r3, [r7, #6]
  uint16_t text_y = back_button.y_min + (BACK_BUTTON_HEIGHT - 16) / 2;
 8002c94:	4b38      	ldr	r3, [pc, #224]	@ (8002d78 <draw_data_screen+0x180>)
 8002c96:	889b      	ldrh	r3, [r3, #4]
 8002c98:	3307      	adds	r3, #7
 8002c9a:	80bb      	strh	r3, [r7, #4]
  LCD_DrawString_Color(text_x, text_y, back_button.note, WHITE, BLACK);
 8002c9c:	4b36      	ldr	r3, [pc, #216]	@ (8002d78 <draw_data_screen+0x180>)
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	88b9      	ldrh	r1, [r7, #4]
 8002ca2:	88f8      	ldrh	r0, [r7, #6]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cac:	f7fe fe16 	bl	80018dc <LCD_DrawString_Color>
  // Draw Start/Stop button
  LCD_DrawLine(start_button.x_min, start_button.y_min, start_button.x_max, start_button.y_min, BLACK);
 8002cb0:	4b32      	ldr	r3, [pc, #200]	@ (8002d7c <draw_data_screen+0x184>)
 8002cb2:	8818      	ldrh	r0, [r3, #0]
 8002cb4:	4b31      	ldr	r3, [pc, #196]	@ (8002d7c <draw_data_screen+0x184>)
 8002cb6:	8899      	ldrh	r1, [r3, #4]
 8002cb8:	4b30      	ldr	r3, [pc, #192]	@ (8002d7c <draw_data_screen+0x184>)
 8002cba:	885a      	ldrh	r2, [r3, #2]
 8002cbc:	4b2f      	ldr	r3, [pc, #188]	@ (8002d7c <draw_data_screen+0x184>)
 8002cbe:	889b      	ldrh	r3, [r3, #4]
 8002cc0:	2400      	movs	r4, #0
 8002cc2:	9400      	str	r4, [sp, #0]
 8002cc4:	f7fe fcf6 	bl	80016b4 <LCD_DrawLine>
  LCD_DrawLine(start_button.x_max, start_button.y_min, start_button.x_max, start_button.y_max, BLACK);
 8002cc8:	4b2c      	ldr	r3, [pc, #176]	@ (8002d7c <draw_data_screen+0x184>)
 8002cca:	8858      	ldrh	r0, [r3, #2]
 8002ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8002d7c <draw_data_screen+0x184>)
 8002cce:	8899      	ldrh	r1, [r3, #4]
 8002cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d7c <draw_data_screen+0x184>)
 8002cd2:	885a      	ldrh	r2, [r3, #2]
 8002cd4:	4b29      	ldr	r3, [pc, #164]	@ (8002d7c <draw_data_screen+0x184>)
 8002cd6:	88db      	ldrh	r3, [r3, #6]
 8002cd8:	2400      	movs	r4, #0
 8002cda:	9400      	str	r4, [sp, #0]
 8002cdc:	f7fe fcea 	bl	80016b4 <LCD_DrawLine>
  LCD_DrawLine(start_button.x_max, start_button.y_max, start_button.x_min, start_button.y_max, BLACK);
 8002ce0:	4b26      	ldr	r3, [pc, #152]	@ (8002d7c <draw_data_screen+0x184>)
 8002ce2:	8858      	ldrh	r0, [r3, #2]
 8002ce4:	4b25      	ldr	r3, [pc, #148]	@ (8002d7c <draw_data_screen+0x184>)
 8002ce6:	88d9      	ldrh	r1, [r3, #6]
 8002ce8:	4b24      	ldr	r3, [pc, #144]	@ (8002d7c <draw_data_screen+0x184>)
 8002cea:	881a      	ldrh	r2, [r3, #0]
 8002cec:	4b23      	ldr	r3, [pc, #140]	@ (8002d7c <draw_data_screen+0x184>)
 8002cee:	88db      	ldrh	r3, [r3, #6]
 8002cf0:	2400      	movs	r4, #0
 8002cf2:	9400      	str	r4, [sp, #0]
 8002cf4:	f7fe fcde 	bl	80016b4 <LCD_DrawLine>
  LCD_DrawLine(start_button.x_min, start_button.y_max, start_button.x_min, start_button.y_min, BLACK);
 8002cf8:	4b20      	ldr	r3, [pc, #128]	@ (8002d7c <draw_data_screen+0x184>)
 8002cfa:	8818      	ldrh	r0, [r3, #0]
 8002cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d7c <draw_data_screen+0x184>)
 8002cfe:	88d9      	ldrh	r1, [r3, #6]
 8002d00:	4b1e      	ldr	r3, [pc, #120]	@ (8002d7c <draw_data_screen+0x184>)
 8002d02:	881a      	ldrh	r2, [r3, #0]
 8002d04:	4b1d      	ldr	r3, [pc, #116]	@ (8002d7c <draw_data_screen+0x184>)
 8002d06:	889b      	ldrh	r3, [r3, #4]
 8002d08:	2400      	movs	r4, #0
 8002d0a:	9400      	str	r4, [sp, #0]
 8002d0c:	f7fe fcd2 	bl	80016b4 <LCD_DrawLine>
  text_x = start_button.x_min + (START_BUTTON_WIDTH - strlen(start_button.note) * 8) / 2;
 8002d10:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <draw_data_screen+0x184>)
 8002d12:	881c      	ldrh	r4, [r3, #0]
 8002d14:	4b19      	ldr	r3, [pc, #100]	@ (8002d7c <draw_data_screen+0x184>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd faef 	bl	80002fc <strlen>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8002d26:	085b      	lsrs	r3, r3, #1
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	4423      	add	r3, r4
 8002d2c:	80fb      	strh	r3, [r7, #6]
  text_y = start_button.y_min + (START_BUTTON_HEIGHT - 16) / 2;
 8002d2e:	4b13      	ldr	r3, [pc, #76]	@ (8002d7c <draw_data_screen+0x184>)
 8002d30:	889b      	ldrh	r3, [r3, #4]
 8002d32:	3307      	adds	r3, #7
 8002d34:	80bb      	strh	r3, [r7, #4]
  LCD_DrawString_Color(text_x, text_y, start_button.note, WHITE, BLACK);
 8002d36:	4b11      	ldr	r3, [pc, #68]	@ (8002d7c <draw_data_screen+0x184>)
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	88b9      	ldrh	r1, [r7, #4]
 8002d3c:	88f8      	ldrh	r0, [r7, #6]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d46:	f7fe fdc9 	bl	80018dc <LCD_DrawString_Color>
  // Draw "Tuning" if active
  if (tuning_active) {
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d80 <draw_data_screen+0x188>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00c      	beq.n	8002d6c <draw_data_screen+0x174>
    text_x = start_button.x_min + (START_BUTTON_WIDTH - 6 * 8) / 2; // "Tuning" = 6 chars
 8002d52:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <draw_data_screen+0x184>)
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	3306      	adds	r3, #6
 8002d58:	80fb      	strh	r3, [r7, #6]
    LCD_DrawString_Color(text_x, 250, "Tuning", WHITE, BLACK);
 8002d5a:	88f8      	ldrh	r0, [r7, #6]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d64:	4a07      	ldr	r2, [pc, #28]	@ (8002d84 <draw_data_screen+0x18c>)
 8002d66:	21fa      	movs	r1, #250	@ 0xfa
 8002d68:	f7fe fdb8 	bl	80018dc <LCD_DrawString_Color>
  __ASM volatile ("cpsie i" : : : "memory");
 8002d6c:	b662      	cpsie	i
}
 8002d6e:	bf00      	nop
  }
  __enable_irq();
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd90      	pop	{r4, r7, pc}
 8002d78:	20002078 	.word	0x20002078
 8002d7c:	20002088 	.word	0x20002088
 8002d80:	200062f9 	.word	0x200062f9
 8002d84:	0800a658 	.word	0x0800a658

08002d88 <check_touch>:
/**
  * @brief  Check for touch input and update state
  * @param  None
  * @retval None
  */
void check_touch(void) {
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af02      	add	r7, sp, #8
  strType_XPT2046_Coordinate touch_coord;
  if (ucXPT2046_TouchFlag && XPT2046_Get_TouchedPoint(&touch_coord, &strXPT2046_TouchPara)) {
 8002d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8002f40 <check_touch+0x1b8>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8157 	beq.w	8003048 <check_touch+0x2c0>
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	4969      	ldr	r1, [pc, #420]	@ (8002f44 <check_touch+0x1bc>)
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f001 ffb2 	bl	8004d08 <XPT2046_Get_TouchedPoint>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 814e 	beq.w	8003048 <check_touch+0x2c0>
    if (screen_state == STATE_NOTE_SELECT) {
 8002dac:	4b66      	ldr	r3, [pc, #408]	@ (8002f48 <check_touch+0x1c0>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d146      	bne.n	8002e42 <check_touch+0xba>
      for (uint8_t i = 0; i < num_buttons; i++) {
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e03e      	b.n	8002e38 <check_touch+0xb0>
        if (touch_coord.x >= buttons[i].x_min && touch_coord.x <= buttons[i].x_max &&
 8002dba:	88ba      	ldrh	r2, [r7, #4]
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	4963      	ldr	r1, [pc, #396]	@ (8002f4c <check_touch+0x1c4>)
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	440b      	add	r3, r1
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d333      	bcc.n	8002e32 <check_touch+0xaa>
 8002dca:	88ba      	ldrh	r2, [r7, #4]
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	495f      	ldr	r1, [pc, #380]	@ (8002f4c <check_touch+0x1c4>)
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d82a      	bhi.n	8002e32 <check_touch+0xaa>
            touch_coord.y >= buttons[i].y_min && touch_coord.y <= buttons[i].y_max) {
 8002ddc:	88fa      	ldrh	r2, [r7, #6]
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	495a      	ldr	r1, [pc, #360]	@ (8002f4c <check_touch+0x1c4>)
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	440b      	add	r3, r1
 8002de6:	3304      	adds	r3, #4
 8002de8:	881b      	ldrh	r3, [r3, #0]
        if (touch_coord.x >= buttons[i].x_min && touch_coord.x <= buttons[i].x_max &&
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d321      	bcc.n	8002e32 <check_touch+0xaa>
            touch_coord.y >= buttons[i].y_min && touch_coord.y <= buttons[i].y_max) {
 8002dee:	88fa      	ldrh	r2, [r7, #6]
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	4956      	ldr	r1, [pc, #344]	@ (8002f4c <check_touch+0x1c4>)
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	440b      	add	r3, r1
 8002df8:	3306      	adds	r3, #6
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d818      	bhi.n	8002e32 <check_touch+0xaa>
          selected_note_idx = i;
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	4a53      	ldr	r2, [pc, #332]	@ (8002f50 <check_touch+0x1c8>)
 8002e04:	6013      	str	r3, [r2, #0]
          screen_state = STATE_DATA_DISPLAY;
 8002e06:	4b50      	ldr	r3, [pc, #320]	@ (8002f48 <check_touch+0x1c0>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
          adc_complete = 0; // Reset to ensure fresh data
 8002e0c:	4b51      	ldr	r3, [pc, #324]	@ (8002f54 <check_touch+0x1cc>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
          tuning_active = 0; // Reset tuning
 8002e12:	4b51      	ldr	r3, [pc, #324]	@ (8002f58 <check_touch+0x1d0>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
          start_button.note = "Start";
 8002e18:	4b50      	ldr	r3, [pc, #320]	@ (8002f5c <check_touch+0x1d4>)
 8002e1a:	4a51      	ldr	r2, [pc, #324]	@ (8002f60 <check_touch+0x1d8>)
 8002e1c:	609a      	str	r2, [r3, #8]
          tune_state = TUNE_IDLE;
 8002e1e:	4b51      	ldr	r3, [pc, #324]	@ (8002f64 <check_touch+0x1dc>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
          motor_control(0, 0); // Stop motor
 8002e24:	2100      	movs	r1, #0
 8002e26:	2000      	movs	r0, #0
 8002e28:	f7ff fdd0 	bl	80029cc <motor_control>
          draw_data_screen();
 8002e2c:	f7ff fee4 	bl	8002bf8 <draw_data_screen>
          break;
 8002e30:	e107      	b.n	8003042 <check_touch+0x2ba>
      for (uint8_t i = 0; i < num_buttons; i++) {
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	3301      	adds	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	2206      	movs	r2, #6
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d3bc      	bcc.n	8002dba <check_touch+0x32>
 8002e40:	e0ff      	b.n	8003042 <check_touch+0x2ba>
        }
      }
    } else if (screen_state == STATE_DATA_DISPLAY) {
 8002e42:	4b41      	ldr	r3, [pc, #260]	@ (8002f48 <check_touch+0x1c0>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	f040 80fb 	bne.w	8003042 <check_touch+0x2ba>
      // Check Back button
      if (touch_coord.x >= back_button.x_min && touch_coord.x <= back_button.x_max &&
 8002e4c:	88ba      	ldrh	r2, [r7, #4]
 8002e4e:	4b46      	ldr	r3, [pc, #280]	@ (8002f68 <check_touch+0x1e0>)
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d328      	bcc.n	8002ea8 <check_touch+0x120>
 8002e56:	88ba      	ldrh	r2, [r7, #4]
 8002e58:	4b43      	ldr	r3, [pc, #268]	@ (8002f68 <check_touch+0x1e0>)
 8002e5a:	885b      	ldrh	r3, [r3, #2]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d823      	bhi.n	8002ea8 <check_touch+0x120>
          touch_coord.y >= back_button.y_min && touch_coord.y <= back_button.y_max) {
 8002e60:	88fa      	ldrh	r2, [r7, #6]
 8002e62:	4b41      	ldr	r3, [pc, #260]	@ (8002f68 <check_touch+0x1e0>)
 8002e64:	889b      	ldrh	r3, [r3, #4]
      if (touch_coord.x >= back_button.x_min && touch_coord.x <= back_button.x_max &&
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d31e      	bcc.n	8002ea8 <check_touch+0x120>
          touch_coord.y >= back_button.y_min && touch_coord.y <= back_button.y_max) {
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	4b3e      	ldr	r3, [pc, #248]	@ (8002f68 <check_touch+0x1e0>)
 8002e6e:	88db      	ldrh	r3, [r3, #6]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d819      	bhi.n	8002ea8 <check_touch+0x120>
        selected_note_idx = -1;
 8002e74:	4b36      	ldr	r3, [pc, #216]	@ (8002f50 <check_touch+0x1c8>)
 8002e76:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7a:	601a      	str	r2, [r3, #0]
        screen_state = STATE_NOTE_SELECT;
 8002e7c:	4b32      	ldr	r3, [pc, #200]	@ (8002f48 <check_touch+0x1c0>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
        adc_complete = 0; // Prevent immediate data redraw
 8002e82:	4b34      	ldr	r3, [pc, #208]	@ (8002f54 <check_touch+0x1cc>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
        tuning_active = 0; // Stop tuning
 8002e88:	4b33      	ldr	r3, [pc, #204]	@ (8002f58 <check_touch+0x1d0>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
        start_button.note = "Start";
 8002e8e:	4b33      	ldr	r3, [pc, #204]	@ (8002f5c <check_touch+0x1d4>)
 8002e90:	4a33      	ldr	r2, [pc, #204]	@ (8002f60 <check_touch+0x1d8>)
 8002e92:	609a      	str	r2, [r3, #8]
        tune_state = TUNE_IDLE;
 8002e94:	4b33      	ldr	r3, [pc, #204]	@ (8002f64 <check_touch+0x1dc>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
        motor_control(0, 0); // Stop motor
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f7ff fd95 	bl	80029cc <motor_control>
        draw_buttons();
 8002ea2:	f7ff fde5 	bl	8002a70 <draw_buttons>
 8002ea6:	e0cc      	b.n	8003042 <check_touch+0x2ba>
      }
      // Check Start/Stop button
      else if (touch_coord.x >= start_button.x_min && touch_coord.x <= start_button.x_max &&
 8002ea8:	88ba      	ldrh	r2, [r7, #4]
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8002f5c <check_touch+0x1d4>)
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	f0c0 80c7 	bcc.w	8003042 <check_touch+0x2ba>
 8002eb4:	88ba      	ldrh	r2, [r7, #4]
 8002eb6:	4b29      	ldr	r3, [pc, #164]	@ (8002f5c <check_touch+0x1d4>)
 8002eb8:	885b      	ldrh	r3, [r3, #2]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	f200 80c1 	bhi.w	8003042 <check_touch+0x2ba>
               touch_coord.y >= start_button.y_min && touch_coord.y <= start_button.y_max) {
 8002ec0:	88fa      	ldrh	r2, [r7, #6]
 8002ec2:	4b26      	ldr	r3, [pc, #152]	@ (8002f5c <check_touch+0x1d4>)
 8002ec4:	889b      	ldrh	r3, [r3, #4]
      else if (touch_coord.x >= start_button.x_min && touch_coord.x <= start_button.x_max &&
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	f0c0 80bb 	bcc.w	8003042 <check_touch+0x2ba>
               touch_coord.y >= start_button.y_min && touch_coord.y <= start_button.y_max) {
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	4b23      	ldr	r3, [pc, #140]	@ (8002f5c <check_touch+0x1d4>)
 8002ed0:	88db      	ldrh	r3, [r3, #6]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	f200 80b5 	bhi.w	8003042 <check_touch+0x2ba>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed8:	b672      	cpsid	i
}
 8002eda:	bf00      	nop
        __disable_irq(); // Protect display update
        // Clear Start/Stop button area
        uint16_t text_x = start_button.x_min;
 8002edc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f5c <check_touch+0x1d4>)
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	81bb      	strh	r3, [r7, #12]
        uint16_t text_y = start_button.y_min + (START_BUTTON_HEIGHT - 16) / 2;
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f5c <check_touch+0x1d4>)
 8002ee4:	889b      	ldrh	r3, [r3, #4]
 8002ee6:	3307      	adds	r3, #7
 8002ee8:	817b      	strh	r3, [r7, #10]
        LCD_DrawString_Color(text_x, text_y, "        ", WHITE, BLACK); // Clear 8 chars to cover button width
 8002eea:	8979      	ldrh	r1, [r7, #10]
 8002eec:	89b8      	ldrh	r0, [r7, #12]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f6c <check_touch+0x1e4>)
 8002ef8:	f7fe fcf0 	bl	80018dc <LCD_DrawString_Color>
        // Clear Tuning text area
        text_x = start_button.x_min;
 8002efc:	4b17      	ldr	r3, [pc, #92]	@ (8002f5c <check_touch+0x1d4>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	81bb      	strh	r3, [r7, #12]
        LCD_DrawString_Color(text_x, 250, "        ", WHITE, BLACK); // Clear 8 chars to cover "Tuning"
 8002f02:	89b8      	ldrh	r0, [r7, #12]
 8002f04:	2300      	movs	r3, #0
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f0c:	4a17      	ldr	r2, [pc, #92]	@ (8002f6c <check_touch+0x1e4>)
 8002f0e:	21fa      	movs	r1, #250	@ 0xfa
 8002f10:	f7fe fce4 	bl	80018dc <LCD_DrawString_Color>

        // Toggle tuning state
        tuning_active = !tuning_active;
 8002f14:	4b10      	ldr	r3, [pc, #64]	@ (8002f58 <check_touch+0x1d0>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b0c      	ldr	r3, [pc, #48]	@ (8002f58 <check_touch+0x1d0>)
 8002f26:	701a      	strb	r2, [r3, #0]
        tune_state = TUNE_IDLE; // Reset pulse state
 8002f28:	4b0e      	ldr	r3, [pc, #56]	@ (8002f64 <check_touch+0x1dc>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
        if (tuning_active) {
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f58 <check_touch+0x1d0>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01e      	beq.n	8002f74 <check_touch+0x1ec>
          start_button.note = "Stop";
 8002f36:	4b09      	ldr	r3, [pc, #36]	@ (8002f5c <check_touch+0x1d4>)
 8002f38:	4a0d      	ldr	r2, [pc, #52]	@ (8002f70 <check_touch+0x1e8>)
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	e021      	b.n	8002f82 <check_touch+0x1fa>
 8002f3e:	bf00      	nop
 8002f40:	2000630c 	.word	0x2000630c
 8002f44:	200020a0 	.word	0x200020a0
 8002f48:	200062f8 	.word	0x200062f8
 8002f4c:	20002018 	.word	0x20002018
 8002f50:	20002098 	.word	0x20002098
 8002f54:	200062f0 	.word	0x200062f0
 8002f58:	200062f9 	.word	0x200062f9
 8002f5c:	20002088 	.word	0x20002088
 8002f60:	0800a608 	.word	0x0800a608
 8002f64:	200062fa 	.word	0x200062fa
 8002f68:	20002078 	.word	0x20002078
 8002f6c:	0800a660 	.word	0x0800a660
 8002f70:	0800a66c 	.word	0x0800a66c
        } else {
          start_button.note = "Start";
 8002f74:	4b36      	ldr	r3, [pc, #216]	@ (8003050 <check_touch+0x2c8>)
 8002f76:	4a37      	ldr	r2, [pc, #220]	@ (8003054 <check_touch+0x2cc>)
 8002f78:	609a      	str	r2, [r3, #8]
          motor_control(0, 0); // Stop motor
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7ff fd25 	bl	80029cc <motor_control>
        }

        // Redraw Start/Stop button
        LCD_DrawLine(start_button.x_min, start_button.y_min, start_button.x_max, start_button.y_min, BLACK);
 8002f82:	4b33      	ldr	r3, [pc, #204]	@ (8003050 <check_touch+0x2c8>)
 8002f84:	8818      	ldrh	r0, [r3, #0]
 8002f86:	4b32      	ldr	r3, [pc, #200]	@ (8003050 <check_touch+0x2c8>)
 8002f88:	8899      	ldrh	r1, [r3, #4]
 8002f8a:	4b31      	ldr	r3, [pc, #196]	@ (8003050 <check_touch+0x2c8>)
 8002f8c:	885a      	ldrh	r2, [r3, #2]
 8002f8e:	4b30      	ldr	r3, [pc, #192]	@ (8003050 <check_touch+0x2c8>)
 8002f90:	889b      	ldrh	r3, [r3, #4]
 8002f92:	2400      	movs	r4, #0
 8002f94:	9400      	str	r4, [sp, #0]
 8002f96:	f7fe fb8d 	bl	80016b4 <LCD_DrawLine>
        LCD_DrawLine(start_button.x_max, start_button.y_min, start_button.x_max, start_button.y_max, BLACK);
 8002f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003050 <check_touch+0x2c8>)
 8002f9c:	8858      	ldrh	r0, [r3, #2]
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8003050 <check_touch+0x2c8>)
 8002fa0:	8899      	ldrh	r1, [r3, #4]
 8002fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8003050 <check_touch+0x2c8>)
 8002fa4:	885a      	ldrh	r2, [r3, #2]
 8002fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8003050 <check_touch+0x2c8>)
 8002fa8:	88db      	ldrh	r3, [r3, #6]
 8002faa:	2400      	movs	r4, #0
 8002fac:	9400      	str	r4, [sp, #0]
 8002fae:	f7fe fb81 	bl	80016b4 <LCD_DrawLine>
        LCD_DrawLine(start_button.x_max, start_button.y_max, start_button.x_min, start_button.y_max, BLACK);
 8002fb2:	4b27      	ldr	r3, [pc, #156]	@ (8003050 <check_touch+0x2c8>)
 8002fb4:	8858      	ldrh	r0, [r3, #2]
 8002fb6:	4b26      	ldr	r3, [pc, #152]	@ (8003050 <check_touch+0x2c8>)
 8002fb8:	88d9      	ldrh	r1, [r3, #6]
 8002fba:	4b25      	ldr	r3, [pc, #148]	@ (8003050 <check_touch+0x2c8>)
 8002fbc:	881a      	ldrh	r2, [r3, #0]
 8002fbe:	4b24      	ldr	r3, [pc, #144]	@ (8003050 <check_touch+0x2c8>)
 8002fc0:	88db      	ldrh	r3, [r3, #6]
 8002fc2:	2400      	movs	r4, #0
 8002fc4:	9400      	str	r4, [sp, #0]
 8002fc6:	f7fe fb75 	bl	80016b4 <LCD_DrawLine>
        LCD_DrawLine(start_button.x_min, start_button.y_max, start_button.x_min, start_button.y_min, BLACK);
 8002fca:	4b21      	ldr	r3, [pc, #132]	@ (8003050 <check_touch+0x2c8>)
 8002fcc:	8818      	ldrh	r0, [r3, #0]
 8002fce:	4b20      	ldr	r3, [pc, #128]	@ (8003050 <check_touch+0x2c8>)
 8002fd0:	88d9      	ldrh	r1, [r3, #6]
 8002fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8003050 <check_touch+0x2c8>)
 8002fd4:	881a      	ldrh	r2, [r3, #0]
 8002fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8003050 <check_touch+0x2c8>)
 8002fd8:	889b      	ldrh	r3, [r3, #4]
 8002fda:	2400      	movs	r4, #0
 8002fdc:	9400      	str	r4, [sp, #0]
 8002fde:	f7fe fb69 	bl	80016b4 <LCD_DrawLine>
        text_x = start_button.x_min + (START_BUTTON_WIDTH - strlen(start_button.note) * 8) / 2;
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <check_touch+0x2c8>)
 8002fe4:	881c      	ldrh	r4, [r3, #0]
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8003050 <check_touch+0x2c8>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd f986 	bl	80002fc <strlen>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4423      	add	r3, r4
 8002ffe:	81bb      	strh	r3, [r7, #12]
        text_y = start_button.y_min + (START_BUTTON_HEIGHT - 16) / 2;
 8003000:	4b13      	ldr	r3, [pc, #76]	@ (8003050 <check_touch+0x2c8>)
 8003002:	889b      	ldrh	r3, [r3, #4]
 8003004:	3307      	adds	r3, #7
 8003006:	817b      	strh	r3, [r7, #10]
        LCD_DrawString_Color(text_x, text_y, start_button.note, WHITE, BLACK);
 8003008:	4b11      	ldr	r3, [pc, #68]	@ (8003050 <check_touch+0x2c8>)
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	8979      	ldrh	r1, [r7, #10]
 800300e:	89b8      	ldrh	r0, [r7, #12]
 8003010:	2300      	movs	r3, #0
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003018:	f7fe fc60 	bl	80018dc <LCD_DrawString_Color>

        // Update Tuning text
        if (tuning_active) {
 800301c:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <check_touch+0x2d0>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00c      	beq.n	800303e <check_touch+0x2b6>
          text_x = start_button.x_min + (START_BUTTON_WIDTH - 6 * 8) / 2; // "Tuning" = 6 chars
 8003024:	4b0a      	ldr	r3, [pc, #40]	@ (8003050 <check_touch+0x2c8>)
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	3306      	adds	r3, #6
 800302a:	81bb      	strh	r3, [r7, #12]
          LCD_DrawString_Color(text_x, 250, "Tuning", WHITE, BLACK);
 800302c:	89b8      	ldrh	r0, [r7, #12]
 800302e:	2300      	movs	r3, #0
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003036:	4a09      	ldr	r2, [pc, #36]	@ (800305c <check_touch+0x2d4>)
 8003038:	21fa      	movs	r1, #250	@ 0xfa
 800303a:	f7fe fc4f 	bl	80018dc <LCD_DrawString_Color>
  __ASM volatile ("cpsie i" : : : "memory");
 800303e:	b662      	cpsie	i
}
 8003040:	bf00      	nop
        }
        __enable_irq();
      }
    }
    ucXPT2046_TouchFlag = 0;
 8003042:	4b07      	ldr	r3, [pc, #28]	@ (8003060 <check_touch+0x2d8>)
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
  }
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	bd90      	pop	{r4, r7, pc}
 8003050:	20002088 	.word	0x20002088
 8003054:	0800a608 	.word	0x0800a608
 8003058:	200062f9 	.word	0x200062f9
 800305c:	0800a658 	.word	0x0800a658
 8003060:	2000630c 	.word	0x2000630c

08003064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003064:	b5b0      	push	{r4, r5, r7, lr}
 8003066:	b0b2      	sub	sp, #200	@ 0xc8
 8003068:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800306a:	f001 fefb 	bl	8004e64 <HAL_Init>

  /* USER CODE BEGIN Init */
  // Initialize CMSIS-DSP FFT
  arm_rfft_fast_init_f32(&fft_handler, FFT_SIZE);
 800306e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003072:	4857      	ldr	r0, [pc, #348]	@ (80031d0 <main+0x16c>)
 8003074:	f005 f936 	bl	80082e4 <arm_rfft_fast_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003078:	f000 fb44 	bl	8003704 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800307c:	f000 fd38 	bl	8003af0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003080:	f000 fcea 	bl	8003a58 <MX_DMA_Init>
  MX_FSMC_Init();
 8003084:	f000 fe08 	bl	8003c98 <MX_FSMC_Init>
  MX_ADC1_Init();
 8003088:	f000 fb9a 	bl	80037c0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800308c:	f000 fbd6 	bl	800383c <MX_TIM2_Init>
  MX_TIM3_Init();
 8003090:	f000 fc20 	bl	80038d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003094:	f000 fc6c 	bl	8003970 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Initialize LCD
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8003098:	2200      	movs	r2, #0
 800309a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800309e:	484d      	ldr	r0, [pc, #308]	@ (80031d4 <main+0x170>)
 80030a0:	f003 fa75 	bl	800658e <HAL_GPIO_WritePin>
  HAL_Delay(20);
 80030a4:	2014      	movs	r0, #20
 80030a6:	f001 ff3f 	bl	8004f28 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80030aa:	2201      	movs	r2, #1
 80030ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030b0:	4848      	ldr	r0, [pc, #288]	@ (80031d4 <main+0x170>)
 80030b2:	f003 fa6c 	bl	800658e <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80030b6:	20c8      	movs	r0, #200	@ 0xc8
 80030b8:	f001 ff36 	bl	8004f28 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80030bc:	2201      	movs	r2, #1
 80030be:	2102      	movs	r1, #2
 80030c0:	4845      	ldr	r0, [pc, #276]	@ (80031d8 <main+0x174>)
 80030c2:	f003 fa64 	bl	800658e <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80030c6:	2032      	movs	r0, #50	@ 0x32
 80030c8:	f001 ff2e 	bl	8004f28 <HAL_Delay>
  LCD_INIT();
 80030cc:	f7fe f8d5 	bl	800127a <LCD_INIT>
  HAL_Delay(200);
 80030d0:	20c8      	movs	r0, #200	@ 0xc8
 80030d2:	f001 ff29 	bl	8004f28 <HAL_Delay>

  // Initialize touch screen
  macXPT2046_CS_DISABLE();
 80030d6:	2200      	movs	r2, #0
 80030d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030dc:	483d      	ldr	r0, [pc, #244]	@ (80031d4 <main+0x170>)
 80030de:	f003 fa56 	bl	800658e <HAL_GPIO_WritePin>
  while (!XPT2046_Touch_Calibrate()); // Run calibration until successful
 80030e2:	bf00      	nop
 80030e4:	f001 fbd4 	bl	8004890 <XPT2046_Touch_Calibrate>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0fa      	beq.n	80030e4 <main+0x80>
  #define macXPT2046_Coordinate_GramScan 1 // Portrait 240x320, top-left origin
  LCD_GramScan(macXPT2046_Coordinate_GramScan); // Set orientation
 80030ee:	2001      	movs	r0, #1
 80030f0:	f7fe fc2a 	bl	8001948 <LCD_GramScan>
  LCD_Clear(0, 0, 240, 320, BACKGROUND);
 80030f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80030fe:	22f0      	movs	r2, #240	@ 0xf0
 8003100:	2100      	movs	r1, #0
 8003102:	2000      	movs	r0, #0
 8003104:	f7fe fab3 	bl	800166e <LCD_Clear>
  draw_buttons();
 8003108:	f7ff fcb2 	bl	8002a70 <draw_buttons>

  // Start ADC and timer
  HAL_TIM_Base_Start(&htim3);
 800310c:	4833      	ldr	r0, [pc, #204]	@ (80031dc <main+0x178>)
 800310e:	f004 f89f 	bl	8007250 <HAL_TIM_Base_Start>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8003112:	4833      	ldr	r0, [pc, #204]	@ (80031e0 <main+0x17c>)
 8003114:	f002 fb4c 	bl	80057b0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer[0], FFT_SIZE);
 8003118:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800311c:	4931      	ldr	r1, [pc, #196]	@ (80031e4 <main+0x180>)
 800311e:	4830      	ldr	r0, [pc, #192]	@ (80031e0 <main+0x17c>)
 8003120:	f002 f810 	bl	8005144 <HAL_ADC_Start_DMA>

  // Start PWM for motor
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003124:	2100      	movs	r1, #0
 8003126:	4830      	ldr	r0, [pc, #192]	@ (80031e8 <main+0x184>)
 8003128:	f004 f942 	bl	80073b0 <HAL_TIM_PWM_Start>
  motor_control(0, 0); // Ensure motor is off initially
 800312c:	2100      	movs	r1, #0
 800312e:	2000      	movs	r0, #0
 8003130:	f7ff fc4c 	bl	80029cc <motor_control>
  float freq;
  char note[10], status[20];
  while (1)
  {
    // Check for touch input
    check_touch();
 8003134:	f7ff fe28 	bl	8002d88 <check_touch>

    if (screen_state == STATE_DATA_DISPLAY && adc_complete && selected_note_idx >= 0) {
 8003138:	4b2c      	ldr	r3, [pc, #176]	@ (80031ec <main+0x188>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	f040 828e 	bne.w	800365e <main+0x5fa>
 8003142:	4b2b      	ldr	r3, [pc, #172]	@ (80031f0 <main+0x18c>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 8288 	beq.w	800365e <main+0x5fa>
 800314e:	4b29      	ldr	r3, [pc, #164]	@ (80031f4 <main+0x190>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	f2c0 8283 	blt.w	800365e <main+0x5fa>
      adc_complete = 0; // Reset flag
 8003158:	4b25      	ldr	r3, [pc, #148]	@ (80031f0 <main+0x18c>)
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
      uint8_t buf_to_process = processing_buffer;
 800315e:	4b26      	ldr	r3, [pc, #152]	@ (80031f8 <main+0x194>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

      // Remove DC offset and prepare FFT input
      float mean = 0.0f;
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      for (uint32_t i = 0; i < FFT_SIZE; i++) {
 800316e:	2300      	movs	r3, #0
 8003170:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003174:	e019      	b.n	80031aa <main+0x146>
        mean += adc_buffer[buf_to_process][i];
 8003176:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800317a:	491a      	ldr	r1, [pc, #104]	@ (80031e4 <main+0x180>)
 800317c:	02da      	lsls	r2, r3, #11
 800317e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003182:	4413      	add	r3, r2
 8003184:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003188:	4618      	mov	r0, r3
 800318a:	f7fd fdef 	bl	8000d6c <__aeabi_i2f>
 800318e:	4603      	mov	r3, r0
 8003190:	4619      	mov	r1, r3
 8003192:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8003196:	f7fd fd35 	bl	8000c04 <__addsf3>
 800319a:	4603      	mov	r3, r0
 800319c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      for (uint32_t i = 0; i < FFT_SIZE; i++) {
 80031a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031a4:	3301      	adds	r3, #1
 80031a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031b2:	d3e0      	bcc.n	8003176 <main+0x112>
      }
      mean /= FFT_SIZE;
 80031b4:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 80031b8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80031bc:	f7fd fede 	bl	8000f7c <__aeabi_fdiv>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      for (uint32_t i = 0; i < FFT_SIZE; i++) {
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031cc:	e039      	b.n	8003242 <main+0x1de>
 80031ce:	bf00      	nop
 80031d0:	200062d8 	.word	0x200062d8
 80031d4:	40011400 	.word	0x40011400
 80031d8:	40011800 	.word	0x40011800
 80031dc:	20002200 	.word	0x20002200
 80031e0:	20002144 	.word	0x20002144
 80031e4:	20000000 	.word	0x20000000
 80031e8:	20002248 	.word	0x20002248
 80031ec:	200062f8 	.word	0x200062f8
 80031f0:	200062f0 	.word	0x200062f0
 80031f4:	20002098 	.word	0x20002098
 80031f8:	200062f2 	.word	0x200062f2
        fft_input[i] = (float)(adc_buffer[buf_to_process][i] - mean) / (ADC_MAX / 2.0f); // Scale to [-1, 1]
 80031fc:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8003200:	49c4      	ldr	r1, [pc, #784]	@ (8003514 <main+0x4b0>)
 8003202:	02da      	lsls	r2, r3, #11
 8003204:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003208:	4413      	add	r3, r2
 800320a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd fdac 	bl	8000d6c <__aeabi_i2f>
 8003214:	4603      	mov	r3, r0
 8003216:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd fcf0 	bl	8000c00 <__aeabi_fsub>
 8003220:	4603      	mov	r3, r0
 8003222:	49bd      	ldr	r1, [pc, #756]	@ (8003518 <main+0x4b4>)
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd fea9 	bl	8000f7c <__aeabi_fdiv>
 800322a:	4603      	mov	r3, r0
 800322c:	4619      	mov	r1, r3
 800322e:	4abb      	ldr	r2, [pc, #748]	@ (800351c <main+0x4b8>)
 8003230:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003234:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8003238:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800323c:	3301      	adds	r3, #1
 800323e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003246:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800324a:	d3d7      	bcc.n	80031fc <main+0x198>
      }

      // Apply high-pass filter
      high_pass_filter(fft_input, FFT_SIZE);
 800324c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003250:	48b2      	ldr	r0, [pc, #712]	@ (800351c <main+0x4b8>)
 8003252:	f7fe fc95 	bl	8001b80 <high_pass_filter>

      // Apply Hann window
      apply_hann_window(fft_input, FFT_SIZE);
 8003256:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800325a:	48b0      	ldr	r0, [pc, #704]	@ (800351c <main+0x4b8>)
 800325c:	f7fe fc46 	bl	8001aec <apply_hann_window>

      // Compute FFT
      arm_rfft_fast_f32(&fft_handler, fft_input, fft_output, 0);
 8003260:	2300      	movs	r3, #0
 8003262:	4aaf      	ldr	r2, [pc, #700]	@ (8003520 <main+0x4bc>)
 8003264:	49ad      	ldr	r1, [pc, #692]	@ (800351c <main+0x4b8>)
 8003266:	48af      	ldr	r0, [pc, #700]	@ (8003524 <main+0x4c0>)
 8003268:	f005 f8bc 	bl	80083e4 <arm_rfft_fast_f32>
      freq = find_dominant_freq(fft_output, FFT_SIZE);
 800326c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003270:	48ab      	ldr	r0, [pc, #684]	@ (8003520 <main+0x4bc>)
 8003272:	f7fe fef9 	bl	8002068 <find_dominant_freq>
 8003276:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

      // Get note and status
      map_to_note(freq, buttons[selected_note_idx].freq, note, status);
 800327a:	4bab      	ldr	r3, [pc, #684]	@ (8003528 <main+0x4c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4aab      	ldr	r2, [pc, #684]	@ (800352c <main+0x4c8>)
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	4413      	add	r3, r2
 8003284:	330c      	adds	r3, #12
 8003286:	6819      	ldr	r1, [r3, #0]
 8003288:	463b      	mov	r3, r7
 800328a:	f107 0214 	add.w	r2, r7, #20
 800328e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003292:	f7ff fb25 	bl	80028e0 <map_to_note>

      // Display data
      sprintf(buff, "ADC: %u", adc_buffer[buf_to_process][0]);
 8003296:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800329a:	4a9e      	ldr	r2, [pc, #632]	@ (8003514 <main+0x4b0>)
 800329c:	031b      	lsls	r3, r3, #12
 800329e:	4413      	add	r3, r2
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	f107 0320 	add.w	r3, r7, #32
 80032a8:	49a1      	ldr	r1, [pc, #644]	@ (8003530 <main+0x4cc>)
 80032aa:	4618      	mov	r0, r3
 80032ac:	f006 fc4e 	bl	8009b4c <siprintf>
      LCD_DrawString_Color(20, 20, buff, WHITE, BLACK);
 80032b0:	f107 0220 	add.w	r2, r7, #32
 80032b4:	2300      	movs	r3, #0
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032bc:	2114      	movs	r1, #20
 80032be:	2014      	movs	r0, #20
 80032c0:	f7fe fb0c 	bl	80018dc <LCD_DrawString_Color>

      LCD_DrawString_Color(20, 50, "                    ", WHITE, BLACK); // Clear previous target
 80032c4:	2300      	movs	r3, #0
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032cc:	4a99      	ldr	r2, [pc, #612]	@ (8003534 <main+0x4d0>)
 80032ce:	2132      	movs	r1, #50	@ 0x32
 80032d0:	2014      	movs	r0, #20
 80032d2:	f7fe fb03 	bl	80018dc <LCD_DrawString_Color>
      int target_int_part = (int)buttons[selected_note_idx].freq;
 80032d6:	4b94      	ldr	r3, [pc, #592]	@ (8003528 <main+0x4c4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a94      	ldr	r2, [pc, #592]	@ (800352c <main+0x4c8>)
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	4413      	add	r3, r2
 80032e0:	330c      	adds	r3, #12
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fd ff71 	bl	80011cc <__aeabi_f2iz>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      int target_frac_part = (int)((buttons[selected_note_idx].freq - target_int_part) * 100);
 80032f0:	4b8d      	ldr	r3, [pc, #564]	@ (8003528 <main+0x4c4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a8d      	ldr	r2, [pc, #564]	@ (800352c <main+0x4c8>)
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	4413      	add	r3, r2
 80032fa:	330c      	adds	r3, #12
 80032fc:	681c      	ldr	r4, [r3, #0]
 80032fe:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8003302:	f7fd fd33 	bl	8000d6c <__aeabi_i2f>
 8003306:	4603      	mov	r3, r0
 8003308:	4619      	mov	r1, r3
 800330a:	4620      	mov	r0, r4
 800330c:	f7fd fc78 	bl	8000c00 <__aeabi_fsub>
 8003310:	4603      	mov	r3, r0
 8003312:	4989      	ldr	r1, [pc, #548]	@ (8003538 <main+0x4d4>)
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd fd7d 	bl	8000e14 <__aeabi_fmul>
 800331a:	4603      	mov	r3, r0
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd ff55 	bl	80011cc <__aeabi_f2iz>
 8003322:	4603      	mov	r3, r0
 8003324:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      sprintf(buff, "Target: %s %d.%02d Hz", note, target_int_part, target_frac_part);
 8003328:	f107 0214 	add.w	r2, r7, #20
 800332c:	f107 0020 	add.w	r0, r7, #32
 8003330:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800333a:	4980      	ldr	r1, [pc, #512]	@ (800353c <main+0x4d8>)
 800333c:	f006 fc06 	bl	8009b4c <siprintf>
      LCD_DrawString_Color(20, 50, buff, WHITE, BLACK);
 8003340:	f107 0220 	add.w	r2, r7, #32
 8003344:	2300      	movs	r3, #0
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800334c:	2132      	movs	r1, #50	@ 0x32
 800334e:	2014      	movs	r0, #20
 8003350:	f7fe fac4 	bl	80018dc <LCD_DrawString_Color>

      LCD_DrawString_Color(20, 80, "                    ", WHITE, BLACK); // Clear previous status
 8003354:	2300      	movs	r3, #0
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800335c:	4a75      	ldr	r2, [pc, #468]	@ (8003534 <main+0x4d0>)
 800335e:	2150      	movs	r1, #80	@ 0x50
 8003360:	2014      	movs	r0, #20
 8003362:	f7fe fabb 	bl	80018dc <LCD_DrawString_Color>
      sprintf(buff, "Status: %s", status);
 8003366:	463a      	mov	r2, r7
 8003368:	f107 0320 	add.w	r3, r7, #32
 800336c:	4974      	ldr	r1, [pc, #464]	@ (8003540 <main+0x4dc>)
 800336e:	4618      	mov	r0, r3
 8003370:	f006 fbec 	bl	8009b4c <siprintf>
      LCD_DrawString_Color(20, 80, buff, WHITE, BLACK);
 8003374:	f107 0220 	add.w	r2, r7, #32
 8003378:	2300      	movs	r3, #0
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003380:	2150      	movs	r1, #80	@ 0x50
 8003382:	2014      	movs	r0, #20
 8003384:	f7fe faaa 	bl	80018dc <LCD_DrawString_Color>

      LCD_DrawString_Color(20, 110, "                    ", WHITE, BLACK); // Clear previous frequency
 8003388:	2300      	movs	r3, #0
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003390:	4a68      	ldr	r2, [pc, #416]	@ (8003534 <main+0x4d0>)
 8003392:	216e      	movs	r1, #110	@ 0x6e
 8003394:	2014      	movs	r0, #20
 8003396:	f7fe faa1 	bl	80018dc <LCD_DrawString_Color>
      int freq_int_part = (int)freq;
 800339a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800339e:	f7fd ff15 	bl	80011cc <__aeabi_f2iz>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      int freq_frac_part = (int)((freq - freq_int_part) * 100);
 80033a8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80033ac:	f7fd fcde 	bl	8000d6c <__aeabi_i2f>
 80033b0:	4603      	mov	r3, r0
 80033b2:	4619      	mov	r1, r3
 80033b4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80033b8:	f7fd fc22 	bl	8000c00 <__aeabi_fsub>
 80033bc:	4603      	mov	r3, r0
 80033be:	495e      	ldr	r1, [pc, #376]	@ (8003538 <main+0x4d4>)
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fd fd27 	bl	8000e14 <__aeabi_fmul>
 80033c6:	4603      	mov	r3, r0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd feff 	bl	80011cc <__aeabi_f2iz>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      sprintf(buff, "Freq: %d.%02d Hz", freq_int_part, freq_frac_part);
 80033d4:	f107 0020 	add.w	r0, r7, #32
 80033d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80033e0:	4958      	ldr	r1, [pc, #352]	@ (8003544 <main+0x4e0>)
 80033e2:	f006 fbb3 	bl	8009b4c <siprintf>
      LCD_DrawString_Color(20, 110, buff, WHITE, BLACK);
 80033e6:	f107 0220 	add.w	r2, r7, #32
 80033ea:	2300      	movs	r3, #0
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033f2:	216e      	movs	r1, #110	@ 0x6e
 80033f4:	2014      	movs	r0, #20
 80033f6:	f7fe fa71 	bl	80018dc <LCD_DrawString_Color>

      LCD_DrawString_Color(20, 140, "                    ", WHITE, BLACK); // Clear previous raw frequency
 80033fa:	2300      	movs	r3, #0
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003402:	4a4c      	ldr	r2, [pc, #304]	@ (8003534 <main+0x4d0>)
 8003404:	218c      	movs	r1, #140	@ 0x8c
 8003406:	2014      	movs	r0, #20
 8003408:	f7fe fa68 	bl	80018dc <LCD_DrawString_Color>
      if (global_raw_freq >= 50.0f) {
 800340c:	4b4e      	ldr	r3, [pc, #312]	@ (8003548 <main+0x4e4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	494e      	ldr	r1, [pc, #312]	@ (800354c <main+0x4e8>)
 8003412:	4618      	mov	r0, r3
 8003414:	f7fd feb0 	bl	8001178 <__aeabi_fcmpge>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d030      	beq.n	8003480 <main+0x41c>
        sprintf(buff, "Raw Freq: %d.%02d Hz", (int)global_raw_freq, (int)((global_raw_freq - (int)global_raw_freq) * 100));
 800341e:	4b4a      	ldr	r3, [pc, #296]	@ (8003548 <main+0x4e4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd fed2 	bl	80011cc <__aeabi_f2iz>
 8003428:	4605      	mov	r5, r0
 800342a:	4b47      	ldr	r3, [pc, #284]	@ (8003548 <main+0x4e4>)
 800342c:	681c      	ldr	r4, [r3, #0]
 800342e:	4b46      	ldr	r3, [pc, #280]	@ (8003548 <main+0x4e4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fd feca 	bl	80011cc <__aeabi_f2iz>
 8003438:	4603      	mov	r3, r0
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd fc96 	bl	8000d6c <__aeabi_i2f>
 8003440:	4603      	mov	r3, r0
 8003442:	4619      	mov	r1, r3
 8003444:	4620      	mov	r0, r4
 8003446:	f7fd fbdb 	bl	8000c00 <__aeabi_fsub>
 800344a:	4603      	mov	r3, r0
 800344c:	493a      	ldr	r1, [pc, #232]	@ (8003538 <main+0x4d4>)
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd fce0 	bl	8000e14 <__aeabi_fmul>
 8003454:	4603      	mov	r3, r0
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd feb8 	bl	80011cc <__aeabi_f2iz>
 800345c:	4603      	mov	r3, r0
 800345e:	f107 0020 	add.w	r0, r7, #32
 8003462:	462a      	mov	r2, r5
 8003464:	493a      	ldr	r1, [pc, #232]	@ (8003550 <main+0x4ec>)
 8003466:	f006 fb71 	bl	8009b4c <siprintf>
        LCD_DrawString_Color(20, 140, buff, WHITE, BLACK);
 800346a:	f107 0220 	add.w	r2, r7, #32
 800346e:	2300      	movs	r3, #0
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003476:	218c      	movs	r1, #140	@ 0x8c
 8003478:	2014      	movs	r0, #20
 800347a:	f7fe fa2f 	bl	80018dc <LCD_DrawString_Color>
 800347e:	e008      	b.n	8003492 <main+0x42e>
      } else {
        LCD_DrawString_Color(20, 140, "No Signal          ", WHITE, BLACK);
 8003480:	2300      	movs	r3, #0
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003488:	4a32      	ldr	r2, [pc, #200]	@ (8003554 <main+0x4f0>)
 800348a:	218c      	movs	r1, #140	@ 0x8c
 800348c:	2014      	movs	r0, #20
 800348e:	f7fe fa25 	bl	80018dc <LCD_DrawString_Color>
      }

      if (hadc1.Instance->SR & (1U << 5)) {
 8003492:	4b31      	ldr	r3, [pc, #196]	@ (8003558 <main+0x4f4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	d009      	beq.n	80034b4 <main+0x450>
        LCD_DrawString_Color(20, 170, "ADC Overrun", WHITE, BLACK);
 80034a0:	2300      	movs	r3, #0
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034a8:	4a2c      	ldr	r2, [pc, #176]	@ (800355c <main+0x4f8>)
 80034aa:	21aa      	movs	r1, #170	@ 0xaa
 80034ac:	2014      	movs	r0, #20
 80034ae:	f7fe fa15 	bl	80018dc <LCD_DrawString_Color>
 80034b2:	e008      	b.n	80034c6 <main+0x462>
      } else {
        LCD_DrawString_Color(20, 170, "                ", WHITE, BLACK); // Clear overrun message
 80034b4:	2300      	movs	r3, #0
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034bc:	4a28      	ldr	r2, [pc, #160]	@ (8003560 <main+0x4fc>)
 80034be:	21aa      	movs	r1, #170	@ 0xaa
 80034c0:	2014      	movs	r0, #20
 80034c2:	f7fe fa0b 	bl	80018dc <LCD_DrawString_Color>
      }

      // LED indicators
      if (strcmp(status, "In Tune") == 0) {
 80034c6:	463b      	mov	r3, r7
 80034c8:	4926      	ldr	r1, [pc, #152]	@ (8003564 <main+0x500>)
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fc ff0c 	bl	80002e8 <strcmp>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <main+0x488>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Green on
 80034d6:	2200      	movs	r2, #0
 80034d8:	2101      	movs	r1, #1
 80034da:	4823      	ldr	r0, [pc, #140]	@ (8003568 <main+0x504>)
 80034dc:	f003 f857 	bl	800658e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_5, GPIO_PIN_SET);
 80034e0:	2201      	movs	r2, #1
 80034e2:	2122      	movs	r1, #34	@ 0x22
 80034e4:	4820      	ldr	r0, [pc, #128]	@ (8003568 <main+0x504>)
 80034e6:	f003 f852 	bl	800658e <HAL_GPIO_WritePin>
 80034ea:	e059      	b.n	80035a0 <main+0x53c>
      } else if (strcmp(status, "Flat") == 0) {
 80034ec:	463b      	mov	r3, r7
 80034ee:	491f      	ldr	r1, [pc, #124]	@ (800356c <main+0x508>)
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fc fef9 	bl	80002e8 <strcmp>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d139      	bne.n	8003570 <main+0x50c>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Red on
 80034fc:	2200      	movs	r2, #0
 80034fe:	2120      	movs	r1, #32
 8003500:	4819      	ldr	r0, [pc, #100]	@ (8003568 <main+0x504>)
 8003502:	f003 f844 	bl	800658e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_SET);
 8003506:	2201      	movs	r2, #1
 8003508:	2103      	movs	r1, #3
 800350a:	4817      	ldr	r0, [pc, #92]	@ (8003568 <main+0x504>)
 800350c:	f003 f83f 	bl	800658e <HAL_GPIO_WritePin>
 8003510:	e046      	b.n	80035a0 <main+0x53c>
 8003512:	bf00      	nop
 8003514:	20000000 	.word	0x20000000
 8003518:	44fff000 	.word	0x44fff000
 800351c:	200022d8 	.word	0x200022d8
 8003520:	200042d8 	.word	0x200042d8
 8003524:	200062d8 	.word	0x200062d8
 8003528:	20002098 	.word	0x20002098
 800352c:	20002018 	.word	0x20002018
 8003530:	0800a674 	.word	0x0800a674
 8003534:	0800a67c 	.word	0x0800a67c
 8003538:	42c80000 	.word	0x42c80000
 800353c:	0800a694 	.word	0x0800a694
 8003540:	0800a6ac 	.word	0x0800a6ac
 8003544:	0800a6b8 	.word	0x0800a6b8
 8003548:	200062f4 	.word	0x200062f4
 800354c:	42480000 	.word	0x42480000
 8003550:	0800a6cc 	.word	0x0800a6cc
 8003554:	0800a610 	.word	0x0800a610
 8003558:	20002144 	.word	0x20002144
 800355c:	0800a6e4 	.word	0x0800a6e4
 8003560:	0800a6f0 	.word	0x0800a6f0
 8003564:	0800a640 	.word	0x0800a640
 8003568:	40010c00 	.word	0x40010c00
 800356c:	0800a648 	.word	0x0800a648
      } else if (strcmp(status, "Sharp") == 0) {
 8003570:	463b      	mov	r3, r7
 8003572:	4959      	ldr	r1, [pc, #356]	@ (80036d8 <main+0x674>)
 8003574:	4618      	mov	r0, r3
 8003576:	f7fc feb7 	bl	80002e8 <strcmp>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <main+0x532>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Blue on
 8003580:	2200      	movs	r2, #0
 8003582:	2102      	movs	r1, #2
 8003584:	4855      	ldr	r0, [pc, #340]	@ (80036dc <main+0x678>)
 8003586:	f003 f802 	bl	800658e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_5, GPIO_PIN_SET);
 800358a:	2201      	movs	r2, #1
 800358c:	2121      	movs	r1, #33	@ 0x21
 800358e:	4853      	ldr	r0, [pc, #332]	@ (80036dc <main+0x678>)
 8003590:	f002 fffd 	bl	800658e <HAL_GPIO_WritePin>
 8003594:	e004      	b.n	80035a0 <main+0x53c>
      } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5, GPIO_PIN_SET); // All off
 8003596:	2201      	movs	r2, #1
 8003598:	2123      	movs	r1, #35	@ 0x23
 800359a:	4850      	ldr	r0, [pc, #320]	@ (80036dc <main+0x678>)
 800359c:	f002 fff7 	bl	800658e <HAL_GPIO_WritePin>
      }

      // Tuning logic: Only turn motor if freq is within ±40 Hz of target and >= 60 Hz
      if (tuning_active && tune_state == TUNE_IDLE) {
 80035a0:	4b4f      	ldr	r3, [pc, #316]	@ (80036e0 <main+0x67c>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d05a      	beq.n	800365e <main+0x5fa>
 80035a8:	4b4e      	ldr	r3, [pc, #312]	@ (80036e4 <main+0x680>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d156      	bne.n	800365e <main+0x5fa>
        if (freq >= 60 && fabs(freq - buttons[selected_note_idx].freq) <= 40.0f) {
 80035b0:	494d      	ldr	r1, [pc, #308]	@ (80036e8 <main+0x684>)
 80035b2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80035b6:	f7fd fddf 	bl	8001178 <__aeabi_fcmpge>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d04e      	beq.n	800365e <main+0x5fa>
 80035c0:	4b4a      	ldr	r3, [pc, #296]	@ (80036ec <main+0x688>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a4a      	ldr	r2, [pc, #296]	@ (80036f0 <main+0x68c>)
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	4413      	add	r3, r2
 80035ca:	330c      	adds	r3, #12
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4619      	mov	r1, r3
 80035d0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80035d4:	f7fd fb14 	bl	8000c00 <__aeabi_fsub>
 80035d8:	4603      	mov	r3, r0
 80035da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035de:	4945      	ldr	r1, [pc, #276]	@ (80036f4 <main+0x690>)
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fd fdbf 	bl	8001164 <__aeabi_fcmple>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d038      	beq.n	800365e <main+0x5fa>
          if (strcmp(status, "Sharp") == 0) {
 80035ec:	463b      	mov	r3, r7
 80035ee:	493a      	ldr	r1, [pc, #232]	@ (80036d8 <main+0x674>)
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fc fe79 	bl	80002e8 <strcmp>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d112      	bne.n	8003622 <main+0x5be>
            tune_direction = -1; // Counterclockwise to flatten
 80035fc:	4b3e      	ldr	r3, [pc, #248]	@ (80036f8 <main+0x694>)
 80035fe:	22ff      	movs	r2, #255	@ 0xff
 8003600:	701a      	strb	r2, [r3, #0]
            tune_state = TUNE_PULSE_ON;
 8003602:	4b38      	ldr	r3, [pc, #224]	@ (80036e4 <main+0x680>)
 8003604:	2201      	movs	r2, #1
 8003606:	701a      	strb	r2, [r3, #0]
            tune_timer = HAL_GetTick();
 8003608:	f001 fc84 	bl	8004f14 <HAL_GetTick>
 800360c:	4603      	mov	r3, r0
 800360e:	4a3b      	ldr	r2, [pc, #236]	@ (80036fc <main+0x698>)
 8003610:	6013      	str	r3, [r2, #0]
            motor_control(tune_direction, 1);
 8003612:	4b39      	ldr	r3, [pc, #228]	@ (80036f8 <main+0x694>)
 8003614:	f993 3000 	ldrsb.w	r3, [r3]
 8003618:	2101      	movs	r1, #1
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff f9d6 	bl	80029cc <motor_control>
 8003620:	e01d      	b.n	800365e <main+0x5fa>
          } else if (strcmp(status, "Flat") == 0) {
 8003622:	463b      	mov	r3, r7
 8003624:	4936      	ldr	r1, [pc, #216]	@ (8003700 <main+0x69c>)
 8003626:	4618      	mov	r0, r3
 8003628:	f7fc fe5e 	bl	80002e8 <strcmp>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d115      	bne.n	800365e <main+0x5fa>
            tune_direction = 1; // Clockwise to sharpen
 8003632:	4b31      	ldr	r3, [pc, #196]	@ (80036f8 <main+0x694>)
 8003634:	2201      	movs	r2, #1
 8003636:	701a      	strb	r2, [r3, #0]
            tune_state = TUNE_PULSE_ON;
 8003638:	4b2a      	ldr	r3, [pc, #168]	@ (80036e4 <main+0x680>)
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]
            tune_timer = HAL_GetTick();
 800363e:	f001 fc69 	bl	8004f14 <HAL_GetTick>
 8003642:	4603      	mov	r3, r0
 8003644:	4a2d      	ldr	r2, [pc, #180]	@ (80036fc <main+0x698>)
 8003646:	6013      	str	r3, [r2, #0]
            motor_control(tune_direction, 1);
 8003648:	4b2b      	ldr	r3, [pc, #172]	@ (80036f8 <main+0x694>)
 800364a:	f993 3000 	ldrsb.w	r3, [r3]
 800364e:	2101      	movs	r1, #1
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff f9bb 	bl	80029cc <motor_control>
            HAL_Delay(500);
 8003656:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800365a:	f001 fc65 	bl	8004f28 <HAL_Delay>
        }
      }
    }

    // Handle tuning pulse
    if (tuning_active && tune_state != TUNE_IDLE) {
 800365e:	4b20      	ldr	r3, [pc, #128]	@ (80036e0 <main+0x67c>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d034      	beq.n	80036d0 <main+0x66c>
 8003666:	4b1f      	ldr	r3, [pc, #124]	@ (80036e4 <main+0x680>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d030      	beq.n	80036d0 <main+0x66c>
      uint32_t current_time = HAL_GetTick();
 800366e:	f001 fc51 	bl	8004f14 <HAL_GetTick>
 8003672:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
      switch (tune_state) {
 8003676:	4b1b      	ldr	r3, [pc, #108]	@ (80036e4 <main+0x680>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d002      	beq.n	8003684 <main+0x620>
 800367e:	2b02      	cmp	r3, #2
 8003680:	d014      	beq.n	80036ac <main+0x648>
            tune_state = TUNE_IDLE; // Ready for next tuning cycle
            tune_direction = 0;
          }
          break;
        default:
          break;
 8003682:	e025      	b.n	80036d0 <main+0x66c>
          if (current_time - tune_timer >= PULSE_DURATION_MS) {
 8003684:	4b1d      	ldr	r3, [pc, #116]	@ (80036fc <main+0x698>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8003692:	d31a      	bcc.n	80036ca <main+0x666>
            motor_control(0, 0); // Stop motor
 8003694:	2100      	movs	r1, #0
 8003696:	2000      	movs	r0, #0
 8003698:	f7ff f998 	bl	80029cc <motor_control>
            tune_state = TUNE_PULSE_OFF;
 800369c:	4b11      	ldr	r3, [pc, #68]	@ (80036e4 <main+0x680>)
 800369e:	2202      	movs	r2, #2
 80036a0:	701a      	strb	r2, [r3, #0]
            tune_timer = current_time;
 80036a2:	4a16      	ldr	r2, [pc, #88]	@ (80036fc <main+0x698>)
 80036a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036a8:	6013      	str	r3, [r2, #0]
          break;
 80036aa:	e00e      	b.n	80036ca <main+0x666>
          if (current_time - tune_timer >= PULSE_DURATION_MS) {
 80036ac:	4b13      	ldr	r3, [pc, #76]	@ (80036fc <main+0x698>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80036ba:	d308      	bcc.n	80036ce <main+0x66a>
            tune_state = TUNE_IDLE; // Ready for next tuning cycle
 80036bc:	4b09      	ldr	r3, [pc, #36]	@ (80036e4 <main+0x680>)
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
            tune_direction = 0;
 80036c2:	4b0d      	ldr	r3, [pc, #52]	@ (80036f8 <main+0x694>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]
          break;
 80036c8:	e001      	b.n	80036ce <main+0x66a>
          break;
 80036ca:	bf00      	nop
 80036cc:	e000      	b.n	80036d0 <main+0x66c>
          break;
 80036ce:	bf00      	nop
      }
    }

    HAL_Delay(20); // Increased delay to test timing
 80036d0:	2014      	movs	r0, #20
 80036d2:	f001 fc29 	bl	8004f28 <HAL_Delay>
    check_touch();
 80036d6:	e52d      	b.n	8003134 <main+0xd0>
 80036d8:	0800a650 	.word	0x0800a650
 80036dc:	40010c00 	.word	0x40010c00
 80036e0:	200062f9 	.word	0x200062f9
 80036e4:	200062fa 	.word	0x200062fa
 80036e8:	42700000 	.word	0x42700000
 80036ec:	20002098 	.word	0x20002098
 80036f0:	20002018 	.word	0x20002018
 80036f4:	42200000 	.word	0x42200000
 80036f8:	20006300 	.word	0x20006300
 80036fc:	200062fc 	.word	0x200062fc
 8003700:	0800a648 	.word	0x0800a648

08003704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b096      	sub	sp, #88	@ 0x58
 8003708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800370a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800370e:	2228      	movs	r2, #40	@ 0x28
 8003710:	2100      	movs	r1, #0
 8003712:	4618      	mov	r0, r3
 8003714:	f006 fa3c 	bl	8009b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003718:	f107 031c 	add.w	r3, r7, #28
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	605a      	str	r2, [r3, #4]
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	60da      	str	r2, [r3, #12]
 8003734:	611a      	str	r2, [r3, #16]
 8003736:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003738:	2301      	movs	r3, #1
 800373a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800373c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003740:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003742:	2300      	movs	r3, #0
 8003744:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003746:	2301      	movs	r3, #1
 8003748:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800374a:	2302      	movs	r3, #2
 800374c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800374e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003752:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003754:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003758:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800375a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800375e:	4618      	mov	r0, r3
 8003760:	f002 ff50 	bl	8006604 <HAL_RCC_OscConfig>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800376a:	f000 fb47 	bl	8003dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800376e:	230f      	movs	r3, #15
 8003770:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003772:	2302      	movs	r3, #2
 8003774:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003776:	2300      	movs	r3, #0
 8003778:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800377a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800377e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003780:	2300      	movs	r3, #0
 8003782:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003784:	f107 031c 	add.w	r3, r7, #28
 8003788:	2102      	movs	r1, #2
 800378a:	4618      	mov	r0, r3
 800378c:	f003 f9bc 	bl	8006b08 <HAL_RCC_ClockConfig>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003796:	f000 fb31 	bl	8003dfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800379a:	2302      	movs	r3, #2
 800379c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800379e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037a2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	4618      	mov	r0, r3
 80037a8:	f003 fb28 	bl	8006dfc <HAL_RCCEx_PeriphCLKConfig>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80037b2:	f000 fb23 	bl	8003dfc <Error_Handler>
  }
}
 80037b6:	bf00      	nop
 80037b8:	3758      	adds	r7, #88	@ 0x58
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80037c6:	1d3b      	adds	r3, r7, #4
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	609a      	str	r2, [r3, #8]

  hadc1.Instance = ADC1;
 80037d0:	4b18      	ldr	r3, [pc, #96]	@ (8003834 <MX_ADC1_Init+0x74>)
 80037d2:	4a19      	ldr	r2, [pc, #100]	@ (8003838 <MX_ADC1_Init+0x78>)
 80037d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80037d6:	4b17      	ldr	r3, [pc, #92]	@ (8003834 <MX_ADC1_Init+0x74>)
 80037d8:	2200      	movs	r2, #0
 80037da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80037dc:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <MX_ADC1_Init+0x74>)
 80037de:	2200      	movs	r2, #0
 80037e0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80037e2:	4b14      	ldr	r3, [pc, #80]	@ (8003834 <MX_ADC1_Init+0x74>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80037e8:	4b12      	ldr	r3, [pc, #72]	@ (8003834 <MX_ADC1_Init+0x74>)
 80037ea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80037ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037f0:	4b10      	ldr	r3, [pc, #64]	@ (8003834 <MX_ADC1_Init+0x74>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80037f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003834 <MX_ADC1_Init+0x74>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80037fc:	480d      	ldr	r0, [pc, #52]	@ (8003834 <MX_ADC1_Init+0x74>)
 80037fe:	f001 fbb7 	bl	8004f70 <HAL_ADC_Init>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003808:	f000 faf8 	bl	8003dfc <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_3;
 800380c:	2303      	movs	r3, #3
 800380e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003810:	2301      	movs	r3, #1
 8003812:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5; // Increased for stability
 8003814:	2307      	movs	r3, #7
 8003816:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003818:	1d3b      	adds	r3, r7, #4
 800381a:	4619      	mov	r1, r3
 800381c:	4805      	ldr	r0, [pc, #20]	@ (8003834 <MX_ADC1_Init+0x74>)
 800381e:	f001 fdcd 	bl	80053bc <HAL_ADC_ConfigChannel>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003828:	f000 fae8 	bl	8003dfc <Error_Handler>
  }
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20002144 	.word	0x20002144
 8003838:	40012400 	.word	0x40012400

0800383c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003842:	f107 0308 	add.w	r3, r7, #8
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]
 800384e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003850:	463b      	mov	r3, r7
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8003858:	4b1d      	ldr	r3, [pc, #116]	@ (80038d0 <MX_TIM2_Init+0x94>)
 800385a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800385e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 8003860:	4b1b      	ldr	r3, [pc, #108]	@ (80038d0 <MX_TIM2_Init+0x94>)
 8003862:	2223      	movs	r2, #35	@ 0x23
 8003864:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003866:	4b1a      	ldr	r3, [pc, #104]	@ (80038d0 <MX_TIM2_Init+0x94>)
 8003868:	2200      	movs	r2, #0
 800386a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 976;
 800386c:	4b18      	ldr	r3, [pc, #96]	@ (80038d0 <MX_TIM2_Init+0x94>)
 800386e:	f44f 7274 	mov.w	r2, #976	@ 0x3d0
 8003872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003874:	4b16      	ldr	r3, [pc, #88]	@ (80038d0 <MX_TIM2_Init+0x94>)
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800387a:	4b15      	ldr	r3, [pc, #84]	@ (80038d0 <MX_TIM2_Init+0x94>)
 800387c:	2200      	movs	r2, #0
 800387e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003880:	4813      	ldr	r0, [pc, #76]	@ (80038d0 <MX_TIM2_Init+0x94>)
 8003882:	f003 fc96 	bl	80071b2 <HAL_TIM_Base_Init>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800388c:	f000 fab6 	bl	8003dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003894:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003896:	f107 0308 	add.w	r3, r7, #8
 800389a:	4619      	mov	r1, r3
 800389c:	480c      	ldr	r0, [pc, #48]	@ (80038d0 <MX_TIM2_Init+0x94>)
 800389e:	f003 fff3 	bl	8007888 <HAL_TIM_ConfigClockSource>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80038a8:	f000 faa8 	bl	8003dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80038ac:	2320      	movs	r3, #32
 80038ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80038b0:	2380      	movs	r3, #128	@ 0x80
 80038b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038b4:	463b      	mov	r3, r7
 80038b6:	4619      	mov	r1, r3
 80038b8:	4805      	ldr	r0, [pc, #20]	@ (80038d0 <MX_TIM2_Init+0x94>)
 80038ba:	f004 fbc5 	bl	8008048 <HAL_TIMEx_MasterConfigSynchronization>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80038c4:	f000 fa9a 	bl	8003dfc <Error_Handler>
  }
}
 80038c8:	bf00      	nop
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	200021b8 	.word	0x200021b8

080038d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038da:	f107 0308 	add.w	r3, r7, #8
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	609a      	str	r2, [r3, #8]
 80038e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038e8:	463b      	mov	r3, r7
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80038f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003968 <MX_TIM3_Init+0x94>)
 80038f2:	4a1e      	ldr	r2, [pc, #120]	@ (800396c <MX_TIM3_Init+0x98>)
 80038f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35; // (72 MHz / (35 + 1)) = 2 MHz
 80038f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003968 <MX_TIM3_Init+0x94>)
 80038f8:	2223      	movs	r2, #35	@ 0x23
 80038fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003968 <MX_TIM3_Init+0x94>)
 80038fe:	2200      	movs	r2, #0
 8003900:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 487;  // 2 MHz / (487 + 1) ≈ 4098.36 Hz
 8003902:	4b19      	ldr	r3, [pc, #100]	@ (8003968 <MX_TIM3_Init+0x94>)
 8003904:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8003908:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800390a:	4b17      	ldr	r3, [pc, #92]	@ (8003968 <MX_TIM3_Init+0x94>)
 800390c:	2200      	movs	r2, #0
 800390e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003910:	4b15      	ldr	r3, [pc, #84]	@ (8003968 <MX_TIM3_Init+0x94>)
 8003912:	2200      	movs	r2, #0
 8003914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003916:	4814      	ldr	r0, [pc, #80]	@ (8003968 <MX_TIM3_Init+0x94>)
 8003918:	f003 fc4b 	bl	80071b2 <HAL_TIM_Base_Init>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003922:	f000 fa6b 	bl	8003dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003926:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800392a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800392c:	f107 0308 	add.w	r3, r7, #8
 8003930:	4619      	mov	r1, r3
 8003932:	480d      	ldr	r0, [pc, #52]	@ (8003968 <MX_TIM3_Init+0x94>)
 8003934:	f003 ffa8 	bl	8007888 <HAL_TIM_ConfigClockSource>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800393e:	f000 fa5d 	bl	8003dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003942:	2320      	movs	r3, #32
 8003944:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003946:	2380      	movs	r3, #128	@ 0x80
 8003948:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800394a:	463b      	mov	r3, r7
 800394c:	4619      	mov	r1, r3
 800394e:	4806      	ldr	r0, [pc, #24]	@ (8003968 <MX_TIM3_Init+0x94>)
 8003950:	f004 fb7a 	bl	8008048 <HAL_TIMEx_MasterConfigSynchronization>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800395a:	f000 fa4f 	bl	8003dfc <Error_Handler>
  }
}
 800395e:	bf00      	nop
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20002200 	.word	0x20002200
 800396c:	40000400 	.word	0x40000400

08003970 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08e      	sub	sp, #56	@ 0x38
 8003974:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003976:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	609a      	str	r2, [r3, #8]
 8003982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003984:	f107 0320 	add.w	r3, r7, #32
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	611a      	str	r2, [r3, #16]
 800399c:	615a      	str	r2, [r3, #20]
 800399e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80039a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a50 <MX_TIM4_Init+0xe0>)
 80039a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003a54 <MX_TIM4_Init+0xe4>)
 80039a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71; // 72 MHz / (71+1) = 1 MHz
 80039a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a50 <MX_TIM4_Init+0xe0>)
 80039a8:	2247      	movs	r2, #71	@ 0x47
 80039aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ac:	4b28      	ldr	r3, [pc, #160]	@ (8003a50 <MX_TIM4_Init+0xe0>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999; // 1 MHz / (999+1) = 1 kHz
 80039b2:	4b27      	ldr	r3, [pc, #156]	@ (8003a50 <MX_TIM4_Init+0xe0>)
 80039b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80039b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039ba:	4b25      	ldr	r3, [pc, #148]	@ (8003a50 <MX_TIM4_Init+0xe0>)
 80039bc:	2200      	movs	r2, #0
 80039be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039c0:	4b23      	ldr	r3, [pc, #140]	@ (8003a50 <MX_TIM4_Init+0xe0>)
 80039c2:	2280      	movs	r2, #128	@ 0x80
 80039c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80039c6:	4822      	ldr	r0, [pc, #136]	@ (8003a50 <MX_TIM4_Init+0xe0>)
 80039c8:	f003 fbf3 	bl	80071b2 <HAL_TIM_Base_Init>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80039d2:	f000 fa13 	bl	8003dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039da:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80039dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039e0:	4619      	mov	r1, r3
 80039e2:	481b      	ldr	r0, [pc, #108]	@ (8003a50 <MX_TIM4_Init+0xe0>)
 80039e4:	f003 ff50 	bl	8007888 <HAL_TIM_ConfigClockSource>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80039ee:	f000 fa05 	bl	8003dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80039f2:	4817      	ldr	r0, [pc, #92]	@ (8003a50 <MX_TIM4_Init+0xe0>)
 80039f4:	f003 fc84 	bl	8007300 <HAL_TIM_PWM_Init>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80039fe:	f000 f9fd 	bl	8003dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a02:	2300      	movs	r3, #0
 8003a04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a0a:	f107 0320 	add.w	r3, r7, #32
 8003a0e:	4619      	mov	r1, r3
 8003a10:	480f      	ldr	r0, [pc, #60]	@ (8003a50 <MX_TIM4_Init+0xe0>)
 8003a12:	f004 fb19 	bl	8008048 <HAL_TIMEx_MasterConfigSynchronization>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003a1c:	f000 f9ee 	bl	8003dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a20:	2360      	movs	r3, #96	@ 0x60
 8003a22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a30:	1d3b      	adds	r3, r7, #4
 8003a32:	2200      	movs	r2, #0
 8003a34:	4619      	mov	r1, r3
 8003a36:	4806      	ldr	r0, [pc, #24]	@ (8003a50 <MX_TIM4_Init+0xe0>)
 8003a38:	f003 fe64 	bl	8007704 <HAL_TIM_PWM_ConfigChannel>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003a42:	f000 f9db 	bl	8003dfc <Error_Handler>
  }
}
 8003a46:	bf00      	nop
 8003a48:	3738      	adds	r7, #56	@ 0x38
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20002248 	.word	0x20002248
 8003a54:	40000800 	.word	0x40000800

08003a58 <MX_DMA_Init>:
/**
  * @brief Enable DMA controller clock
  * @retval None
  */
static void MX_DMA_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ae0 <MX_DMA_Init+0x88>)
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae0 <MX_DMA_Init+0x88>)
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	6153      	str	r3, [r2, #20]
 8003a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae0 <MX_DMA_Init+0x88>)
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0); // Highest priority
 8003a76:	2200      	movs	r2, #0
 8003a78:	2100      	movs	r1, #0
 8003a7a:	200b      	movs	r0, #11
 8003a7c:	f002 f81d 	bl	8005aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003a80:	200b      	movs	r0, #11
 8003a82:	f002 f836 	bl	8005af2 <HAL_NVIC_EnableIRQ>

  /* Configure DMA for ADC1 */
  hdma_adc1.Instance = DMA1_Channel1;
 8003a86:	4b17      	ldr	r3, [pc, #92]	@ (8003ae4 <MX_DMA_Init+0x8c>)
 8003a88:	4a17      	ldr	r2, [pc, #92]	@ (8003ae8 <MX_DMA_Init+0x90>)
 8003a8a:	601a      	str	r2, [r3, #0]
  hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a8c:	4b15      	ldr	r3, [pc, #84]	@ (8003ae4 <MX_DMA_Init+0x8c>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	605a      	str	r2, [r3, #4]
  hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a92:	4b14      	ldr	r3, [pc, #80]	@ (8003ae4 <MX_DMA_Init+0x8c>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	609a      	str	r2, [r3, #8]
  hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003a98:	4b12      	ldr	r3, [pc, #72]	@ (8003ae4 <MX_DMA_Init+0x8c>)
 8003a9a:	2280      	movs	r2, #128	@ 0x80
 8003a9c:	60da      	str	r2, [r3, #12]
  hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a9e:	4b11      	ldr	r3, [pc, #68]	@ (8003ae4 <MX_DMA_Init+0x8c>)
 8003aa0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003aa4:	611a      	str	r2, [r3, #16]
  hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae4 <MX_DMA_Init+0x8c>)
 8003aa8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003aac:	615a      	str	r2, [r3, #20]
  hdma_adc1.Init.Mode = DMA_NORMAL; // Normal mode for simplicity
 8003aae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae4 <MX_DMA_Init+0x8c>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	619a      	str	r2, [r3, #24]
  hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <MX_DMA_Init+0x8c>)
 8003ab6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003aba:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003abc:	4809      	ldr	r0, [pc, #36]	@ (8003ae4 <MX_DMA_Init+0x8c>)
 8003abe:	f002 f833 	bl	8005b28 <HAL_DMA_Init>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <MX_DMA_Init+0x74>
  {
    Error_Handler();
 8003ac8:	f000 f998 	bl	8003dfc <Error_Handler>
  }

  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 8003acc:	4b07      	ldr	r3, [pc, #28]	@ (8003aec <MX_DMA_Init+0x94>)
 8003ace:	4a05      	ldr	r2, [pc, #20]	@ (8003ae4 <MX_DMA_Init+0x8c>)
 8003ad0:	621a      	str	r2, [r3, #32]
 8003ad2:	4b04      	ldr	r3, [pc, #16]	@ (8003ae4 <MX_DMA_Init+0x8c>)
 8003ad4:	4a05      	ldr	r2, [pc, #20]	@ (8003aec <MX_DMA_Init+0x94>)
 8003ad6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003ad8:	bf00      	nop
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	20002174 	.word	0x20002174
 8003ae8:	40020008 	.word	0x40020008
 8003aec:	20002144 	.word	0x20002144

08003af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	@ 0x28
 8003af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af6:	f107 0318 	add.w	r3, r7, #24
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	605a      	str	r2, [r3, #4]
 8003b00:	609a      	str	r2, [r3, #8]
 8003b02:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b04:	4b5e      	ldr	r3, [pc, #376]	@ (8003c80 <MX_GPIO_Init+0x190>)
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	4a5d      	ldr	r2, [pc, #372]	@ (8003c80 <MX_GPIO_Init+0x190>)
 8003b0a:	f043 0310 	orr.w	r3, r3, #16
 8003b0e:	6193      	str	r3, [r2, #24]
 8003b10:	4b5b      	ldr	r3, [pc, #364]	@ (8003c80 <MX_GPIO_Init+0x190>)
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b1c:	4b58      	ldr	r3, [pc, #352]	@ (8003c80 <MX_GPIO_Init+0x190>)
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	4a57      	ldr	r2, [pc, #348]	@ (8003c80 <MX_GPIO_Init+0x190>)
 8003b22:	f043 0304 	orr.w	r3, r3, #4
 8003b26:	6193      	str	r3, [r2, #24]
 8003b28:	4b55      	ldr	r3, [pc, #340]	@ (8003c80 <MX_GPIO_Init+0x190>)
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b34:	4b52      	ldr	r3, [pc, #328]	@ (8003c80 <MX_GPIO_Init+0x190>)
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	4a51      	ldr	r2, [pc, #324]	@ (8003c80 <MX_GPIO_Init+0x190>)
 8003b3a:	f043 0308 	orr.w	r3, r3, #8
 8003b3e:	6193      	str	r3, [r2, #24]
 8003b40:	4b4f      	ldr	r3, [pc, #316]	@ (8003c80 <MX_GPIO_Init+0x190>)
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8003c80 <MX_GPIO_Init+0x190>)
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	4a4b      	ldr	r2, [pc, #300]	@ (8003c80 <MX_GPIO_Init+0x190>)
 8003b52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b56:	6193      	str	r3, [r2, #24]
 8003b58:	4b49      	ldr	r3, [pc, #292]	@ (8003c80 <MX_GPIO_Init+0x190>)
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b64:	4b46      	ldr	r3, [pc, #280]	@ (8003c80 <MX_GPIO_Init+0x190>)
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	4a45      	ldr	r2, [pc, #276]	@ (8003c80 <MX_GPIO_Init+0x190>)
 8003b6a:	f043 0320 	orr.w	r3, r3, #32
 8003b6e:	6193      	str	r3, [r2, #24]
 8003b70:	4b43      	ldr	r3, [pc, #268]	@ (8003c80 <MX_GPIO_Init+0x190>)
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	2123      	movs	r1, #35	@ 0x23
 8003b80:	4840      	ldr	r0, [pc, #256]	@ (8003c84 <MX_GPIO_Init+0x194>)
 8003b82:	f002 fd04 	bl	800658e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_8, GPIO_PIN_RESET); // Motor off
 8003b86:	2200      	movs	r2, #0
 8003b88:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8003b8c:	483e      	ldr	r0, [pc, #248]	@ (8003c88 <MX_GPIO_Init+0x198>)
 8003b8e:	f002 fcfe 	bl	800658e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_SET);
 8003b92:	2201      	movs	r2, #1
 8003b94:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003b98:	483c      	ldr	r0, [pc, #240]	@ (8003c8c <MX_GPIO_Init+0x19c>)
 8003b9a:	f002 fcf8 	bl	800658e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	2107      	movs	r1, #7
 8003ba2:	483b      	ldr	r0, [pc, #236]	@ (8003c90 <MX_GPIO_Init+0x1a0>)
 8003ba4:	f002 fcf3 	bl	800658e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8003ba8:	2323      	movs	r3, #35	@ 0x23
 8003baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bac:	2301      	movs	r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bb8:	f107 0318 	add.w	r3, r7, #24
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4831      	ldr	r0, [pc, #196]	@ (8003c84 <MX_GPIO_Init+0x194>)
 8003bc0:	f002 fb3a 	bl	8006238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8;
 8003bc4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd6:	f107 0318 	add.w	r3, r7, #24
 8003bda:	4619      	mov	r1, r3
 8003bdc:	482a      	ldr	r0, [pc, #168]	@ (8003c88 <MX_GPIO_Init+0x198>)
 8003bde:	f002 fb2b 	bl	8006238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003be2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003be8:	2301      	movs	r3, #1
 8003bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bf4:	f107 0318 	add.w	r3, r7, #24
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4824      	ldr	r0, [pc, #144]	@ (8003c8c <MX_GPIO_Init+0x19c>)
 8003bfc:	f002 fb1c 	bl	8006238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003c00:	2307      	movs	r3, #7
 8003c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c04:	2301      	movs	r3, #1
 8003c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c10:	f107 0318 	add.w	r3, r7, #24
 8003c14:	4619      	mov	r1, r3
 8003c16:	481e      	ldr	r0, [pc, #120]	@ (8003c90 <MX_GPIO_Init+0x1a0>)
 8003c18:	f002 fb0e 	bl	8006238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c28:	f107 0318 	add.w	r3, r7, #24
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4818      	ldr	r0, [pc, #96]	@ (8003c90 <MX_GPIO_Init+0x1a0>)
 8003c30:	f002 fb02 	bl	8006238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c34:	2310      	movs	r3, #16
 8003c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c38:	4b16      	ldr	r3, [pc, #88]	@ (8003c94 <MX_GPIO_Init+0x1a4>)
 8003c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c40:	f107 0318 	add.w	r3, r7, #24
 8003c44:	4619      	mov	r1, r3
 8003c46:	4812      	ldr	r0, [pc, #72]	@ (8003c90 <MX_GPIO_Init+0x1a0>)
 8003c48:	f002 faf6 	bl	8006238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 (TIM4_CH1) */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c4c:	2340      	movs	r3, #64	@ 0x40
 8003c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c50:	2302      	movs	r3, #2
 8003c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c5c:	f107 0318 	add.w	r3, r7, #24
 8003c60:	4619      	mov	r1, r3
 8003c62:	4808      	ldr	r0, [pc, #32]	@ (8003c84 <MX_GPIO_Init+0x194>)
 8003c64:	f002 fae8 	bl	8006238 <HAL_GPIO_Init>

  /* EXTI interrupt init */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	200a      	movs	r0, #10
 8003c6e:	f001 ff24 	bl	8005aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003c72:	200a      	movs	r0, #10
 8003c74:	f001 ff3d 	bl	8005af2 <HAL_NVIC_EnableIRQ>
}
 8003c78:	bf00      	nop
 8003c7a:	3728      	adds	r7, #40	@ 0x28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40010c00 	.word	0x40010c00
 8003c88:	40010800 	.word	0x40010800
 8003c8c:	40011400 	.word	0x40011400
 8003c90:	40011800 	.word	0x40011800
 8003c94:	10210000 	.word	0x10210000

08003c98 <MX_FSMC_Init>:
/**
  * @brief FSMC initialization function
  * @retval None
  */
static void MX_FSMC_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003c9e:	1d3b      	adds	r3, r7, #4
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	60da      	str	r2, [r3, #12]
 8003caa:	611a      	str	r2, [r3, #16]
 8003cac:	615a      	str	r2, [r3, #20]
 8003cae:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003cb0:	4b28      	ldr	r3, [pc, #160]	@ (8003d54 <MX_FSMC_Init+0xbc>)
 8003cb2:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8003cb6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003cb8:	4b26      	ldr	r3, [pc, #152]	@ (8003d54 <MX_FSMC_Init+0xbc>)
 8003cba:	4a27      	ldr	r2, [pc, #156]	@ (8003d58 <MX_FSMC_Init+0xc0>)
 8003cbc:	605a      	str	r2, [r3, #4]
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003cbe:	4b25      	ldr	r3, [pc, #148]	@ (8003d54 <MX_FSMC_Init+0xbc>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003cc4:	4b23      	ldr	r3, [pc, #140]	@ (8003d54 <MX_FSMC_Init+0xbc>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8003cca:	4b22      	ldr	r3, [pc, #136]	@ (8003d54 <MX_FSMC_Init+0xbc>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003cd0:	4b20      	ldr	r3, [pc, #128]	@ (8003d54 <MX_FSMC_Init+0xbc>)
 8003cd2:	2210      	movs	r2, #16
 8003cd4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d54 <MX_FSMC_Init+0xbc>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d54 <MX_FSMC_Init+0xbc>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8003d54 <MX_FSMC_Init+0xbc>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d54 <MX_FSMC_Init+0xbc>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003cee:	4b19      	ldr	r3, [pc, #100]	@ (8003d54 <MX_FSMC_Init+0xbc>)
 8003cf0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003cf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003cf6:	4b17      	ldr	r3, [pc, #92]	@ (8003d54 <MX_FSMC_Init+0xbc>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003cfc:	4b15      	ldr	r3, [pc, #84]	@ (8003d54 <MX_FSMC_Init+0xbc>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003d02:	4b14      	ldr	r3, [pc, #80]	@ (8003d54 <MX_FSMC_Init+0xbc>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003d08:	4b12      	ldr	r3, [pc, #72]	@ (8003d54 <MX_FSMC_Init+0xbc>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	639a      	str	r2, [r3, #56]	@ 0x38
  Timing.AddressSetupTime = 15;
 8003d0e:	230f      	movs	r3, #15
 8003d10:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003d12:	230f      	movs	r3, #15
 8003d14:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8003d16:	23ff      	movs	r3, #255	@ 0xff
 8003d18:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8003d1a:	230f      	movs	r3, #15
 8003d1c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003d1e:	2310      	movs	r3, #16
 8003d20:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003d22:	2311      	movs	r3, #17
 8003d24:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003d2a:	1d3b      	adds	r3, r7, #4
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4808      	ldr	r0, [pc, #32]	@ (8003d54 <MX_FSMC_Init+0xbc>)
 8003d32:	f003 f9f1 	bl	8007118 <HAL_SRAM_Init>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <MX_FSMC_Init+0xa8>
  {
    Error_Handler();
 8003d3c:	f000 f85e 	bl	8003dfc <Error_Handler>
  }

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8003d40:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <MX_FSMC_Init+0xc4>)
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	4a05      	ldr	r2, [pc, #20]	@ (8003d5c <MX_FSMC_Init+0xc4>)
 8003d46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d4a:	61d3      	str	r3, [r2, #28]
}
 8003d4c:	bf00      	nop
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20002290 	.word	0x20002290
 8003d58:	a0000104 	.word	0xa0000104
 8003d5c:	40010000 	.word	0x40010000

08003d60 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  ADC conversion complete callback
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1) {
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003de0 <HAL_ADC_ConvCpltCallback+0x80>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d131      	bne.n	8003dd6 <HAL_ADC_ConvCpltCallback+0x76>
    if (HAL_DMA_GetState(&hdma_adc1) == HAL_DMA_STATE_READY) {
 8003d72:	481c      	ldr	r0, [pc, #112]	@ (8003de4 <HAL_ADC_ConvCpltCallback+0x84>)
 8003d74:	f002 fa26 	bl	80061c4 <HAL_DMA_GetState>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d12b      	bne.n	8003dd6 <HAL_ADC_ConvCpltCallback+0x76>
  __ASM volatile ("cpsid i" : : : "memory");
 8003d7e:	b672      	cpsid	i
}
 8003d80:	bf00      	nop
      // Critical section to synchronize buffer toggle
      __disable_irq();
      adc_complete = 1;
 8003d82:	4b19      	ldr	r3, [pc, #100]	@ (8003de8 <HAL_ADC_ConvCpltCallback+0x88>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	701a      	strb	r2, [r3, #0]
      buffer_idx = !buffer_idx;
 8003d88:	4b18      	ldr	r3, [pc, #96]	@ (8003dec <HAL_ADC_ConvCpltCallback+0x8c>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4b14      	ldr	r3, [pc, #80]	@ (8003dec <HAL_ADC_ConvCpltCallback+0x8c>)
 8003d9c:	701a      	strb	r2, [r3, #0]
      processing_buffer = !buffer_idx;
 8003d9e:	4b13      	ldr	r3, [pc, #76]	@ (8003dec <HAL_ADC_ConvCpltCallback+0x8c>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	4b0f      	ldr	r3, [pc, #60]	@ (8003df0 <HAL_ADC_ConvCpltCallback+0x90>)
 8003db2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003db4:	b662      	cpsie	i
}
 8003db6:	bf00      	nop
      __enable_irq();

      // Stop current DMA transfer
      if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK) {
 8003db8:	480e      	ldr	r0, [pc, #56]	@ (8003df4 <HAL_ADC_ConvCpltCallback+0x94>)
 8003dba:	f001 faa1 	bl	8005300 <HAL_ADC_Stop_DMA>
        // Error handling without display
      }

      // Start DMA transfer for the new buffer
      if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer[buffer_idx], FFT_SIZE) != HAL_OK) {
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <HAL_ADC_ConvCpltCallback+0x8c>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	031b      	lsls	r3, r3, #12
 8003dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8003df8 <HAL_ADC_ConvCpltCallback+0x98>)
 8003dc8:	4413      	add	r3, r2
 8003dca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4808      	ldr	r0, [pc, #32]	@ (8003df4 <HAL_ADC_ConvCpltCallback+0x94>)
 8003dd2:	f001 f9b7 	bl	8005144 <HAL_ADC_Start_DMA>
        // Error handling without display
      }
    }
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40012400 	.word	0x40012400
 8003de4:	20002174 	.word	0x20002174
 8003de8:	200062f0 	.word	0x200062f0
 8003dec:	200062f1 	.word	0x200062f1
 8003df0:	200062f2 	.word	0x200062f2
 8003df4:	20002144 	.word	0x20002144
 8003df8:	20000000 	.word	0x20000000

08003dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e00:	b672      	cpsid	i
}
 8003e02:	bf00      	nop
  __disable_irq();
  while (1)
 8003e04:	bf00      	nop
 8003e06:	e7fd      	b.n	8003e04 <Error_Handler+0x8>

08003e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003e0e:	4b15      	ldr	r3, [pc, #84]	@ (8003e64 <HAL_MspInit+0x5c>)
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	4a14      	ldr	r2, [pc, #80]	@ (8003e64 <HAL_MspInit+0x5c>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6193      	str	r3, [r2, #24]
 8003e1a:	4b12      	ldr	r3, [pc, #72]	@ (8003e64 <HAL_MspInit+0x5c>)
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e26:	4b0f      	ldr	r3, [pc, #60]	@ (8003e64 <HAL_MspInit+0x5c>)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8003e64 <HAL_MspInit+0x5c>)
 8003e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e30:	61d3      	str	r3, [r2, #28]
 8003e32:	4b0c      	ldr	r3, [pc, #48]	@ (8003e64 <HAL_MspInit+0x5c>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e3a:	607b      	str	r3, [r7, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e68 <HAL_MspInit+0x60>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	4a04      	ldr	r2, [pc, #16]	@ (8003e68 <HAL_MspInit+0x60>)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40010000 	.word	0x40010000

08003e6c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e74:	f107 0310 	add.w	r3, r7, #16
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a29      	ldr	r2, [pc, #164]	@ (8003f2c <HAL_ADC_MspInit+0xc0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d14a      	bne.n	8003f22 <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e8c:	4b28      	ldr	r3, [pc, #160]	@ (8003f30 <HAL_ADC_MspInit+0xc4>)
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	4a27      	ldr	r2, [pc, #156]	@ (8003f30 <HAL_ADC_MspInit+0xc4>)
 8003e92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e96:	6193      	str	r3, [r2, #24]
 8003e98:	4b25      	ldr	r3, [pc, #148]	@ (8003f30 <HAL_ADC_MspInit+0xc4>)
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea4:	4b22      	ldr	r3, [pc, #136]	@ (8003f30 <HAL_ADC_MspInit+0xc4>)
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	4a21      	ldr	r2, [pc, #132]	@ (8003f30 <HAL_ADC_MspInit+0xc4>)
 8003eaa:	f043 0304 	orr.w	r3, r3, #4
 8003eae:	6193      	str	r3, [r2, #24]
 8003eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f30 <HAL_ADC_MspInit+0xc4>)
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ebc:	2308      	movs	r3, #8
 8003ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec4:	f107 0310 	add.w	r3, r7, #16
 8003ec8:	4619      	mov	r1, r3
 8003eca:	481a      	ldr	r0, [pc, #104]	@ (8003f34 <HAL_ADC_MspInit+0xc8>)
 8003ecc:	f002 f9b4 	bl	8006238 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003ed0:	4b19      	ldr	r3, [pc, #100]	@ (8003f38 <HAL_ADC_MspInit+0xcc>)
 8003ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f3c <HAL_ADC_MspInit+0xd0>)
 8003ed4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ed6:	4b18      	ldr	r3, [pc, #96]	@ (8003f38 <HAL_ADC_MspInit+0xcc>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003edc:	4b16      	ldr	r3, [pc, #88]	@ (8003f38 <HAL_ADC_MspInit+0xcc>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003ee2:	4b15      	ldr	r3, [pc, #84]	@ (8003f38 <HAL_ADC_MspInit+0xcc>)
 8003ee4:	2280      	movs	r2, #128	@ 0x80
 8003ee6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ee8:	4b13      	ldr	r3, [pc, #76]	@ (8003f38 <HAL_ADC_MspInit+0xcc>)
 8003eea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003eee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ef0:	4b11      	ldr	r3, [pc, #68]	@ (8003f38 <HAL_ADC_MspInit+0xcc>)
 8003ef2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ef6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f38 <HAL_ADC_MspInit+0xcc>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003efe:	4b0e      	ldr	r3, [pc, #56]	@ (8003f38 <HAL_ADC_MspInit+0xcc>)
 8003f00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f04:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003f06:	480c      	ldr	r0, [pc, #48]	@ (8003f38 <HAL_ADC_MspInit+0xcc>)
 8003f08:	f001 fe0e 	bl	8005b28 <HAL_DMA_Init>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8003f12:	f7ff ff73 	bl	8003dfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a07      	ldr	r2, [pc, #28]	@ (8003f38 <HAL_ADC_MspInit+0xcc>)
 8003f1a:	621a      	str	r2, [r3, #32]
 8003f1c:	4a06      	ldr	r2, [pc, #24]	@ (8003f38 <HAL_ADC_MspInit+0xcc>)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003f22:	bf00      	nop
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40012400 	.word	0x40012400
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40010800 	.word	0x40010800
 8003f38:	20002174 	.word	0x20002174
 8003f3c:	40020008 	.word	0x40020008

08003f40 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	@ 0x28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f48:	f107 0318 	add.w	r3, r7, #24
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM3)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a22      	ldr	r2, [pc, #136]	@ (8003fe4 <HAL_TIM_Base_MspInit+0xa4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d114      	bne.n	8003f8a <HAL_TIM_Base_MspInit+0x4a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f60:	4b21      	ldr	r3, [pc, #132]	@ (8003fe8 <HAL_TIM_Base_MspInit+0xa8>)
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	4a20      	ldr	r2, [pc, #128]	@ (8003fe8 <HAL_TIM_Base_MspInit+0xa8>)
 8003f66:	f043 0302 	orr.w	r3, r3, #2
 8003f6a:	61d3      	str	r3, [r2, #28]
 8003f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe8 <HAL_TIM_Base_MspInit+0xa8>)
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	201d      	movs	r0, #29
 8003f7e:	f001 fd9c 	bl	8005aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f82:	201d      	movs	r0, #29
 8003f84:	f001 fdb5 	bl	8005af2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003f88:	e028      	b.n	8003fdc <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM4)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a17      	ldr	r2, [pc, #92]	@ (8003fec <HAL_TIM_Base_MspInit+0xac>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d123      	bne.n	8003fdc <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f94:	4b14      	ldr	r3, [pc, #80]	@ (8003fe8 <HAL_TIM_Base_MspInit+0xa8>)
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	4a13      	ldr	r2, [pc, #76]	@ (8003fe8 <HAL_TIM_Base_MspInit+0xa8>)
 8003f9a:	f043 0304 	orr.w	r3, r3, #4
 8003f9e:	61d3      	str	r3, [r2, #28]
 8003fa0:	4b11      	ldr	r3, [pc, #68]	@ (8003fe8 <HAL_TIM_Base_MspInit+0xa8>)
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fac:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe8 <HAL_TIM_Base_MspInit+0xa8>)
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe8 <HAL_TIM_Base_MspInit+0xa8>)
 8003fb2:	f043 0308 	orr.w	r3, r3, #8
 8003fb6:	6193      	str	r3, [r2, #24]
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <HAL_TIM_Base_MspInit+0xa8>)
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003fc4:	2340      	movs	r3, #64	@ 0x40
 8003fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd0:	f107 0318 	add.w	r3, r7, #24
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4806      	ldr	r0, [pc, #24]	@ (8003ff0 <HAL_TIM_Base_MspInit+0xb0>)
 8003fd8:	f002 f92e 	bl	8006238 <HAL_GPIO_Init>
}
 8003fdc:	bf00      	nop
 8003fde:	3728      	adds	r7, #40	@ 0x28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40000800 	.word	0x40000800
 8003ff0:	40010c00 	.word	0x40010c00

08003ff4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003ffa:	f107 0308 	add.w	r3, r7, #8
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	605a      	str	r2, [r3, #4]
 8004004:	609a      	str	r2, [r3, #8]
 8004006:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8004008:	4b18      	ldr	r3, [pc, #96]	@ (800406c <HAL_FSMC_MspInit+0x78>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d129      	bne.n	8004064 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8004010:	4b16      	ldr	r3, [pc, #88]	@ (800406c <HAL_FSMC_MspInit+0x78>)
 8004012:	2201      	movs	r2, #1
 8004014:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004016:	4b16      	ldr	r3, [pc, #88]	@ (8004070 <HAL_FSMC_MspInit+0x7c>)
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	4a15      	ldr	r2, [pc, #84]	@ (8004070 <HAL_FSMC_MspInit+0x7c>)
 800401c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004020:	6153      	str	r3, [r2, #20]
 8004022:	4b13      	ldr	r3, [pc, #76]	@ (8004070 <HAL_FSMC_MspInit+0x7c>)
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402a:	607b      	str	r3, [r7, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800402e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8004032:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004034:	2302      	movs	r3, #2
 8004036:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004038:	2303      	movs	r3, #3
 800403a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800403c:	f107 0308 	add.w	r3, r7, #8
 8004040:	4619      	mov	r1, r3
 8004042:	480c      	ldr	r0, [pc, #48]	@ (8004074 <HAL_FSMC_MspInit+0x80>)
 8004044:	f002 f8f8 	bl	8006238 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004048:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 800404c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404e:	2302      	movs	r3, #2
 8004050:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004052:	2303      	movs	r3, #3
 8004054:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004056:	f107 0308 	add.w	r3, r7, #8
 800405a:	4619      	mov	r1, r3
 800405c:	4806      	ldr	r0, [pc, #24]	@ (8004078 <HAL_FSMC_MspInit+0x84>)
 800405e:	f002 f8eb 	bl	8006238 <HAL_GPIO_Init>
 8004062:	e000      	b.n	8004066 <HAL_FSMC_MspInit+0x72>
    return;
 8004064:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20006304 	.word	0x20006304
 8004070:	40021000 	.word	0x40021000
 8004074:	40011800 	.word	0x40011800
 8004078:	40011400 	.word	0x40011400

0800407c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004084:	f7ff ffb6 	bl	8003ff4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004088:	bf00      	nop
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004094:	bf00      	nop
 8004096:	e7fd      	b.n	8004094 <NMI_Handler+0x4>

08004098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800409c:	bf00      	nop
 800409e:	e7fd      	b.n	800409c <HardFault_Handler+0x4>

080040a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040a4:	bf00      	nop
 80040a6:	e7fd      	b.n	80040a4 <MemManage_Handler+0x4>

080040a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040ac:	bf00      	nop
 80040ae:	e7fd      	b.n	80040ac <BusFault_Handler+0x4>

080040b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040b4:	bf00      	nop
 80040b6:	e7fd      	b.n	80040b4 <UsageFault_Handler+0x4>

080040b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040e0:	f000 ff06 	bl	8004ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040e4:	bf00      	nop
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET) {
 80040ec:	4b08      	ldr	r3, [pc, #32]	@ (8004110 <EXTI4_IRQHandler+0x28>)
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <EXTI4_IRQHandler+0x1c>
      __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80040f8:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <EXTI4_IRQHandler+0x28>)
 80040fa:	2210      	movs	r2, #16
 80040fc:	615a      	str	r2, [r3, #20]
      ucXPT2046_TouchFlag = 1; // Set touch flag
 80040fe:	4b05      	ldr	r3, [pc, #20]	@ (8004114 <EXTI4_IRQHandler+0x2c>)
 8004100:	2201      	movs	r2, #1
 8004102:	701a      	strb	r2, [r3, #0]
      // Debug: Indicate interrupt triggered
//      LCD_DrawString(20, 290, "EXTI4 Triggered    ");
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004104:	2010      	movs	r0, #16
 8004106:	f002 fa5b 	bl	80065c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  /* USER CODE END EXTI4_IRQn 1 */
}
 800410a:	bf00      	nop
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40010400 	.word	0x40010400
 8004114:	2000630c 	.word	0x2000630c

08004118 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800411c:	4802      	ldr	r0, [pc, #8]	@ (8004128 <DMA1_Channel1_IRQHandler+0x10>)
 800411e:	f001 fe15 	bl	8005d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20002174 	.word	0x20002174

0800412c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004130:	4802      	ldr	r0, [pc, #8]	@ (800413c <TIM3_IRQHandler+0x10>)
 8004132:	f003 f9f7 	bl	8007524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20002200 	.word	0x20002200

08004140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004148:	4a14      	ldr	r2, [pc, #80]	@ (800419c <_sbrk+0x5c>)
 800414a:	4b15      	ldr	r3, [pc, #84]	@ (80041a0 <_sbrk+0x60>)
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004154:	4b13      	ldr	r3, [pc, #76]	@ (80041a4 <_sbrk+0x64>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d102      	bne.n	8004162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800415c:	4b11      	ldr	r3, [pc, #68]	@ (80041a4 <_sbrk+0x64>)
 800415e:	4a12      	ldr	r2, [pc, #72]	@ (80041a8 <_sbrk+0x68>)
 8004160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004162:	4b10      	ldr	r3, [pc, #64]	@ (80041a4 <_sbrk+0x64>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4413      	add	r3, r2
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	429a      	cmp	r2, r3
 800416e:	d207      	bcs.n	8004180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004170:	f005 fd16 	bl	8009ba0 <__errno>
 8004174:	4603      	mov	r3, r0
 8004176:	220c      	movs	r2, #12
 8004178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800417a:	f04f 33ff 	mov.w	r3, #4294967295
 800417e:	e009      	b.n	8004194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004180:	4b08      	ldr	r3, [pc, #32]	@ (80041a4 <_sbrk+0x64>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004186:	4b07      	ldr	r3, [pc, #28]	@ (80041a4 <_sbrk+0x64>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	4a05      	ldr	r2, [pc, #20]	@ (80041a4 <_sbrk+0x64>)
 8004190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004192:	68fb      	ldr	r3, [r7, #12]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20010000 	.word	0x20010000
 80041a0:	00000400 	.word	0x00000400
 80041a4:	20006308 	.word	0x20006308
 80041a8:	20006460 	.word	0x20006460

080041ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <XPT2046_DelayUS>:



	
static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e00a      	b.n	80041dc <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;     
 80041c6:	230c      	movs	r3, #12
 80041c8:	72fb      	strb	r3, [r7, #11]
	      
		while ( uc -- );     
 80041ca:	bf00      	nop
 80041cc:	7afb      	ldrb	r3, [r7, #11]
 80041ce:	1e5a      	subs	r2, r3, #1
 80041d0:	72fa      	strb	r2, [r7, #11]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1fa      	bne.n	80041cc <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3301      	adds	r3, #1
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d3f0      	bcc.n	80041c6 <XPT2046_DelayUS+0xe>

	}
	
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD ( uint8_t ucCmd ) 
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;


	macXPT2046_MOSI_0();
 80041fa:	2200      	movs	r2, #0
 80041fc:	2104      	movs	r1, #4
 80041fe:	481d      	ldr	r0, [pc, #116]	@ (8004274 <XPT2046_WriteCMD+0x84>)
 8004200:	f002 f9c5 	bl	800658e <HAL_GPIO_WritePin>
	
	macXPT2046_CLK_LOW();
 8004204:	2200      	movs	r2, #0
 8004206:	2101      	movs	r1, #1
 8004208:	481a      	ldr	r0, [pc, #104]	@ (8004274 <XPT2046_WriteCMD+0x84>)
 800420a:	f002 f9c0 	bl	800658e <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ ) 
 800420e:	2300      	movs	r3, #0
 8004210:	73fb      	strb	r3, [r7, #15]
 8004212:	e027      	b.n	8004264 <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8004214:	79fa      	ldrb	r2, [r7, #7]
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	f1c3 0307 	rsb	r3, r3, #7
 800421c:	fa42 f303 	asr.w	r3, r2, r3
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <XPT2046_WriteCMD+0x44>
 8004228:	2201      	movs	r2, #1
 800422a:	2104      	movs	r1, #4
 800422c:	4811      	ldr	r0, [pc, #68]	@ (8004274 <XPT2046_WriteCMD+0x84>)
 800422e:	f002 f9ae 	bl	800658e <HAL_GPIO_WritePin>
 8004232:	e004      	b.n	800423e <XPT2046_WriteCMD+0x4e>
 8004234:	2200      	movs	r2, #0
 8004236:	2104      	movs	r1, #4
 8004238:	480e      	ldr	r0, [pc, #56]	@ (8004274 <XPT2046_WriteCMD+0x84>)
 800423a:	f002 f9a8 	bl	800658e <HAL_GPIO_WritePin>
		
	  XPT2046_DelayUS ( 5 );
 800423e:	2005      	movs	r0, #5
 8004240:	f7ff ffba 	bl	80041b8 <XPT2046_DelayUS>
		
		macXPT2046_CLK_HIGH();
 8004244:	2201      	movs	r2, #1
 8004246:	2101      	movs	r1, #1
 8004248:	480a      	ldr	r0, [pc, #40]	@ (8004274 <XPT2046_WriteCMD+0x84>)
 800424a:	f002 f9a0 	bl	800658e <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 800424e:	2005      	movs	r0, #5
 8004250:	f7ff ffb2 	bl	80041b8 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 8004254:	2200      	movs	r2, #0
 8004256:	2101      	movs	r1, #1
 8004258:	4806      	ldr	r0, [pc, #24]	@ (8004274 <XPT2046_WriteCMD+0x84>)
 800425a:	f002 f998 	bl	800658e <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ ) 
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	3301      	adds	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	2b07      	cmp	r3, #7
 8004268:	d9d4      	bls.n	8004214 <XPT2046_WriteCMD+0x24>
	}
	
}
 800426a:	bf00      	nop
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40011800 	.word	0x40011800

08004278 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD ( void ) 
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 800427e:	2300      	movs	r3, #0
 8004280:	80bb      	strh	r3, [r7, #4]
	


	macXPT2046_MOSI_0();
 8004282:	2200      	movs	r2, #0
 8004284:	2104      	movs	r1, #4
 8004286:	4819      	ldr	r0, [pc, #100]	@ (80042ec <XPT2046_ReadCMD+0x74>)
 8004288:	f002 f981 	bl	800658e <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 800428c:	2201      	movs	r2, #1
 800428e:	2101      	movs	r1, #1
 8004290:	4816      	ldr	r0, [pc, #88]	@ (80042ec <XPT2046_ReadCMD+0x74>)
 8004292:	f002 f97c 	bl	800658e <HAL_GPIO_WritePin>

	for ( i=0;i<12;i++ ) 
 8004296:	2300      	movs	r3, #0
 8004298:	71fb      	strb	r3, [r7, #7]
 800429a:	e01e      	b.n	80042da <XPT2046_ReadCMD+0x62>
	{
		macXPT2046_CLK_LOW();    
 800429c:	2200      	movs	r2, #0
 800429e:	2101      	movs	r1, #1
 80042a0:	4812      	ldr	r0, [pc, #72]	@ (80042ec <XPT2046_ReadCMD+0x74>)
 80042a2:	f002 f974 	bl	800658e <HAL_GPIO_WritePin>
	
		usTemp = macXPT2046_MISO();
 80042a6:	2108      	movs	r1, #8
 80042a8:	4810      	ldr	r0, [pc, #64]	@ (80042ec <XPT2046_ReadCMD+0x74>)
 80042aa:	f002 f959 	bl	8006560 <HAL_GPIO_ReadPin>
 80042ae:	4603      	mov	r3, r0
 80042b0:	807b      	strh	r3, [r7, #2]
		
		usBuf |= usTemp << ( 11 - i );
 80042b2:	887a      	ldrh	r2, [r7, #2]
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	f1c3 030b 	rsb	r3, r3, #11
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	b21a      	sxth	r2, r3
 80042c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	b21b      	sxth	r3, r3
 80042c8:	80bb      	strh	r3, [r7, #4]
	
		macXPT2046_CLK_HIGH();
 80042ca:	2201      	movs	r2, #1
 80042cc:	2101      	movs	r1, #1
 80042ce:	4807      	ldr	r0, [pc, #28]	@ (80042ec <XPT2046_ReadCMD+0x74>)
 80042d0:	f002 f95d 	bl	800658e <HAL_GPIO_WritePin>
	for ( i=0;i<12;i++ ) 
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	3301      	adds	r3, #1
 80042d8:	71fb      	strb	r3, [r7, #7]
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	2b0b      	cmp	r3, #11
 80042de:	d9dd      	bls.n	800429c <XPT2046_ReadCMD+0x24>
		
	}
	
	return usBuf;
 80042e0:	88bb      	ldrh	r3, [r7, #4]

}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40011800 	.word	0x40011800

080042f0 <XPT2046_ReadAdc>:


static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff77 	bl	80041f0 <XPT2046_WriteCMD>

  return 	XPT2046_ReadCMD ();
 8004302:	f7ff ffb9 	bl	8004278 <XPT2046_ReadCMD>
 8004306:	4603      	mov	r3, r0
	
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <XPT2046_ReadAdc_XY>:


static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )  
{ 
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp; 

	
	
	sX_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_X );
 800431a:	2090      	movs	r0, #144	@ 0x90
 800431c:	f7ff ffe8 	bl	80042f0 <XPT2046_ReadAdc>
 8004320:	4603      	mov	r3, r0
 8004322:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 ); 
 8004324:	2001      	movs	r0, #1
 8004326:	f7ff ff47 	bl	80041b8 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_Y ); 
 800432a:	20d0      	movs	r0, #208	@ 0xd0
 800432c:	f7ff ffe0 	bl	80042f0 <XPT2046_ReadAdc>
 8004330:	4603      	mov	r3, r0
 8004332:	81bb      	strh	r3, [r7, #12]
	
	
	* sX_Ad = sX_Ad_Temp; 
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	89fa      	ldrh	r2, [r7, #14]
 8004338:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp; 
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	89ba      	ldrh	r2, [r7, #12]
 800433e:	801a      	strh	r2, [r3, #0]
	
	
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b092      	sub	sp, #72	@ 0x48
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8004350:	2300      	movs	r3, #0
 8004352:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	
	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };  
 8004356:	f107 0308 	add.w	r3, r7, #8
 800435a:	2228      	movs	r2, #40	@ 0x28
 800435c:	2100      	movs	r1, #0
 800435e:	4618      	mov	r0, r3
 8004360:	f005 fc16 	bl	8009b90 <memset>
	int32_t lX_Min, lX_Max, lY_Min, lY_Max;


	do					       				
	{		  
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );  
 8004364:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8004368:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 800436c:	4611      	mov	r1, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ffce 	bl	8004310 <XPT2046_ReadAdc_XY>
		
		sBufferArray [ 0 ] [ ucCount ] = sAD_X;  
 8004374:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004378:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	3348      	adds	r3, #72	@ 0x48
 8004380:	443b      	add	r3, r7
 8004382:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 8004386:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800438a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 800438e:	330a      	adds	r3, #10
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	3348      	adds	r3, #72	@ 0x48
 8004394:	443b      	add	r3, r7
 8004396:	f823 2c40 	strh.w	r2, [r3, #-64]
		
		ucCount ++;  
 800439a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800439e:	3301      	adds	r3, #1
 80043a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		
	}	while ( ( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel ) && ( ucCount < 10 ) );
 80043a4:	2110      	movs	r1, #16
 80043a6:	4871      	ldr	r0, [pc, #452]	@ (800456c <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80043a8:	f002 f8da 	bl	8006560 <HAL_GPIO_ReadPin>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <XPT2046_ReadAdc_Smooth_XY+0x72>
 80043b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80043b6:	2b09      	cmp	r3, #9
 80043b8:	d9d4      	bls.n	8004364 <XPT2046_ReadAdc_Smooth_XY+0x1c>
	

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel )
 80043ba:	2110      	movs	r1, #16
 80043bc:	486b      	ldr	r0, [pc, #428]	@ (800456c <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80043be:	f002 f8cf 	bl	8006560 <HAL_GPIO_ReadPin>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;			
 80043c8:	4b69      	ldr	r3, [pc, #420]	@ (8004570 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	701a      	strb	r2, [r3, #0]


	if ( ucCount ==10 )		 					
 80043ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80043d2:	2b0a      	cmp	r3, #10
 80043d4:	f040 80c4 	bne.w	8004560 <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 80043d8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80043dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80043de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 80043e2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80043e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ea:	637b      	str	r3, [r7, #52]	@ 0x34
		
		for ( i = 1; i < 10; i ++ )
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80043f2:	e02b      	b.n	800444c <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray [ 0 ] [ i ] < lX_Min )
 80043f4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	3348      	adds	r3, #72	@ 0x48
 80043fc:	443b      	add	r3, r7
 80043fe:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004402:	461a      	mov	r2, r3
 8004404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004406:	4293      	cmp	r3, r2
 8004408:	dd08      	ble.n	800441c <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 800440a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	3348      	adds	r3, #72	@ 0x48
 8004412:	443b      	add	r3, r7
 8004414:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004418:	643b      	str	r3, [r7, #64]	@ 0x40
 800441a:	e012      	b.n	8004442 <XPT2046_ReadAdc_Smooth_XY+0xfa>
			
			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 800441c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	3348      	adds	r3, #72	@ 0x48
 8004424:	443b      	add	r3, r7
 8004426:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800442a:	461a      	mov	r2, r3
 800442c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800442e:	4293      	cmp	r3, r2
 8004430:	da07      	bge.n	8004442 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 8004432:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	3348      	adds	r3, #72	@ 0x48
 800443a:	443b      	add	r3, r7
 800443c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004440:	63fb      	str	r3, [r7, #60]	@ 0x3c
		for ( i = 1; i < 10; i ++ )
 8004442:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004446:	3301      	adds	r3, #1
 8004448:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800444c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004450:	2b09      	cmp	r3, #9
 8004452:	d9cf      	bls.n	80043f4 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}
		
		for ( i = 1; i < 10; i ++ )
 8004454:	2301      	movs	r3, #1
 8004456:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800445a:	e02f      	b.n	80044bc <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 800445c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004460:	330a      	adds	r3, #10
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	3348      	adds	r3, #72	@ 0x48
 8004466:	443b      	add	r3, r7
 8004468:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800446c:	461a      	mov	r2, r3
 800446e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004470:	4293      	cmp	r3, r2
 8004472:	dd09      	ble.n	8004488 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 8004474:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004478:	330a      	adds	r3, #10
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	3348      	adds	r3, #72	@ 0x48
 800447e:	443b      	add	r3, r7
 8004480:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004484:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004486:	e014      	b.n	80044b2 <XPT2046_ReadAdc_Smooth_XY+0x16a>
			
			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 8004488:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800448c:	330a      	adds	r3, #10
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	3348      	adds	r3, #72	@ 0x48
 8004492:	443b      	add	r3, r7
 8004494:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004498:	461a      	mov	r2, r3
 800449a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800449c:	4293      	cmp	r3, r2
 800449e:	da08      	bge.n	80044b2 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 80044a0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80044a4:	330a      	adds	r3, #10
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	3348      	adds	r3, #72	@ 0x48
 80044aa:	443b      	add	r3, r7
 80044ac:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80044b0:	637b      	str	r3, [r7, #52]	@ 0x34
		for ( i = 1; i < 10; i ++ )
 80044b2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80044b6:	3301      	adds	r3, #1
 80044b8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80044bc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80044c0:	2b09      	cmp	r3, #9
 80044c2:	d9cb      	bls.n	800445c <XPT2046_ReadAdc_Smooth_XY+0x114>

		}
		

		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 80044c4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80044c8:	461a      	mov	r2, r3
 80044ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80044ce:	4413      	add	r3, r2
 80044d0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80044d4:	4413      	add	r3, r2
 80044d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80044da:	4413      	add	r3, r2
 80044dc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80044e0:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 80044e2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 80044e6:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 80044e8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80044ec:	4413      	add	r3, r2
 80044ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044f2:	4413      	add	r3, r2
 80044f4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80044f8:	4413      	add	r3, r2
 80044fa:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80044fe:	441a      	add	r2, r3
 8004500:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004502:	1ad2      	subs	r2, r2, r3
 8004504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 800450a:	b29a      	uxth	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	801a      	strh	r2, [r3, #0]
		
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8004510:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004514:	461a      	mov	r2, r3
 8004516:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800451a:	4413      	add	r3, r2
 800451c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004520:	4413      	add	r3, r2
 8004522:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8004526:	4413      	add	r3, r2
 8004528:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800452c:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 800452e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8004532:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8004534:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8004538:	4413      	add	r3, r2
 800453a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800453e:	4413      	add	r3, r2
 8004540:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8004544:	4413      	add	r3, r2
 8004546:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 800454a:	441a      	add	r2, r3
 800454c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454e:	1ad2      	subs	r2, r2, r3
 8004550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8004556:	b29a      	uxth	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	805a      	strh	r2, [r3, #2]
		
		
		return 1;
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <XPT2046_ReadAdc_Smooth_XY+0x21a>
		

	}   
	
	
	return 0;    
 8004560:	2300      	movs	r3, #0
	
	
}
 8004562:	4618      	mov	r0, r3
 8004564:	3748      	adds	r7, #72	@ 0x48
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40011800 	.word	0x40011800
 8004570:	2000630c 	.word	0x2000630c

08004574 <XPT2046_Calculate_CalibrationFactor>:
#endif



static uint8_t XPT2046_Calculate_CalibrationFactor ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_Coordinate * pScreenSample, strType_XPT2046_Calibration * pCalibrationFactor )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8004580:	2301      	movs	r3, #1
 8004582:	75fb      	strb	r3, [r7, #23]


	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	3308      	adds	r3, #8
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	3204      	adds	r2, #4
 8004596:	8852      	ldrh	r2, [r2, #2]
 8004598:	4611      	mov	r1, r2
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	3208      	adds	r2, #8
 800459e:	8852      	ldrh	r2, [r2, #2]
 80045a0:	1a8a      	subs	r2, r1, r2
 80045a2:	fb03 f202 	mul.w	r2, r3, r2
									                 ( ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	3304      	adds	r3, #4
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	4619      	mov	r1, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	3308      	adds	r3, #8
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	1acb      	subs	r3, r1, r3
 80045b6:	68b9      	ldr	r1, [r7, #8]
 80045b8:	8849      	ldrh	r1, [r1, #2]
 80045ba:	4608      	mov	r0, r1
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	3108      	adds	r1, #8
 80045c0:	8849      	ldrh	r1, [r1, #2]
 80045c2:	1a41      	subs	r1, r0, r1
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fb fff0 	bl	80005b0 <__aeabi_i2d>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	
	
	if (  pCalibrationFactor -> Divider == 0  )
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	f7fc fab4 	bl	8000b54 <__aeabi_dcmpeq>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	75fb      	strb	r3, [r7, #23]
 80045f6:	e145      	b.n	8004884 <XPT2046_Calculate_CalibrationFactor+0x310>

	else
	{

		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3308      	adds	r3, #8
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	3204      	adds	r2, #4
 800460a:	8852      	ldrh	r2, [r2, #2]
 800460c:	4611      	mov	r1, r2
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	3208      	adds	r2, #8
 8004612:	8852      	ldrh	r2, [r2, #2]
 8004614:	1a8a      	subs	r2, r1, r2
 8004616:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) );
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3304      	adds	r3, #4
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	4619      	mov	r1, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3308      	adds	r3, #8
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	1acb      	subs	r3, r1, r3
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	8849      	ldrh	r1, [r1, #2]
 800462e:	4608      	mov	r0, r1
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	3108      	adds	r1, #8
 8004634:	8849      	ldrh	r1, [r1, #2]
 8004636:	1a41      	subs	r1, r0, r1
 8004638:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	4618      	mov	r0, r3
 8004640:	f7fb ffb6 	bl	80005b0 <__aeabi_i2d>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	e9c1 2300 	strd	r2, r3, [r1]
		
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) - 
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	3308      	adds	r3, #8
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	3204      	adds	r2, #4
 8004660:	8812      	ldrh	r2, [r2, #0]
 8004662:	4611      	mov	r1, r2
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	3208      	adds	r2, #8
 8004668:	8812      	ldrh	r2, [r2, #0]
 800466a:	1a8a      	subs	r2, r1, r2
 800466c:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) );
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	4619      	mov	r1, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3308      	adds	r3, #8
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	1acb      	subs	r3, r1, r3
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	3104      	adds	r1, #4
 8004682:	8809      	ldrh	r1, [r1, #0]
 8004684:	4608      	mov	r0, r1
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	3108      	adds	r1, #8
 800468a:	8809      	ldrh	r1, [r1, #0]
 800468c:	1a41      	subs	r1, r0, r1
 800468e:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) - 
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	4618      	mov	r0, r3
 8004696:	f7fb ff8b 	bl	80005b0 <__aeabi_i2d>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	3308      	adds	r3, #8
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3304      	adds	r3, #4
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	fb03 f202 	mul.w	r2, r3, r2
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	3304      	adds	r3, #4
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	4619      	mov	r1, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3308      	adds	r3, #8
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	8852      	ldrh	r2, [r2, #2]
 80046ce:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	4619      	mov	r1, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3308      	adds	r3, #8
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	fb03 f101 	mul.w	r1, r3, r1
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	3308      	adds	r3, #8
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	fb00 f303 	mul.w	r3, r0, r3
 80046f2:	1acb      	subs	r3, r1, r3
 80046f4:	68b9      	ldr	r1, [r7, #8]
 80046f6:	3104      	adds	r1, #4
 80046f8:	8849      	ldrh	r1, [r1, #2]
 80046fa:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 80046fe:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .x - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .x ) * pScreenSample [ 2 ] .y ;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	3304      	adds	r3, #4
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	4619      	mov	r1, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	fb03 f101 	mul.w	r1, r3, r1
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3304      	adds	r3, #4
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	fb00 f303 	mul.w	r3, r0, r3
 8004720:	1acb      	subs	r3, r1, r3
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	3108      	adds	r1, #8
 8004726:	8849      	ldrh	r1, [r1, #2]
 8004728:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 800472c:	4413      	add	r3, r2
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 800472e:	4618      	mov	r0, r3
 8004730:	f7fb ff3e 	bl	80005b0 <__aeabi_i2d>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	e9c1 2304 	strd	r2, r3, [r1, #16]
		
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	885b      	ldrh	r3, [r3, #2]
 8004742:	461a      	mov	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3308      	adds	r3, #8
 8004748:	885b      	ldrh	r3, [r3, #2]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	3204      	adds	r2, #4
 8004750:	8852      	ldrh	r2, [r2, #2]
 8004752:	4611      	mov	r1, r2
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	3208      	adds	r2, #8
 8004758:	8852      	ldrh	r2, [r2, #2]
 800475a:	1a8a      	subs	r2, r1, r2
 800475c:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3304      	adds	r3, #4
 8004764:	885b      	ldrh	r3, [r3, #2]
 8004766:	4619      	mov	r1, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3308      	adds	r3, #8
 800476c:	885b      	ldrh	r3, [r3, #2]
 800476e:	1acb      	subs	r3, r1, r3
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	8849      	ldrh	r1, [r1, #2]
 8004774:	4608      	mov	r0, r1
 8004776:	68b9      	ldr	r1, [r7, #8]
 8004778:	3108      	adds	r1, #8
 800477a:	8849      	ldrh	r1, [r1, #2]
 800477c:	1a41      	subs	r1, r0, r1
 800477e:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	4618      	mov	r0, r3
 8004786:	f7fb ff13 	bl	80005b0 <__aeabi_i2d>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	e9c1 2306 	strd	r2, r3, [r1, #24]
		
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) - 
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	3308      	adds	r3, #8
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	3204      	adds	r2, #4
 80047a6:	8852      	ldrh	r2, [r2, #2]
 80047a8:	4611      	mov	r1, r2
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	3208      	adds	r2, #8
 80047ae:	8852      	ldrh	r2, [r2, #2]
 80047b0:	1a8a      	subs	r2, r1, r2
 80047b2:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) ) ;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	885b      	ldrh	r3, [r3, #2]
 80047ba:	4619      	mov	r1, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3308      	adds	r3, #8
 80047c0:	885b      	ldrh	r3, [r3, #2]
 80047c2:	1acb      	subs	r3, r1, r3
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	3104      	adds	r1, #4
 80047c8:	8809      	ldrh	r1, [r1, #0]
 80047ca:	4608      	mov	r0, r1
 80047cc:	68b9      	ldr	r1, [r7, #8]
 80047ce:	3108      	adds	r1, #8
 80047d0:	8809      	ldrh	r1, [r1, #0]
 80047d2:	1a41      	subs	r1, r0, r1
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) - 
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fb fee8 	bl	80005b0 <__aeabi_i2d>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	e9c1 2308 	strd	r2, r3, [r1, #32]
		

		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	3308      	adds	r3, #8
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3304      	adds	r3, #4
 80047f6:	885b      	ldrh	r3, [r3, #2]
 80047f8:	fb03 f202 	mul.w	r2, r3, r2
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	3304      	adds	r3, #4
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	4619      	mov	r1, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3308      	adds	r3, #8
 8004808:	885b      	ldrh	r3, [r3, #2]
 800480a:	fb01 f303 	mul.w	r3, r1, r3
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	8852      	ldrh	r2, [r2, #2]
 8004814:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	4619      	mov	r1, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3308      	adds	r3, #8
 8004822:	885b      	ldrh	r3, [r3, #2]
 8004824:	fb03 f101 	mul.w	r1, r3, r1
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	3308      	adds	r3, #8
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	885b      	ldrh	r3, [r3, #2]
 8004834:	fb00 f303 	mul.w	r3, r0, r3
 8004838:	1acb      	subs	r3, r1, r3
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	3104      	adds	r1, #4
 800483e:	8849      	ldrh	r1, [r1, #2]
 8004840:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8004844:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .y - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .y ) * pScreenSample [ 2 ] .y;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	3304      	adds	r3, #4
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	4619      	mov	r1, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	885b      	ldrh	r3, [r3, #2]
 8004852:	fb03 f101 	mul.w	r1, r3, r1
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3304      	adds	r3, #4
 8004860:	885b      	ldrh	r3, [r3, #2]
 8004862:	fb00 f303 	mul.w	r3, r0, r3
 8004866:	1acb      	subs	r3, r1, r3
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	3108      	adds	r1, #8
 800486c:	8849      	ldrh	r1, [r1, #2]
 800486e:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 8004872:	4413      	add	r3, r2
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8004874:	4618      	mov	r0, r3
 8004876:	f7fb fe9b 	bl	80005b0 <__aeabi_i2d>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
			
	}
	
	
	return ucRet;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
	
	
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <XPT2046_Touch_Calibrate>:



uint8_t XPT2046_Touch_Calibrate ( void )
{
 8004890:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004894:	b0a0      	sub	sp, #128	@ 0x80
 8004896:	af02      	add	r7, sp, #8
		uint8_t i;
		
		char cStr [ 10 ];
		
    uint16_t usScreenWidth, usScreenHeigth;
		uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 800489e:	2300      	movs	r3, #0
 80048a0:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 80048a4:	2300      	movs	r3, #0
 80048a6:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
 80048aa:	2300      	movs	r3, #0
 80048ac:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		
	  char * pStr = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	66bb      	str	r3, [r7, #104]	@ 0x68
	  
	  strType_XPT2046_Calibration CalibrationFactor;
    		

		#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	    usScreenWidth = LCD_Default_Max_Width;
 80048b4:	23f0      	movs	r3, #240	@ 0xf0
 80048b6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	    usScreenHeigth = LCD_Default_Max_Heigth;
 80048ba:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80048be:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	
	  #endif
		
		

		strCrossCoordinate [ 0 ] .x = usScreenWidth >> 2;
 80048c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80048c6:	089b      	lsrs	r3, r3, #2
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
		strCrossCoordinate [ 0 ] .y = usScreenHeigth >> 2;
 80048ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80048d2:	089b      	lsrs	r3, r3, #2
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		
		strCrossCoordinate [ 1 ] .x = strCrossCoordinate [ 0 ] .x;
 80048da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80048de:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		strCrossCoordinate [ 1 ] .y = ( usScreenHeigth * 3 ) >> 2;
 80048e2:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 80048e6:	4613      	mov	r3, r2
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	4413      	add	r3, r2
 80048ec:	109b      	asrs	r3, r3, #2
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		
		strCrossCoordinate [ 2 ] .x = ( usScreenWidth * 3 ) >> 2;
 80048f4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	109b      	asrs	r3, r3, #2
 8004900:	b29b      	uxth	r3, r3
 8004902:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
		strCrossCoordinate [ 2 ] .y = strCrossCoordinate [ 1 ] .y;
 8004906:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800490a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
		
		strCrossCoordinate [ 3 ] .x = strCrossCoordinate [ 2 ] .x;
 800490e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004912:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		strCrossCoordinate [ 3 ] .y = strCrossCoordinate [ 0 ] .y;		
 8004916:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800491a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	  	
			
		for ( i = 0; i < 4; i ++ )
 800491e:	2300      	movs	r3, #0
 8004920:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004924:	e066      	b.n	80049f4 <XPT2046_Touch_Calibrate+0x164>
		{ 
			LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );       
 8004926:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800492a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800492e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004932:	9100      	str	r1, [sp, #0]
 8004934:	2100      	movs	r1, #0
 8004936:	2000      	movs	r0, #0
 8004938:	f7fc fe99 	bl	800166e <LCD_Clear>
			
			pStr = "Touch Calibrate ......";			
 800493c:	4bc5      	ldr	r3, [pc, #788]	@ (8004c54 <XPT2046_Touch_Calibrate+0x3c4>)
 800493e:	66bb      	str	r3, [r7, #104]	@ 0x68
      LCD_DrawString_Color ( ( usScreenWidth - ( strlen ( pStr ) - 7 ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );			
 8004940:	f8b7 4066 	ldrh.w	r4, [r7, #102]	@ 0x66
 8004944:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8004946:	f7fb fcd9 	bl	80002fc <strlen>
 800494a:	4603      	mov	r3, r0
 800494c:	3b07      	subs	r3, #7
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	1ae3      	subs	r3, r4, r3
 8004952:	085b      	lsrs	r3, r3, #1
 8004954:	b298      	uxth	r0, r3
 8004956:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800495a:	085b      	lsrs	r3, r3, #1
 800495c:	b299      	uxth	r1, r3
 800495e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004968:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800496a:	f7fc ffb7 	bl	80018dc <LCD_DrawString_Color>
		
			sprintf ( cStr, "%d", i + 1 );
 800496e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004978:	49b7      	ldr	r1, [pc, #732]	@ (8004c58 <XPT2046_Touch_Calibrate+0x3c8>)
 800497a:	4618      	mov	r0, r3
 800497c:	f005 f8e6 	bl	8009b4c <siprintf>
			LCD_DrawString_Color ( usScreenWidth >> 1, ( usScreenHeigth >> 1 ) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED );
 8004980:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	b298      	uxth	r0, r3
 8004988:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b10      	subs	r3, #16
 8004992:	b299      	uxth	r1, r3
 8004994:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8004998:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80049a2:	f7fc ff9b 	bl	80018dc <LCD_DrawString_Color>
		
			XPT2046_DelayUS ( 100000 );		                                                   
 80049a6:	48ad      	ldr	r0, [pc, #692]	@ (8004c5c <XPT2046_Touch_Calibrate+0x3cc>)
 80049a8:	f7ff fc06 	bl	80041b8 <XPT2046_DelayUS>
			
			LCD_DrawCross ( strCrossCoordinate [ i ] .x, strCrossCoordinate [ i ] .y );  
 80049ac:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	3378      	adds	r3, #120	@ 0x78
 80049b4:	443b      	add	r3, r7
 80049b6:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80049ba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	3378      	adds	r3, #120	@ 0x78
 80049c2:	443b      	add	r3, r7
 80049c4:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f7fc ff64 	bl	8001898 <LCD_DrawCross>

			while ( ! XPT2046_ReadAdc_Smooth_XY ( & strScreenSample [ i ] ) );         
 80049d0:	bf00      	nop
 80049d2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80049d6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff fcb2 	bl	8004348 <XPT2046_ReadAdc_Smooth_XY>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f3      	beq.n	80049d2 <XPT2046_Touch_Calibrate+0x142>
		for ( i = 0; i < 4; i ++ )
 80049ea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80049ee:	3301      	adds	r3, #1
 80049f0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80049f4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d994      	bls.n	8004926 <XPT2046_Touch_Calibrate+0x96>

		}
		
		
		XPT2046_Calculate_CalibrationFactor ( strCrossCoordinate, strScreenSample, & CalibrationFactor ) ;  	 
 80049fc:	463a      	mov	r2, r7
 80049fe:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8004a02:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fdb4 	bl	8004574 <XPT2046_Calculate_CalibrationFactor>
		
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 8004a0c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	f7fc f89c 	bl	8000b54 <__aeabi_dcmpeq>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f040 8116 	bne.w	8004c50 <XPT2046_Touch_Calibrate+0x3c0>
		
			
		usTest_x = ( ( CalibrationFactor .An * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .Bn * strScreenSample [ 3 ] .y ) + CalibrationFactor .Cn ) / CalibrationFactor .Divider;		
 8004a24:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fb fdbf 	bl	80005b0 <__aeabi_i2d>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	4620      	mov	r0, r4
 8004a38:	4629      	mov	r1, r5
 8004a3a:	f7fb fe23 	bl	8000684 <__aeabi_dmul>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4690      	mov	r8, r2
 8004a44:	4699      	mov	r9, r3
 8004a46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fb fdae 	bl	80005b0 <__aeabi_i2d>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4620      	mov	r0, r4
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	f7fb fe12 	bl	8000684 <__aeabi_dmul>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4640      	mov	r0, r8
 8004a66:	4649      	mov	r1, r9
 8004a68:	f7fb fc56 	bl	8000318 <__adddf3>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a78:	f7fb fc4e 	bl	8000318 <__adddf3>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4610      	mov	r0, r2
 8004a82:	4619      	mov	r1, r3
 8004a84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004a88:	f7fb ff26 	bl	80008d8 <__aeabi_ddiv>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4610      	mov	r0, r2
 8004a92:	4619      	mov	r1, r3
 8004a94:	f7fc f890 	bl	8000bb8 <__aeabi_d2uiz>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
		usTest_y = ( ( CalibrationFactor .Dn * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .En * strScreenSample [ 3 ] .y ) + CalibrationFactor .Fn ) / CalibrationFactor .Divider;   
 8004a9e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8004aa2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fb fd82 	bl	80005b0 <__aeabi_i2d>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	f7fb fde6 	bl	8000684 <__aeabi_dmul>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4690      	mov	r8, r2
 8004abe:	4699      	mov	r9, r3
 8004ac0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004ac4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fb fd71 	bl	80005b0 <__aeabi_i2d>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	f7fb fdd5 	bl	8000684 <__aeabi_dmul>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4640      	mov	r0, r8
 8004ae0:	4649      	mov	r1, r9
 8004ae2:	f7fb fc19 	bl	8000318 <__adddf3>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4610      	mov	r0, r2
 8004aec:	4619      	mov	r1, r3
 8004aee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004af2:	f7fb fc11 	bl	8000318 <__adddf3>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4610      	mov	r0, r2
 8004afc:	4619      	mov	r1, r3
 8004afe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004b02:	f7fb fee9 	bl	80008d8 <__aeabi_ddiv>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f7fc f853 	bl	8000bb8 <__aeabi_d2uiz>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
		
		usGap_x = ( usTest_x > strCrossCoordinate [ 3 ] .x ) ? ( usTest_x - strCrossCoordinate [ 3 ] .x ) : ( strCrossCoordinate [ 3 ] .x - usTest_x );  
 8004b18:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8004b1c:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d906      	bls.n	8004b32 <XPT2046_Touch_Calibrate+0x2a2>
 8004b24:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8004b28:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	e005      	b.n	8004b3e <XPT2046_Touch_Calibrate+0x2ae>
 8004b32:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8004b36:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
		usGap_y = ( usTest_y > strCrossCoordinate [ 3 ] .y ) ? ( usTest_y - strCrossCoordinate [ 3 ] .y ) : ( strCrossCoordinate [ 3 ] .y - usTest_y );  
 8004b42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004b46:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d906      	bls.n	8004b5c <XPT2046_Touch_Calibrate+0x2cc>
 8004b4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004b52:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	e005      	b.n	8004b68 <XPT2046_Touch_Calibrate+0x2d8>
 8004b5c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8004b60:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;       
 8004b6c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8004b70:	2b0a      	cmp	r3, #10
 8004b72:	d87b      	bhi.n	8004c6c <XPT2046_Touch_Calibrate+0x3dc>
 8004b74:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004b78:	2b0a      	cmp	r3, #10
 8004b7a:	d877      	bhi.n	8004c6c <XPT2046_Touch_Calibrate+0x3dc>
		

		strXPT2046_TouchPara .dX_X = ( CalibrationFactor .An * 1.0 ) / CalibrationFactor .Divider;
 8004b7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004b84:	f7fb fea8 	bl	80008d8 <__aeabi_ddiv>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4934      	ldr	r1, [pc, #208]	@ (8004c60 <XPT2046_Touch_Calibrate+0x3d0>)
 8004b8e:	e9c1 2300 	strd	r2, r3, [r1]
		strXPT2046_TouchPara .dX_Y = ( CalibrationFactor .Bn * 1.0 ) / CalibrationFactor .Divider;
 8004b92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004b9a:	f7fb fe9d 	bl	80008d8 <__aeabi_ddiv>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	492f      	ldr	r1, [pc, #188]	@ (8004c60 <XPT2046_Touch_Calibrate+0x3d0>)
 8004ba4:	e9c1 2302 	strd	r2, r3, [r1, #8]
		strXPT2046_TouchPara .dX   = ( CalibrationFactor .Cn * 1.0 ) / CalibrationFactor .Divider;
 8004ba8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004bac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004bb0:	f7fb fe92 	bl	80008d8 <__aeabi_ddiv>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4929      	ldr	r1, [pc, #164]	@ (8004c60 <XPT2046_Touch_Calibrate+0x3d0>)
 8004bba:	e9c1 2304 	strd	r2, r3, [r1, #16]
		
		strXPT2046_TouchPara .dY_X = ( CalibrationFactor .Dn * 1.0 ) / CalibrationFactor .Divider;
 8004bbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004bc2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004bc6:	f7fb fe87 	bl	80008d8 <__aeabi_ddiv>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4924      	ldr	r1, [pc, #144]	@ (8004c60 <XPT2046_Touch_Calibrate+0x3d0>)
 8004bd0:	e9c1 2306 	strd	r2, r3, [r1, #24]
		strXPT2046_TouchPara .dY_Y = ( CalibrationFactor .En * 1.0 ) / CalibrationFactor .Divider;
 8004bd4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004bd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004bdc:	f7fb fe7c 	bl	80008d8 <__aeabi_ddiv>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	491e      	ldr	r1, [pc, #120]	@ (8004c60 <XPT2046_Touch_Calibrate+0x3d0>)
 8004be6:	e9c1 2308 	strd	r2, r3, [r1, #32]
		strXPT2046_TouchPara .dY   = ( CalibrationFactor .Fn * 1.0 ) / CalibrationFactor .Divider;
 8004bea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004bee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004bf2:	f7fb fe71 	bl	80008d8 <__aeabi_ddiv>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4919      	ldr	r1, [pc, #100]	@ (8004c60 <XPT2046_Touch_Calibrate+0x3d0>)
 8004bfc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	

	#endif
	
	
	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 8004c00:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004c04:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8004c08:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004c0c:	9100      	str	r1, [sp, #0]
 8004c0e:	2100      	movs	r1, #0
 8004c10:	2000      	movs	r0, #0
 8004c12:	f7fc fd2c 	bl	800166e <LCD_Clear>
	
	pStr = "Calibrate Succed";			
 8004c16:	4b13      	ldr	r3, [pc, #76]	@ (8004c64 <XPT2046_Touch_Calibrate+0x3d4>)
 8004c18:	66bb      	str	r3, [r7, #104]	@ 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );	
 8004c1a:	f8b7 4066 	ldrh.w	r4, [r7, #102]	@ 0x66
 8004c1e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8004c20:	f7fb fb6c 	bl	80002fc <strlen>
 8004c24:	4603      	mov	r3, r0
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	1ae3      	subs	r3, r4, r3
 8004c2a:	085b      	lsrs	r3, r3, #1
 8004c2c:	b298      	uxth	r0, r3
 8004c2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004c32:	085b      	lsrs	r3, r3, #1
 8004c34:	b299      	uxth	r1, r3
 8004c36:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c40:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004c42:	f7fc fe4b 	bl	80018dc <LCD_DrawString_Color>

  XPT2046_DelayUS ( 200000 );
 8004c46:	4808      	ldr	r0, [pc, #32]	@ (8004c68 <XPT2046_Touch_Calibrate+0x3d8>)
 8004c48:	f7ff fab6 	bl	80041b8 <XPT2046_DelayUS>

	return 1;    
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e04f      	b.n	8004cf0 <XPT2046_Touch_Calibrate+0x460>
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 8004c50:	bf00      	nop
 8004c52:	e00c      	b.n	8004c6e <XPT2046_Touch_Calibrate+0x3de>
 8004c54:	0800a704 	.word	0x0800a704
 8004c58:	0800a71c 	.word	0x0800a71c
 8004c5c:	000186a0 	.word	0x000186a0
 8004c60:	200020a0 	.word	0x200020a0
 8004c64:	0800a720 	.word	0x0800a720
 8004c68:	00030d40 	.word	0x00030d40
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;       
 8004c6c:	bf00      	nop
	

	Failure:
	
	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND ); 
 8004c6e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004c72:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8004c76:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004c7a:	9100      	str	r1, [sp, #0]
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	2000      	movs	r0, #0
 8004c80:	f7fc fcf5 	bl	800166e <LCD_Clear>
	
	pStr = "Calibrate fail";			
 8004c84:	4b1d      	ldr	r3, [pc, #116]	@ (8004cfc <XPT2046_Touch_Calibrate+0x46c>)
 8004c86:	66bb      	str	r3, [r7, #104]	@ 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );	
 8004c88:	f8b7 4066 	ldrh.w	r4, [r7, #102]	@ 0x66
 8004c8c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8004c8e:	f7fb fb35 	bl	80002fc <strlen>
 8004c92:	4603      	mov	r3, r0
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	1ae3      	subs	r3, r4, r3
 8004c98:	085b      	lsrs	r3, r3, #1
 8004c9a:	b298      	uxth	r0, r3
 8004c9c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004ca0:	085b      	lsrs	r3, r3, #1
 8004ca2:	b299      	uxth	r1, r3
 8004ca4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004cae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004cb0:	f7fc fe14 	bl	80018dc <LCD_DrawString_Color>

	pStr = "try again";			
 8004cb4:	4b12      	ldr	r3, [pc, #72]	@ (8004d00 <XPT2046_Touch_Calibrate+0x470>)
 8004cb6:	66bb      	str	r3, [r7, #104]	@ 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, ( usScreenHeigth >> 1 ) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED );				
 8004cb8:	f8b7 4066 	ldrh.w	r4, [r7, #102]	@ 0x66
 8004cbc:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8004cbe:	f7fb fb1d 	bl	80002fc <strlen>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	1ae3      	subs	r3, r4, r3
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	b298      	uxth	r0, r3
 8004ccc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004cd0:	085b      	lsrs	r3, r3, #1
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3310      	adds	r3, #16
 8004cd6:	b299      	uxth	r1, r3
 8004cd8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ce2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004ce4:	f7fc fdfa 	bl	80018dc <LCD_DrawString_Color>

	XPT2046_DelayUS ( 1000000 );		
 8004ce8:	4806      	ldr	r0, [pc, #24]	@ (8004d04 <XPT2046_Touch_Calibrate+0x474>)
 8004cea:	f7ff fa65 	bl	80041b8 <XPT2046_DelayUS>
	
	return 0; 
 8004cee:	2300      	movs	r3, #0
		
		
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3778      	adds	r7, #120	@ 0x78
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004cfa:	bf00      	nop
 8004cfc:	0800a734 	.word	0x0800a734
 8004d00:	0800a744 	.word	0x0800a744
 8004d04:	000f4240 	.word	0x000f4240

08004d08 <XPT2046_Get_TouchedPoint>:

   

uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 8004d08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;           
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
	
	strType_XPT2046_Coordinate strScreenCoordinate; 
	

  if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 8004d18:	f107 0308 	add.w	r3, r7, #8
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff fb13 	bl	8004348 <XPT2046_ReadAdc_Smooth_XY>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d06e      	beq.n	8004e06 <XPT2046_Get_TouchedPoint+0xfe>
  {    
		pDisplayCoordinate ->x = ( ( pTouchPara ->dX_X * strScreenCoordinate .x ) + ( pTouchPara ->dX_Y * strScreenCoordinate .y ) + pTouchPara ->dX );        
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004d2e:	893b      	ldrh	r3, [r7, #8]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fb fc3d 	bl	80005b0 <__aeabi_i2d>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	f7fb fca1 	bl	8000684 <__aeabi_dmul>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4690      	mov	r8, r2
 8004d48:	4699      	mov	r9, r3
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004d50:	897b      	ldrh	r3, [r7, #10]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fb fc2c 	bl	80005b0 <__aeabi_i2d>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	4629      	mov	r1, r5
 8004d60:	f7fb fc90 	bl	8000684 <__aeabi_dmul>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4640      	mov	r0, r8
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	f7fb fad4 	bl	8000318 <__adddf3>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4610      	mov	r0, r2
 8004d76:	4619      	mov	r1, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004d7e:	f7fb facb 	bl	8000318 <__adddf3>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4610      	mov	r0, r2
 8004d88:	4619      	mov	r1, r3
 8004d8a:	f7fb ff15 	bl	8000bb8 <__aeabi_d2uiz>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara ->dY_X * strScreenCoordinate .x ) + ( pTouchPara ->dY_Y * strScreenCoordinate .y ) + pTouchPara ->dY );
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004d9c:	893b      	ldrh	r3, [r7, #8]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fb fc06 	bl	80005b0 <__aeabi_i2d>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4620      	mov	r0, r4
 8004daa:	4629      	mov	r1, r5
 8004dac:	f7fb fc6a 	bl	8000684 <__aeabi_dmul>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4690      	mov	r8, r2
 8004db6:	4699      	mov	r9, r3
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8004dbe:	897b      	ldrh	r3, [r7, #10]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fb fbf5 	bl	80005b0 <__aeabi_i2d>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4620      	mov	r0, r4
 8004dcc:	4629      	mov	r1, r5
 8004dce:	f7fb fc59 	bl	8000684 <__aeabi_dmul>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	4649      	mov	r1, r9
 8004dda:	f7fb fa9d 	bl	8000318 <__adddf3>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4610      	mov	r0, r2
 8004de4:	4619      	mov	r1, r3
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004dec:	f7fb fa94 	bl	8000318 <__adddf3>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4610      	mov	r0, r2
 8004df6:	4619      	mov	r1, r3
 8004df8:	f7fb fede 	bl	8000bb8 <__aeabi_d2uiz>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	805a      	strh	r2, [r3, #2]
 8004e04:	e001      	b.n	8004e0a <XPT2046_Get_TouchedPoint+0x102>

  }
	 
	else ucRet = 0;            
 8004e06:	2300      	movs	r3, #0
 8004e08:	73fb      	strb	r3, [r7, #15]
	
	return ucRet;
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
	
	
} 
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08004e18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004e18:	f7ff f9c8 	bl	80041ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e1c:	480b      	ldr	r0, [pc, #44]	@ (8004e4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004e1e:	490c      	ldr	r1, [pc, #48]	@ (8004e50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004e20:	4a0c      	ldr	r2, [pc, #48]	@ (8004e54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e24:	e002      	b.n	8004e2c <LoopCopyDataInit>

08004e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e2a:	3304      	adds	r3, #4

08004e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e30:	d3f9      	bcc.n	8004e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e32:	4a09      	ldr	r2, [pc, #36]	@ (8004e58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004e34:	4c09      	ldr	r4, [pc, #36]	@ (8004e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e38:	e001      	b.n	8004e3e <LoopFillZerobss>

08004e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e3c:	3204      	adds	r2, #4

08004e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e40:	d3fb      	bcc.n	8004e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e42:	f004 feb3 	bl	8009bac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004e46:	f7fe f90d 	bl	8003064 <main>
  bx lr
 8004e4a:	4770      	bx	lr
  ldr r0, =_sdata
 8004e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e50:	20002128 	.word	0x20002128
  ldr r2, =_sidata
 8004e54:	0801ea58 	.word	0x0801ea58
  ldr r2, =_sbss
 8004e58:	20002128 	.word	0x20002128
  ldr r4, =_ebss
 8004e5c:	2000645c 	.word	0x2000645c

08004e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e60:	e7fe      	b.n	8004e60 <ADC1_2_IRQHandler>
	...

08004e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e68:	4b08      	ldr	r3, [pc, #32]	@ (8004e8c <HAL_Init+0x28>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a07      	ldr	r2, [pc, #28]	@ (8004e8c <HAL_Init+0x28>)
 8004e6e:	f043 0310 	orr.w	r3, r3, #16
 8004e72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e74:	2003      	movs	r0, #3
 8004e76:	f000 fe15 	bl	8005aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e7a:	200f      	movs	r0, #15
 8004e7c:	f000 f808 	bl	8004e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e80:	f7fe ffc2 	bl	8003e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40022000 	.word	0x40022000

08004e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e98:	4b12      	ldr	r3, [pc, #72]	@ (8004ee4 <HAL_InitTick+0x54>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	4b12      	ldr	r3, [pc, #72]	@ (8004ee8 <HAL_InitTick+0x58>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fe2d 	bl	8005b0e <HAL_SYSTICK_Config>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e00e      	b.n	8004edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b0f      	cmp	r3, #15
 8004ec2:	d80a      	bhi.n	8004eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ecc:	f000 fdf5 	bl	8005aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ed0:	4a06      	ldr	r2, [pc, #24]	@ (8004eec <HAL_InitTick+0x5c>)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e000      	b.n	8004edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	2000209c 	.word	0x2000209c
 8004ee8:	200020d4 	.word	0x200020d4
 8004eec:	200020d0 	.word	0x200020d0

08004ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ef4:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <HAL_IncTick+0x1c>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <HAL_IncTick+0x20>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4413      	add	r3, r2
 8004f00:	4a03      	ldr	r2, [pc, #12]	@ (8004f10 <HAL_IncTick+0x20>)
 8004f02:	6013      	str	r3, [r2, #0]
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr
 8004f0c:	200020d4 	.word	0x200020d4
 8004f10:	20006310 	.word	0x20006310

08004f14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  return uwTick;
 8004f18:	4b02      	ldr	r3, [pc, #8]	@ (8004f24 <HAL_GetTick+0x10>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr
 8004f24:	20006310 	.word	0x20006310

08004f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f30:	f7ff fff0 	bl	8004f14 <HAL_GetTick>
 8004f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f40:	d005      	beq.n	8004f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f42:	4b0a      	ldr	r3, [pc, #40]	@ (8004f6c <HAL_Delay+0x44>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f4e:	bf00      	nop
 8004f50:	f7ff ffe0 	bl	8004f14 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d8f7      	bhi.n	8004f50 <HAL_Delay+0x28>
  {
  }
}
 8004f60:	bf00      	nop
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	200020d4 	.word	0x200020d4

08004f70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e0ce      	b.n	8005130 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d109      	bne.n	8004fb4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fe ff5c 	bl	8003e6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fb53 	bl	8005660 <ADC_ConversionStop_Disable>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f040 80a9 	bne.w	800511e <HAL_ADC_Init+0x1ae>
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f040 80a5 	bne.w	800511e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004fdc:	f023 0302 	bic.w	r3, r3, #2
 8004fe0:	f043 0202 	orr.w	r2, r3, #2
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4951      	ldr	r1, [pc, #324]	@ (8005138 <HAL_ADC_Init+0x1c8>)
 8004ff2:	428b      	cmp	r3, r1
 8004ff4:	d10a      	bne.n	800500c <HAL_ADC_Init+0x9c>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ffe:	d002      	beq.n	8005006 <HAL_ADC_Init+0x96>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	e004      	b.n	8005010 <HAL_ADC_Init+0xa0>
 8005006:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800500a:	e001      	b.n	8005010 <HAL_ADC_Init+0xa0>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005010:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	7b1b      	ldrb	r3, [r3, #12]
 8005016:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005018:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	4313      	orrs	r3, r2
 800501e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005028:	d003      	beq.n	8005032 <HAL_ADC_Init+0xc2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d102      	bne.n	8005038 <HAL_ADC_Init+0xc8>
 8005032:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005036:	e000      	b.n	800503a <HAL_ADC_Init+0xca>
 8005038:	2300      	movs	r3, #0
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	7d1b      	ldrb	r3, [r3, #20]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d119      	bne.n	800507c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	7b1b      	ldrb	r3, [r3, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d109      	bne.n	8005064 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	3b01      	subs	r3, #1
 8005056:	035a      	lsls	r2, r3, #13
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	e00b      	b.n	800507c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005068:	f043 0220 	orr.w	r2, r3, #32
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005074:	f043 0201 	orr.w	r2, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	4b29      	ldr	r3, [pc, #164]	@ (800513c <HAL_ADC_Init+0x1cc>)
 8005098:	4013      	ands	r3, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6812      	ldr	r2, [r2, #0]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	430b      	orrs	r3, r1
 80050a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050ac:	d003      	beq.n	80050b6 <HAL_ADC_Init+0x146>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d104      	bne.n	80050c0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	051b      	lsls	r3, r3, #20
 80050be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	4b19      	ldr	r3, [pc, #100]	@ (8005140 <HAL_ADC_Init+0x1d0>)
 80050dc:	4013      	ands	r3, r2
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d10b      	bne.n	80050fc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	f043 0201 	orr.w	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80050fa:	e018      	b.n	800512e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005100:	f023 0312 	bic.w	r3, r3, #18
 8005104:	f043 0210 	orr.w	r2, r3, #16
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005110:	f043 0201 	orr.w	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800511c:	e007      	b.n	800512e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005122:	f043 0210 	orr.w	r2, r3, #16
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800512e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	40013c00 	.word	0x40013c00
 800513c:	ffe1f7fd 	.word	0xffe1f7fd
 8005140:	ff1f0efe 	.word	0xff1f0efe

08005144 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a64      	ldr	r2, [pc, #400]	@ (80052ec <HAL_ADC_Start_DMA+0x1a8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d004      	beq.n	8005168 <HAL_ADC_Start_DMA+0x24>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a63      	ldr	r2, [pc, #396]	@ (80052f0 <HAL_ADC_Start_DMA+0x1ac>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d106      	bne.n	8005176 <HAL_ADC_Start_DMA+0x32>
 8005168:	4b60      	ldr	r3, [pc, #384]	@ (80052ec <HAL_ADC_Start_DMA+0x1a8>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8005170:	2b00      	cmp	r3, #0
 8005172:	f040 80b3 	bne.w	80052dc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_ADC_Start_DMA+0x40>
 8005180:	2302      	movs	r3, #2
 8005182:	e0ae      	b.n	80052e2 <HAL_ADC_Start_DMA+0x19e>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fa0d 	bl	80055ac <ADC_Enable>
 8005192:	4603      	mov	r3, r0
 8005194:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005196:	7dfb      	ldrb	r3, [r7, #23]
 8005198:	2b00      	cmp	r3, #0
 800519a:	f040 809a 	bne.w	80052d2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80051a6:	f023 0301 	bic.w	r3, r3, #1
 80051aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a4e      	ldr	r2, [pc, #312]	@ (80052f0 <HAL_ADC_Start_DMA+0x1ac>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d105      	bne.n	80051c8 <HAL_ADC_Start_DMA+0x84>
 80051bc:	4b4b      	ldr	r3, [pc, #300]	@ (80052ec <HAL_ADC_Start_DMA+0x1a8>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d115      	bne.n	80051f4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d026      	beq.n	8005230 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80051ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80051f2:	e01d      	b.n	8005230 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a39      	ldr	r2, [pc, #228]	@ (80052ec <HAL_ADC_Start_DMA+0x1a8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d004      	beq.n	8005214 <HAL_ADC_Start_DMA+0xd0>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a38      	ldr	r2, [pc, #224]	@ (80052f0 <HAL_ADC_Start_DMA+0x1ac>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d10d      	bne.n	8005230 <HAL_ADC_Start_DMA+0xec>
 8005214:	4b35      	ldr	r3, [pc, #212]	@ (80052ec <HAL_ADC_Start_DMA+0x1a8>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005224:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005228:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d006      	beq.n	800524a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005240:	f023 0206 	bic.w	r2, r3, #6
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005248:	e002      	b.n	8005250 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	4a25      	ldr	r2, [pc, #148]	@ (80052f4 <HAL_ADC_Start_DMA+0x1b0>)
 800525e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	4a24      	ldr	r2, [pc, #144]	@ (80052f8 <HAL_ADC_Start_DMA+0x1b4>)
 8005266:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	4a23      	ldr	r2, [pc, #140]	@ (80052fc <HAL_ADC_Start_DMA+0x1b8>)
 800526e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0202 	mvn.w	r2, #2
 8005278:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005288:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a18      	ldr	r0, [r3, #32]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	334c      	adds	r3, #76	@ 0x4c
 8005294:	4619      	mov	r1, r3
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f000 fcbb 	bl	8005c14 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80052a8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80052ac:	d108      	bne.n	80052c0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80052bc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80052be:	e00f      	b.n	80052e0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80052ce:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80052d0:	e006      	b.n	80052e0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80052da:	e001      	b.n	80052e0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40012400 	.word	0x40012400
 80052f0:	40012800 	.word	0x40012800
 80052f4:	080056e3 	.word	0x080056e3
 80052f8:	0800575f 	.word	0x0800575f
 80052fc:	0800577b 	.word	0x0800577b

08005300 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_ADC_Stop_DMA+0x1a>
 8005316:	2302      	movs	r3, #2
 8005318:	e03a      	b.n	8005390 <HAL_ADC_Stop_DMA+0x90>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f99c 	bl	8005660 <ADC_ConversionStop_Disable>
 8005328:	4603      	mov	r3, r0
 800532a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d129      	bne.n	8005386 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005340:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d11a      	bne.n	8005386 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fcbd 	bl	8005cd4 <HAL_DMA_Abort>
 800535a:	4603      	mov	r3, r0
 800535c:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10a      	bne.n	800537a <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800536c:	f023 0301 	bic.w	r3, r3, #1
 8005370:	f043 0201 	orr.w	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	629a      	str	r2, [r3, #40]	@ 0x28
 8005378:	e005      	b.n	8005386 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 800538e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr

080053aa <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_ADC_ConfigChannel+0x20>
 80053d8:	2302      	movs	r3, #2
 80053da:	e0dc      	b.n	8005596 <HAL_ADC_ConfigChannel+0x1da>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b06      	cmp	r3, #6
 80053ea:	d81c      	bhi.n	8005426 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	3b05      	subs	r3, #5
 80053fe:	221f      	movs	r2, #31
 8005400:	fa02 f303 	lsl.w	r3, r2, r3
 8005404:	43db      	mvns	r3, r3
 8005406:	4019      	ands	r1, r3
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	3b05      	subs	r3, #5
 8005418:	fa00 f203 	lsl.w	r2, r0, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	635a      	str	r2, [r3, #52]	@ 0x34
 8005424:	e03c      	b.n	80054a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b0c      	cmp	r3, #12
 800542c:	d81c      	bhi.n	8005468 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	3b23      	subs	r3, #35	@ 0x23
 8005440:	221f      	movs	r2, #31
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	43db      	mvns	r3, r3
 8005448:	4019      	ands	r1, r3
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6818      	ldr	r0, [r3, #0]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	3b23      	subs	r3, #35	@ 0x23
 800545a:	fa00 f203 	lsl.w	r2, r0, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	631a      	str	r2, [r3, #48]	@ 0x30
 8005466:	e01b      	b.n	80054a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	3b41      	subs	r3, #65	@ 0x41
 800547a:	221f      	movs	r2, #31
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	43db      	mvns	r3, r3
 8005482:	4019      	ands	r1, r3
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	3b41      	subs	r3, #65	@ 0x41
 8005494:	fa00 f203 	lsl.w	r2, r0, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b09      	cmp	r3, #9
 80054a6:	d91c      	bls.n	80054e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68d9      	ldr	r1, [r3, #12]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4613      	mov	r3, r2
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	4413      	add	r3, r2
 80054b8:	3b1e      	subs	r3, #30
 80054ba:	2207      	movs	r2, #7
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	43db      	mvns	r3, r3
 80054c2:	4019      	ands	r1, r3
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	6898      	ldr	r0, [r3, #8]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	4613      	mov	r3, r2
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	4413      	add	r3, r2
 80054d2:	3b1e      	subs	r3, #30
 80054d4:	fa00 f203 	lsl.w	r2, r0, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	60da      	str	r2, [r3, #12]
 80054e0:	e019      	b.n	8005516 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6919      	ldr	r1, [r3, #16]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4613      	mov	r3, r2
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	4413      	add	r3, r2
 80054f2:	2207      	movs	r2, #7
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	43db      	mvns	r3, r3
 80054fa:	4019      	ands	r1, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	6898      	ldr	r0, [r3, #8]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	4613      	mov	r3, r2
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	4413      	add	r3, r2
 800550a:	fa00 f203 	lsl.w	r2, r0, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b10      	cmp	r3, #16
 800551c:	d003      	beq.n	8005526 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005522:	2b11      	cmp	r3, #17
 8005524:	d132      	bne.n	800558c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a1d      	ldr	r2, [pc, #116]	@ (80055a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d125      	bne.n	800557c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d126      	bne.n	800558c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800554c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b10      	cmp	r3, #16
 8005554:	d11a      	bne.n	800558c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005556:	4b13      	ldr	r3, [pc, #76]	@ (80055a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a13      	ldr	r2, [pc, #76]	@ (80055a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800555c:	fba2 2303 	umull	r2, r3, r2, r3
 8005560:	0c9a      	lsrs	r2, r3, #18
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800556c:	e002      	b.n	8005574 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	3b01      	subs	r3, #1
 8005572:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f9      	bne.n	800556e <HAL_ADC_ConfigChannel+0x1b2>
 800557a:	e007      	b.n	800558c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005580:	f043 0220 	orr.w	r2, r3, #32
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005594:	7bfb      	ldrb	r3, [r7, #15]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	bc80      	pop	{r7}
 800559e:	4770      	bx	lr
 80055a0:	40012400 	.word	0x40012400
 80055a4:	2000209c 	.word	0x2000209c
 80055a8:	431bde83 	.word	0x431bde83

080055ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d040      	beq.n	800564c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0201 	orr.w	r2, r2, #1
 80055d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80055da:	4b1f      	ldr	r3, [pc, #124]	@ (8005658 <ADC_Enable+0xac>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a1f      	ldr	r2, [pc, #124]	@ (800565c <ADC_Enable+0xb0>)
 80055e0:	fba2 2303 	umull	r2, r3, r2, r3
 80055e4:	0c9b      	lsrs	r3, r3, #18
 80055e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80055e8:	e002      	b.n	80055f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f9      	bne.n	80055ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80055f6:	f7ff fc8d 	bl	8004f14 <HAL_GetTick>
 80055fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80055fc:	e01f      	b.n	800563e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80055fe:	f7ff fc89 	bl	8004f14 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d918      	bls.n	800563e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b01      	cmp	r3, #1
 8005618:	d011      	beq.n	800563e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561e:	f043 0210 	orr.w	r2, r3, #16
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562a:	f043 0201 	orr.w	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e007      	b.n	800564e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b01      	cmp	r3, #1
 800564a:	d1d8      	bne.n	80055fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	2000209c 	.word	0x2000209c
 800565c:	431bde83 	.word	0x431bde83

08005660 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b01      	cmp	r3, #1
 8005678:	d12e      	bne.n	80056d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0201 	bic.w	r2, r2, #1
 8005688:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800568a:	f7ff fc43 	bl	8004f14 <HAL_GetTick>
 800568e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005690:	e01b      	b.n	80056ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005692:	f7ff fc3f 	bl	8004f14 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d914      	bls.n	80056ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d10d      	bne.n	80056ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b2:	f043 0210 	orr.w	r2, r3, #16
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056be:	f043 0201 	orr.w	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e007      	b.n	80056da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d0dc      	beq.n	8005692 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ee:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d127      	bne.n	800574c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005700:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005712:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005716:	d115      	bne.n	8005744 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800571c:	2b00      	cmp	r3, #0
 800571e:	d111      	bne.n	8005744 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005724:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005730:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d105      	bne.n	8005744 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573c:	f043 0201 	orr.w	r2, r3, #1
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f7fe fb0b 	bl	8003d60 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800574a:	e004      	b.n	8005756 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4798      	blx	r3
}
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f7ff fe13 	bl	8005398 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005772:	bf00      	nop
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005786:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	f043 0204 	orr.w	r2, r3, #4
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff fe02 	bl	80053aa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057a6:	bf00      	nop
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80057b0:	b590      	push	{r4, r7, lr}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_ADCEx_Calibration_Start+0x1e>
 80057ca:	2302      	movs	r3, #2
 80057cc:	e097      	b.n	80058fe <HAL_ADCEx_Calibration_Start+0x14e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7ff ff42 	bl	8005660 <ADC_ConversionStop_Disable>
 80057dc:	4603      	mov	r3, r0
 80057de:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff fee3 	bl	80055ac <ADC_Enable>
 80057e6:	4603      	mov	r3, r0
 80057e8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f040 8081 	bne.w	80058f4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80057fa:	f023 0302 	bic.w	r3, r3, #2
 80057fe:	f043 0202 	orr.w	r2, r3, #2
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005806:	4b40      	ldr	r3, [pc, #256]	@ (8005908 <HAL_ADCEx_Calibration_Start+0x158>)
 8005808:	681c      	ldr	r4, [r3, #0]
 800580a:	2002      	movs	r0, #2
 800580c:	f001 fbac 	bl	8006f68 <HAL_RCCEx_GetPeriphCLKFreq>
 8005810:	4603      	mov	r3, r0
 8005812:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8005816:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8005818:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800581a:	e002      	b.n	8005822 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3b01      	subs	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1f9      	bne.n	800581c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0208 	orr.w	r2, r2, #8
 8005836:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8005838:	f7ff fb6c 	bl	8004f14 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800583e:	e01b      	b.n	8005878 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005840:	f7ff fb68 	bl	8004f14 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b0a      	cmp	r3, #10
 800584c:	d914      	bls.n	8005878 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00d      	beq.n	8005878 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005860:	f023 0312 	bic.w	r3, r3, #18
 8005864:	f043 0210 	orr.w	r2, r3, #16
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e042      	b.n	80058fe <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1dc      	bne.n	8005840 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0204 	orr.w	r2, r2, #4
 8005894:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8005896:	f7ff fb3d 	bl	8004f14 <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800589c:	e01b      	b.n	80058d6 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800589e:	f7ff fb39 	bl	8004f14 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b0a      	cmp	r3, #10
 80058aa:	d914      	bls.n	80058d6 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00d      	beq.n	80058d6 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058be:	f023 0312 	bic.w	r3, r3, #18
 80058c2:	f043 0210 	orr.w	r2, r3, #16
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e013      	b.n	80058fe <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1dc      	bne.n	800589e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e8:	f023 0303 	bic.w	r3, r3, #3
 80058ec:	f043 0201 	orr.w	r2, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	bd90      	pop	{r4, r7, pc}
 8005906:	bf00      	nop
 8005908:	2000209c 	.word	0x2000209c

0800590c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800591c:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <__NVIC_SetPriorityGrouping+0x44>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005928:	4013      	ands	r3, r2
 800592a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005934:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800593c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800593e:	4a04      	ldr	r2, [pc, #16]	@ (8005950 <__NVIC_SetPriorityGrouping+0x44>)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	60d3      	str	r3, [r2, #12]
}
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	e000ed00 	.word	0xe000ed00

08005954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005958:	4b04      	ldr	r3, [pc, #16]	@ (800596c <__NVIC_GetPriorityGrouping+0x18>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	0a1b      	lsrs	r3, r3, #8
 800595e:	f003 0307 	and.w	r3, r3, #7
}
 8005962:	4618      	mov	r0, r3
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	e000ed00 	.word	0xe000ed00

08005970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	4603      	mov	r3, r0
 8005978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800597a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800597e:	2b00      	cmp	r3, #0
 8005980:	db0b      	blt.n	800599a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	f003 021f 	and.w	r2, r3, #31
 8005988:	4906      	ldr	r1, [pc, #24]	@ (80059a4 <__NVIC_EnableIRQ+0x34>)
 800598a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	2001      	movs	r0, #1
 8005992:	fa00 f202 	lsl.w	r2, r0, r2
 8005996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr
 80059a4:	e000e100 	.word	0xe000e100

080059a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	6039      	str	r1, [r7, #0]
 80059b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	db0a      	blt.n	80059d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	490c      	ldr	r1, [pc, #48]	@ (80059f4 <__NVIC_SetPriority+0x4c>)
 80059c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c6:	0112      	lsls	r2, r2, #4
 80059c8:	b2d2      	uxtb	r2, r2
 80059ca:	440b      	add	r3, r1
 80059cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059d0:	e00a      	b.n	80059e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	4908      	ldr	r1, [pc, #32]	@ (80059f8 <__NVIC_SetPriority+0x50>)
 80059d8:	79fb      	ldrb	r3, [r7, #7]
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	3b04      	subs	r3, #4
 80059e0:	0112      	lsls	r2, r2, #4
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	440b      	add	r3, r1
 80059e6:	761a      	strb	r2, [r3, #24]
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	e000e100 	.word	0xe000e100
 80059f8:	e000ed00 	.word	0xe000ed00

080059fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b089      	sub	sp, #36	@ 0x24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f003 0307 	and.w	r3, r3, #7
 8005a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f1c3 0307 	rsb	r3, r3, #7
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	bf28      	it	cs
 8005a1a:	2304      	movcs	r3, #4
 8005a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	3304      	adds	r3, #4
 8005a22:	2b06      	cmp	r3, #6
 8005a24:	d902      	bls.n	8005a2c <NVIC_EncodePriority+0x30>
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	3b03      	subs	r3, #3
 8005a2a:	e000      	b.n	8005a2e <NVIC_EncodePriority+0x32>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a30:	f04f 32ff 	mov.w	r2, #4294967295
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3a:	43da      	mvns	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	401a      	ands	r2, r3
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a44:	f04f 31ff 	mov.w	r1, #4294967295
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4e:	43d9      	mvns	r1, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a54:	4313      	orrs	r3, r2
         );
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3724      	adds	r7, #36	@ 0x24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr

08005a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a70:	d301      	bcc.n	8005a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a72:	2301      	movs	r3, #1
 8005a74:	e00f      	b.n	8005a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a76:	4a0a      	ldr	r2, [pc, #40]	@ (8005aa0 <SysTick_Config+0x40>)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a7e:	210f      	movs	r1, #15
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295
 8005a84:	f7ff ff90 	bl	80059a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a88:	4b05      	ldr	r3, [pc, #20]	@ (8005aa0 <SysTick_Config+0x40>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a8e:	4b04      	ldr	r3, [pc, #16]	@ (8005aa0 <SysTick_Config+0x40>)
 8005a90:	2207      	movs	r2, #7
 8005a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	e000e010 	.word	0xe000e010

08005aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff ff2d 	bl	800590c <__NVIC_SetPriorityGrouping>
}
 8005ab2:	bf00      	nop
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b086      	sub	sp, #24
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	607a      	str	r2, [r7, #4]
 8005ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005acc:	f7ff ff42 	bl	8005954 <__NVIC_GetPriorityGrouping>
 8005ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	6978      	ldr	r0, [r7, #20]
 8005ad8:	f7ff ff90 	bl	80059fc <NVIC_EncodePriority>
 8005adc:	4602      	mov	r2, r0
 8005ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff ff5f 	bl	80059a8 <__NVIC_SetPriority>
}
 8005aea:	bf00      	nop
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b082      	sub	sp, #8
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	4603      	mov	r3, r0
 8005afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7ff ff35 	bl	8005970 <__NVIC_EnableIRQ>
}
 8005b06:	bf00      	nop
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b082      	sub	sp, #8
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff ffa2 	bl	8005a60 <SysTick_Config>
 8005b1c:	4603      	mov	r3, r0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e059      	b.n	8005bf2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	4b2d      	ldr	r3, [pc, #180]	@ (8005bfc <HAL_DMA_Init+0xd4>)
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d80f      	bhi.n	8005b6a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	4b2b      	ldr	r3, [pc, #172]	@ (8005c00 <HAL_DMA_Init+0xd8>)
 8005b52:	4413      	add	r3, r2
 8005b54:	4a2b      	ldr	r2, [pc, #172]	@ (8005c04 <HAL_DMA_Init+0xdc>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	091b      	lsrs	r3, r3, #4
 8005b5c:	009a      	lsls	r2, r3, #2
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a28      	ldr	r2, [pc, #160]	@ (8005c08 <HAL_DMA_Init+0xe0>)
 8005b66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b68:	e00e      	b.n	8005b88 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4b26      	ldr	r3, [pc, #152]	@ (8005c0c <HAL_DMA_Init+0xe4>)
 8005b72:	4413      	add	r3, r2
 8005b74:	4a23      	ldr	r2, [pc, #140]	@ (8005c04 <HAL_DMA_Init+0xdc>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	091b      	lsrs	r3, r3, #4
 8005b7c:	009a      	lsls	r2, r3, #2
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a22      	ldr	r2, [pc, #136]	@ (8005c10 <HAL_DMA_Init+0xe8>)
 8005b86:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005b9e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005ba2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr
 8005bfc:	40020407 	.word	0x40020407
 8005c00:	bffdfff8 	.word	0xbffdfff8
 8005c04:	cccccccd 	.word	0xcccccccd
 8005c08:	40020000 	.word	0x40020000
 8005c0c:	bffdfbf8 	.word	0xbffdfbf8
 8005c10:	40020400 	.word	0x40020400

08005c14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_DMA_Start_IT+0x20>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e04b      	b.n	8005ccc <HAL_DMA_Start_IT+0xb8>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d13a      	bne.n	8005cbe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0201 	bic.w	r2, r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fab6 	bl	80061de <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d008      	beq.n	8005c8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 020e 	orr.w	r2, r2, #14
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e00f      	b.n	8005cac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0204 	bic.w	r2, r2, #4
 8005c9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 020a 	orr.w	r2, r2, #10
 8005caa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	e005      	b.n	8005cca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d008      	beq.n	8005cfe <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2204      	movs	r2, #4
 8005cf0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e020      	b.n	8005d40 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 020e 	bic.w	r2, r2, #14
 8005d0c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d26:	2101      	movs	r1, #1
 8005d28:	fa01 f202 	lsl.w	r2, r1, r2
 8005d2c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bc80      	pop	{r7}
 8005d48:	4770      	bx	lr
	...

08005d4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d68:	2204      	movs	r2, #4
 8005d6a:	409a      	lsls	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80f1 	beq.w	8005f58 <HAL_DMA_IRQHandler+0x20c>
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 80eb 	beq.w	8005f58 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d107      	bne.n	8005da0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0204 	bic.w	r2, r2, #4
 8005d9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	4b5f      	ldr	r3, [pc, #380]	@ (8005f24 <HAL_DMA_IRQHandler+0x1d8>)
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d958      	bls.n	8005e5e <HAL_DMA_IRQHandler+0x112>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a5d      	ldr	r2, [pc, #372]	@ (8005f28 <HAL_DMA_IRQHandler+0x1dc>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d04f      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x10a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a5c      	ldr	r2, [pc, #368]	@ (8005f2c <HAL_DMA_IRQHandler+0x1e0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d048      	beq.n	8005e52 <HAL_DMA_IRQHandler+0x106>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a5a      	ldr	r2, [pc, #360]	@ (8005f30 <HAL_DMA_IRQHandler+0x1e4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d040      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x100>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a59      	ldr	r2, [pc, #356]	@ (8005f34 <HAL_DMA_IRQHandler+0x1e8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d038      	beq.n	8005e46 <HAL_DMA_IRQHandler+0xfa>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a57      	ldr	r2, [pc, #348]	@ (8005f38 <HAL_DMA_IRQHandler+0x1ec>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d030      	beq.n	8005e40 <HAL_DMA_IRQHandler+0xf4>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a56      	ldr	r2, [pc, #344]	@ (8005f3c <HAL_DMA_IRQHandler+0x1f0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d028      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xee>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a4d      	ldr	r2, [pc, #308]	@ (8005f24 <HAL_DMA_IRQHandler+0x1d8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d020      	beq.n	8005e34 <HAL_DMA_IRQHandler+0xe8>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a52      	ldr	r2, [pc, #328]	@ (8005f40 <HAL_DMA_IRQHandler+0x1f4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d019      	beq.n	8005e30 <HAL_DMA_IRQHandler+0xe4>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a50      	ldr	r2, [pc, #320]	@ (8005f44 <HAL_DMA_IRQHandler+0x1f8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d012      	beq.n	8005e2c <HAL_DMA_IRQHandler+0xe0>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a4f      	ldr	r2, [pc, #316]	@ (8005f48 <HAL_DMA_IRQHandler+0x1fc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00a      	beq.n	8005e26 <HAL_DMA_IRQHandler+0xda>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a4d      	ldr	r2, [pc, #308]	@ (8005f4c <HAL_DMA_IRQHandler+0x200>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d102      	bne.n	8005e20 <HAL_DMA_IRQHandler+0xd4>
 8005e1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005e1e:	e01b      	b.n	8005e58 <HAL_DMA_IRQHandler+0x10c>
 8005e20:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005e24:	e018      	b.n	8005e58 <HAL_DMA_IRQHandler+0x10c>
 8005e26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e2a:	e015      	b.n	8005e58 <HAL_DMA_IRQHandler+0x10c>
 8005e2c:	2340      	movs	r3, #64	@ 0x40
 8005e2e:	e013      	b.n	8005e58 <HAL_DMA_IRQHandler+0x10c>
 8005e30:	2304      	movs	r3, #4
 8005e32:	e011      	b.n	8005e58 <HAL_DMA_IRQHandler+0x10c>
 8005e34:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005e38:	e00e      	b.n	8005e58 <HAL_DMA_IRQHandler+0x10c>
 8005e3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005e3e:	e00b      	b.n	8005e58 <HAL_DMA_IRQHandler+0x10c>
 8005e40:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005e44:	e008      	b.n	8005e58 <HAL_DMA_IRQHandler+0x10c>
 8005e46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005e4a:	e005      	b.n	8005e58 <HAL_DMA_IRQHandler+0x10c>
 8005e4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e50:	e002      	b.n	8005e58 <HAL_DMA_IRQHandler+0x10c>
 8005e52:	2340      	movs	r3, #64	@ 0x40
 8005e54:	e000      	b.n	8005e58 <HAL_DMA_IRQHandler+0x10c>
 8005e56:	2304      	movs	r3, #4
 8005e58:	4a3d      	ldr	r2, [pc, #244]	@ (8005f50 <HAL_DMA_IRQHandler+0x204>)
 8005e5a:	6053      	str	r3, [r2, #4]
 8005e5c:	e057      	b.n	8005f0e <HAL_DMA_IRQHandler+0x1c2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a31      	ldr	r2, [pc, #196]	@ (8005f28 <HAL_DMA_IRQHandler+0x1dc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d04f      	beq.n	8005f08 <HAL_DMA_IRQHandler+0x1bc>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a2f      	ldr	r2, [pc, #188]	@ (8005f2c <HAL_DMA_IRQHandler+0x1e0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d048      	beq.n	8005f04 <HAL_DMA_IRQHandler+0x1b8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a2e      	ldr	r2, [pc, #184]	@ (8005f30 <HAL_DMA_IRQHandler+0x1e4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d040      	beq.n	8005efe <HAL_DMA_IRQHandler+0x1b2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a2c      	ldr	r2, [pc, #176]	@ (8005f34 <HAL_DMA_IRQHandler+0x1e8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d038      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x1ac>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a2b      	ldr	r2, [pc, #172]	@ (8005f38 <HAL_DMA_IRQHandler+0x1ec>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d030      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0x1a6>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a29      	ldr	r2, [pc, #164]	@ (8005f3c <HAL_DMA_IRQHandler+0x1f0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d028      	beq.n	8005eec <HAL_DMA_IRQHandler+0x1a0>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a21      	ldr	r2, [pc, #132]	@ (8005f24 <HAL_DMA_IRQHandler+0x1d8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d020      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x19a>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a25      	ldr	r2, [pc, #148]	@ (8005f40 <HAL_DMA_IRQHandler+0x1f4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d019      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x196>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a24      	ldr	r2, [pc, #144]	@ (8005f44 <HAL_DMA_IRQHandler+0x1f8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d012      	beq.n	8005ede <HAL_DMA_IRQHandler+0x192>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a22      	ldr	r2, [pc, #136]	@ (8005f48 <HAL_DMA_IRQHandler+0x1fc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x18c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a21      	ldr	r2, [pc, #132]	@ (8005f4c <HAL_DMA_IRQHandler+0x200>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d102      	bne.n	8005ed2 <HAL_DMA_IRQHandler+0x186>
 8005ecc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005ed0:	e01b      	b.n	8005f0a <HAL_DMA_IRQHandler+0x1be>
 8005ed2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005ed6:	e018      	b.n	8005f0a <HAL_DMA_IRQHandler+0x1be>
 8005ed8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005edc:	e015      	b.n	8005f0a <HAL_DMA_IRQHandler+0x1be>
 8005ede:	2340      	movs	r3, #64	@ 0x40
 8005ee0:	e013      	b.n	8005f0a <HAL_DMA_IRQHandler+0x1be>
 8005ee2:	2304      	movs	r3, #4
 8005ee4:	e011      	b.n	8005f0a <HAL_DMA_IRQHandler+0x1be>
 8005ee6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005eea:	e00e      	b.n	8005f0a <HAL_DMA_IRQHandler+0x1be>
 8005eec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005ef0:	e00b      	b.n	8005f0a <HAL_DMA_IRQHandler+0x1be>
 8005ef2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005ef6:	e008      	b.n	8005f0a <HAL_DMA_IRQHandler+0x1be>
 8005ef8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005efc:	e005      	b.n	8005f0a <HAL_DMA_IRQHandler+0x1be>
 8005efe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f02:	e002      	b.n	8005f0a <HAL_DMA_IRQHandler+0x1be>
 8005f04:	2340      	movs	r3, #64	@ 0x40
 8005f06:	e000      	b.n	8005f0a <HAL_DMA_IRQHandler+0x1be>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	4a12      	ldr	r2, [pc, #72]	@ (8005f54 <HAL_DMA_IRQHandler+0x208>)
 8005f0c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 8136 	beq.w	8006184 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005f20:	e130      	b.n	8006184 <HAL_DMA_IRQHandler+0x438>
 8005f22:	bf00      	nop
 8005f24:	40020080 	.word	0x40020080
 8005f28:	40020008 	.word	0x40020008
 8005f2c:	4002001c 	.word	0x4002001c
 8005f30:	40020030 	.word	0x40020030
 8005f34:	40020044 	.word	0x40020044
 8005f38:	40020058 	.word	0x40020058
 8005f3c:	4002006c 	.word	0x4002006c
 8005f40:	40020408 	.word	0x40020408
 8005f44:	4002041c 	.word	0x4002041c
 8005f48:	40020430 	.word	0x40020430
 8005f4c:	40020444 	.word	0x40020444
 8005f50:	40020400 	.word	0x40020400
 8005f54:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	409a      	lsls	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80dd 	beq.w	8006124 <HAL_DMA_IRQHandler+0x3d8>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 80d7 	beq.w	8006124 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0320 	and.w	r3, r3, #32
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10b      	bne.n	8005f9c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 020a 	bic.w	r2, r2, #10
 8005f92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	4b7b      	ldr	r3, [pc, #492]	@ (8006190 <HAL_DMA_IRQHandler+0x444>)
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d958      	bls.n	800605a <HAL_DMA_IRQHandler+0x30e>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a79      	ldr	r2, [pc, #484]	@ (8006194 <HAL_DMA_IRQHandler+0x448>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d04f      	beq.n	8006052 <HAL_DMA_IRQHandler+0x306>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a78      	ldr	r2, [pc, #480]	@ (8006198 <HAL_DMA_IRQHandler+0x44c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d048      	beq.n	800604e <HAL_DMA_IRQHandler+0x302>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a76      	ldr	r2, [pc, #472]	@ (800619c <HAL_DMA_IRQHandler+0x450>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d040      	beq.n	8006048 <HAL_DMA_IRQHandler+0x2fc>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a75      	ldr	r2, [pc, #468]	@ (80061a0 <HAL_DMA_IRQHandler+0x454>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d038      	beq.n	8006042 <HAL_DMA_IRQHandler+0x2f6>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a73      	ldr	r2, [pc, #460]	@ (80061a4 <HAL_DMA_IRQHandler+0x458>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d030      	beq.n	800603c <HAL_DMA_IRQHandler+0x2f0>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a72      	ldr	r2, [pc, #456]	@ (80061a8 <HAL_DMA_IRQHandler+0x45c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d028      	beq.n	8006036 <HAL_DMA_IRQHandler+0x2ea>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a69      	ldr	r2, [pc, #420]	@ (8006190 <HAL_DMA_IRQHandler+0x444>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d020      	beq.n	8006030 <HAL_DMA_IRQHandler+0x2e4>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a6e      	ldr	r2, [pc, #440]	@ (80061ac <HAL_DMA_IRQHandler+0x460>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d019      	beq.n	800602c <HAL_DMA_IRQHandler+0x2e0>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a6c      	ldr	r2, [pc, #432]	@ (80061b0 <HAL_DMA_IRQHandler+0x464>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d012      	beq.n	8006028 <HAL_DMA_IRQHandler+0x2dc>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a6b      	ldr	r2, [pc, #428]	@ (80061b4 <HAL_DMA_IRQHandler+0x468>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d00a      	beq.n	8006022 <HAL_DMA_IRQHandler+0x2d6>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a69      	ldr	r2, [pc, #420]	@ (80061b8 <HAL_DMA_IRQHandler+0x46c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d102      	bne.n	800601c <HAL_DMA_IRQHandler+0x2d0>
 8006016:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800601a:	e01b      	b.n	8006054 <HAL_DMA_IRQHandler+0x308>
 800601c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006020:	e018      	b.n	8006054 <HAL_DMA_IRQHandler+0x308>
 8006022:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006026:	e015      	b.n	8006054 <HAL_DMA_IRQHandler+0x308>
 8006028:	2320      	movs	r3, #32
 800602a:	e013      	b.n	8006054 <HAL_DMA_IRQHandler+0x308>
 800602c:	2302      	movs	r3, #2
 800602e:	e011      	b.n	8006054 <HAL_DMA_IRQHandler+0x308>
 8006030:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006034:	e00e      	b.n	8006054 <HAL_DMA_IRQHandler+0x308>
 8006036:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800603a:	e00b      	b.n	8006054 <HAL_DMA_IRQHandler+0x308>
 800603c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006040:	e008      	b.n	8006054 <HAL_DMA_IRQHandler+0x308>
 8006042:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006046:	e005      	b.n	8006054 <HAL_DMA_IRQHandler+0x308>
 8006048:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800604c:	e002      	b.n	8006054 <HAL_DMA_IRQHandler+0x308>
 800604e:	2320      	movs	r3, #32
 8006050:	e000      	b.n	8006054 <HAL_DMA_IRQHandler+0x308>
 8006052:	2302      	movs	r3, #2
 8006054:	4a59      	ldr	r2, [pc, #356]	@ (80061bc <HAL_DMA_IRQHandler+0x470>)
 8006056:	6053      	str	r3, [r2, #4]
 8006058:	e057      	b.n	800610a <HAL_DMA_IRQHandler+0x3be>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a4d      	ldr	r2, [pc, #308]	@ (8006194 <HAL_DMA_IRQHandler+0x448>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d04f      	beq.n	8006104 <HAL_DMA_IRQHandler+0x3b8>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a4b      	ldr	r2, [pc, #300]	@ (8006198 <HAL_DMA_IRQHandler+0x44c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d048      	beq.n	8006100 <HAL_DMA_IRQHandler+0x3b4>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a4a      	ldr	r2, [pc, #296]	@ (800619c <HAL_DMA_IRQHandler+0x450>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d040      	beq.n	80060fa <HAL_DMA_IRQHandler+0x3ae>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a48      	ldr	r2, [pc, #288]	@ (80061a0 <HAL_DMA_IRQHandler+0x454>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d038      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x3a8>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a47      	ldr	r2, [pc, #284]	@ (80061a4 <HAL_DMA_IRQHandler+0x458>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d030      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3a2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a45      	ldr	r2, [pc, #276]	@ (80061a8 <HAL_DMA_IRQHandler+0x45c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d028      	beq.n	80060e8 <HAL_DMA_IRQHandler+0x39c>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a3d      	ldr	r2, [pc, #244]	@ (8006190 <HAL_DMA_IRQHandler+0x444>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d020      	beq.n	80060e2 <HAL_DMA_IRQHandler+0x396>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a41      	ldr	r2, [pc, #260]	@ (80061ac <HAL_DMA_IRQHandler+0x460>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d019      	beq.n	80060de <HAL_DMA_IRQHandler+0x392>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a40      	ldr	r2, [pc, #256]	@ (80061b0 <HAL_DMA_IRQHandler+0x464>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d012      	beq.n	80060da <HAL_DMA_IRQHandler+0x38e>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a3e      	ldr	r2, [pc, #248]	@ (80061b4 <HAL_DMA_IRQHandler+0x468>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00a      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x388>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a3d      	ldr	r2, [pc, #244]	@ (80061b8 <HAL_DMA_IRQHandler+0x46c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d102      	bne.n	80060ce <HAL_DMA_IRQHandler+0x382>
 80060c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80060cc:	e01b      	b.n	8006106 <HAL_DMA_IRQHandler+0x3ba>
 80060ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80060d2:	e018      	b.n	8006106 <HAL_DMA_IRQHandler+0x3ba>
 80060d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060d8:	e015      	b.n	8006106 <HAL_DMA_IRQHandler+0x3ba>
 80060da:	2320      	movs	r3, #32
 80060dc:	e013      	b.n	8006106 <HAL_DMA_IRQHandler+0x3ba>
 80060de:	2302      	movs	r3, #2
 80060e0:	e011      	b.n	8006106 <HAL_DMA_IRQHandler+0x3ba>
 80060e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060e6:	e00e      	b.n	8006106 <HAL_DMA_IRQHandler+0x3ba>
 80060e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80060ec:	e00b      	b.n	8006106 <HAL_DMA_IRQHandler+0x3ba>
 80060ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80060f2:	e008      	b.n	8006106 <HAL_DMA_IRQHandler+0x3ba>
 80060f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80060f8:	e005      	b.n	8006106 <HAL_DMA_IRQHandler+0x3ba>
 80060fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060fe:	e002      	b.n	8006106 <HAL_DMA_IRQHandler+0x3ba>
 8006100:	2320      	movs	r3, #32
 8006102:	e000      	b.n	8006106 <HAL_DMA_IRQHandler+0x3ba>
 8006104:	2302      	movs	r3, #2
 8006106:	4a2e      	ldr	r2, [pc, #184]	@ (80061c0 <HAL_DMA_IRQHandler+0x474>)
 8006108:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006116:	2b00      	cmp	r3, #0
 8006118:	d034      	beq.n	8006184 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006122:	e02f      	b.n	8006184 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006128:	2208      	movs	r2, #8
 800612a:	409a      	lsls	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4013      	ands	r3, r2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d028      	beq.n	8006186 <HAL_DMA_IRQHandler+0x43a>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f003 0308 	and.w	r3, r3, #8
 800613a:	2b00      	cmp	r3, #0
 800613c:	d023      	beq.n	8006186 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 020e 	bic.w	r2, r2, #14
 800614c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006156:	2101      	movs	r1, #1
 8006158:	fa01 f202 	lsl.w	r2, r1, r2
 800615c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006178:	2b00      	cmp	r3, #0
 800617a:	d004      	beq.n	8006186 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	4798      	blx	r3
    }
  }
  return;
 8006184:	bf00      	nop
 8006186:	bf00      	nop
}
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	40020080 	.word	0x40020080
 8006194:	40020008 	.word	0x40020008
 8006198:	4002001c 	.word	0x4002001c
 800619c:	40020030 	.word	0x40020030
 80061a0:	40020044 	.word	0x40020044
 80061a4:	40020058 	.word	0x40020058
 80061a8:	4002006c 	.word	0x4002006c
 80061ac:	40020408 	.word	0x40020408
 80061b0:	4002041c 	.word	0x4002041c
 80061b4:	40020430 	.word	0x40020430
 80061b8:	40020444 	.word	0x40020444
 80061bc:	40020400 	.word	0x40020400
 80061c0:	40020000 	.word	0x40020000

080061c4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80061d2:	b2db      	uxtb	r3, r3
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	bc80      	pop	{r7}
 80061dc:	4770      	bx	lr

080061de <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061de:	b480      	push	{r7}
 80061e0:	b085      	sub	sp, #20
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	607a      	str	r2, [r7, #4]
 80061ea:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f4:	2101      	movs	r1, #1
 80061f6:	fa01 f202 	lsl.w	r2, r1, r2
 80061fa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	2b10      	cmp	r3, #16
 800620a:	d108      	bne.n	800621e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800621c:	e007      	b.n	800622e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	60da      	str	r2, [r3, #12]
}
 800622e:	bf00      	nop
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr

08006238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006238:	b480      	push	{r7}
 800623a:	b08b      	sub	sp, #44	@ 0x2c
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006242:	2300      	movs	r3, #0
 8006244:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006246:	2300      	movs	r3, #0
 8006248:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800624a:	e179      	b.n	8006540 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800624c:	2201      	movs	r2, #1
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	fa02 f303 	lsl.w	r3, r2, r3
 8006254:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69fa      	ldr	r2, [r7, #28]
 800625c:	4013      	ands	r3, r2
 800625e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	429a      	cmp	r2, r3
 8006266:	f040 8168 	bne.w	800653a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	4a96      	ldr	r2, [pc, #600]	@ (80064c8 <HAL_GPIO_Init+0x290>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d05e      	beq.n	8006332 <HAL_GPIO_Init+0xfa>
 8006274:	4a94      	ldr	r2, [pc, #592]	@ (80064c8 <HAL_GPIO_Init+0x290>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d875      	bhi.n	8006366 <HAL_GPIO_Init+0x12e>
 800627a:	4a94      	ldr	r2, [pc, #592]	@ (80064cc <HAL_GPIO_Init+0x294>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d058      	beq.n	8006332 <HAL_GPIO_Init+0xfa>
 8006280:	4a92      	ldr	r2, [pc, #584]	@ (80064cc <HAL_GPIO_Init+0x294>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d86f      	bhi.n	8006366 <HAL_GPIO_Init+0x12e>
 8006286:	4a92      	ldr	r2, [pc, #584]	@ (80064d0 <HAL_GPIO_Init+0x298>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d052      	beq.n	8006332 <HAL_GPIO_Init+0xfa>
 800628c:	4a90      	ldr	r2, [pc, #576]	@ (80064d0 <HAL_GPIO_Init+0x298>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d869      	bhi.n	8006366 <HAL_GPIO_Init+0x12e>
 8006292:	4a90      	ldr	r2, [pc, #576]	@ (80064d4 <HAL_GPIO_Init+0x29c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d04c      	beq.n	8006332 <HAL_GPIO_Init+0xfa>
 8006298:	4a8e      	ldr	r2, [pc, #568]	@ (80064d4 <HAL_GPIO_Init+0x29c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d863      	bhi.n	8006366 <HAL_GPIO_Init+0x12e>
 800629e:	4a8e      	ldr	r2, [pc, #568]	@ (80064d8 <HAL_GPIO_Init+0x2a0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d046      	beq.n	8006332 <HAL_GPIO_Init+0xfa>
 80062a4:	4a8c      	ldr	r2, [pc, #560]	@ (80064d8 <HAL_GPIO_Init+0x2a0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d85d      	bhi.n	8006366 <HAL_GPIO_Init+0x12e>
 80062aa:	2b12      	cmp	r3, #18
 80062ac:	d82a      	bhi.n	8006304 <HAL_GPIO_Init+0xcc>
 80062ae:	2b12      	cmp	r3, #18
 80062b0:	d859      	bhi.n	8006366 <HAL_GPIO_Init+0x12e>
 80062b2:	a201      	add	r2, pc, #4	@ (adr r2, 80062b8 <HAL_GPIO_Init+0x80>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	08006333 	.word	0x08006333
 80062bc:	0800630d 	.word	0x0800630d
 80062c0:	0800631f 	.word	0x0800631f
 80062c4:	08006361 	.word	0x08006361
 80062c8:	08006367 	.word	0x08006367
 80062cc:	08006367 	.word	0x08006367
 80062d0:	08006367 	.word	0x08006367
 80062d4:	08006367 	.word	0x08006367
 80062d8:	08006367 	.word	0x08006367
 80062dc:	08006367 	.word	0x08006367
 80062e0:	08006367 	.word	0x08006367
 80062e4:	08006367 	.word	0x08006367
 80062e8:	08006367 	.word	0x08006367
 80062ec:	08006367 	.word	0x08006367
 80062f0:	08006367 	.word	0x08006367
 80062f4:	08006367 	.word	0x08006367
 80062f8:	08006367 	.word	0x08006367
 80062fc:	08006315 	.word	0x08006315
 8006300:	08006329 	.word	0x08006329
 8006304:	4a75      	ldr	r2, [pc, #468]	@ (80064dc <HAL_GPIO_Init+0x2a4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d013      	beq.n	8006332 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800630a:	e02c      	b.n	8006366 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	623b      	str	r3, [r7, #32]
          break;
 8006312:	e029      	b.n	8006368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	3304      	adds	r3, #4
 800631a:	623b      	str	r3, [r7, #32]
          break;
 800631c:	e024      	b.n	8006368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	3308      	adds	r3, #8
 8006324:	623b      	str	r3, [r7, #32]
          break;
 8006326:	e01f      	b.n	8006368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	330c      	adds	r3, #12
 800632e:	623b      	str	r3, [r7, #32]
          break;
 8006330:	e01a      	b.n	8006368 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d102      	bne.n	8006340 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800633a:	2304      	movs	r3, #4
 800633c:	623b      	str	r3, [r7, #32]
          break;
 800633e:	e013      	b.n	8006368 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d105      	bne.n	8006354 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006348:	2308      	movs	r3, #8
 800634a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	611a      	str	r2, [r3, #16]
          break;
 8006352:	e009      	b.n	8006368 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006354:	2308      	movs	r3, #8
 8006356:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	69fa      	ldr	r2, [r7, #28]
 800635c:	615a      	str	r2, [r3, #20]
          break;
 800635e:	e003      	b.n	8006368 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006360:	2300      	movs	r3, #0
 8006362:	623b      	str	r3, [r7, #32]
          break;
 8006364:	e000      	b.n	8006368 <HAL_GPIO_Init+0x130>
          break;
 8006366:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	2bff      	cmp	r3, #255	@ 0xff
 800636c:	d801      	bhi.n	8006372 <HAL_GPIO_Init+0x13a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	e001      	b.n	8006376 <HAL_GPIO_Init+0x13e>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3304      	adds	r3, #4
 8006376:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	2bff      	cmp	r3, #255	@ 0xff
 800637c:	d802      	bhi.n	8006384 <HAL_GPIO_Init+0x14c>
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	e002      	b.n	800638a <HAL_GPIO_Init+0x152>
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	3b08      	subs	r3, #8
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	210f      	movs	r1, #15
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	fa01 f303 	lsl.w	r3, r1, r3
 8006398:	43db      	mvns	r3, r3
 800639a:	401a      	ands	r2, r3
 800639c:	6a39      	ldr	r1, [r7, #32]
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	fa01 f303 	lsl.w	r3, r1, r3
 80063a4:	431a      	orrs	r2, r3
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 80c1 	beq.w	800653a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80063b8:	4b49      	ldr	r3, [pc, #292]	@ (80064e0 <HAL_GPIO_Init+0x2a8>)
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	4a48      	ldr	r2, [pc, #288]	@ (80064e0 <HAL_GPIO_Init+0x2a8>)
 80063be:	f043 0301 	orr.w	r3, r3, #1
 80063c2:	6193      	str	r3, [r2, #24]
 80063c4:	4b46      	ldr	r3, [pc, #280]	@ (80064e0 <HAL_GPIO_Init+0x2a8>)
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	60bb      	str	r3, [r7, #8]
 80063ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80063d0:	4a44      	ldr	r2, [pc, #272]	@ (80064e4 <HAL_GPIO_Init+0x2ac>)
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	089b      	lsrs	r3, r3, #2
 80063d6:	3302      	adds	r3, #2
 80063d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	f003 0303 	and.w	r3, r3, #3
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	220f      	movs	r2, #15
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	43db      	mvns	r3, r3
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4013      	ands	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a3c      	ldr	r2, [pc, #240]	@ (80064e8 <HAL_GPIO_Init+0x2b0>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d01f      	beq.n	800643c <HAL_GPIO_Init+0x204>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a3b      	ldr	r2, [pc, #236]	@ (80064ec <HAL_GPIO_Init+0x2b4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d019      	beq.n	8006438 <HAL_GPIO_Init+0x200>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a3a      	ldr	r2, [pc, #232]	@ (80064f0 <HAL_GPIO_Init+0x2b8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d013      	beq.n	8006434 <HAL_GPIO_Init+0x1fc>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a39      	ldr	r2, [pc, #228]	@ (80064f4 <HAL_GPIO_Init+0x2bc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d00d      	beq.n	8006430 <HAL_GPIO_Init+0x1f8>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a38      	ldr	r2, [pc, #224]	@ (80064f8 <HAL_GPIO_Init+0x2c0>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d007      	beq.n	800642c <HAL_GPIO_Init+0x1f4>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a37      	ldr	r2, [pc, #220]	@ (80064fc <HAL_GPIO_Init+0x2c4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d101      	bne.n	8006428 <HAL_GPIO_Init+0x1f0>
 8006424:	2305      	movs	r3, #5
 8006426:	e00a      	b.n	800643e <HAL_GPIO_Init+0x206>
 8006428:	2306      	movs	r3, #6
 800642a:	e008      	b.n	800643e <HAL_GPIO_Init+0x206>
 800642c:	2304      	movs	r3, #4
 800642e:	e006      	b.n	800643e <HAL_GPIO_Init+0x206>
 8006430:	2303      	movs	r3, #3
 8006432:	e004      	b.n	800643e <HAL_GPIO_Init+0x206>
 8006434:	2302      	movs	r3, #2
 8006436:	e002      	b.n	800643e <HAL_GPIO_Init+0x206>
 8006438:	2301      	movs	r3, #1
 800643a:	e000      	b.n	800643e <HAL_GPIO_Init+0x206>
 800643c:	2300      	movs	r3, #0
 800643e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006440:	f002 0203 	and.w	r2, r2, #3
 8006444:	0092      	lsls	r2, r2, #2
 8006446:	4093      	lsls	r3, r2
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800644e:	4925      	ldr	r1, [pc, #148]	@ (80064e4 <HAL_GPIO_Init+0x2ac>)
 8006450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006452:	089b      	lsrs	r3, r3, #2
 8006454:	3302      	adds	r3, #2
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d006      	beq.n	8006476 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006468:	4b25      	ldr	r3, [pc, #148]	@ (8006500 <HAL_GPIO_Init+0x2c8>)
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	4924      	ldr	r1, [pc, #144]	@ (8006500 <HAL_GPIO_Init+0x2c8>)
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	4313      	orrs	r3, r2
 8006472:	608b      	str	r3, [r1, #8]
 8006474:	e006      	b.n	8006484 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006476:	4b22      	ldr	r3, [pc, #136]	@ (8006500 <HAL_GPIO_Init+0x2c8>)
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	43db      	mvns	r3, r3
 800647e:	4920      	ldr	r1, [pc, #128]	@ (8006500 <HAL_GPIO_Init+0x2c8>)
 8006480:	4013      	ands	r3, r2
 8006482:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d006      	beq.n	800649e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006490:	4b1b      	ldr	r3, [pc, #108]	@ (8006500 <HAL_GPIO_Init+0x2c8>)
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	491a      	ldr	r1, [pc, #104]	@ (8006500 <HAL_GPIO_Init+0x2c8>)
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	4313      	orrs	r3, r2
 800649a:	60cb      	str	r3, [r1, #12]
 800649c:	e006      	b.n	80064ac <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800649e:	4b18      	ldr	r3, [pc, #96]	@ (8006500 <HAL_GPIO_Init+0x2c8>)
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	43db      	mvns	r3, r3
 80064a6:	4916      	ldr	r1, [pc, #88]	@ (8006500 <HAL_GPIO_Init+0x2c8>)
 80064a8:	4013      	ands	r3, r2
 80064aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d025      	beq.n	8006504 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80064b8:	4b11      	ldr	r3, [pc, #68]	@ (8006500 <HAL_GPIO_Init+0x2c8>)
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	4910      	ldr	r1, [pc, #64]	@ (8006500 <HAL_GPIO_Init+0x2c8>)
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	604b      	str	r3, [r1, #4]
 80064c4:	e025      	b.n	8006512 <HAL_GPIO_Init+0x2da>
 80064c6:	bf00      	nop
 80064c8:	10320000 	.word	0x10320000
 80064cc:	10310000 	.word	0x10310000
 80064d0:	10220000 	.word	0x10220000
 80064d4:	10210000 	.word	0x10210000
 80064d8:	10120000 	.word	0x10120000
 80064dc:	10110000 	.word	0x10110000
 80064e0:	40021000 	.word	0x40021000
 80064e4:	40010000 	.word	0x40010000
 80064e8:	40010800 	.word	0x40010800
 80064ec:	40010c00 	.word	0x40010c00
 80064f0:	40011000 	.word	0x40011000
 80064f4:	40011400 	.word	0x40011400
 80064f8:	40011800 	.word	0x40011800
 80064fc:	40011c00 	.word	0x40011c00
 8006500:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006504:	4b15      	ldr	r3, [pc, #84]	@ (800655c <HAL_GPIO_Init+0x324>)
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	43db      	mvns	r3, r3
 800650c:	4913      	ldr	r1, [pc, #76]	@ (800655c <HAL_GPIO_Init+0x324>)
 800650e:	4013      	ands	r3, r2
 8006510:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d006      	beq.n	800652c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800651e:	4b0f      	ldr	r3, [pc, #60]	@ (800655c <HAL_GPIO_Init+0x324>)
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	490e      	ldr	r1, [pc, #56]	@ (800655c <HAL_GPIO_Init+0x324>)
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	4313      	orrs	r3, r2
 8006528:	600b      	str	r3, [r1, #0]
 800652a:	e006      	b.n	800653a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800652c:	4b0b      	ldr	r3, [pc, #44]	@ (800655c <HAL_GPIO_Init+0x324>)
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	43db      	mvns	r3, r3
 8006534:	4909      	ldr	r1, [pc, #36]	@ (800655c <HAL_GPIO_Init+0x324>)
 8006536:	4013      	ands	r3, r2
 8006538:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800653a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653c:	3301      	adds	r3, #1
 800653e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006546:	fa22 f303 	lsr.w	r3, r2, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	f47f ae7e 	bne.w	800624c <HAL_GPIO_Init+0x14>
  }
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	372c      	adds	r7, #44	@ 0x2c
 8006556:	46bd      	mov	sp, r7
 8006558:	bc80      	pop	{r7}
 800655a:	4770      	bx	lr
 800655c:	40010400 	.word	0x40010400

08006560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	887b      	ldrh	r3, [r7, #2]
 8006572:	4013      	ands	r3, r2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006578:	2301      	movs	r3, #1
 800657a:	73fb      	strb	r3, [r7, #15]
 800657c:	e001      	b.n	8006582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006582:	7bfb      	ldrb	r3, [r7, #15]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	bc80      	pop	{r7}
 800658c:	4770      	bx	lr

0800658e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	460b      	mov	r3, r1
 8006598:	807b      	strh	r3, [r7, #2]
 800659a:	4613      	mov	r3, r2
 800659c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800659e:	787b      	ldrb	r3, [r7, #1]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065a4:	887a      	ldrh	r2, [r7, #2]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80065aa:	e003      	b.n	80065b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80065ac:	887b      	ldrh	r3, [r7, #2]
 80065ae:	041a      	lsls	r2, r3, #16
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	611a      	str	r2, [r3, #16]
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bc80      	pop	{r7}
 80065bc:	4770      	bx	lr
	...

080065c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	4603      	mov	r3, r0
 80065c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80065ca:	4b08      	ldr	r3, [pc, #32]	@ (80065ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065cc:	695a      	ldr	r2, [r3, #20]
 80065ce:	88fb      	ldrh	r3, [r7, #6]
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d006      	beq.n	80065e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065d6:	4a05      	ldr	r2, [pc, #20]	@ (80065ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065dc:	88fb      	ldrh	r3, [r7, #6]
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 f806 	bl	80065f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80065e4:	bf00      	nop
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40010400 	.word	0x40010400

080065f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	4603      	mov	r3, r0
 80065f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	bc80      	pop	{r7}
 8006602:	4770      	bx	lr

08006604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e272      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 8087 	beq.w	8006732 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006624:	4b92      	ldr	r3, [pc, #584]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f003 030c 	and.w	r3, r3, #12
 800662c:	2b04      	cmp	r3, #4
 800662e:	d00c      	beq.n	800664a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006630:	4b8f      	ldr	r3, [pc, #572]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f003 030c 	and.w	r3, r3, #12
 8006638:	2b08      	cmp	r3, #8
 800663a:	d112      	bne.n	8006662 <HAL_RCC_OscConfig+0x5e>
 800663c:	4b8c      	ldr	r3, [pc, #560]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006648:	d10b      	bne.n	8006662 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800664a:	4b89      	ldr	r3, [pc, #548]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d06c      	beq.n	8006730 <HAL_RCC_OscConfig+0x12c>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d168      	bne.n	8006730 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e24c      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800666a:	d106      	bne.n	800667a <HAL_RCC_OscConfig+0x76>
 800666c:	4b80      	ldr	r3, [pc, #512]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a7f      	ldr	r2, [pc, #508]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 8006672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	e02e      	b.n	80066d8 <HAL_RCC_OscConfig+0xd4>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10c      	bne.n	800669c <HAL_RCC_OscConfig+0x98>
 8006682:	4b7b      	ldr	r3, [pc, #492]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a7a      	ldr	r2, [pc, #488]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 8006688:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	4b78      	ldr	r3, [pc, #480]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a77      	ldr	r2, [pc, #476]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 8006694:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	e01d      	b.n	80066d8 <HAL_RCC_OscConfig+0xd4>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066a4:	d10c      	bne.n	80066c0 <HAL_RCC_OscConfig+0xbc>
 80066a6:	4b72      	ldr	r3, [pc, #456]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a71      	ldr	r2, [pc, #452]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 80066ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	4b6f      	ldr	r3, [pc, #444]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a6e      	ldr	r2, [pc, #440]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 80066b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	e00b      	b.n	80066d8 <HAL_RCC_OscConfig+0xd4>
 80066c0:	4b6b      	ldr	r3, [pc, #428]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a6a      	ldr	r2, [pc, #424]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 80066c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	4b68      	ldr	r3, [pc, #416]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a67      	ldr	r2, [pc, #412]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 80066d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d013      	beq.n	8006708 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e0:	f7fe fc18 	bl	8004f14 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066e8:	f7fe fc14 	bl	8004f14 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b64      	cmp	r3, #100	@ 0x64
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e200      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066fa:	4b5d      	ldr	r3, [pc, #372]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0f0      	beq.n	80066e8 <HAL_RCC_OscConfig+0xe4>
 8006706:	e014      	b.n	8006732 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006708:	f7fe fc04 	bl	8004f14 <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006710:	f7fe fc00 	bl	8004f14 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b64      	cmp	r3, #100	@ 0x64
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e1ec      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006722:	4b53      	ldr	r3, [pc, #332]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1f0      	bne.n	8006710 <HAL_RCC_OscConfig+0x10c>
 800672e:	e000      	b.n	8006732 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d063      	beq.n	8006806 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800673e:	4b4c      	ldr	r3, [pc, #304]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f003 030c 	and.w	r3, r3, #12
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00b      	beq.n	8006762 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800674a:	4b49      	ldr	r3, [pc, #292]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f003 030c 	and.w	r3, r3, #12
 8006752:	2b08      	cmp	r3, #8
 8006754:	d11c      	bne.n	8006790 <HAL_RCC_OscConfig+0x18c>
 8006756:	4b46      	ldr	r3, [pc, #280]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d116      	bne.n	8006790 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006762:	4b43      	ldr	r3, [pc, #268]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d005      	beq.n	800677a <HAL_RCC_OscConfig+0x176>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d001      	beq.n	800677a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e1c0      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800677a:	4b3d      	ldr	r3, [pc, #244]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	4939      	ldr	r1, [pc, #228]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 800678a:	4313      	orrs	r3, r2
 800678c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800678e:	e03a      	b.n	8006806 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d020      	beq.n	80067da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006798:	4b36      	ldr	r3, [pc, #216]	@ (8006874 <HAL_RCC_OscConfig+0x270>)
 800679a:	2201      	movs	r2, #1
 800679c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800679e:	f7fe fbb9 	bl	8004f14 <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067a6:	f7fe fbb5 	bl	8004f14 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e1a1      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0f0      	beq.n	80067a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	4927      	ldr	r1, [pc, #156]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	600b      	str	r3, [r1, #0]
 80067d8:	e015      	b.n	8006806 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067da:	4b26      	ldr	r3, [pc, #152]	@ (8006874 <HAL_RCC_OscConfig+0x270>)
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e0:	f7fe fb98 	bl	8004f14 <HAL_GetTick>
 80067e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067e8:	f7fe fb94 	bl	8004f14 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e180      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1f0      	bne.n	80067e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0308 	and.w	r3, r3, #8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d03a      	beq.n	8006888 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d019      	beq.n	800684e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800681a:	4b17      	ldr	r3, [pc, #92]	@ (8006878 <HAL_RCC_OscConfig+0x274>)
 800681c:	2201      	movs	r2, #1
 800681e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006820:	f7fe fb78 	bl	8004f14 <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006828:	f7fe fb74 	bl	8004f14 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e160      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800683a:	4b0d      	ldr	r3, [pc, #52]	@ (8006870 <HAL_RCC_OscConfig+0x26c>)
 800683c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0f0      	beq.n	8006828 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006846:	2001      	movs	r0, #1
 8006848:	f000 faba 	bl	8006dc0 <RCC_Delay>
 800684c:	e01c      	b.n	8006888 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800684e:	4b0a      	ldr	r3, [pc, #40]	@ (8006878 <HAL_RCC_OscConfig+0x274>)
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006854:	f7fe fb5e 	bl	8004f14 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800685a:	e00f      	b.n	800687c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800685c:	f7fe fb5a 	bl	8004f14 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d908      	bls.n	800687c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e146      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>
 800686e:	bf00      	nop
 8006870:	40021000 	.word	0x40021000
 8006874:	42420000 	.word	0x42420000
 8006878:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800687c:	4b92      	ldr	r3, [pc, #584]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 800687e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e9      	bne.n	800685c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 80a6 	beq.w	80069e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006896:	2300      	movs	r3, #0
 8006898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800689a:	4b8b      	ldr	r3, [pc, #556]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10d      	bne.n	80068c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068a6:	4b88      	ldr	r3, [pc, #544]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	4a87      	ldr	r2, [pc, #540]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 80068ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068b0:	61d3      	str	r3, [r2, #28]
 80068b2:	4b85      	ldr	r3, [pc, #532]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ba:	60bb      	str	r3, [r7, #8]
 80068bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068be:	2301      	movs	r3, #1
 80068c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068c2:	4b82      	ldr	r3, [pc, #520]	@ (8006acc <HAL_RCC_OscConfig+0x4c8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d118      	bne.n	8006900 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068ce:	4b7f      	ldr	r3, [pc, #508]	@ (8006acc <HAL_RCC_OscConfig+0x4c8>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a7e      	ldr	r2, [pc, #504]	@ (8006acc <HAL_RCC_OscConfig+0x4c8>)
 80068d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068da:	f7fe fb1b 	bl	8004f14 <HAL_GetTick>
 80068de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068e0:	e008      	b.n	80068f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e2:	f7fe fb17 	bl	8004f14 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b64      	cmp	r3, #100	@ 0x64
 80068ee:	d901      	bls.n	80068f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e103      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068f4:	4b75      	ldr	r3, [pc, #468]	@ (8006acc <HAL_RCC_OscConfig+0x4c8>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d0f0      	beq.n	80068e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d106      	bne.n	8006916 <HAL_RCC_OscConfig+0x312>
 8006908:	4b6f      	ldr	r3, [pc, #444]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	4a6e      	ldr	r2, [pc, #440]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 800690e:	f043 0301 	orr.w	r3, r3, #1
 8006912:	6213      	str	r3, [r2, #32]
 8006914:	e02d      	b.n	8006972 <HAL_RCC_OscConfig+0x36e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10c      	bne.n	8006938 <HAL_RCC_OscConfig+0x334>
 800691e:	4b6a      	ldr	r3, [pc, #424]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	4a69      	ldr	r2, [pc, #420]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 8006924:	f023 0301 	bic.w	r3, r3, #1
 8006928:	6213      	str	r3, [r2, #32]
 800692a:	4b67      	ldr	r3, [pc, #412]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	4a66      	ldr	r2, [pc, #408]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 8006930:	f023 0304 	bic.w	r3, r3, #4
 8006934:	6213      	str	r3, [r2, #32]
 8006936:	e01c      	b.n	8006972 <HAL_RCC_OscConfig+0x36e>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	2b05      	cmp	r3, #5
 800693e:	d10c      	bne.n	800695a <HAL_RCC_OscConfig+0x356>
 8006940:	4b61      	ldr	r3, [pc, #388]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	4a60      	ldr	r2, [pc, #384]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 8006946:	f043 0304 	orr.w	r3, r3, #4
 800694a:	6213      	str	r3, [r2, #32]
 800694c:	4b5e      	ldr	r3, [pc, #376]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	4a5d      	ldr	r2, [pc, #372]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 8006952:	f043 0301 	orr.w	r3, r3, #1
 8006956:	6213      	str	r3, [r2, #32]
 8006958:	e00b      	b.n	8006972 <HAL_RCC_OscConfig+0x36e>
 800695a:	4b5b      	ldr	r3, [pc, #364]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	4a5a      	ldr	r2, [pc, #360]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 8006960:	f023 0301 	bic.w	r3, r3, #1
 8006964:	6213      	str	r3, [r2, #32]
 8006966:	4b58      	ldr	r3, [pc, #352]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	4a57      	ldr	r2, [pc, #348]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 800696c:	f023 0304 	bic.w	r3, r3, #4
 8006970:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d015      	beq.n	80069a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800697a:	f7fe facb 	bl	8004f14 <HAL_GetTick>
 800697e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006980:	e00a      	b.n	8006998 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006982:	f7fe fac7 	bl	8004f14 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006990:	4293      	cmp	r3, r2
 8006992:	d901      	bls.n	8006998 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e0b1      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006998:	4b4b      	ldr	r3, [pc, #300]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0ee      	beq.n	8006982 <HAL_RCC_OscConfig+0x37e>
 80069a4:	e014      	b.n	80069d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069a6:	f7fe fab5 	bl	8004f14 <HAL_GetTick>
 80069aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ac:	e00a      	b.n	80069c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ae:	f7fe fab1 	bl	8004f14 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069bc:	4293      	cmp	r3, r2
 80069be:	d901      	bls.n	80069c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e09b      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069c4:	4b40      	ldr	r3, [pc, #256]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1ee      	bne.n	80069ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80069d0:	7dfb      	ldrb	r3, [r7, #23]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d105      	bne.n	80069e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069d6:	4b3c      	ldr	r3, [pc, #240]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	4a3b      	ldr	r2, [pc, #236]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 80069dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 8087 	beq.w	8006afa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069ec:	4b36      	ldr	r3, [pc, #216]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f003 030c 	and.w	r3, r3, #12
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d061      	beq.n	8006abc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d146      	bne.n	8006a8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a00:	4b33      	ldr	r3, [pc, #204]	@ (8006ad0 <HAL_RCC_OscConfig+0x4cc>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a06:	f7fe fa85 	bl	8004f14 <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a0e:	f7fe fa81 	bl	8004f14 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e06d      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a20:	4b29      	ldr	r3, [pc, #164]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1f0      	bne.n	8006a0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a34:	d108      	bne.n	8006a48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006a36:	4b24      	ldr	r3, [pc, #144]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	4921      	ldr	r1, [pc, #132]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a48:	4b1f      	ldr	r3, [pc, #124]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a19      	ldr	r1, [r3, #32]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	491b      	ldr	r1, [pc, #108]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a60:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad0 <HAL_RCC_OscConfig+0x4cc>)
 8006a62:	2201      	movs	r2, #1
 8006a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a66:	f7fe fa55 	bl	8004f14 <HAL_GetTick>
 8006a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a6e:	f7fe fa51 	bl	8004f14 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e03d      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a80:	4b11      	ldr	r3, [pc, #68]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0f0      	beq.n	8006a6e <HAL_RCC_OscConfig+0x46a>
 8006a8c:	e035      	b.n	8006afa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a8e:	4b10      	ldr	r3, [pc, #64]	@ (8006ad0 <HAL_RCC_OscConfig+0x4cc>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a94:	f7fe fa3e 	bl	8004f14 <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a9a:	e008      	b.n	8006aae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a9c:	f7fe fa3a 	bl	8004f14 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e026      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006aae:	4b06      	ldr	r3, [pc, #24]	@ (8006ac8 <HAL_RCC_OscConfig+0x4c4>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f0      	bne.n	8006a9c <HAL_RCC_OscConfig+0x498>
 8006aba:	e01e      	b.n	8006afa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d107      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e019      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>
 8006ac8:	40021000 	.word	0x40021000
 8006acc:	40007000 	.word	0x40007000
 8006ad0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8006b04 <HAL_RCC_OscConfig+0x500>)
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d106      	bne.n	8006af6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d001      	beq.n	8006afa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e000      	b.n	8006afc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3718      	adds	r7, #24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40021000 	.word	0x40021000

08006b08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e0d0      	b.n	8006cbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b1c:	4b6a      	ldr	r3, [pc, #424]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d910      	bls.n	8006b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2a:	4b67      	ldr	r3, [pc, #412]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f023 0207 	bic.w	r2, r3, #7
 8006b32:	4965      	ldr	r1, [pc, #404]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3a:	4b63      	ldr	r3, [pc, #396]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d001      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e0b8      	b.n	8006cbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d020      	beq.n	8006b9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d005      	beq.n	8006b70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b64:	4b59      	ldr	r3, [pc, #356]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	4a58      	ldr	r2, [pc, #352]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006b6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006b6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b7c:	4b53      	ldr	r3, [pc, #332]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	4a52      	ldr	r2, [pc, #328]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006b82:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006b86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b88:	4b50      	ldr	r3, [pc, #320]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	494d      	ldr	r1, [pc, #308]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d040      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d107      	bne.n	8006bbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bae:	4b47      	ldr	r3, [pc, #284]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d115      	bne.n	8006be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e07f      	b.n	8006cbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d107      	bne.n	8006bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bc6:	4b41      	ldr	r3, [pc, #260]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d109      	bne.n	8006be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e073      	b.n	8006cbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e06b      	b.n	8006cbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006be6:	4b39      	ldr	r3, [pc, #228]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f023 0203 	bic.w	r2, r3, #3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	4936      	ldr	r1, [pc, #216]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bf8:	f7fe f98c 	bl	8004f14 <HAL_GetTick>
 8006bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bfe:	e00a      	b.n	8006c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c00:	f7fe f988 	bl	8004f14 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e053      	b.n	8006cbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c16:	4b2d      	ldr	r3, [pc, #180]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f003 020c 	and.w	r2, r3, #12
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d1eb      	bne.n	8006c00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c28:	4b27      	ldr	r3, [pc, #156]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0307 	and.w	r3, r3, #7
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d210      	bcs.n	8006c58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c36:	4b24      	ldr	r3, [pc, #144]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f023 0207 	bic.w	r2, r3, #7
 8006c3e:	4922      	ldr	r1, [pc, #136]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c46:	4b20      	ldr	r3, [pc, #128]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d001      	beq.n	8006c58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e032      	b.n	8006cbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d008      	beq.n	8006c76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c64:	4b19      	ldr	r3, [pc, #100]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	4916      	ldr	r1, [pc, #88]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0308 	and.w	r3, r3, #8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d009      	beq.n	8006c96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c82:	4b12      	ldr	r3, [pc, #72]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	490e      	ldr	r1, [pc, #56]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c96:	f000 f821 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	091b      	lsrs	r3, r3, #4
 8006ca2:	f003 030f 	and.w	r3, r3, #15
 8006ca6:	490a      	ldr	r1, [pc, #40]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8006ca8:	5ccb      	ldrb	r3, [r1, r3]
 8006caa:	fa22 f303 	lsr.w	r3, r2, r3
 8006cae:	4a09      	ldr	r2, [pc, #36]	@ (8006cd4 <HAL_RCC_ClockConfig+0x1cc>)
 8006cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006cb2:	4b09      	ldr	r3, [pc, #36]	@ (8006cd8 <HAL_RCC_ClockConfig+0x1d0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fe f8ea 	bl	8004e90 <HAL_InitTick>

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	40022000 	.word	0x40022000
 8006ccc:	40021000 	.word	0x40021000
 8006cd0:	0800ad70 	.word	0x0800ad70
 8006cd4:	2000209c 	.word	0x2000209c
 8006cd8:	200020d0 	.word	0x200020d0

08006cdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60bb      	str	r3, [r7, #8]
 8006cea:	2300      	movs	r3, #0
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d70 <HAL_RCC_GetSysClockFreq+0x94>)
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f003 030c 	and.w	r3, r3, #12
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d002      	beq.n	8006d0c <HAL_RCC_GetSysClockFreq+0x30>
 8006d06:	2b08      	cmp	r3, #8
 8006d08:	d003      	beq.n	8006d12 <HAL_RCC_GetSysClockFreq+0x36>
 8006d0a:	e027      	b.n	8006d5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006d0c:	4b19      	ldr	r3, [pc, #100]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d0e:	613b      	str	r3, [r7, #16]
      break;
 8006d10:	e027      	b.n	8006d62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	0c9b      	lsrs	r3, r3, #18
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	4a17      	ldr	r2, [pc, #92]	@ (8006d78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006d1c:	5cd3      	ldrb	r3, [r2, r3]
 8006d1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d010      	beq.n	8006d4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d2a:	4b11      	ldr	r3, [pc, #68]	@ (8006d70 <HAL_RCC_GetSysClockFreq+0x94>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	0c5b      	lsrs	r3, r3, #17
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	4a11      	ldr	r2, [pc, #68]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006d36:	5cd3      	ldrb	r3, [r2, r3]
 8006d38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d3e:	fb03 f202 	mul.w	r2, r3, r2
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	e004      	b.n	8006d56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006d50:	fb02 f303 	mul.w	r3, r2, r3
 8006d54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	613b      	str	r3, [r7, #16]
      break;
 8006d5a:	e002      	b.n	8006d62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d5c:	4b05      	ldr	r3, [pc, #20]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d5e:	613b      	str	r3, [r7, #16]
      break;
 8006d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d62:	693b      	ldr	r3, [r7, #16]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	371c      	adds	r7, #28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bc80      	pop	{r7}
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	40021000 	.word	0x40021000
 8006d74:	007a1200 	.word	0x007a1200
 8006d78:	0800ad88 	.word	0x0800ad88
 8006d7c:	0800ad98 	.word	0x0800ad98
 8006d80:	003d0900 	.word	0x003d0900

08006d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d88:	4b02      	ldr	r3, [pc, #8]	@ (8006d94 <HAL_RCC_GetHCLKFreq+0x10>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bc80      	pop	{r7}
 8006d92:	4770      	bx	lr
 8006d94:	2000209c 	.word	0x2000209c

08006d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d9c:	f7ff fff2 	bl	8006d84 <HAL_RCC_GetHCLKFreq>
 8006da0:	4602      	mov	r2, r0
 8006da2:	4b05      	ldr	r3, [pc, #20]	@ (8006db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	0adb      	lsrs	r3, r3, #11
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	4903      	ldr	r1, [pc, #12]	@ (8006dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dae:	5ccb      	ldrb	r3, [r1, r3]
 8006db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40021000 	.word	0x40021000
 8006dbc:	0800ad80 	.word	0x0800ad80

08006dc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8006df4 <RCC_Delay+0x34>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8006df8 <RCC_Delay+0x38>)
 8006dce:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd2:	0a5b      	lsrs	r3, r3, #9
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	fb02 f303 	mul.w	r3, r2, r3
 8006dda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006ddc:	bf00      	nop
  }
  while (Delay --);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	1e5a      	subs	r2, r3, #1
 8006de2:	60fa      	str	r2, [r7, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1f9      	bne.n	8006ddc <RCC_Delay+0x1c>
}
 8006de8:	bf00      	nop
 8006dea:	bf00      	nop
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bc80      	pop	{r7}
 8006df2:	4770      	bx	lr
 8006df4:	2000209c 	.word	0x2000209c
 8006df8:	10624dd3 	.word	0x10624dd3

08006dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	613b      	str	r3, [r7, #16]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d07d      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e1c:	4b4f      	ldr	r3, [pc, #316]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10d      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e28:	4b4c      	ldr	r3, [pc, #304]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	4a4b      	ldr	r2, [pc, #300]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e32:	61d3      	str	r3, [r2, #28]
 8006e34:	4b49      	ldr	r3, [pc, #292]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e3c:	60bb      	str	r3, [r7, #8]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e40:	2301      	movs	r3, #1
 8006e42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e44:	4b46      	ldr	r3, [pc, #280]	@ (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d118      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e50:	4b43      	ldr	r3, [pc, #268]	@ (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a42      	ldr	r2, [pc, #264]	@ (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e5c:	f7fe f85a 	bl	8004f14 <HAL_GetTick>
 8006e60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e62:	e008      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e64:	f7fe f856 	bl	8004f14 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b64      	cmp	r3, #100	@ 0x64
 8006e70:	d901      	bls.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e06d      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e76:	4b3a      	ldr	r3, [pc, #232]	@ (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0f0      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e82:	4b36      	ldr	r3, [pc, #216]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d02e      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d027      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ea8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006eac:	2201      	movs	r2, #1
 8006eae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006eb0:	4b2c      	ldr	r3, [pc, #176]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006eb6:	4a29      	ldr	r2, [pc, #164]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d014      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ec6:	f7fe f825 	bl	8004f14 <HAL_GetTick>
 8006eca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ecc:	e00a      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ece:	f7fe f821 	bl	8004f14 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d901      	bls.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e036      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0ee      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	4917      	ldr	r1, [pc, #92]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d105      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f08:	4b14      	ldr	r3, [pc, #80]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	4a13      	ldr	r2, [pc, #76]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d008      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f20:	4b0e      	ldr	r3, [pc, #56]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	490b      	ldr	r1, [pc, #44]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0310 	and.w	r3, r3, #16
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d008      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f3e:	4b07      	ldr	r3, [pc, #28]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	4904      	ldr	r1, [pc, #16]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	40021000 	.word	0x40021000
 8006f60:	40007000 	.word	0x40007000
 8006f64:	42420440 	.word	0x42420440

08006f68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
 8006f74:	2300      	movs	r3, #0
 8006f76:	61fb      	str	r3, [r7, #28]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	2300      	movs	r3, #0
 8006f82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	2b0f      	cmp	r3, #15
 8006f8a:	f200 80af 	bhi.w	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8006f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f94:	0800706b 	.word	0x0800706b
 8006f98:	080070d1 	.word	0x080070d1
 8006f9c:	080070ed 	.word	0x080070ed
 8006fa0:	0800705b 	.word	0x0800705b
 8006fa4:	080070ed 	.word	0x080070ed
 8006fa8:	080070ed 	.word	0x080070ed
 8006fac:	080070ed 	.word	0x080070ed
 8006fb0:	08007063 	.word	0x08007063
 8006fb4:	080070ed 	.word	0x080070ed
 8006fb8:	080070ed 	.word	0x080070ed
 8006fbc:	080070ed 	.word	0x080070ed
 8006fc0:	080070ed 	.word	0x080070ed
 8006fc4:	080070ed 	.word	0x080070ed
 8006fc8:	080070ed 	.word	0x080070ed
 8006fcc:	080070ed 	.word	0x080070ed
 8006fd0:	08006fd5 	.word	0x08006fd5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8006fd4:	4b4a      	ldr	r3, [pc, #296]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006fda:	4b49      	ldr	r3, [pc, #292]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 8084 	beq.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	0c9b      	lsrs	r3, r3, #18
 8006fec:	f003 030f 	and.w	r3, r3, #15
 8006ff0:	4a44      	ldr	r2, [pc, #272]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8006ff2:	5cd3      	ldrb	r3, [r2, r3]
 8006ff4:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d015      	beq.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007000:	4b3f      	ldr	r3, [pc, #252]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	0c5b      	lsrs	r3, r3, #17
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	4a3f      	ldr	r2, [pc, #252]	@ (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800700c:	5cd3      	ldrb	r3, [r2, r3]
 800700e:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00d      	beq.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800701a:	4a3c      	ldr	r2, [pc, #240]	@ (800710c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	fb02 f303 	mul.w	r3, r2, r3
 8007028:	61fb      	str	r3, [r7, #28]
 800702a:	e004      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	4a38      	ldr	r2, [pc, #224]	@ (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8007030:	fb02 f303 	mul.w	r3, r2, r3
 8007034:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007036:	4b32      	ldr	r3, [pc, #200]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800703e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007042:	d102      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8007048:	e052      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	4a31      	ldr	r2, [pc, #196]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8007050:	fba2 2303 	umull	r2, r3, r2, r3
 8007054:	085b      	lsrs	r3, r3, #1
 8007056:	61bb      	str	r3, [r7, #24]
      break;
 8007058:	e04a      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800705a:	f7ff fe3f 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
 800705e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007060:	e049      	b.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8007062:	f7ff fe3b 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
 8007066:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007068:	e045      	b.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800706a:	4b25      	ldr	r3, [pc, #148]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800707a:	d108      	bne.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d003      	beq.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8007086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800708a:	61bb      	str	r3, [r7, #24]
 800708c:	e01f      	b.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007098:	d109      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800709a:	4b19      	ldr	r3, [pc, #100]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80070a6:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80070aa:	61bb      	str	r3, [r7, #24]
 80070ac:	e00f      	b.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070b8:	d11c      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80070ba:	4b11      	ldr	r3, [pc, #68]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d016      	beq.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 80070c6:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80070ca:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80070cc:	e012      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80070ce:	e011      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80070d0:	f7ff fe62 	bl	8006d98 <HAL_RCC_GetPCLK2Freq>
 80070d4:	4602      	mov	r2, r0
 80070d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	0b9b      	lsrs	r3, r3, #14
 80070dc:	f003 0303 	and.w	r3, r3, #3
 80070e0:	3301      	adds	r3, #1
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e8:	61bb      	str	r3, [r7, #24]
      break;
 80070ea:	e004      	b.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 80070ec:	bf00      	nop
 80070ee:	e002      	b.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80070f0:	bf00      	nop
 80070f2:	e000      	b.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80070f4:	bf00      	nop
    }
  }
  return (frequency);
 80070f6:	69bb      	ldr	r3, [r7, #24]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3720      	adds	r7, #32
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40021000 	.word	0x40021000
 8007104:	0800ad9c 	.word	0x0800ad9c
 8007108:	0800adac 	.word	0x0800adac
 800710c:	007a1200 	.word	0x007a1200
 8007110:	003d0900 	.word	0x003d0900
 8007114:	aaaaaaab 	.word	0xaaaaaaab

08007118 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d004      	beq.n	8007134 <HAL_SRAM_Init+0x1c>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007132:	d101      	bne.n	8007138 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e038      	b.n	80071aa <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d106      	bne.n	8007152 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f7fc ff95 	bl	800407c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3308      	adds	r3, #8
 800715a:	4619      	mov	r1, r3
 800715c:	4610      	mov	r0, r2
 800715e:	f000 fff1 	bl	8008144 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	461a      	mov	r2, r3
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	f001 f853 	bl	8008218 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6858      	ldr	r0, [r3, #4]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	f001 f878 	bl	8008274 <FSMC_NORSRAM_Extended_Timing_Init>
                                          hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	6892      	ldr	r2, [r2, #8]
 800718c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	6892      	ldr	r2, [r2, #8]
 8007198:	f041 0101 	orr.w	r1, r1, #1
 800719c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e041      	b.n	8007248 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d106      	bne.n	80071de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7fc feb1 	bl	8003f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	3304      	adds	r3, #4
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f000 fc3d 	bl	8007a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b01      	cmp	r3, #1
 8007262:	d001      	beq.n	8007268 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e03c      	b.n	80072e2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a1d      	ldr	r2, [pc, #116]	@ (80072ec <HAL_TIM_Base_Start+0x9c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d018      	beq.n	80072ac <HAL_TIM_Base_Start+0x5c>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a1c      	ldr	r2, [pc, #112]	@ (80072f0 <HAL_TIM_Base_Start+0xa0>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d013      	beq.n	80072ac <HAL_TIM_Base_Start+0x5c>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800728c:	d00e      	beq.n	80072ac <HAL_TIM_Base_Start+0x5c>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a18      	ldr	r2, [pc, #96]	@ (80072f4 <HAL_TIM_Base_Start+0xa4>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d009      	beq.n	80072ac <HAL_TIM_Base_Start+0x5c>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a16      	ldr	r2, [pc, #88]	@ (80072f8 <HAL_TIM_Base_Start+0xa8>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d004      	beq.n	80072ac <HAL_TIM_Base_Start+0x5c>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a15      	ldr	r2, [pc, #84]	@ (80072fc <HAL_TIM_Base_Start+0xac>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d111      	bne.n	80072d0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f003 0307 	and.w	r3, r3, #7
 80072b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b06      	cmp	r3, #6
 80072bc:	d010      	beq.n	80072e0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f042 0201 	orr.w	r2, r2, #1
 80072cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ce:	e007      	b.n	80072e0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f042 0201 	orr.w	r2, r2, #1
 80072de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bc80      	pop	{r7}
 80072ea:	4770      	bx	lr
 80072ec:	40012c00 	.word	0x40012c00
 80072f0:	40013400 	.word	0x40013400
 80072f4:	40000400 	.word	0x40000400
 80072f8:	40000800 	.word	0x40000800
 80072fc:	40000c00 	.word	0x40000c00

08007300 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e041      	b.n	8007396 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d106      	bne.n	800732c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f839 	bl	800739e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3304      	adds	r3, #4
 800733c:	4619      	mov	r1, r3
 800733e:	4610      	mov	r0, r2
 8007340:	f000 fb96 	bl	8007a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bc80      	pop	{r7}
 80073ae:	4770      	bx	lr

080073b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d109      	bne.n	80073d4 <HAL_TIM_PWM_Start+0x24>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	bf14      	ite	ne
 80073cc:	2301      	movne	r3, #1
 80073ce:	2300      	moveq	r3, #0
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	e022      	b.n	800741a <HAL_TIM_PWM_Start+0x6a>
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	d109      	bne.n	80073ee <HAL_TIM_PWM_Start+0x3e>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	bf14      	ite	ne
 80073e6:	2301      	movne	r3, #1
 80073e8:	2300      	moveq	r3, #0
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	e015      	b.n	800741a <HAL_TIM_PWM_Start+0x6a>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b08      	cmp	r3, #8
 80073f2:	d109      	bne.n	8007408 <HAL_TIM_PWM_Start+0x58>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	bf14      	ite	ne
 8007400:	2301      	movne	r3, #1
 8007402:	2300      	moveq	r3, #0
 8007404:	b2db      	uxtb	r3, r3
 8007406:	e008      	b.n	800741a <HAL_TIM_PWM_Start+0x6a>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b01      	cmp	r3, #1
 8007412:	bf14      	ite	ne
 8007414:	2301      	movne	r3, #1
 8007416:	2300      	moveq	r3, #0
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e072      	b.n	8007508 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d104      	bne.n	8007432 <HAL_TIM_PWM_Start+0x82>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2202      	movs	r2, #2
 800742c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007430:	e013      	b.n	800745a <HAL_TIM_PWM_Start+0xaa>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b04      	cmp	r3, #4
 8007436:	d104      	bne.n	8007442 <HAL_TIM_PWM_Start+0x92>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2202      	movs	r2, #2
 800743c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007440:	e00b      	b.n	800745a <HAL_TIM_PWM_Start+0xaa>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b08      	cmp	r3, #8
 8007446:	d104      	bne.n	8007452 <HAL_TIM_PWM_Start+0xa2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007450:	e003      	b.n	800745a <HAL_TIM_PWM_Start+0xaa>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2202      	movs	r2, #2
 8007456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2201      	movs	r2, #1
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	4618      	mov	r0, r3
 8007464:	f000 fdcc 	bl	8008000 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a28      	ldr	r2, [pc, #160]	@ (8007510 <HAL_TIM_PWM_Start+0x160>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d004      	beq.n	800747c <HAL_TIM_PWM_Start+0xcc>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a27      	ldr	r2, [pc, #156]	@ (8007514 <HAL_TIM_PWM_Start+0x164>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d101      	bne.n	8007480 <HAL_TIM_PWM_Start+0xd0>
 800747c:	2301      	movs	r3, #1
 800747e:	e000      	b.n	8007482 <HAL_TIM_PWM_Start+0xd2>
 8007480:	2300      	movs	r3, #0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d007      	beq.n	8007496 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007494:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a1d      	ldr	r2, [pc, #116]	@ (8007510 <HAL_TIM_PWM_Start+0x160>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d018      	beq.n	80074d2 <HAL_TIM_PWM_Start+0x122>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007514 <HAL_TIM_PWM_Start+0x164>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d013      	beq.n	80074d2 <HAL_TIM_PWM_Start+0x122>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074b2:	d00e      	beq.n	80074d2 <HAL_TIM_PWM_Start+0x122>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a17      	ldr	r2, [pc, #92]	@ (8007518 <HAL_TIM_PWM_Start+0x168>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d009      	beq.n	80074d2 <HAL_TIM_PWM_Start+0x122>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a16      	ldr	r2, [pc, #88]	@ (800751c <HAL_TIM_PWM_Start+0x16c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d004      	beq.n	80074d2 <HAL_TIM_PWM_Start+0x122>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a14      	ldr	r2, [pc, #80]	@ (8007520 <HAL_TIM_PWM_Start+0x170>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d111      	bne.n	80074f6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b06      	cmp	r3, #6
 80074e2:	d010      	beq.n	8007506 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0201 	orr.w	r2, r2, #1
 80074f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f4:	e007      	b.n	8007506 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f042 0201 	orr.w	r2, r2, #1
 8007504:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	40012c00 	.word	0x40012c00
 8007514:	40013400 	.word	0x40013400
 8007518:	40000400 	.word	0x40000400
 800751c:	40000800 	.word	0x40000800
 8007520:	40000c00 	.word	0x40000c00

08007524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	2b00      	cmp	r3, #0
 8007544:	d020      	beq.n	8007588 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01b      	beq.n	8007588 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0202 	mvn.w	r2, #2
 8007558:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa63 	bl	8007a3a <HAL_TIM_IC_CaptureCallback>
 8007574:	e005      	b.n	8007582 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fa56 	bl	8007a28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fa65 	bl	8007a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f003 0304 	and.w	r3, r3, #4
 800758e:	2b00      	cmp	r3, #0
 8007590:	d020      	beq.n	80075d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b00      	cmp	r3, #0
 800759a:	d01b      	beq.n	80075d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f06f 0204 	mvn.w	r2, #4
 80075a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2202      	movs	r2, #2
 80075aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fa3d 	bl	8007a3a <HAL_TIM_IC_CaptureCallback>
 80075c0:	e005      	b.n	80075ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fa30 	bl	8007a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fa3f 	bl	8007a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f003 0308 	and.w	r3, r3, #8
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d020      	beq.n	8007620 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f003 0308 	and.w	r3, r3, #8
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01b      	beq.n	8007620 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f06f 0208 	mvn.w	r2, #8
 80075f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2204      	movs	r2, #4
 80075f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f003 0303 	and.w	r3, r3, #3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fa17 	bl	8007a3a <HAL_TIM_IC_CaptureCallback>
 800760c:	e005      	b.n	800761a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fa0a 	bl	8007a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fa19 	bl	8007a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f003 0310 	and.w	r3, r3, #16
 8007626:	2b00      	cmp	r3, #0
 8007628:	d020      	beq.n	800766c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f003 0310 	and.w	r3, r3, #16
 8007630:	2b00      	cmp	r3, #0
 8007632:	d01b      	beq.n	800766c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f06f 0210 	mvn.w	r2, #16
 800763c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2208      	movs	r2, #8
 8007642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f9f1 	bl	8007a3a <HAL_TIM_IC_CaptureCallback>
 8007658:	e005      	b.n	8007666 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f9e4 	bl	8007a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f9f3 	bl	8007a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00c      	beq.n	8007690 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d007      	beq.n	8007690 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f06f 0201 	mvn.w	r2, #1
 8007688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f9c3 	bl	8007a16 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00c      	beq.n	80076b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d007      	beq.n	80076b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80076ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fd3f 	bl	8008132 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00c      	beq.n	80076d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d007      	beq.n	80076d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80076d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f9c3 	bl	8007a5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	f003 0320 	and.w	r3, r3, #32
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00c      	beq.n	80076fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d007      	beq.n	80076fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f06f 0220 	mvn.w	r2, #32
 80076f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fd12 	bl	8008120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076fc:	bf00      	nop
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007710:	2300      	movs	r3, #0
 8007712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800771e:	2302      	movs	r3, #2
 8007720:	e0ae      	b.n	8007880 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b0c      	cmp	r3, #12
 800772e:	f200 809f 	bhi.w	8007870 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007732:	a201      	add	r2, pc, #4	@ (adr r2, 8007738 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	0800776d 	.word	0x0800776d
 800773c:	08007871 	.word	0x08007871
 8007740:	08007871 	.word	0x08007871
 8007744:	08007871 	.word	0x08007871
 8007748:	080077ad 	.word	0x080077ad
 800774c:	08007871 	.word	0x08007871
 8007750:	08007871 	.word	0x08007871
 8007754:	08007871 	.word	0x08007871
 8007758:	080077ef 	.word	0x080077ef
 800775c:	08007871 	.word	0x08007871
 8007760:	08007871 	.word	0x08007871
 8007764:	08007871 	.word	0x08007871
 8007768:	0800782f 	.word	0x0800782f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68b9      	ldr	r1, [r7, #8]
 8007772:	4618      	mov	r0, r3
 8007774:	f000 fa02 	bl	8007b7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	699a      	ldr	r2, [r3, #24]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0208 	orr.w	r2, r2, #8
 8007786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	699a      	ldr	r2, [r3, #24]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0204 	bic.w	r2, r2, #4
 8007796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6999      	ldr	r1, [r3, #24]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	691a      	ldr	r2, [r3, #16]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	619a      	str	r2, [r3, #24]
      break;
 80077aa:	e064      	b.n	8007876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68b9      	ldr	r1, [r7, #8]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 fa52 	bl	8007c5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699a      	ldr	r2, [r3, #24]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6999      	ldr	r1, [r3, #24]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	021a      	lsls	r2, r3, #8
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	619a      	str	r2, [r3, #24]
      break;
 80077ec:	e043      	b.n	8007876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68b9      	ldr	r1, [r7, #8]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 faa5 	bl	8007d44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69da      	ldr	r2, [r3, #28]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f042 0208 	orr.w	r2, r2, #8
 8007808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69da      	ldr	r2, [r3, #28]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 0204 	bic.w	r2, r2, #4
 8007818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69d9      	ldr	r1, [r3, #28]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	61da      	str	r2, [r3, #28]
      break;
 800782c:	e023      	b.n	8007876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68b9      	ldr	r1, [r7, #8]
 8007834:	4618      	mov	r0, r3
 8007836:	f000 faf9 	bl	8007e2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69da      	ldr	r2, [r3, #28]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69da      	ldr	r2, [r3, #28]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	69d9      	ldr	r1, [r3, #28]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	021a      	lsls	r2, r3, #8
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	61da      	str	r2, [r3, #28]
      break;
 800786e:	e002      	b.n	8007876 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	75fb      	strb	r3, [r7, #23]
      break;
 8007874:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800787e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800789c:	2b01      	cmp	r3, #1
 800789e:	d101      	bne.n	80078a4 <HAL_TIM_ConfigClockSource+0x1c>
 80078a0:	2302      	movs	r3, #2
 80078a2:	e0b4      	b.n	8007a0e <HAL_TIM_ConfigClockSource+0x186>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80078c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078dc:	d03e      	beq.n	800795c <HAL_TIM_ConfigClockSource+0xd4>
 80078de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078e2:	f200 8087 	bhi.w	80079f4 <HAL_TIM_ConfigClockSource+0x16c>
 80078e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ea:	f000 8086 	beq.w	80079fa <HAL_TIM_ConfigClockSource+0x172>
 80078ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078f2:	d87f      	bhi.n	80079f4 <HAL_TIM_ConfigClockSource+0x16c>
 80078f4:	2b70      	cmp	r3, #112	@ 0x70
 80078f6:	d01a      	beq.n	800792e <HAL_TIM_ConfigClockSource+0xa6>
 80078f8:	2b70      	cmp	r3, #112	@ 0x70
 80078fa:	d87b      	bhi.n	80079f4 <HAL_TIM_ConfigClockSource+0x16c>
 80078fc:	2b60      	cmp	r3, #96	@ 0x60
 80078fe:	d050      	beq.n	80079a2 <HAL_TIM_ConfigClockSource+0x11a>
 8007900:	2b60      	cmp	r3, #96	@ 0x60
 8007902:	d877      	bhi.n	80079f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007904:	2b50      	cmp	r3, #80	@ 0x50
 8007906:	d03c      	beq.n	8007982 <HAL_TIM_ConfigClockSource+0xfa>
 8007908:	2b50      	cmp	r3, #80	@ 0x50
 800790a:	d873      	bhi.n	80079f4 <HAL_TIM_ConfigClockSource+0x16c>
 800790c:	2b40      	cmp	r3, #64	@ 0x40
 800790e:	d058      	beq.n	80079c2 <HAL_TIM_ConfigClockSource+0x13a>
 8007910:	2b40      	cmp	r3, #64	@ 0x40
 8007912:	d86f      	bhi.n	80079f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007914:	2b30      	cmp	r3, #48	@ 0x30
 8007916:	d064      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007918:	2b30      	cmp	r3, #48	@ 0x30
 800791a:	d86b      	bhi.n	80079f4 <HAL_TIM_ConfigClockSource+0x16c>
 800791c:	2b20      	cmp	r3, #32
 800791e:	d060      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007920:	2b20      	cmp	r3, #32
 8007922:	d867      	bhi.n	80079f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007924:	2b00      	cmp	r3, #0
 8007926:	d05c      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007928:	2b10      	cmp	r3, #16
 800792a:	d05a      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0x15a>
 800792c:	e062      	b.n	80079f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800793e:	f000 fb40 	bl	8007fc2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007950:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	609a      	str	r2, [r3, #8]
      break;
 800795a:	e04f      	b.n	80079fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800796c:	f000 fb29 	bl	8007fc2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689a      	ldr	r2, [r3, #8]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800797e:	609a      	str	r2, [r3, #8]
      break;
 8007980:	e03c      	b.n	80079fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800798e:	461a      	mov	r2, r3
 8007990:	f000 faa0 	bl	8007ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2150      	movs	r1, #80	@ 0x50
 800799a:	4618      	mov	r0, r3
 800799c:	f000 faf7 	bl	8007f8e <TIM_ITRx_SetConfig>
      break;
 80079a0:	e02c      	b.n	80079fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079ae:	461a      	mov	r2, r3
 80079b0:	f000 fabe 	bl	8007f30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2160      	movs	r1, #96	@ 0x60
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 fae7 	bl	8007f8e <TIM_ITRx_SetConfig>
      break;
 80079c0:	e01c      	b.n	80079fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ce:	461a      	mov	r2, r3
 80079d0:	f000 fa80 	bl	8007ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2140      	movs	r1, #64	@ 0x40
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 fad7 	bl	8007f8e <TIM_ITRx_SetConfig>
      break;
 80079e0:	e00c      	b.n	80079fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4619      	mov	r1, r3
 80079ec:	4610      	mov	r0, r2
 80079ee:	f000 face 	bl	8007f8e <TIM_ITRx_SetConfig>
      break;
 80079f2:	e003      	b.n	80079fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	73fb      	strb	r3, [r7, #15]
      break;
 80079f8:	e000      	b.n	80079fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a1e:	bf00      	nop
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bc80      	pop	{r7}
 8007a26:	4770      	bx	lr

08007a28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bc80      	pop	{r7}
 8007a38:	4770      	bx	lr

08007a3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a42:	bf00      	nop
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bc80      	pop	{r7}
 8007a4a:	4770      	bx	lr

08007a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bc80      	pop	{r7}
 8007a5c:	4770      	bx	lr

08007a5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bc80      	pop	{r7}
 8007a6e:	4770      	bx	lr

08007a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a39      	ldr	r2, [pc, #228]	@ (8007b68 <TIM_Base_SetConfig+0xf8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d013      	beq.n	8007ab0 <TIM_Base_SetConfig+0x40>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a38      	ldr	r2, [pc, #224]	@ (8007b6c <TIM_Base_SetConfig+0xfc>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d00f      	beq.n	8007ab0 <TIM_Base_SetConfig+0x40>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a96:	d00b      	beq.n	8007ab0 <TIM_Base_SetConfig+0x40>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a35      	ldr	r2, [pc, #212]	@ (8007b70 <TIM_Base_SetConfig+0x100>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d007      	beq.n	8007ab0 <TIM_Base_SetConfig+0x40>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a34      	ldr	r2, [pc, #208]	@ (8007b74 <TIM_Base_SetConfig+0x104>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d003      	beq.n	8007ab0 <TIM_Base_SetConfig+0x40>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a33      	ldr	r2, [pc, #204]	@ (8007b78 <TIM_Base_SetConfig+0x108>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d108      	bne.n	8007ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a28      	ldr	r2, [pc, #160]	@ (8007b68 <TIM_Base_SetConfig+0xf8>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d013      	beq.n	8007af2 <TIM_Base_SetConfig+0x82>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a27      	ldr	r2, [pc, #156]	@ (8007b6c <TIM_Base_SetConfig+0xfc>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d00f      	beq.n	8007af2 <TIM_Base_SetConfig+0x82>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ad8:	d00b      	beq.n	8007af2 <TIM_Base_SetConfig+0x82>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a24      	ldr	r2, [pc, #144]	@ (8007b70 <TIM_Base_SetConfig+0x100>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d007      	beq.n	8007af2 <TIM_Base_SetConfig+0x82>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a23      	ldr	r2, [pc, #140]	@ (8007b74 <TIM_Base_SetConfig+0x104>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d003      	beq.n	8007af2 <TIM_Base_SetConfig+0x82>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a22      	ldr	r2, [pc, #136]	@ (8007b78 <TIM_Base_SetConfig+0x108>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d108      	bne.n	8007b04 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	689a      	ldr	r2, [r3, #8]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8007b68 <TIM_Base_SetConfig+0xf8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d003      	beq.n	8007b38 <TIM_Base_SetConfig+0xc8>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a0e      	ldr	r2, [pc, #56]	@ (8007b6c <TIM_Base_SetConfig+0xfc>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d103      	bne.n	8007b40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	691a      	ldr	r2, [r3, #16]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d005      	beq.n	8007b5e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	f023 0201 	bic.w	r2, r3, #1
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	611a      	str	r2, [r3, #16]
  }
}
 8007b5e:	bf00      	nop
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bc80      	pop	{r7}
 8007b66:	4770      	bx	lr
 8007b68:	40012c00 	.word	0x40012c00
 8007b6c:	40013400 	.word	0x40013400
 8007b70:	40000400 	.word	0x40000400
 8007b74:	40000800 	.word	0x40000800
 8007b78:	40000c00 	.word	0x40000c00

08007b7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	f023 0201 	bic.w	r2, r3, #1
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0303 	bic.w	r3, r3, #3
 8007bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f023 0302 	bic.w	r3, r3, #2
 8007bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a20      	ldr	r2, [pc, #128]	@ (8007c54 <TIM_OC1_SetConfig+0xd8>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d003      	beq.n	8007be0 <TIM_OC1_SetConfig+0x64>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a1f      	ldr	r2, [pc, #124]	@ (8007c58 <TIM_OC1_SetConfig+0xdc>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d10c      	bne.n	8007bfa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f023 0308 	bic.w	r3, r3, #8
 8007be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f023 0304 	bic.w	r3, r3, #4
 8007bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a15      	ldr	r2, [pc, #84]	@ (8007c54 <TIM_OC1_SetConfig+0xd8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d003      	beq.n	8007c0a <TIM_OC1_SetConfig+0x8e>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a14      	ldr	r2, [pc, #80]	@ (8007c58 <TIM_OC1_SetConfig+0xdc>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d111      	bne.n	8007c2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	621a      	str	r2, [r3, #32]
}
 8007c48:	bf00      	nop
 8007c4a:	371c      	adds	r7, #28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bc80      	pop	{r7}
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	40012c00 	.word	0x40012c00
 8007c58:	40013400 	.word	0x40013400

08007c5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	f023 0210 	bic.w	r2, r3, #16
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	021b      	lsls	r3, r3, #8
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f023 0320 	bic.w	r3, r3, #32
 8007ca6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	011b      	lsls	r3, r3, #4
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a21      	ldr	r2, [pc, #132]	@ (8007d3c <TIM_OC2_SetConfig+0xe0>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d003      	beq.n	8007cc4 <TIM_OC2_SetConfig+0x68>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a20      	ldr	r2, [pc, #128]	@ (8007d40 <TIM_OC2_SetConfig+0xe4>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d10d      	bne.n	8007ce0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a16      	ldr	r2, [pc, #88]	@ (8007d3c <TIM_OC2_SetConfig+0xe0>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d003      	beq.n	8007cf0 <TIM_OC2_SetConfig+0x94>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a15      	ldr	r2, [pc, #84]	@ (8007d40 <TIM_OC2_SetConfig+0xe4>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d113      	bne.n	8007d18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	621a      	str	r2, [r3, #32]
}
 8007d32:	bf00      	nop
 8007d34:	371c      	adds	r7, #28
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bc80      	pop	{r7}
 8007d3a:	4770      	bx	lr
 8007d3c:	40012c00 	.word	0x40012c00
 8007d40:	40013400 	.word	0x40013400

08007d44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f023 0303 	bic.w	r3, r3, #3
 8007d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	021b      	lsls	r3, r3, #8
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a21      	ldr	r2, [pc, #132]	@ (8007e24 <TIM_OC3_SetConfig+0xe0>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d003      	beq.n	8007daa <TIM_OC3_SetConfig+0x66>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a20      	ldr	r2, [pc, #128]	@ (8007e28 <TIM_OC3_SetConfig+0xe4>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d10d      	bne.n	8007dc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007db0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	021b      	lsls	r3, r3, #8
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a16      	ldr	r2, [pc, #88]	@ (8007e24 <TIM_OC3_SetConfig+0xe0>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d003      	beq.n	8007dd6 <TIM_OC3_SetConfig+0x92>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a15      	ldr	r2, [pc, #84]	@ (8007e28 <TIM_OC3_SetConfig+0xe4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d113      	bne.n	8007dfe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	011b      	lsls	r3, r3, #4
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	011b      	lsls	r3, r3, #4
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	621a      	str	r2, [r3, #32]
}
 8007e18:	bf00      	nop
 8007e1a:	371c      	adds	r7, #28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bc80      	pop	{r7}
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	40012c00 	.word	0x40012c00
 8007e28:	40013400 	.word	0x40013400

08007e2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	021b      	lsls	r3, r3, #8
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	031b      	lsls	r3, r3, #12
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a11      	ldr	r2, [pc, #68]	@ (8007ecc <TIM_OC4_SetConfig+0xa0>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d003      	beq.n	8007e94 <TIM_OC4_SetConfig+0x68>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a10      	ldr	r2, [pc, #64]	@ (8007ed0 <TIM_OC4_SetConfig+0xa4>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d109      	bne.n	8007ea8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	019b      	lsls	r3, r3, #6
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	621a      	str	r2, [r3, #32]
}
 8007ec2:	bf00      	nop
 8007ec4:	371c      	adds	r7, #28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bc80      	pop	{r7}
 8007eca:	4770      	bx	lr
 8007ecc:	40012c00 	.word	0x40012c00
 8007ed0:	40013400 	.word	0x40013400

08007ed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	f023 0201 	bic.w	r2, r3, #1
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f023 030a 	bic.w	r3, r3, #10
 8007f10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	621a      	str	r2, [r3, #32]
}
 8007f26:	bf00      	nop
 8007f28:	371c      	adds	r7, #28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bc80      	pop	{r7}
 8007f2e:	4770      	bx	lr

08007f30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	f023 0210 	bic.w	r2, r3, #16
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	031b      	lsls	r3, r3, #12
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	621a      	str	r2, [r3, #32]
}
 8007f84:	bf00      	nop
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bc80      	pop	{r7}
 8007f8c:	4770      	bx	lr

08007f8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b085      	sub	sp, #20
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	f043 0307 	orr.w	r3, r3, #7
 8007fb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	609a      	str	r2, [r3, #8]
}
 8007fb8:	bf00      	nop
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bc80      	pop	{r7}
 8007fc0:	4770      	bx	lr

08007fc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b087      	sub	sp, #28
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	607a      	str	r2, [r7, #4]
 8007fce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	021a      	lsls	r2, r3, #8
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	609a      	str	r2, [r3, #8]
}
 8007ff6:	bf00      	nop
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bc80      	pop	{r7}
 8007ffe:	4770      	bx	lr

08008000 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008000:	b480      	push	{r7}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f003 031f 	and.w	r3, r3, #31
 8008012:	2201      	movs	r2, #1
 8008014:	fa02 f303 	lsl.w	r3, r2, r3
 8008018:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6a1a      	ldr	r2, [r3, #32]
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	43db      	mvns	r3, r3
 8008022:	401a      	ands	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6a1a      	ldr	r2, [r3, #32]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f003 031f 	and.w	r3, r3, #31
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	fa01 f303 	lsl.w	r3, r1, r3
 8008038:	431a      	orrs	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	621a      	str	r2, [r3, #32]
}
 800803e:	bf00      	nop
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	bc80      	pop	{r7}
 8008046:	4770      	bx	lr

08008048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008058:	2b01      	cmp	r3, #1
 800805a:	d101      	bne.n	8008060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800805c:	2302      	movs	r3, #2
 800805e:	e050      	b.n	8008102 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	4313      	orrs	r3, r2
 8008090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a1b      	ldr	r2, [pc, #108]	@ (800810c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d018      	beq.n	80080d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a19      	ldr	r2, [pc, #100]	@ (8008110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d013      	beq.n	80080d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080b6:	d00e      	beq.n	80080d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a15      	ldr	r2, [pc, #84]	@ (8008114 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d009      	beq.n	80080d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a14      	ldr	r2, [pc, #80]	@ (8008118 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d004      	beq.n	80080d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a12      	ldr	r2, [pc, #72]	@ (800811c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d10c      	bne.n	80080f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	bc80      	pop	{r7}
 800810a:	4770      	bx	lr
 800810c:	40012c00 	.word	0x40012c00
 8008110:	40013400 	.word	0x40013400
 8008114:	40000400 	.word	0x40000400
 8008118:	40000800 	.word	0x40000800
 800811c:	40000c00 	.word	0x40000c00

08008120 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	bc80      	pop	{r7}
 8008130:	4770      	bx	lr

08008132 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008132:	b480      	push	{r7}
 8008134:	b083      	sub	sp, #12
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800813a:	bf00      	nop
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	bc80      	pop	{r7}
 8008142:	4770      	bx	lr

08008144 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	6812      	ldr	r2, [r2, #0]
 800815c:	f023 0101 	bic.w	r1, r3, #1
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	2b08      	cmp	r3, #8
 800816c:	d102      	bne.n	8008174 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800816e:	2340      	movs	r3, #64	@ 0x40
 8008170:	617b      	str	r3, [r7, #20]
 8008172:	e001      	b.n	8008178 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008174:	2300      	movs	r3, #0
 8008176:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008184:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800818a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008190:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008196:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800819c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80081a2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80081a8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 80081ae:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80081b4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80081ba:	4313      	orrs	r3, r2
 80081bc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80081d2:	4b10      	ldr	r3, [pc, #64]	@ (8008214 <FSMC_NORSRAM_Init+0xd0>)
 80081d4:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80081dc:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80081e4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	43db      	mvns	r3, r3
 80081f4:	ea02 0103 	and.w	r1, r2, r3
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	4319      	orrs	r1, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	371c      	adds	r7, #28
 800820c:	46bd      	mov	sp, r7
 800820e:	bc80      	pop	{r7}
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	0008fb7f 	.word	0x0008fb7f

08008218 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTRx_ADDSET_Pos) |
 800822e:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTRx_ADDHLD_Pos) |
 8008236:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTRx_DATAST_Pos) |
 800823e:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	3b01      	subs	r3, #1
 8008246:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTRx_BUSTURN_Pos) |
 8008248:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	3b02      	subs	r3, #2
 8008250:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTRx_CLKDIV_Pos) |
 8008252:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTRx_DATLAT_Pos) |
 800825e:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	bc80      	pop	{r7}
 8008270:	4770      	bx	lr
	...

08008274 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
 8008280:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008288:	d11d      	bne.n	80082c6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008292:	4b13      	ldr	r3, [pc, #76]	@ (80082e0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008294:	4013      	ands	r3, r2
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	6811      	ldr	r1, [r2, #0]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	6852      	ldr	r2, [r2, #4]
 800829e:	0112      	lsls	r2, r2, #4
 80082a0:	4311      	orrs	r1, r2
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	6892      	ldr	r2, [r2, #8]
 80082a6:	0212      	lsls	r2, r2, #8
 80082a8:	4311      	orrs	r1, r2
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	6992      	ldr	r2, [r2, #24]
 80082ae:	4311      	orrs	r1, r2
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	68d2      	ldr	r2, [r2, #12]
 80082b4:	0412      	lsls	r2, r2, #16
 80082b6:	430a      	orrs	r2, r1
 80082b8:	ea43 0102 	orr.w	r1, r3, r2
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80082c4:	e005      	b.n	80082d2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80082ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	bc80      	pop	{r7}
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	cff00000 	.word	0xcff00000

080082e4 <arm_rfft_fast_init_f32>:
 80082e4:	084b      	lsrs	r3, r1, #1
 80082e6:	2b80      	cmp	r3, #128	@ 0x80
 80082e8:	b410      	push	{r4}
 80082ea:	8201      	strh	r1, [r0, #16]
 80082ec:	8003      	strh	r3, [r0, #0]
 80082ee:	d044      	beq.n	800837a <arm_rfft_fast_init_f32+0x96>
 80082f0:	d915      	bls.n	800831e <arm_rfft_fast_init_f32+0x3a>
 80082f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082f6:	d03a      	beq.n	800836e <arm_rfft_fast_init_f32+0x8a>
 80082f8:	d926      	bls.n	8008348 <arm_rfft_fast_init_f32+0x64>
 80082fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082fe:	d01d      	beq.n	800833c <arm_rfft_fast_init_f32+0x58>
 8008300:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008304:	d111      	bne.n	800832a <arm_rfft_fast_init_f32+0x46>
 8008306:	4c1f      	ldr	r4, [pc, #124]	@ (8008384 <arm_rfft_fast_init_f32+0xa0>)
 8008308:	491f      	ldr	r1, [pc, #124]	@ (8008388 <arm_rfft_fast_init_f32+0xa4>)
 800830a:	4a20      	ldr	r2, [pc, #128]	@ (800838c <arm_rfft_fast_init_f32+0xa8>)
 800830c:	f44f 636e 	mov.w	r3, #3808	@ 0xee0
 8008310:	6084      	str	r4, [r0, #8]
 8008312:	6041      	str	r1, [r0, #4]
 8008314:	6142      	str	r2, [r0, #20]
 8008316:	8183      	strh	r3, [r0, #12]
 8008318:	bc10      	pop	{r4}
 800831a:	2000      	movs	r0, #0
 800831c:	4770      	bx	lr
 800831e:	2b20      	cmp	r3, #32
 8008320:	d01b      	beq.n	800835a <arm_rfft_fast_init_f32+0x76>
 8008322:	2b40      	cmp	r3, #64	@ 0x40
 8008324:	d005      	beq.n	8008332 <arm_rfft_fast_init_f32+0x4e>
 8008326:	2b10      	cmp	r3, #16
 8008328:	d01c      	beq.n	8008364 <arm_rfft_fast_init_f32+0x80>
 800832a:	f04f 30ff 	mov.w	r0, #4294967295
 800832e:	bc10      	pop	{r4}
 8008330:	4770      	bx	lr
 8008332:	4c17      	ldr	r4, [pc, #92]	@ (8008390 <arm_rfft_fast_init_f32+0xac>)
 8008334:	4917      	ldr	r1, [pc, #92]	@ (8008394 <arm_rfft_fast_init_f32+0xb0>)
 8008336:	4a18      	ldr	r2, [pc, #96]	@ (8008398 <arm_rfft_fast_init_f32+0xb4>)
 8008338:	2338      	movs	r3, #56	@ 0x38
 800833a:	e7e9      	b.n	8008310 <arm_rfft_fast_init_f32+0x2c>
 800833c:	4c17      	ldr	r4, [pc, #92]	@ (800839c <arm_rfft_fast_init_f32+0xb8>)
 800833e:	4918      	ldr	r1, [pc, #96]	@ (80083a0 <arm_rfft_fast_init_f32+0xbc>)
 8008340:	4a18      	ldr	r2, [pc, #96]	@ (80083a4 <arm_rfft_fast_init_f32+0xc0>)
 8008342:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8008346:	e7e3      	b.n	8008310 <arm_rfft_fast_init_f32+0x2c>
 8008348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800834c:	d1ed      	bne.n	800832a <arm_rfft_fast_init_f32+0x46>
 800834e:	4c16      	ldr	r4, [pc, #88]	@ (80083a8 <arm_rfft_fast_init_f32+0xc4>)
 8008350:	4916      	ldr	r1, [pc, #88]	@ (80083ac <arm_rfft_fast_init_f32+0xc8>)
 8008352:	4a17      	ldr	r2, [pc, #92]	@ (80083b0 <arm_rfft_fast_init_f32+0xcc>)
 8008354:	f44f 73dc 	mov.w	r3, #440	@ 0x1b8
 8008358:	e7da      	b.n	8008310 <arm_rfft_fast_init_f32+0x2c>
 800835a:	4c16      	ldr	r4, [pc, #88]	@ (80083b4 <arm_rfft_fast_init_f32+0xd0>)
 800835c:	4916      	ldr	r1, [pc, #88]	@ (80083b8 <arm_rfft_fast_init_f32+0xd4>)
 800835e:	4a17      	ldr	r2, [pc, #92]	@ (80083bc <arm_rfft_fast_init_f32+0xd8>)
 8008360:	2330      	movs	r3, #48	@ 0x30
 8008362:	e7d5      	b.n	8008310 <arm_rfft_fast_init_f32+0x2c>
 8008364:	4c16      	ldr	r4, [pc, #88]	@ (80083c0 <arm_rfft_fast_init_f32+0xdc>)
 8008366:	4917      	ldr	r1, [pc, #92]	@ (80083c4 <arm_rfft_fast_init_f32+0xe0>)
 8008368:	4a17      	ldr	r2, [pc, #92]	@ (80083c8 <arm_rfft_fast_init_f32+0xe4>)
 800836a:	2314      	movs	r3, #20
 800836c:	e7d0      	b.n	8008310 <arm_rfft_fast_init_f32+0x2c>
 800836e:	4c17      	ldr	r4, [pc, #92]	@ (80083cc <arm_rfft_fast_init_f32+0xe8>)
 8008370:	4917      	ldr	r1, [pc, #92]	@ (80083d0 <arm_rfft_fast_init_f32+0xec>)
 8008372:	4a18      	ldr	r2, [pc, #96]	@ (80083d4 <arm_rfft_fast_init_f32+0xf0>)
 8008374:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8008378:	e7ca      	b.n	8008310 <arm_rfft_fast_init_f32+0x2c>
 800837a:	4c17      	ldr	r4, [pc, #92]	@ (80083d8 <arm_rfft_fast_init_f32+0xf4>)
 800837c:	4917      	ldr	r1, [pc, #92]	@ (80083dc <arm_rfft_fast_init_f32+0xf8>)
 800837e:	4a18      	ldr	r2, [pc, #96]	@ (80083e0 <arm_rfft_fast_init_f32+0xfc>)
 8008380:	23d0      	movs	r3, #208	@ 0xd0
 8008382:	e7c5      	b.n	8008310 <arm_rfft_fast_init_f32+0x2c>
 8008384:	0801a3bc 	.word	0x0801a3bc
 8008388:	0800adb0 	.word	0x0800adb0
 800838c:	08010f20 	.word	0x08010f20
 8008390:	0800eeb0 	.word	0x0800eeb0
 8008394:	0801c17c 	.word	0x0801c17c
 8008398:	0801e66c 	.word	0x0801e66c
 800839c:	080178a0 	.word	0x080178a0
 80083a0:	080157a0 	.word	0x080157a0
 80083a4:	0800ef20 	.word	0x0800ef20
 80083a8:	0801e2fc 	.word	0x0801e2fc
 80083ac:	08014f20 	.word	0x08014f20
 80083b0:	0801c37c 	.word	0x0801c37c
 80083b4:	08018758 	.word	0x08018758
 80083b8:	080177a0 	.word	0x080177a0
 80083bc:	0800edb0 	.word	0x0800edb0
 80083c0:	080186b0 	.word	0x080186b0
 80083c4:	08015720 	.word	0x08015720
 80083c8:	080186d8 	.word	0x080186d8
 80083cc:	0801cb7c 	.word	0x0801cb7c
 80083d0:	080193bc 	.word	0x080193bc
 80083d4:	0801cefc 	.word	0x0801cefc
 80083d8:	0801e86c 	.word	0x0801e86c
 80083dc:	08018fbc 	.word	0x08018fbc
 80083e0:	0801defc 	.word	0x0801defc

080083e4 <arm_rfft_fast_f32>:
 80083e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e8:	8a04      	ldrh	r4, [r0, #16]
 80083ea:	b089      	sub	sp, #36	@ 0x24
 80083ec:	9205      	str	r2, [sp, #20]
 80083ee:	0862      	lsrs	r2, r4, #1
 80083f0:	9006      	str	r0, [sp, #24]
 80083f2:	8002      	strh	r2, [r0, #0]
 80083f4:	460e      	mov	r6, r1
 80083f6:	9307      	str	r3, [sp, #28]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f040 8096 	bne.w	800852a <arm_rfft_fast_f32+0x146>
 80083fe:	461a      	mov	r2, r3
 8008400:	2301      	movs	r3, #1
 8008402:	f000 fe09 	bl	8009018 <arm_cfft_f32>
 8008406:	9c06      	ldr	r4, [sp, #24]
 8008408:	6831      	ldr	r1, [r6, #0]
 800840a:	8823      	ldrh	r3, [r4, #0]
 800840c:	4608      	mov	r0, r1
 800840e:	3b01      	subs	r3, #1
 8008410:	9301      	str	r3, [sp, #4]
 8008412:	f7f8 fbf7 	bl	8000c04 <__addsf3>
 8008416:	6871      	ldr	r1, [r6, #4]
 8008418:	4605      	mov	r5, r0
 800841a:	4608      	mov	r0, r1
 800841c:	f7f8 fbf2 	bl	8000c04 <__addsf3>
 8008420:	4607      	mov	r7, r0
 8008422:	4601      	mov	r1, r0
 8008424:	4628      	mov	r0, r5
 8008426:	f7f8 fbed 	bl	8000c04 <__addsf3>
 800842a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800842e:	f7f8 fcf1 	bl	8000e14 <__aeabi_fmul>
 8008432:	4639      	mov	r1, r7
 8008434:	9f05      	ldr	r7, [sp, #20]
 8008436:	6964      	ldr	r4, [r4, #20]
 8008438:	6038      	str	r0, [r7, #0]
 800843a:	4628      	mov	r0, r5
 800843c:	f7f8 fbe0 	bl	8000c00 <__aeabi_fsub>
 8008440:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008444:	f7f8 fce6 	bl	8000e14 <__aeabi_fmul>
 8008448:	9b01      	ldr	r3, [sp, #4]
 800844a:	f106 0210 	add.w	r2, r6, #16
 800844e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8008452:	3b08      	subs	r3, #8
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	f107 0510 	add.w	r5, r7, #16
 800845a:	461e      	mov	r6, r3
 800845c:	4617      	mov	r7, r2
 800845e:	3410      	adds	r4, #16
 8008460:	f857 3c08 	ldr.w	r3, [r7, #-8]
 8008464:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8008468:	4619      	mov	r1, r3
 800846a:	9305      	str	r3, [sp, #20]
 800846c:	68f3      	ldr	r3, [r6, #12]
 800846e:	4650      	mov	r0, sl
 8008470:	4698      	mov	r8, r3
 8008472:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8008476:	3e08      	subs	r6, #8
 8008478:	4699      	mov	r9, r3
 800847a:	f7f8 fbc1 	bl	8000c00 <__aeabi_fsub>
 800847e:	4649      	mov	r1, r9
 8008480:	4683      	mov	fp, r0
 8008482:	4640      	mov	r0, r8
 8008484:	f8cd 900c 	str.w	r9, [sp, #12]
 8008488:	f8cd 8008 	str.w	r8, [sp, #8]
 800848c:	f7f8 fbba 	bl	8000c04 <__addsf3>
 8008490:	f854 8c08 	ldr.w	r8, [r4, #-8]
 8008494:	4681      	mov	r9, r0
 8008496:	4659      	mov	r1, fp
 8008498:	4640      	mov	r0, r8
 800849a:	f7f8 fcbb 	bl	8000e14 <__aeabi_fmul>
 800849e:	9b05      	ldr	r3, [sp, #20]
 80084a0:	9004      	str	r0, [sp, #16]
 80084a2:	4619      	mov	r1, r3
 80084a4:	4650      	mov	r0, sl
 80084a6:	f7f8 fbad 	bl	8000c04 <__addsf3>
 80084aa:	9a04      	ldr	r2, [sp, #16]
 80084ac:	4601      	mov	r1, r0
 80084ae:	4610      	mov	r0, r2
 80084b0:	f7f8 fba8 	bl	8000c04 <__addsf3>
 80084b4:	f854 ac04 	ldr.w	sl, [r4, #-4]
 80084b8:	9004      	str	r0, [sp, #16]
 80084ba:	4649      	mov	r1, r9
 80084bc:	4650      	mov	r0, sl
 80084be:	f7f8 fca9 	bl	8000e14 <__aeabi_fmul>
 80084c2:	9b04      	ldr	r3, [sp, #16]
 80084c4:	4601      	mov	r1, r0
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7f8 fb9c 	bl	8000c04 <__addsf3>
 80084cc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80084d0:	f7f8 fca0 	bl	8000e14 <__aeabi_fmul>
 80084d4:	4659      	mov	r1, fp
 80084d6:	f845 0c08 	str.w	r0, [r5, #-8]
 80084da:	4650      	mov	r0, sl
 80084dc:	f7f8 fc9a 	bl	8000e14 <__aeabi_fmul>
 80084e0:	9902      	ldr	r1, [sp, #8]
 80084e2:	4682      	mov	sl, r0
 80084e4:	9803      	ldr	r0, [sp, #12]
 80084e6:	f7f8 fb8b 	bl	8000c00 <__aeabi_fsub>
 80084ea:	4601      	mov	r1, r0
 80084ec:	4650      	mov	r0, sl
 80084ee:	f7f8 fb89 	bl	8000c04 <__addsf3>
 80084f2:	4649      	mov	r1, r9
 80084f4:	4682      	mov	sl, r0
 80084f6:	4640      	mov	r0, r8
 80084f8:	f7f8 fc8c 	bl	8000e14 <__aeabi_fmul>
 80084fc:	4601      	mov	r1, r0
 80084fe:	4650      	mov	r0, sl
 8008500:	f7f8 fb7e 	bl	8000c00 <__aeabi_fsub>
 8008504:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008508:	f7f8 fc84 	bl	8000e14 <__aeabi_fmul>
 800850c:	9b01      	ldr	r3, [sp, #4]
 800850e:	f845 0c04 	str.w	r0, [r5, #-4]
 8008512:	3b01      	subs	r3, #1
 8008514:	f107 0708 	add.w	r7, r7, #8
 8008518:	f104 0408 	add.w	r4, r4, #8
 800851c:	f105 0508 	add.w	r5, r5, #8
 8008520:	9301      	str	r3, [sp, #4]
 8008522:	d19d      	bne.n	8008460 <arm_rfft_fast_f32+0x7c>
 8008524:	b009      	add	sp, #36	@ 0x24
 8008526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852a:	680c      	ldr	r4, [r1, #0]
 800852c:	684f      	ldr	r7, [r1, #4]
 800852e:	3a01      	subs	r2, #1
 8008530:	4639      	mov	r1, r7
 8008532:	4620      	mov	r0, r4
 8008534:	9201      	str	r2, [sp, #4]
 8008536:	f7f8 fb65 	bl	8000c04 <__addsf3>
 800853a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800853e:	f7f8 fc69 	bl	8000e14 <__aeabi_fmul>
 8008542:	9b06      	ldr	r3, [sp, #24]
 8008544:	4639      	mov	r1, r7
 8008546:	9f05      	ldr	r7, [sp, #20]
 8008548:	695d      	ldr	r5, [r3, #20]
 800854a:	6038      	str	r0, [r7, #0]
 800854c:	4620      	mov	r0, r4
 800854e:	f7f8 fb57 	bl	8000c00 <__aeabi_fsub>
 8008552:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008556:	f7f8 fc5d 	bl	8000e14 <__aeabi_fmul>
 800855a:	9a01      	ldr	r2, [sp, #4]
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	00d3      	lsls	r3, r2, #3
 8008560:	2a00      	cmp	r2, #0
 8008562:	d063      	beq.n	800862c <arm_rfft_fast_f32+0x248>
 8008564:	3b08      	subs	r3, #8
 8008566:	4433      	add	r3, r6
 8008568:	3710      	adds	r7, #16
 800856a:	f106 0410 	add.w	r4, r6, #16
 800856e:	46b9      	mov	r9, r7
 8008570:	461e      	mov	r6, r3
 8008572:	3510      	adds	r5, #16
 8008574:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8008578:	f854 bc08 	ldr.w	fp, [r4, #-8]
 800857c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008580:	4641      	mov	r1, r8
 8008582:	4658      	mov	r0, fp
 8008584:	9204      	str	r2, [sp, #16]
 8008586:	9301      	str	r3, [sp, #4]
 8008588:	f7f8 fb3a 	bl	8000c00 <__aeabi_fsub>
 800858c:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8008590:	4607      	mov	r7, r0
 8008592:	9901      	ldr	r1, [sp, #4]
 8008594:	4650      	mov	r0, sl
 8008596:	f7f8 fb35 	bl	8000c04 <__addsf3>
 800859a:	4659      	mov	r1, fp
 800859c:	9002      	str	r0, [sp, #8]
 800859e:	4640      	mov	r0, r8
 80085a0:	f7f8 fb30 	bl	8000c04 <__addsf3>
 80085a4:	f855 8c08 	ldr.w	r8, [r5, #-8]
 80085a8:	4683      	mov	fp, r0
 80085aa:	4639      	mov	r1, r7
 80085ac:	4640      	mov	r0, r8
 80085ae:	f7f8 fc31 	bl	8000e14 <__aeabi_fmul>
 80085b2:	4601      	mov	r1, r0
 80085b4:	4658      	mov	r0, fp
 80085b6:	f7f8 fb23 	bl	8000c00 <__aeabi_fsub>
 80085ba:	f855 bc04 	ldr.w	fp, [r5, #-4]
 80085be:	9003      	str	r0, [sp, #12]
 80085c0:	9902      	ldr	r1, [sp, #8]
 80085c2:	4658      	mov	r0, fp
 80085c4:	f7f8 fc26 	bl	8000e14 <__aeabi_fmul>
 80085c8:	9b03      	ldr	r3, [sp, #12]
 80085ca:	4601      	mov	r1, r0
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7f8 fb17 	bl	8000c00 <__aeabi_fsub>
 80085d2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80085d6:	f7f8 fc1d 	bl	8000e14 <__aeabi_fmul>
 80085da:	4639      	mov	r1, r7
 80085dc:	f849 0c08 	str.w	r0, [r9, #-8]
 80085e0:	4658      	mov	r0, fp
 80085e2:	f7f8 fc17 	bl	8000e14 <__aeabi_fmul>
 80085e6:	4651      	mov	r1, sl
 80085e8:	4607      	mov	r7, r0
 80085ea:	9801      	ldr	r0, [sp, #4]
 80085ec:	f7f8 fb08 	bl	8000c00 <__aeabi_fsub>
 80085f0:	4601      	mov	r1, r0
 80085f2:	4638      	mov	r0, r7
 80085f4:	f7f8 fb06 	bl	8000c04 <__addsf3>
 80085f8:	9902      	ldr	r1, [sp, #8]
 80085fa:	4607      	mov	r7, r0
 80085fc:	4640      	mov	r0, r8
 80085fe:	f7f8 fc09 	bl	8000e14 <__aeabi_fmul>
 8008602:	4601      	mov	r1, r0
 8008604:	4638      	mov	r0, r7
 8008606:	f7f8 fafb 	bl	8000c00 <__aeabi_fsub>
 800860a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800860e:	f7f8 fc01 	bl	8000e14 <__aeabi_fmul>
 8008612:	9a04      	ldr	r2, [sp, #16]
 8008614:	f849 0c04 	str.w	r0, [r9, #-4]
 8008618:	3a01      	subs	r2, #1
 800861a:	f1a6 0608 	sub.w	r6, r6, #8
 800861e:	f104 0408 	add.w	r4, r4, #8
 8008622:	f105 0508 	add.w	r5, r5, #8
 8008626:	f109 0908 	add.w	r9, r9, #8
 800862a:	d1a3      	bne.n	8008574 <arm_rfft_fast_f32+0x190>
 800862c:	9a07      	ldr	r2, [sp, #28]
 800862e:	9905      	ldr	r1, [sp, #20]
 8008630:	9806      	ldr	r0, [sp, #24]
 8008632:	2301      	movs	r3, #1
 8008634:	b009      	add	sp, #36	@ 0x24
 8008636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863a:	f000 bced 	b.w	8009018 <arm_cfft_f32>
 800863e:	bf00      	nop

08008640 <arm_cfft_radix8by2_f32>:
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	460c      	mov	r4, r1
 8008646:	8803      	ldrh	r3, [r0, #0]
 8008648:	b093      	sub	sp, #76	@ 0x4c
 800864a:	900e      	str	r0, [sp, #56]	@ 0x38
 800864c:	6842      	ldr	r2, [r0, #4]
 800864e:	0858      	lsrs	r0, r3, #1
 8008650:	9111      	str	r1, [sp, #68]	@ 0x44
 8008652:	9010      	str	r0, [sp, #64]	@ 0x40
 8008654:	0081      	lsls	r1, r0, #2
 8008656:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 800865a:	08db      	lsrs	r3, r3, #3
 800865c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800865e:	9308      	str	r3, [sp, #32]
 8008660:	f000 8131 	beq.w	80088c6 <arm_cfft_radix8by2_f32+0x286>
 8008664:	f101 0310 	add.w	r3, r1, #16
 8008668:	18c7      	adds	r7, r0, r3
 800866a:	46bb      	mov	fp, r7
 800866c:	3210      	adds	r2, #16
 800866e:	9200      	str	r2, [sp, #0]
 8008670:	eb04 0803 	add.w	r8, r4, r3
 8008674:	f104 0610 	add.w	r6, r4, #16
 8008678:	f100 0910 	add.w	r9, r0, #16
 800867c:	f859 2c10 	ldr.w	r2, [r9, #-16]
 8008680:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8008684:	4611      	mov	r1, r2
 8008686:	4618      	mov	r0, r3
 8008688:	930d      	str	r3, [sp, #52]	@ 0x34
 800868a:	9206      	str	r2, [sp, #24]
 800868c:	f7f8 faba 	bl	8000c04 <__addsf3>
 8008690:	f859 2c08 	ldr.w	r2, [r9, #-8]
 8008694:	f858 1c0c 	ldr.w	r1, [r8, #-12]
 8008698:	f858 ec04 	ldr.w	lr, [r8, #-4]
 800869c:	4614      	mov	r4, r2
 800869e:	f858 2c10 	ldr.w	r2, [r8, #-16]
 80086a2:	f859 3c0c 	ldr.w	r3, [r9, #-12]
 80086a6:	f856 ac0c 	ldr.w	sl, [r6, #-12]
 80086aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80086ac:	f85b 1c08 	ldr.w	r1, [fp, #-8]
 80086b0:	f85b cc10 	ldr.w	ip, [fp, #-16]
 80086b4:	f858 7c08 	ldr.w	r7, [r8, #-8]
 80086b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80086ba:	f8cd e008 	str.w	lr, [sp, #8]
 80086be:	f85b 2c0c 	ldr.w	r2, [fp, #-12]
 80086c2:	f85b ec04 	ldr.w	lr, [fp, #-4]
 80086c6:	f859 5c04 	ldr.w	r5, [r9, #-4]
 80086ca:	9104      	str	r1, [sp, #16]
 80086cc:	f846 0c10 	str.w	r0, [r6, #-16]
 80086d0:	4619      	mov	r1, r3
 80086d2:	4650      	mov	r0, sl
 80086d4:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
 80086d8:	f8cd e014 	str.w	lr, [sp, #20]
 80086dc:	9203      	str	r2, [sp, #12]
 80086de:	9307      	str	r3, [sp, #28]
 80086e0:	9701      	str	r7, [sp, #4]
 80086e2:	f7f8 fa8f 	bl	8000c04 <__addsf3>
 80086e6:	f856 7c08 	ldr.w	r7, [r6, #-8]
 80086ea:	f846 0c0c 	str.w	r0, [r6, #-12]
 80086ee:	4621      	mov	r1, r4
 80086f0:	4638      	mov	r0, r7
 80086f2:	9409      	str	r4, [sp, #36]	@ 0x24
 80086f4:	f7f8 fa86 	bl	8000c04 <__addsf3>
 80086f8:	f856 4c04 	ldr.w	r4, [r6, #-4]
 80086fc:	f846 0c08 	str.w	r0, [r6, #-8]
 8008700:	4629      	mov	r1, r5
 8008702:	4620      	mov	r0, r4
 8008704:	f7f8 fa7e 	bl	8000c04 <__addsf3>
 8008708:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800870a:	9a06      	ldr	r2, [sp, #24]
 800870c:	f846 0c04 	str.w	r0, [r6, #-4]
 8008710:	4611      	mov	r1, r2
 8008712:	4618      	mov	r0, r3
 8008714:	f7f8 fa74 	bl	8000c00 <__aeabi_fsub>
 8008718:	9907      	ldr	r1, [sp, #28]
 800871a:	9006      	str	r0, [sp, #24]
 800871c:	4650      	mov	r0, sl
 800871e:	f7f8 fa6f 	bl	8000c00 <__aeabi_fsub>
 8008722:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008724:	4682      	mov	sl, r0
 8008726:	4638      	mov	r0, r7
 8008728:	f7f8 fa6a 	bl	8000c00 <__aeabi_fsub>
 800872c:	4629      	mov	r1, r5
 800872e:	9007      	str	r0, [sp, #28]
 8008730:	4620      	mov	r0, r4
 8008732:	f7f8 fa65 	bl	8000c00 <__aeabi_fsub>
 8008736:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8008738:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800873a:	4639      	mov	r1, r7
 800873c:	9009      	str	r0, [sp, #36]	@ 0x24
 800873e:	4620      	mov	r0, r4
 8008740:	f7f8 fa60 	bl	8000c04 <__addsf3>
 8008744:	9903      	ldr	r1, [sp, #12]
 8008746:	f848 0c10 	str.w	r0, [r8, #-16]
 800874a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800874c:	3610      	adds	r6, #16
 800874e:	4628      	mov	r0, r5
 8008750:	f7f8 fa58 	bl	8000c04 <__addsf3>
 8008754:	9904      	ldr	r1, [sp, #16]
 8008756:	f848 0c0c 	str.w	r0, [r8, #-12]
 800875a:	9801      	ldr	r0, [sp, #4]
 800875c:	f7f8 fa52 	bl	8000c04 <__addsf3>
 8008760:	9905      	ldr	r1, [sp, #20]
 8008762:	f848 0c08 	str.w	r0, [r8, #-8]
 8008766:	9802      	ldr	r0, [sp, #8]
 8008768:	f7f8 fa4c 	bl	8000c04 <__addsf3>
 800876c:	4621      	mov	r1, r4
 800876e:	f848 0c04 	str.w	r0, [r8, #-4]
 8008772:	4638      	mov	r0, r7
 8008774:	f7f8 fa44 	bl	8000c00 <__aeabi_fsub>
 8008778:	4629      	mov	r1, r5
 800877a:	4607      	mov	r7, r0
 800877c:	9803      	ldr	r0, [sp, #12]
 800877e:	f7f8 fa3f 	bl	8000c00 <__aeabi_fsub>
 8008782:	9901      	ldr	r1, [sp, #4]
 8008784:	9003      	str	r0, [sp, #12]
 8008786:	9804      	ldr	r0, [sp, #16]
 8008788:	f7f8 fa3a 	bl	8000c00 <__aeabi_fsub>
 800878c:	9902      	ldr	r1, [sp, #8]
 800878e:	9001      	str	r0, [sp, #4]
 8008790:	9805      	ldr	r0, [sp, #20]
 8008792:	f7f8 fa35 	bl	8000c00 <__aeabi_fsub>
 8008796:	9a00      	ldr	r2, [sp, #0]
 8008798:	9002      	str	r0, [sp, #8]
 800879a:	f852 4c10 	ldr.w	r4, [r2, #-16]
 800879e:	9806      	ldr	r0, [sp, #24]
 80087a0:	4621      	mov	r1, r4
 80087a2:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 80087a6:	f7f8 fb35 	bl	8000e14 <__aeabi_fmul>
 80087aa:	4629      	mov	r1, r5
 80087ac:	9004      	str	r0, [sp, #16]
 80087ae:	4650      	mov	r0, sl
 80087b0:	f7f8 fb30 	bl	8000e14 <__aeabi_fmul>
 80087b4:	9b04      	ldr	r3, [sp, #16]
 80087b6:	4601      	mov	r1, r0
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7f8 fa23 	bl	8000c04 <__addsf3>
 80087be:	4621      	mov	r1, r4
 80087c0:	f849 0c10 	str.w	r0, [r9, #-16]
 80087c4:	4650      	mov	r0, sl
 80087c6:	f7f8 fb25 	bl	8000e14 <__aeabi_fmul>
 80087ca:	4629      	mov	r1, r5
 80087cc:	4682      	mov	sl, r0
 80087ce:	9806      	ldr	r0, [sp, #24]
 80087d0:	f7f8 fb20 	bl	8000e14 <__aeabi_fmul>
 80087d4:	4601      	mov	r1, r0
 80087d6:	4650      	mov	r0, sl
 80087d8:	f7f8 fa12 	bl	8000c00 <__aeabi_fsub>
 80087dc:	4629      	mov	r1, r5
 80087de:	f849 0c0c 	str.w	r0, [r9, #-12]
 80087e2:	4638      	mov	r0, r7
 80087e4:	f7f8 fb16 	bl	8000e14 <__aeabi_fmul>
 80087e8:	4621      	mov	r1, r4
 80087ea:	4682      	mov	sl, r0
 80087ec:	9803      	ldr	r0, [sp, #12]
 80087ee:	f7f8 fb11 	bl	8000e14 <__aeabi_fmul>
 80087f2:	4601      	mov	r1, r0
 80087f4:	4650      	mov	r0, sl
 80087f6:	f7f8 fa03 	bl	8000c00 <__aeabi_fsub>
 80087fa:	4629      	mov	r1, r5
 80087fc:	f84b 0c10 	str.w	r0, [fp, #-16]
 8008800:	9803      	ldr	r0, [sp, #12]
 8008802:	f7f8 fb07 	bl	8000e14 <__aeabi_fmul>
 8008806:	4621      	mov	r1, r4
 8008808:	4605      	mov	r5, r0
 800880a:	4638      	mov	r0, r7
 800880c:	f7f8 fb02 	bl	8000e14 <__aeabi_fmul>
 8008810:	4601      	mov	r1, r0
 8008812:	4628      	mov	r0, r5
 8008814:	f7f8 f9f6 	bl	8000c04 <__addsf3>
 8008818:	9a00      	ldr	r2, [sp, #0]
 800881a:	f84b 0c0c 	str.w	r0, [fp, #-12]
 800881e:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8008822:	9807      	ldr	r0, [sp, #28]
 8008824:	4621      	mov	r1, r4
 8008826:	f852 5c04 	ldr.w	r5, [r2, #-4]
 800882a:	f7f8 faf3 	bl	8000e14 <__aeabi_fmul>
 800882e:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8008832:	4607      	mov	r7, r0
 8008834:	4629      	mov	r1, r5
 8008836:	4650      	mov	r0, sl
 8008838:	f7f8 faec 	bl	8000e14 <__aeabi_fmul>
 800883c:	4601      	mov	r1, r0
 800883e:	4638      	mov	r0, r7
 8008840:	f7f8 f9e0 	bl	8000c04 <__addsf3>
 8008844:	4621      	mov	r1, r4
 8008846:	f849 0c08 	str.w	r0, [r9, #-8]
 800884a:	4650      	mov	r0, sl
 800884c:	f7f8 fae2 	bl	8000e14 <__aeabi_fmul>
 8008850:	4629      	mov	r1, r5
 8008852:	4607      	mov	r7, r0
 8008854:	9807      	ldr	r0, [sp, #28]
 8008856:	f7f8 fadd 	bl	8000e14 <__aeabi_fmul>
 800885a:	4601      	mov	r1, r0
 800885c:	4638      	mov	r0, r7
 800885e:	f7f8 f9cf 	bl	8000c00 <__aeabi_fsub>
 8008862:	4629      	mov	r1, r5
 8008864:	f849 0c04 	str.w	r0, [r9, #-4]
 8008868:	9801      	ldr	r0, [sp, #4]
 800886a:	f7f8 fad3 	bl	8000e14 <__aeabi_fmul>
 800886e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8008872:	4607      	mov	r7, r0
 8008874:	4621      	mov	r1, r4
 8008876:	4650      	mov	r0, sl
 8008878:	f7f8 facc 	bl	8000e14 <__aeabi_fmul>
 800887c:	4601      	mov	r1, r0
 800887e:	4638      	mov	r0, r7
 8008880:	f7f8 f9be 	bl	8000c00 <__aeabi_fsub>
 8008884:	4629      	mov	r1, r5
 8008886:	f84b 0c08 	str.w	r0, [fp, #-8]
 800888a:	4650      	mov	r0, sl
 800888c:	f7f8 fac2 	bl	8000e14 <__aeabi_fmul>
 8008890:	4621      	mov	r1, r4
 8008892:	4605      	mov	r5, r0
 8008894:	9801      	ldr	r0, [sp, #4]
 8008896:	f7f8 fabd 	bl	8000e14 <__aeabi_fmul>
 800889a:	4601      	mov	r1, r0
 800889c:	4628      	mov	r0, r5
 800889e:	f7f8 f9b1 	bl	8000c04 <__addsf3>
 80088a2:	9b00      	ldr	r3, [sp, #0]
 80088a4:	f84b 0c04 	str.w	r0, [fp, #-4]
 80088a8:	3310      	adds	r3, #16
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	9b08      	ldr	r3, [sp, #32]
 80088ae:	f108 0810 	add.w	r8, r8, #16
 80088b2:	3b01      	subs	r3, #1
 80088b4:	f109 0910 	add.w	r9, r9, #16
 80088b8:	f10b 0b10 	add.w	fp, fp, #16
 80088bc:	9308      	str	r3, [sp, #32]
 80088be:	f47f aedd 	bne.w	800867c <arm_cfft_radix8by2_f32+0x3c>
 80088c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	f8bd 4040 	ldrh.w	r4, [sp, #64]	@ 0x40
 80088ca:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80088cc:	4621      	mov	r1, r4
 80088ce:	2302      	movs	r3, #2
 80088d0:	f000 fc64 	bl	800919c <arm_radix8_butterfly_f32>
 80088d4:	4621      	mov	r1, r4
 80088d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088d8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	2302      	movs	r3, #2
 80088de:	b013      	add	sp, #76	@ 0x4c
 80088e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	f000 bc5a 	b.w	800919c <arm_radix8_butterfly_f32>

080088e8 <arm_cfft_radix8by4_f32>:
 80088e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ec:	8804      	ldrh	r4, [r0, #0]
 80088ee:	b0a7      	sub	sp, #156	@ 0x9c
 80088f0:	0864      	lsrs	r4, r4, #1
 80088f2:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 80088f6:	680d      	ldr	r5, [r1, #0]
 80088f8:	911a      	str	r1, [sp, #104]	@ 0x68
 80088fa:	4451      	add	r1, sl
 80088fc:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
 8008900:	460f      	mov	r7, r1
 8008902:	9023      	str	r0, [sp, #140]	@ 0x8c
 8008904:	4631      	mov	r1, r6
 8008906:	4628      	mov	r0, r5
 8008908:	f7f8 f97c 	bl	8000c04 <__addsf3>
 800890c:	4631      	mov	r1, r6
 800890e:	4683      	mov	fp, r0
 8008910:	4628      	mov	r0, r5
 8008912:	9718      	str	r7, [sp, #96]	@ 0x60
 8008914:	f7f8 f974 	bl	8000c00 <__aeabi_fsub>
 8008918:	eb07 060a 	add.w	r6, r7, sl
 800891c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800891e:	961b      	str	r6, [sp, #108]	@ 0x6c
 8008920:	687d      	ldr	r5, [r7, #4]
 8008922:	6876      	ldr	r6, [r6, #4]
 8008924:	9000      	str	r0, [sp, #0]
 8008926:	4631      	mov	r1, r6
 8008928:	4628      	mov	r0, r5
 800892a:	f7f8 f96b 	bl	8000c04 <__addsf3>
 800892e:	4631      	mov	r1, r6
 8008930:	9001      	str	r0, [sp, #4]
 8008932:	4628      	mov	r0, r5
 8008934:	f7f8 f964 	bl	8000c00 <__aeabi_fsub>
 8008938:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800893a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800893c:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
 8008940:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 8008944:	4639      	mov	r1, r7
 8008946:	9002      	str	r0, [sp, #8]
 8008948:	4658      	mov	r0, fp
 800894a:	f7f8 f95b 	bl	8000c04 <__addsf3>
 800894e:	4631      	mov	r1, r6
 8008950:	f7f8 f958 	bl	8000c04 <__addsf3>
 8008954:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008956:	46ae      	mov	lr, r5
 8008958:	4619      	mov	r1, r3
 800895a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800895c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800895e:	44d6      	add	lr, sl
 8008960:	f8de 8004 	ldr.w	r8, [lr, #4]
 8008964:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8008968:	951b      	str	r5, [sp, #108]	@ 0x6c
 800896a:	685d      	ldr	r5, [r3, #4]
 800896c:	f841 0b08 	str.w	r0, [r1], #8
 8008970:	911d      	str	r1, [sp, #116]	@ 0x74
 8008972:	9801      	ldr	r0, [sp, #4]
 8008974:	6851      	ldr	r1, [r2, #4]
 8008976:	f8cd e064 	str.w	lr, [sp, #100]	@ 0x64
 800897a:	f7f8 f943 	bl	8000c04 <__addsf3>
 800897e:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8008980:	6849      	ldr	r1, [r1, #4]
 8008982:	f7f8 f93f 	bl	8000c04 <__addsf3>
 8008986:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008988:	4649      	mov	r1, r9
 800898a:	6050      	str	r0, [r2, #4]
 800898c:	9800      	ldr	r0, [sp, #0]
 800898e:	f7f8 f939 	bl	8000c04 <__addsf3>
 8008992:	4641      	mov	r1, r8
 8008994:	f7f8 f934 	bl	8000c00 <__aeabi_fsub>
 8008998:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800899a:	4639      	mov	r1, r7
 800899c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80089a0:	9802      	ldr	r0, [sp, #8]
 80089a2:	f7f8 f92d 	bl	8000c00 <__aeabi_fsub>
 80089a6:	4631      	mov	r1, r6
 80089a8:	f7f8 f92c 	bl	8000c04 <__addsf3>
 80089ac:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80089ae:	4639      	mov	r1, r7
 80089b0:	6058      	str	r0, [r3, #4]
 80089b2:	4658      	mov	r0, fp
 80089b4:	f7f8 f924 	bl	8000c00 <__aeabi_fsub>
 80089b8:	4631      	mov	r1, r6
 80089ba:	f7f8 f921 	bl	8000c00 <__aeabi_fsub>
 80089be:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80089c0:	4649      	mov	r1, r9
 80089c2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80089c6:	9801      	ldr	r0, [sp, #4]
 80089c8:	f7f8 f91a 	bl	8000c00 <__aeabi_fsub>
 80089cc:	4641      	mov	r1, r8
 80089ce:	f7f8 f917 	bl	8000c00 <__aeabi_fsub>
 80089d2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80089d4:	4649      	mov	r1, r9
 80089d6:	6058      	str	r0, [r3, #4]
 80089d8:	9800      	ldr	r0, [sp, #0]
 80089da:	f7f8 f911 	bl	8000c00 <__aeabi_fsub>
 80089de:	4641      	mov	r1, r8
 80089e0:	f7f8 f910 	bl	8000c04 <__addsf3>
 80089e4:	4639      	mov	r1, r7
 80089e6:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 80089e8:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 80089ec:	9802      	ldr	r0, [sp, #8]
 80089ee:	f7f8 f909 	bl	8000c04 <__addsf3>
 80089f2:	4631      	mov	r1, r6
 80089f4:	f7f8 f904 	bl	8000c00 <__aeabi_fsub>
 80089f8:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80089fa:	0864      	lsrs	r4, r4, #1
 80089fc:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 80089fe:	6048      	str	r0, [r1, #4]
 8008a00:	1ea3      	subs	r3, r4, #2
 8008a02:	9424      	str	r4, [sp, #144]	@ 0x90
 8008a04:	460c      	mov	r4, r1
 8008a06:	3108      	adds	r1, #8
 8008a08:	911c      	str	r1, [sp, #112]	@ 0x70
 8008a0a:	4639      	mov	r1, r7
 8008a0c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008a0e:	3108      	adds	r1, #8
 8008a10:	911e      	str	r1, [sp, #120]	@ 0x78
 8008a12:	4611      	mov	r1, r2
 8008a14:	3108      	adds	r1, #8
 8008a16:	f105 0018 	add.w	r0, r5, #24
 8008a1a:	911f      	str	r1, [sp, #124]	@ 0x7c
 8008a1c:	f105 0108 	add.w	r1, r5, #8
 8008a20:	9121      	str	r1, [sp, #132]	@ 0x84
 8008a22:	9020      	str	r0, [sp, #128]	@ 0x80
 8008a24:	f105 0110 	add.w	r1, r5, #16
 8008a28:	0858      	lsrs	r0, r3, #1
 8008a2a:	9122      	str	r1, [sp, #136]	@ 0x88
 8008a2c:	9025      	str	r0, [sp, #148]	@ 0x94
 8008a2e:	f000 8207 	beq.w	8008e40 <arm_cfft_radix8by4_f32+0x558>
 8008a32:	f1aa 030c 	sub.w	r3, sl, #12
 8008a36:	9105      	str	r1, [sp, #20]
 8008a38:	18e1      	adds	r1, r4, r3
 8008a3a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008a3c:	f1a7 0b0c 	sub.w	fp, r7, #12
 8008a40:	3310      	adds	r3, #16
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	f102 0310 	add.w	r3, r2, #16
 8008a48:	461a      	mov	r2, r3
 8008a4a:	f105 0320 	add.w	r3, r5, #32
 8008a4e:	9304      	str	r3, [sp, #16]
 8008a50:	f105 0330 	add.w	r3, r5, #48	@ 0x30
 8008a54:	9303      	str	r3, [sp, #12]
 8008a56:	463b      	mov	r3, r7
 8008a58:	46d8      	mov	r8, fp
 8008a5a:	4691      	mov	r9, r2
 8008a5c:	3310      	adds	r3, #16
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	2300      	movs	r3, #0
 8008a62:	9014      	str	r0, [sp, #80]	@ 0x50
 8008a64:	9102      	str	r1, [sp, #8]
 8008a66:	f104 0a10 	add.w	sl, r4, #16
 8008a6a:	9306      	str	r3, [sp, #24]
 8008a6c:	9e01      	ldr	r6, [sp, #4]
 8008a6e:	9f00      	ldr	r7, [sp, #0]
 8008a70:	f856 4c08 	ldr.w	r4, [r6, #-8]
 8008a74:	f857 5c08 	ldr.w	r5, [r7, #-8]
 8008a78:	4620      	mov	r0, r4
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	f7f8 f8c2 	bl	8000c04 <__addsf3>
 8008a80:	4629      	mov	r1, r5
 8008a82:	9007      	str	r0, [sp, #28]
 8008a84:	4620      	mov	r0, r4
 8008a86:	f7f8 f8bb 	bl	8000c00 <__aeabi_fsub>
 8008a8a:	f856 4c04 	ldr.w	r4, [r6, #-4]
 8008a8e:	f857 5c04 	ldr.w	r5, [r7, #-4]
 8008a92:	9008      	str	r0, [sp, #32]
 8008a94:	4629      	mov	r1, r5
 8008a96:	4620      	mov	r0, r4
 8008a98:	9601      	str	r6, [sp, #4]
 8008a9a:	9700      	str	r7, [sp, #0]
 8008a9c:	f7f8 f8b2 	bl	8000c04 <__addsf3>
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	4607      	mov	r7, r0
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f7f8 f8ab 	bl	8000c00 <__aeabi_fsub>
 8008aaa:	f859 bc04 	ldr.w	fp, [r9, #-4]
 8008aae:	f85a 6c04 	ldr.w	r6, [sl, #-4]
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	4659      	mov	r1, fp
 8008ab6:	9808      	ldr	r0, [sp, #32]
 8008ab8:	f7f8 f8a4 	bl	8000c04 <__addsf3>
 8008abc:	4631      	mov	r1, r6
 8008abe:	f7f8 f89f 	bl	8000c00 <__aeabi_fsub>
 8008ac2:	f859 5c08 	ldr.w	r5, [r9, #-8]
 8008ac6:	9009      	str	r0, [sp, #36]	@ 0x24
 8008ac8:	940d      	str	r4, [sp, #52]	@ 0x34
 8008aca:	4620      	mov	r0, r4
 8008acc:	f85a 4c08 	ldr.w	r4, [sl, #-8]
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	f7f8 f895 	bl	8000c00 <__aeabi_fsub>
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	f7f8 f894 	bl	8000c04 <__addsf3>
 8008adc:	4629      	mov	r1, r5
 8008ade:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ae0:	9807      	ldr	r0, [sp, #28]
 8008ae2:	f7f8 f88d 	bl	8000c00 <__aeabi_fsub>
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	f7f8 f88a 	bl	8000c00 <__aeabi_fsub>
 8008aec:	4659      	mov	r1, fp
 8008aee:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008af0:	4638      	mov	r0, r7
 8008af2:	f7f8 f885 	bl	8000c00 <__aeabi_fsub>
 8008af6:	4631      	mov	r1, r6
 8008af8:	f7f8 f882 	bl	8000c00 <__aeabi_fsub>
 8008afc:	4659      	mov	r1, fp
 8008afe:	900c      	str	r0, [sp, #48]	@ 0x30
 8008b00:	9808      	ldr	r0, [sp, #32]
 8008b02:	f7f8 f87d 	bl	8000c00 <__aeabi_fsub>
 8008b06:	4631      	mov	r1, r6
 8008b08:	f7f8 f87c 	bl	8000c04 <__addsf3>
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	9008      	str	r0, [sp, #32]
 8008b10:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008b12:	f7f8 f877 	bl	8000c04 <__addsf3>
 8008b16:	4621      	mov	r1, r4
 8008b18:	f7f8 f872 	bl	8000c00 <__aeabi_fsub>
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	900d      	str	r0, [sp, #52]	@ 0x34
 8008b20:	9807      	ldr	r0, [sp, #28]
 8008b22:	f7f8 f86f 	bl	8000c04 <__addsf3>
 8008b26:	4621      	mov	r1, r4
 8008b28:	f7f8 f86c 	bl	8000c04 <__addsf3>
 8008b2c:	9d01      	ldr	r5, [sp, #4]
 8008b2e:	f109 0908 	add.w	r9, r9, #8
 8008b32:	f845 0c08 	str.w	r0, [r5, #-8]
 8008b36:	f859 1c0c 	ldr.w	r1, [r9, #-12]
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	f7f8 f862 	bl	8000c04 <__addsf3>
 8008b40:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 8008b44:	f7f8 f85e 	bl	8000c04 <__addsf3>
 8008b48:	9a06      	ldr	r2, [sp, #24]
 8008b4a:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 8008b4c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8008b4e:	f845 0c04 	str.w	r0, [r5, #-4]
 8008b52:	4414      	add	r4, r2
 8008b54:	18b2      	adds	r2, r6, r2
 8008b56:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8008b5a:	9501      	str	r5, [sp, #4]
 8008b5c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8008b60:	4631      	mov	r1, r6
 8008b62:	4628      	mov	r0, r5
 8008b64:	4617      	mov	r7, r2
 8008b66:	f7f8 f84d 	bl	8000c04 <__addsf3>
 8008b6a:	4631      	mov	r1, r6
 8008b6c:	9007      	str	r0, [sp, #28]
 8008b6e:	4628      	mov	r0, r5
 8008b70:	f7f8 f846 	bl	8000c00 <__aeabi_fsub>
 8008b74:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8008b78:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008b7c:	4683      	mov	fp, r0
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4628      	mov	r0, r5
 8008b82:	9715      	str	r7, [sp, #84]	@ 0x54
 8008b84:	f7f8 f83e 	bl	8000c04 <__addsf3>
 8008b88:	4631      	mov	r1, r6
 8008b8a:	900e      	str	r0, [sp, #56]	@ 0x38
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	f7f8 f837 	bl	8000c00 <__aeabi_fsub>
 8008b92:	9f02      	ldr	r7, [sp, #8]
 8008b94:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8008b98:	68bd      	ldr	r5, [r7, #8]
 8008b9a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	f7f8 f82e 	bl	8000c00 <__aeabi_fsub>
 8008ba4:	4601      	mov	r1, r0
 8008ba6:	9017      	str	r0, [sp, #92]	@ 0x5c
 8008ba8:	4658      	mov	r0, fp
 8008baa:	f7f8 f82b 	bl	8000c04 <__addsf3>
 8008bae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008bb2:	9702      	str	r7, [sp, #8]
 8008bb4:	687f      	ldr	r7, [r7, #4]
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	9010      	str	r0, [sp, #64]	@ 0x40
 8008bba:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8008bbc:	9312      	str	r3, [sp, #72]	@ 0x48
 8008bbe:	f7f8 f81f 	bl	8000c00 <__aeabi_fsub>
 8008bc2:	4639      	mov	r1, r7
 8008bc4:	f7f8 f81e 	bl	8000c04 <__addsf3>
 8008bc8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008bca:	9011      	str	r0, [sp, #68]	@ 0x44
 8008bcc:	4619      	mov	r1, r3
 8008bce:	9807      	ldr	r0, [sp, #28]
 8008bd0:	9316      	str	r3, [sp, #88]	@ 0x58
 8008bd2:	f7f8 f815 	bl	8000c00 <__aeabi_fsub>
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	f7f8 f812 	bl	8000c00 <__aeabi_fsub>
 8008bdc:	4631      	mov	r1, r6
 8008bde:	9012      	str	r0, [sp, #72]	@ 0x48
 8008be0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8008be2:	f7f8 f80d 	bl	8000c00 <__aeabi_fsub>
 8008be6:	4629      	mov	r1, r5
 8008be8:	f7f8 f80a 	bl	8000c00 <__aeabi_fsub>
 8008bec:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008bee:	4659      	mov	r1, fp
 8008bf0:	9013      	str	r0, [sp, #76]	@ 0x4c
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f7f8 f804 	bl	8000c00 <__aeabi_fsub>
 8008bf8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008bfa:	4683      	mov	fp, r0
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4638      	mov	r0, r7
 8008c00:	f7f7 fffe 	bl	8000c00 <__aeabi_fsub>
 8008c04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008c06:	f7f7 fffb 	bl	8000c00 <__aeabi_fsub>
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	4607      	mov	r7, r0
 8008c0e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8008c10:	f7f7 fff8 	bl	8000c04 <__addsf3>
 8008c14:	4629      	mov	r1, r5
 8008c16:	f7f7 fff5 	bl	8000c04 <__addsf3>
 8008c1a:	f844 0c04 	str.w	r0, [r4, #-4]
 8008c1e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c22:	9807      	ldr	r0, [sp, #28]
 8008c24:	f7f7 ffee 	bl	8000c04 <__addsf3>
 8008c28:	9902      	ldr	r1, [sp, #8]
 8008c2a:	f1a8 0808 	sub.w	r8, r8, #8
 8008c2e:	6849      	ldr	r1, [r1, #4]
 8008c30:	f7f7 ffe8 	bl	8000c04 <__addsf3>
 8008c34:	9d05      	ldr	r5, [sp, #20]
 8008c36:	f844 0c08 	str.w	r0, [r4, #-8]
 8008c3a:	f855 4c08 	ldr.w	r4, [r5, #-8]
 8008c3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c40:	4621      	mov	r1, r4
 8008c42:	f7f8 f8e7 	bl	8000e14 <__aeabi_fmul>
 8008c46:	f855 5c04 	ldr.w	r5, [r5, #-4]
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008c50:	f7f8 f8e0 	bl	8000e14 <__aeabi_fmul>
 8008c54:	4601      	mov	r1, r0
 8008c56:	4630      	mov	r0, r6
 8008c58:	f7f7 ffd4 	bl	8000c04 <__addsf3>
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	f849 0c10 	str.w	r0, [r9, #-16]
 8008c62:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008c64:	f7f8 f8d6 	bl	8000e14 <__aeabi_fmul>
 8008c68:	4629      	mov	r1, r5
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c6e:	f7f8 f8d1 	bl	8000e14 <__aeabi_fmul>
 8008c72:	4601      	mov	r1, r0
 8008c74:	4630      	mov	r0, r6
 8008c76:	f7f7 ffc3 	bl	8000c00 <__aeabi_fsub>
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	f849 0c0c 	str.w	r0, [r9, #-12]
 8008c80:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8008c82:	f7f8 f8c7 	bl	8000e14 <__aeabi_fmul>
 8008c86:	4621      	mov	r1, r4
 8008c88:	4606      	mov	r6, r0
 8008c8a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008c8c:	f7f8 f8c2 	bl	8000e14 <__aeabi_fmul>
 8008c90:	4601      	mov	r1, r0
 8008c92:	4630      	mov	r0, r6
 8008c94:	f7f7 ffb4 	bl	8000c00 <__aeabi_fsub>
 8008c98:	4629      	mov	r1, r5
 8008c9a:	f8c8 0010 	str.w	r0, [r8, #16]
 8008c9e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008ca0:	f7f8 f8b8 	bl	8000e14 <__aeabi_fmul>
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	4605      	mov	r5, r0
 8008ca8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8008caa:	f7f8 f8b3 	bl	8000e14 <__aeabi_fmul>
 8008cae:	4601      	mov	r1, r0
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	f7f7 ffa7 	bl	8000c04 <__addsf3>
 8008cb6:	9904      	ldr	r1, [sp, #16]
 8008cb8:	f8c8 000c 	str.w	r0, [r8, #12]
 8008cbc:	f851 4c10 	ldr.w	r4, [r1, #-16]
 8008cc0:	f851 5c0c 	ldr.w	r5, [r1, #-12]
 8008cc4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	f7f8 f8a4 	bl	8000e14 <__aeabi_fmul>
 8008ccc:	4629      	mov	r1, r5
 8008cce:	4606      	mov	r6, r0
 8008cd0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008cd2:	f7f8 f89f 	bl	8000e14 <__aeabi_fmul>
 8008cd6:	4601      	mov	r1, r0
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f7f7 ff93 	bl	8000c04 <__addsf3>
 8008cde:	9a00      	ldr	r2, [sp, #0]
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	f842 0c08 	str.w	r0, [r2, #-8]
 8008ce6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008ce8:	f7f8 f894 	bl	8000e14 <__aeabi_fmul>
 8008cec:	4629      	mov	r1, r5
 8008cee:	4606      	mov	r6, r0
 8008cf0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008cf2:	f7f8 f88f 	bl	8000e14 <__aeabi_fmul>
 8008cf6:	4601      	mov	r1, r0
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f7f7 ff81 	bl	8000c00 <__aeabi_fsub>
 8008cfe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008d00:	9a00      	ldr	r2, [sp, #0]
 8008d02:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008d06:	f842 0c04 	str.w	r0, [r2, #-4]
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7f8 f881 	bl	8000e14 <__aeabi_fmul>
 8008d12:	4629      	mov	r1, r5
 8008d14:	4606      	mov	r6, r0
 8008d16:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008d18:	f7f8 f87c 	bl	8000e14 <__aeabi_fmul>
 8008d1c:	4601      	mov	r1, r0
 8008d1e:	4630      	mov	r0, r6
 8008d20:	f7f7 ff6e 	bl	8000c00 <__aeabi_fsub>
 8008d24:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008d26:	4629      	mov	r1, r5
 8008d28:	f846 0c04 	str.w	r0, [r6, #-4]
 8008d2c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8008d2e:	f7f8 f871 	bl	8000e14 <__aeabi_fmul>
 8008d32:	4621      	mov	r1, r4
 8008d34:	4605      	mov	r5, r0
 8008d36:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008d38:	f7f8 f86c 	bl	8000e14 <__aeabi_fmul>
 8008d3c:	4601      	mov	r1, r0
 8008d3e:	4628      	mov	r0, r5
 8008d40:	f7f7 ff5e 	bl	8000c00 <__aeabi_fsub>
 8008d44:	f846 0c08 	str.w	r0, [r6, #-8]
 8008d48:	9e03      	ldr	r6, [sp, #12]
 8008d4a:	9808      	ldr	r0, [sp, #32]
 8008d4c:	f856 4c18 	ldr.w	r4, [r6, #-24]
 8008d50:	f856 5c14 	ldr.w	r5, [r6, #-20]
 8008d54:	4621      	mov	r1, r4
 8008d56:	f7f8 f85d 	bl	8000e14 <__aeabi_fmul>
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	4606      	mov	r6, r0
 8008d5e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008d60:	f7f8 f858 	bl	8000e14 <__aeabi_fmul>
 8008d64:	4601      	mov	r1, r0
 8008d66:	4630      	mov	r0, r6
 8008d68:	f7f7 ff4c 	bl	8000c04 <__addsf3>
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	f84a 0c08 	str.w	r0, [sl, #-8]
 8008d72:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008d74:	f7f8 f84e 	bl	8000e14 <__aeabi_fmul>
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	9808      	ldr	r0, [sp, #32]
 8008d7e:	f7f8 f849 	bl	8000e14 <__aeabi_fmul>
 8008d82:	4601      	mov	r1, r0
 8008d84:	4630      	mov	r0, r6
 8008d86:	f7f7 ff3b 	bl	8000c00 <__aeabi_fsub>
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	f84a 0c04 	str.w	r0, [sl, #-4]
 8008d90:	4638      	mov	r0, r7
 8008d92:	f7f8 f83f 	bl	8000e14 <__aeabi_fmul>
 8008d96:	4621      	mov	r1, r4
 8008d98:	4606      	mov	r6, r0
 8008d9a:	4658      	mov	r0, fp
 8008d9c:	f7f8 f83a 	bl	8000e14 <__aeabi_fmul>
 8008da0:	4601      	mov	r1, r0
 8008da2:	4630      	mov	r0, r6
 8008da4:	f7f7 ff2c 	bl	8000c00 <__aeabi_fsub>
 8008da8:	9e02      	ldr	r6, [sp, #8]
 8008daa:	4629      	mov	r1, r5
 8008dac:	60b0      	str	r0, [r6, #8]
 8008dae:	4658      	mov	r0, fp
 8008db0:	f7f8 f830 	bl	8000e14 <__aeabi_fmul>
 8008db4:	4621      	mov	r1, r4
 8008db6:	4605      	mov	r5, r0
 8008db8:	4638      	mov	r0, r7
 8008dba:	f7f8 f82b 	bl	8000e14 <__aeabi_fmul>
 8008dbe:	4601      	mov	r1, r0
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	f7f7 ff1f 	bl	8000c04 <__addsf3>
 8008dc6:	9b01      	ldr	r3, [sp, #4]
 8008dc8:	9d05      	ldr	r5, [sp, #20]
 8008dca:	461f      	mov	r7, r3
 8008dcc:	9b06      	ldr	r3, [sp, #24]
 8008dce:	9904      	ldr	r1, [sp, #16]
 8008dd0:	3b08      	subs	r3, #8
 8008dd2:	9306      	str	r3, [sp, #24]
 8008dd4:	f105 0308 	add.w	r3, r5, #8
 8008dd8:	9305      	str	r3, [sp, #20]
 8008dda:	3708      	adds	r7, #8
 8008ddc:	f101 0310 	add.w	r3, r1, #16
 8008de0:	9701      	str	r7, [sp, #4]
 8008de2:	9304      	str	r3, [sp, #16]
 8008de4:	9a00      	ldr	r2, [sp, #0]
 8008de6:	9c03      	ldr	r4, [sp, #12]
 8008de8:	f102 0308 	add.w	r3, r2, #8
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	f104 0318 	add.w	r3, r4, #24
 8008df2:	9303      	str	r3, [sp, #12]
 8008df4:	f1a6 0308 	sub.w	r3, r6, #8
 8008df8:	9302      	str	r3, [sp, #8]
 8008dfa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008dfc:	f10a 0a08 	add.w	sl, sl, #8
 8008e00:	3b01      	subs	r3, #1
 8008e02:	6070      	str	r0, [r6, #4]
 8008e04:	9314      	str	r3, [sp, #80]	@ 0x50
 8008e06:	f47f ae31 	bne.w	8008a6c <arm_cfft_radix8by4_f32+0x184>
 8008e0a:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8008e0c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8008e0e:	00cb      	lsls	r3, r1, #3
 8008e10:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008e14:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008e18:	9122      	str	r1, [sp, #136]	@ 0x88
 8008e1a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8008e1c:	4419      	add	r1, r3
 8008e1e:	911d      	str	r1, [sp, #116]	@ 0x74
 8008e20:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8008e22:	4419      	add	r1, r3
 8008e24:	9121      	str	r1, [sp, #132]	@ 0x84
 8008e26:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8008e28:	4419      	add	r1, r3
 8008e2a:	911f      	str	r1, [sp, #124]	@ 0x7c
 8008e2c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008e2e:	4419      	add	r1, r3
 8008e30:	911e      	str	r1, [sp, #120]	@ 0x78
 8008e32:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8008e34:	4419      	add	r1, r3
 8008e36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008e38:	911c      	str	r1, [sp, #112]	@ 0x70
 8008e3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e3e:	9320      	str	r3, [sp, #128]	@ 0x80
 8008e40:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8008e42:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 8008e44:	6834      	ldr	r4, [r6, #0]
 8008e46:	683d      	ldr	r5, [r7, #0]
 8008e48:	4620      	mov	r0, r4
 8008e4a:	4629      	mov	r1, r5
 8008e4c:	f7f7 feda 	bl	8000c04 <__addsf3>
 8008e50:	4629      	mov	r1, r5
 8008e52:	4681      	mov	r9, r0
 8008e54:	4620      	mov	r0, r4
 8008e56:	f7f7 fed3 	bl	8000c00 <__aeabi_fsub>
 8008e5a:	6874      	ldr	r4, [r6, #4]
 8008e5c:	687d      	ldr	r5, [r7, #4]
 8008e5e:	4683      	mov	fp, r0
 8008e60:	4629      	mov	r1, r5
 8008e62:	4620      	mov	r0, r4
 8008e64:	961d      	str	r6, [sp, #116]	@ 0x74
 8008e66:	971e      	str	r7, [sp, #120]	@ 0x78
 8008e68:	f7f7 fecc 	bl	8000c04 <__addsf3>
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	4680      	mov	r8, r0
 8008e70:	4620      	mov	r0, r4
 8008e72:	f7f7 fec5 	bl	8000c00 <__aeabi_fsub>
 8008e76:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 8008e78:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008e7a:	6867      	ldr	r7, [r4, #4]
 8008e7c:	685e      	ldr	r6, [r3, #4]
 8008e7e:	4682      	mov	sl, r0
 8008e80:	4639      	mov	r1, r7
 8008e82:	4658      	mov	r0, fp
 8008e84:	f7f7 febe 	bl	8000c04 <__addsf3>
 8008e88:	4631      	mov	r1, r6
 8008e8a:	f7f7 feb9 	bl	8000c00 <__aeabi_fsub>
 8008e8e:	6825      	ldr	r5, [r4, #0]
 8008e90:	941f      	str	r4, [sp, #124]	@ 0x7c
 8008e92:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8008e94:	9000      	str	r0, [sp, #0]
 8008e96:	6824      	ldr	r4, [r4, #0]
 8008e98:	4629      	mov	r1, r5
 8008e9a:	4650      	mov	r0, sl
 8008e9c:	f7f7 feb0 	bl	8000c00 <__aeabi_fsub>
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	f7f7 feaf 	bl	8000c04 <__addsf3>
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	9001      	str	r0, [sp, #4]
 8008eaa:	4648      	mov	r0, r9
 8008eac:	f7f7 fea8 	bl	8000c00 <__aeabi_fsub>
 8008eb0:	4621      	mov	r1, r4
 8008eb2:	f7f7 fea5 	bl	8000c00 <__aeabi_fsub>
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	9002      	str	r0, [sp, #8]
 8008eba:	4640      	mov	r0, r8
 8008ebc:	f7f7 fea0 	bl	8000c00 <__aeabi_fsub>
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	f7f7 fe9d 	bl	8000c00 <__aeabi_fsub>
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	9003      	str	r0, [sp, #12]
 8008eca:	4658      	mov	r0, fp
 8008ecc:	f7f7 fe98 	bl	8000c00 <__aeabi_fsub>
 8008ed0:	4631      	mov	r1, r6
 8008ed2:	f7f7 fe97 	bl	8000c04 <__addsf3>
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	4606      	mov	r6, r0
 8008eda:	4650      	mov	r0, sl
 8008edc:	f7f7 fe92 	bl	8000c04 <__addsf3>
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	f7f7 fe8d 	bl	8000c00 <__aeabi_fsub>
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	4682      	mov	sl, r0
 8008eea:	4648      	mov	r0, r9
 8008eec:	f7f7 fe8a 	bl	8000c04 <__addsf3>
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	f7f7 fe87 	bl	8000c04 <__addsf3>
 8008ef6:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8008ef8:	6028      	str	r0, [r5, #0]
 8008efa:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 8008efc:	4640      	mov	r0, r8
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	f7f7 fe80 	bl	8000c04 <__addsf3>
 8008f04:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008f06:	6851      	ldr	r1, [r2, #4]
 8008f08:	f7f7 fe7c 	bl	8000c04 <__addsf3>
 8008f0c:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 8008f0e:	6068      	str	r0, [r5, #4]
 8008f10:	6825      	ldr	r5, [r4, #0]
 8008f12:	f8dd 9000 	ldr.w	r9, [sp]
 8008f16:	4629      	mov	r1, r5
 8008f18:	4648      	mov	r0, r9
 8008f1a:	f7f7 ff7b 	bl	8000e14 <__aeabi_fmul>
 8008f1e:	6864      	ldr	r4, [r4, #4]
 8008f20:	f8dd b004 	ldr.w	fp, [sp, #4]
 8008f24:	4680      	mov	r8, r0
 8008f26:	4621      	mov	r1, r4
 8008f28:	4658      	mov	r0, fp
 8008f2a:	f7f7 ff73 	bl	8000e14 <__aeabi_fmul>
 8008f2e:	4601      	mov	r1, r0
 8008f30:	4640      	mov	r0, r8
 8008f32:	f7f7 fe67 	bl	8000c04 <__addsf3>
 8008f36:	4629      	mov	r1, r5
 8008f38:	6038      	str	r0, [r7, #0]
 8008f3a:	4658      	mov	r0, fp
 8008f3c:	f7f7 ff6a 	bl	8000e14 <__aeabi_fmul>
 8008f40:	4621      	mov	r1, r4
 8008f42:	4605      	mov	r5, r0
 8008f44:	4648      	mov	r0, r9
 8008f46:	f7f7 ff65 	bl	8000e14 <__aeabi_fmul>
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	f7f7 fe57 	bl	8000c00 <__aeabi_fsub>
 8008f52:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	6825      	ldr	r5, [r4, #0]
 8008f58:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008f5c:	4629      	mov	r1, r5
 8008f5e:	4648      	mov	r0, r9
 8008f60:	f7f7 ff58 	bl	8000e14 <__aeabi_fmul>
 8008f64:	6864      	ldr	r4, [r4, #4]
 8008f66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008f6a:	4607      	mov	r7, r0
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4640      	mov	r0, r8
 8008f70:	f7f7 ff50 	bl	8000e14 <__aeabi_fmul>
 8008f74:	4601      	mov	r1, r0
 8008f76:	4638      	mov	r0, r7
 8008f78:	f7f7 fe44 	bl	8000c04 <__addsf3>
 8008f7c:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 8008f7e:	4629      	mov	r1, r5
 8008f80:	6038      	str	r0, [r7, #0]
 8008f82:	4640      	mov	r0, r8
 8008f84:	f7f7 ff46 	bl	8000e14 <__aeabi_fmul>
 8008f88:	4621      	mov	r1, r4
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	4648      	mov	r0, r9
 8008f8e:	f7f7 ff41 	bl	8000e14 <__aeabi_fmul>
 8008f92:	4601      	mov	r1, r0
 8008f94:	4628      	mov	r0, r5
 8008f96:	f7f7 fe33 	bl	8000c00 <__aeabi_fsub>
 8008f9a:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	680d      	ldr	r5, [r1, #0]
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	684c      	ldr	r4, [r1, #4]
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	f7f7 ff35 	bl	8000e14 <__aeabi_fmul>
 8008faa:	4621      	mov	r1, r4
 8008fac:	4607      	mov	r7, r0
 8008fae:	4650      	mov	r0, sl
 8008fb0:	f7f7 ff30 	bl	8000e14 <__aeabi_fmul>
 8008fb4:	4601      	mov	r1, r0
 8008fb6:	4638      	mov	r0, r7
 8008fb8:	f7f7 fe24 	bl	8000c04 <__addsf3>
 8008fbc:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	6038      	str	r0, [r7, #0]
 8008fc2:	4650      	mov	r0, sl
 8008fc4:	f7f7 ff26 	bl	8000e14 <__aeabi_fmul>
 8008fc8:	4621      	mov	r1, r4
 8008fca:	4605      	mov	r5, r0
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f7f7 ff21 	bl	8000e14 <__aeabi_fmul>
 8008fd2:	4601      	mov	r1, r0
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	f7f7 fe13 	bl	8000c00 <__aeabi_fsub>
 8008fda:	f8bd 4090 	ldrh.w	r4, [sp, #144]	@ 0x90
 8008fde:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	6872      	ldr	r2, [r6, #4]
 8008fe4:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	2304      	movs	r3, #4
 8008fea:	f000 f8d7 	bl	800919c <arm_radix8_butterfly_f32>
 8008fee:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	6872      	ldr	r2, [r6, #4]
 8008ff4:	2304      	movs	r3, #4
 8008ff6:	f000 f8d1 	bl	800919c <arm_radix8_butterfly_f32>
 8008ffa:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	6872      	ldr	r2, [r6, #4]
 8009000:	2304      	movs	r3, #4
 8009002:	f000 f8cb 	bl	800919c <arm_radix8_butterfly_f32>
 8009006:	4621      	mov	r1, r4
 8009008:	6872      	ldr	r2, [r6, #4]
 800900a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800900c:	2304      	movs	r3, #4
 800900e:	b027      	add	sp, #156	@ 0x9c
 8009010:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	f000 b8c2 	b.w	800919c <arm_radix8_butterfly_f32>

08009018 <arm_cfft_f32>:
 8009018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800901c:	2a01      	cmp	r2, #1
 800901e:	4606      	mov	r6, r0
 8009020:	4617      	mov	r7, r2
 8009022:	460c      	mov	r4, r1
 8009024:	4698      	mov	r8, r3
 8009026:	8805      	ldrh	r5, [r0, #0]
 8009028:	d058      	beq.n	80090dc <arm_cfft_f32+0xc4>
 800902a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800902e:	d050      	beq.n	80090d2 <arm_cfft_f32+0xba>
 8009030:	d916      	bls.n	8009060 <arm_cfft_f32+0x48>
 8009032:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8009036:	d01a      	beq.n	800906e <arm_cfft_f32+0x56>
 8009038:	d960      	bls.n	80090fc <arm_cfft_f32+0xe4>
 800903a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800903e:	d048      	beq.n	80090d2 <arm_cfft_f32+0xba>
 8009040:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8009044:	d105      	bne.n	8009052 <arm_cfft_f32+0x3a>
 8009046:	2301      	movs	r3, #1
 8009048:	6872      	ldr	r2, [r6, #4]
 800904a:	4629      	mov	r1, r5
 800904c:	4620      	mov	r0, r4
 800904e:	f000 f8a5 	bl	800919c <arm_radix8_butterfly_f32>
 8009052:	f1b8 0f00 	cmp.w	r8, #0
 8009056:	d111      	bne.n	800907c <arm_cfft_f32+0x64>
 8009058:	2f01      	cmp	r7, #1
 800905a:	d016      	beq.n	800908a <arm_cfft_f32+0x72>
 800905c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009060:	2d20      	cmp	r5, #32
 8009062:	d036      	beq.n	80090d2 <arm_cfft_f32+0xba>
 8009064:	d94e      	bls.n	8009104 <arm_cfft_f32+0xec>
 8009066:	2d40      	cmp	r5, #64	@ 0x40
 8009068:	d0ed      	beq.n	8009046 <arm_cfft_f32+0x2e>
 800906a:	2d80      	cmp	r5, #128	@ 0x80
 800906c:	d1f1      	bne.n	8009052 <arm_cfft_f32+0x3a>
 800906e:	4621      	mov	r1, r4
 8009070:	4630      	mov	r0, r6
 8009072:	f7ff fae5 	bl	8008640 <arm_cfft_radix8by2_f32>
 8009076:	f1b8 0f00 	cmp.w	r8, #0
 800907a:	d0ed      	beq.n	8009058 <arm_cfft_f32+0x40>
 800907c:	68b2      	ldr	r2, [r6, #8]
 800907e:	89b1      	ldrh	r1, [r6, #12]
 8009080:	4620      	mov	r0, r4
 8009082:	f7f7 f8d1 	bl	8000228 <arm_bitreversal_32>
 8009086:	2f01      	cmp	r7, #1
 8009088:	d1e8      	bne.n	800905c <arm_cfft_f32+0x44>
 800908a:	4628      	mov	r0, r5
 800908c:	f7f7 fe6a 	bl	8000d64 <__aeabi_ui2f>
 8009090:	4601      	mov	r1, r0
 8009092:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009096:	f7f7 ff71 	bl	8000f7c <__aeabi_fdiv>
 800909a:	4607      	mov	r7, r0
 800909c:	2d00      	cmp	r5, #0
 800909e:	d0dd      	beq.n	800905c <arm_cfft_f32+0x44>
 80090a0:	3408      	adds	r4, #8
 80090a2:	2600      	movs	r6, #0
 80090a4:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80090a8:	4639      	mov	r1, r7
 80090aa:	f7f7 feb3 	bl	8000e14 <__aeabi_fmul>
 80090ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80090b2:	f844 0c08 	str.w	r0, [r4, #-8]
 80090b6:	4639      	mov	r1, r7
 80090b8:	f103 4000 	add.w	r0, r3, #2147483648	@ 0x80000000
 80090bc:	f7f7 feaa 	bl	8000e14 <__aeabi_fmul>
 80090c0:	3601      	adds	r6, #1
 80090c2:	42b5      	cmp	r5, r6
 80090c4:	f844 0c04 	str.w	r0, [r4, #-4]
 80090c8:	f104 0408 	add.w	r4, r4, #8
 80090cc:	d1ea      	bne.n	80090a4 <arm_cfft_f32+0x8c>
 80090ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d2:	4621      	mov	r1, r4
 80090d4:	4630      	mov	r0, r6
 80090d6:	f7ff fc07 	bl	80088e8 <arm_cfft_radix8by4_f32>
 80090da:	e7ba      	b.n	8009052 <arm_cfft_f32+0x3a>
 80090dc:	b1ad      	cbz	r5, 800910a <arm_cfft_f32+0xf2>
 80090de:	f101 030c 	add.w	r3, r1, #12
 80090e2:	2100      	movs	r1, #0
 80090e4:	f853 2c08 	ldr.w	r2, [r3, #-8]
 80090e8:	3101      	adds	r1, #1
 80090ea:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80090ee:	428d      	cmp	r5, r1
 80090f0:	f843 2c08 	str.w	r2, [r3, #-8]
 80090f4:	f103 0308 	add.w	r3, r3, #8
 80090f8:	d1f4      	bne.n	80090e4 <arm_cfft_f32+0xcc>
 80090fa:	e796      	b.n	800902a <arm_cfft_f32+0x12>
 80090fc:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8009100:	d0a1      	beq.n	8009046 <arm_cfft_f32+0x2e>
 8009102:	e7a6      	b.n	8009052 <arm_cfft_f32+0x3a>
 8009104:	2d10      	cmp	r5, #16
 8009106:	d0b2      	beq.n	800906e <arm_cfft_f32+0x56>
 8009108:	e7a3      	b.n	8009052 <arm_cfft_f32+0x3a>
 800910a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800910e:	d890      	bhi.n	8009032 <arm_cfft_f32+0x1a>
 8009110:	e7a6      	b.n	8009060 <arm_cfft_f32+0x48>
 8009112:	bf00      	nop

08009114 <arm_cos_f32>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	491f      	ldr	r1, [pc, #124]	@ (8009194 <arm_cos_f32+0x80>)
 8009118:	f7f7 fe7c 	bl	8000e14 <__aeabi_fmul>
 800911c:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8009120:	f7f7 fd70 	bl	8000c04 <__addsf3>
 8009124:	4604      	mov	r4, r0
 8009126:	f7f8 f851 	bl	80011cc <__aeabi_f2iz>
 800912a:	2100      	movs	r1, #0
 800912c:	4605      	mov	r5, r0
 800912e:	4620      	mov	r0, r4
 8009130:	f7f8 f80e 	bl	8001150 <__aeabi_fcmplt>
 8009134:	b100      	cbz	r0, 8009138 <arm_cos_f32+0x24>
 8009136:	3d01      	subs	r5, #1
 8009138:	4628      	mov	r0, r5
 800913a:	f7f7 fe17 	bl	8000d6c <__aeabi_i2f>
 800913e:	4601      	mov	r1, r0
 8009140:	4620      	mov	r0, r4
 8009142:	f7f7 fd5d 	bl	8000c00 <__aeabi_fsub>
 8009146:	f04f 4188 	mov.w	r1, #1140850688	@ 0x44000000
 800914a:	f7f7 fe63 	bl	8000e14 <__aeabi_fmul>
 800914e:	4605      	mov	r5, r0
 8009150:	f7f8 f862 	bl	8001218 <__aeabi_f2uiz>
 8009154:	f3c0 0408 	ubfx	r4, r0, #0, #9
 8009158:	4620      	mov	r0, r4
 800915a:	f7f7 fe03 	bl	8000d64 <__aeabi_ui2f>
 800915e:	4601      	mov	r1, r0
 8009160:	4628      	mov	r0, r5
 8009162:	f7f7 fd4d 	bl	8000c00 <__aeabi_fsub>
 8009166:	4e0c      	ldr	r6, [pc, #48]	@ (8009198 <arm_cos_f32+0x84>)
 8009168:	4605      	mov	r5, r0
 800916a:	4601      	mov	r1, r0
 800916c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009170:	f7f7 fd46 	bl	8000c00 <__aeabi_fsub>
 8009174:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8009178:	f7f7 fe4c 	bl	8000e14 <__aeabi_fmul>
 800917c:	3401      	adds	r4, #1
 800917e:	4607      	mov	r7, r0
 8009180:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8009184:	4628      	mov	r0, r5
 8009186:	f7f7 fe45 	bl	8000e14 <__aeabi_fmul>
 800918a:	4601      	mov	r1, r0
 800918c:	4638      	mov	r0, r7
 800918e:	f7f7 fd39 	bl	8000c04 <__addsf3>
 8009192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009194:	3e22f983 	.word	0x3e22f983
 8009198:	080187b8 	.word	0x080187b8

0800919c <arm_radix8_butterfly_f32>:
 800919c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a0:	b0b9      	sub	sp, #228	@ 0xe4
 80091a2:	9314      	str	r3, [sp, #80]	@ 0x50
 80091a4:	4605      	mov	r5, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	9118      	str	r1, [sp, #96]	@ 0x60
 80091aa:	902b      	str	r0, [sp, #172]	@ 0xac
 80091ac:	9237      	str	r2, [sp, #220]	@ 0xdc
 80091ae:	9117      	str	r1, [sp, #92]	@ 0x5c
 80091b0:	08db      	lsrs	r3, r3, #3
 80091b2:	00d9      	lsls	r1, r3, #3
 80091b4:	460e      	mov	r6, r1
 80091b6:	9116      	str	r1, [sp, #88]	@ 0x58
 80091b8:	4629      	mov	r1, r5
 80091ba:	461f      	mov	r7, r3
 80091bc:	4431      	add	r1, r6
 80091be:	9112      	str	r1, [sp, #72]	@ 0x48
 80091c0:	005a      	lsls	r2, r3, #1
 80091c2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80091c4:	9215      	str	r2, [sp, #84]	@ 0x54
 80091c6:	441a      	add	r2, r3
 80091c8:	1986      	adds	r6, r0, r6
 80091ca:	9323      	str	r3, [sp, #140]	@ 0x8c
 80091cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80091d0:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80091d4:	960a      	str	r6, [sp, #40]	@ 0x28
 80091d6:	1d16      	adds	r6, r2, #4
 80091d8:	46b3      	mov	fp, r6
 80091da:	ebc7 7147 	rsb	r1, r7, r7, lsl #29
 80091de:	eb03 0447 	add.w	r4, r3, r7, lsl #1
 80091e2:	00c9      	lsls	r1, r1, #3
 80091e4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80091e8:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 80091ea:	1d1a      	adds	r2, r3, #4
 80091ec:	9103      	str	r1, [sp, #12]
 80091ee:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80091f2:	9202      	str	r2, [sp, #8]
 80091f4:	9c03      	ldr	r4, [sp, #12]
 80091f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091f8:	eba7 0087 	sub.w	r0, r7, r7, lsl #2
 80091fc:	4422      	add	r2, r4
 80091fe:	ebc7 7107 	rsb	r1, r7, r7, lsl #28
 8009202:	9213      	str	r2, [sp, #76]	@ 0x4c
 8009204:	00c2      	lsls	r2, r0, #3
 8009206:	9204      	str	r2, [sp, #16]
 8009208:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800920a:	010a      	lsls	r2, r1, #4
 800920c:	9507      	str	r5, [sp, #28]
 800920e:	9206      	str	r2, [sp, #24]
 8009210:	013a      	lsls	r2, r7, #4
 8009212:	9205      	str	r2, [sp, #20]
 8009214:	00db      	lsls	r3, r3, #3
 8009216:	2200      	movs	r2, #0
 8009218:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800921c:	9330      	str	r3, [sp, #192]	@ 0xc0
 800921e:	9201      	str	r2, [sp, #4]
 8009220:	9311      	str	r3, [sp, #68]	@ 0x44
 8009222:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8009224:	9f01      	ldr	r7, [sp, #4]
 8009226:	461a      	mov	r2, r3
 8009228:	9b04      	ldr	r3, [sp, #16]
 800922a:	f852 5037 	ldr.w	r5, [r2, r7, lsl #3]
 800922e:	f85a 6003 	ldr.w	r6, [sl, r3]
 8009232:	4628      	mov	r0, r5
 8009234:	4631      	mov	r1, r6
 8009236:	f7f7 fce5 	bl	8000c04 <__addsf3>
 800923a:	4631      	mov	r1, r6
 800923c:	4604      	mov	r4, r0
 800923e:	4628      	mov	r0, r5
 8009240:	f7f7 fcde 	bl	8000c00 <__aeabi_fsub>
 8009244:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009246:	9b02      	ldr	r3, [sp, #8]
 8009248:	4611      	mov	r1, r2
 800924a:	9701      	str	r7, [sp, #4]
 800924c:	f851 6037 	ldr.w	r6, [r1, r7, lsl #3]
 8009250:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8009254:	9009      	str	r0, [sp, #36]	@ 0x24
 8009256:	4639      	mov	r1, r7
 8009258:	4630      	mov	r0, r6
 800925a:	f7f7 fcd3 	bl	8000c04 <__addsf3>
 800925e:	4639      	mov	r1, r7
 8009260:	4605      	mov	r5, r0
 8009262:	4630      	mov	r0, r6
 8009264:	f7f7 fccc 	bl	8000c00 <__aeabi_fsub>
 8009268:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800926a:	9f03      	ldr	r7, [sp, #12]
 800926c:	468e      	mov	lr, r1
 800926e:	9901      	ldr	r1, [sp, #4]
 8009270:	f85a 8007 	ldr.w	r8, [sl, r7]
 8009274:	f85e 6031 	ldr.w	r6, [lr, r1, lsl #3]
 8009278:	900b      	str	r0, [sp, #44]	@ 0x2c
 800927a:	4641      	mov	r1, r8
 800927c:	4630      	mov	r0, r6
 800927e:	f7f7 fcc1 	bl	8000c04 <__addsf3>
 8009282:	4641      	mov	r1, r8
 8009284:	4607      	mov	r7, r0
 8009286:	4630      	mov	r0, r6
 8009288:	f7f7 fcba 	bl	8000c00 <__aeabi_fsub>
 800928c:	f85b 8c04 	ldr.w	r8, [fp, #-4]
 8009290:	f8da 9000 	ldr.w	r9, [sl]
 8009294:	900c      	str	r0, [sp, #48]	@ 0x30
 8009296:	4649      	mov	r1, r9
 8009298:	4640      	mov	r0, r8
 800929a:	f7f7 fcb3 	bl	8000c04 <__addsf3>
 800929e:	4649      	mov	r1, r9
 80092a0:	4606      	mov	r6, r0
 80092a2:	4640      	mov	r0, r8
 80092a4:	f7f7 fcac 	bl	8000c00 <__aeabi_fsub>
 80092a8:	4639      	mov	r1, r7
 80092aa:	900d      	str	r0, [sp, #52]	@ 0x34
 80092ac:	4620      	mov	r0, r4
 80092ae:	f7f7 fca7 	bl	8000c00 <__aeabi_fsub>
 80092b2:	4639      	mov	r1, r7
 80092b4:	900e      	str	r0, [sp, #56]	@ 0x38
 80092b6:	4620      	mov	r0, r4
 80092b8:	f7f7 fca4 	bl	8000c04 <__addsf3>
 80092bc:	4631      	mov	r1, r6
 80092be:	4604      	mov	r4, r0
 80092c0:	4628      	mov	r0, r5
 80092c2:	f7f7 fc9d 	bl	8000c00 <__aeabi_fsub>
 80092c6:	4631      	mov	r1, r6
 80092c8:	900f      	str	r0, [sp, #60]	@ 0x3c
 80092ca:	4628      	mov	r0, r5
 80092cc:	f7f7 fc9a 	bl	8000c04 <__addsf3>
 80092d0:	4605      	mov	r5, r0
 80092d2:	4601      	mov	r1, r0
 80092d4:	4620      	mov	r0, r4
 80092d6:	f7f7 fc95 	bl	8000c04 <__addsf3>
 80092da:	9b01      	ldr	r3, [sp, #4]
 80092dc:	9e2b      	ldr	r6, [sp, #172]	@ 0xac
 80092de:	4629      	mov	r1, r5
 80092e0:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
 80092e4:	4620      	mov	r0, r4
 80092e6:	f7f7 fc8b 	bl	8000c00 <__aeabi_fsub>
 80092ea:	9d04      	ldr	r5, [sp, #16]
 80092ec:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 80092ee:	f84a 0005 	str.w	r0, [sl, r5]
 80092f2:	f85b 4005 	ldr.w	r4, [fp, r5]
 80092f6:	f85b 5031 	ldr.w	r5, [fp, r1, lsl #3]
 80092fa:	4620      	mov	r0, r4
 80092fc:	4629      	mov	r1, r5
 80092fe:	f7f7 fc81 	bl	8000c04 <__addsf3>
 8009302:	4629      	mov	r1, r5
 8009304:	4607      	mov	r7, r0
 8009306:	4620      	mov	r0, r4
 8009308:	f7f7 fc7a 	bl	8000c00 <__aeabi_fsub>
 800930c:	9e05      	ldr	r6, [sp, #20]
 800930e:	9c06      	ldr	r4, [sp, #24]
 8009310:	f85b 5006 	ldr.w	r5, [fp, r6]
 8009314:	f85b 4004 	ldr.w	r4, [fp, r4]
 8009318:	4629      	mov	r1, r5
 800931a:	9010      	str	r0, [sp, #64]	@ 0x40
 800931c:	4620      	mov	r0, r4
 800931e:	f7f7 fc71 	bl	8000c04 <__addsf3>
 8009322:	4629      	mov	r1, r5
 8009324:	4681      	mov	r9, r0
 8009326:	4620      	mov	r0, r4
 8009328:	f7f7 fc6a 	bl	8000c00 <__aeabi_fsub>
 800932c:	9a02      	ldr	r2, [sp, #8]
 800932e:	9e03      	ldr	r6, [sp, #12]
 8009330:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8009332:	f85b 5006 	ldr.w	r5, [fp, r6]
 8009336:	f852 6031 	ldr.w	r6, [r2, r1, lsl #3]
 800933a:	4604      	mov	r4, r0
 800933c:	4631      	mov	r1, r6
 800933e:	4628      	mov	r0, r5
 8009340:	f7f7 fc60 	bl	8000c04 <__addsf3>
 8009344:	4631      	mov	r1, r6
 8009346:	4680      	mov	r8, r0
 8009348:	4628      	mov	r0, r5
 800934a:	f7f7 fc59 	bl	8000c00 <__aeabi_fsub>
 800934e:	9e06      	ldr	r6, [sp, #24]
 8009350:	9d02      	ldr	r5, [sp, #8]
 8009352:	9007      	str	r0, [sp, #28]
 8009354:	59ad      	ldr	r5, [r5, r6]
 8009356:	f8da 6004 	ldr.w	r6, [sl, #4]
 800935a:	4628      	mov	r0, r5
 800935c:	4631      	mov	r1, r6
 800935e:	f7f7 fc51 	bl	8000c04 <__addsf3>
 8009362:	4631      	mov	r1, r6
 8009364:	9008      	str	r0, [sp, #32]
 8009366:	4628      	mov	r0, r5
 8009368:	f7f7 fc4a 	bl	8000c00 <__aeabi_fsub>
 800936c:	4641      	mov	r1, r8
 800936e:	4606      	mov	r6, r0
 8009370:	4638      	mov	r0, r7
 8009372:	f7f7 fc45 	bl	8000c00 <__aeabi_fsub>
 8009376:	4641      	mov	r1, r8
 8009378:	4605      	mov	r5, r0
 800937a:	4638      	mov	r0, r7
 800937c:	f7f7 fc42 	bl	8000c04 <__addsf3>
 8009380:	9908      	ldr	r1, [sp, #32]
 8009382:	4680      	mov	r8, r0
 8009384:	4648      	mov	r0, r9
 8009386:	f7f7 fc3b 	bl	8000c00 <__aeabi_fsub>
 800938a:	9908      	ldr	r1, [sp, #32]
 800938c:	4607      	mov	r7, r0
 800938e:	4648      	mov	r0, r9
 8009390:	f7f7 fc38 	bl	8000c04 <__addsf3>
 8009394:	4681      	mov	r9, r0
 8009396:	4601      	mov	r1, r0
 8009398:	4640      	mov	r0, r8
 800939a:	f7f7 fc33 	bl	8000c04 <__addsf3>
 800939e:	9a04      	ldr	r2, [sp, #16]
 80093a0:	4649      	mov	r1, r9
 80093a2:	f84b 0002 	str.w	r0, [fp, r2]
 80093a6:	4640      	mov	r0, r8
 80093a8:	f7f7 fc2a 	bl	8000c00 <__aeabi_fsub>
 80093ac:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80093ae:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 80093b2:	f84b 0032 	str.w	r0, [fp, r2, lsl #3]
 80093b6:	4639      	mov	r1, r7
 80093b8:	4640      	mov	r0, r8
 80093ba:	f7f7 fc23 	bl	8000c04 <__addsf3>
 80093be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093c0:	9a01      	ldr	r2, [sp, #4]
 80093c2:	469e      	mov	lr, r3
 80093c4:	4639      	mov	r1, r7
 80093c6:	f84e 0032 	str.w	r0, [lr, r2, lsl #3]
 80093ca:	4640      	mov	r0, r8
 80093cc:	f7f7 fc18 	bl	8000c00 <__aeabi_fsub>
 80093d0:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 80093d4:	9f03      	ldr	r7, [sp, #12]
 80093d6:	4641      	mov	r1, r8
 80093d8:	f84a 0007 	str.w	r0, [sl, r7]
 80093dc:	4628      	mov	r0, r5
 80093de:	f7f7 fc0f 	bl	8000c00 <__aeabi_fsub>
 80093e2:	9f03      	ldr	r7, [sp, #12]
 80093e4:	4629      	mov	r1, r5
 80093e6:	f84b 0007 	str.w	r0, [fp, r7]
 80093ea:	4640      	mov	r0, r8
 80093ec:	f7f7 fc0a 	bl	8000c04 <__addsf3>
 80093f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80093f2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80093f4:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 80093f8:	9f02      	ldr	r7, [sp, #8]
 80093fa:	4629      	mov	r1, r5
 80093fc:	f847 0032 	str.w	r0, [r7, r2, lsl #3]
 8009400:	4640      	mov	r0, r8
 8009402:	f7f7 fbfd 	bl	8000c00 <__aeabi_fsub>
 8009406:	4986      	ldr	r1, [pc, #536]	@ (8009620 <arm_radix8_butterfly_f32+0x484>)
 8009408:	f7f7 fd04 	bl	8000e14 <__aeabi_fmul>
 800940c:	4629      	mov	r1, r5
 800940e:	4681      	mov	r9, r0
 8009410:	4640      	mov	r0, r8
 8009412:	f7f7 fbf7 	bl	8000c04 <__addsf3>
 8009416:	4982      	ldr	r1, [pc, #520]	@ (8009620 <arm_radix8_butterfly_f32+0x484>)
 8009418:	f7f7 fcfc 	bl	8000e14 <__aeabi_fmul>
 800941c:	4631      	mov	r1, r6
 800941e:	4605      	mov	r5, r0
 8009420:	4620      	mov	r0, r4
 8009422:	f7f7 fbed 	bl	8000c00 <__aeabi_fsub>
 8009426:	497e      	ldr	r1, [pc, #504]	@ (8009620 <arm_radix8_butterfly_f32+0x484>)
 8009428:	f7f7 fcf4 	bl	8000e14 <__aeabi_fmul>
 800942c:	4631      	mov	r1, r6
 800942e:	4607      	mov	r7, r0
 8009430:	4620      	mov	r0, r4
 8009432:	f7f7 fbe7 	bl	8000c04 <__addsf3>
 8009436:	497a      	ldr	r1, [pc, #488]	@ (8009620 <arm_radix8_butterfly_f32+0x484>)
 8009438:	f7f7 fcec 	bl	8000e14 <__aeabi_fmul>
 800943c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800943e:	4649      	mov	r1, r9
 8009440:	9008      	str	r0, [sp, #32]
 8009442:	4620      	mov	r0, r4
 8009444:	f7f7 fbdc 	bl	8000c00 <__aeabi_fsub>
 8009448:	4649      	mov	r1, r9
 800944a:	4680      	mov	r8, r0
 800944c:	4620      	mov	r0, r4
 800944e:	f7f7 fbd9 	bl	8000c04 <__addsf3>
 8009452:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8009456:	4629      	mov	r1, r5
 8009458:	9009      	str	r0, [sp, #36]	@ 0x24
 800945a:	4648      	mov	r0, r9
 800945c:	f7f7 fbd0 	bl	8000c00 <__aeabi_fsub>
 8009460:	4629      	mov	r1, r5
 8009462:	4604      	mov	r4, r0
 8009464:	4648      	mov	r0, r9
 8009466:	f7f7 fbcd 	bl	8000c04 <__addsf3>
 800946a:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 800946e:	4606      	mov	r6, r0
 8009470:	4639      	mov	r1, r7
 8009472:	4648      	mov	r0, r9
 8009474:	f7f7 fbc4 	bl	8000c00 <__aeabi_fsub>
 8009478:	4639      	mov	r1, r7
 800947a:	4605      	mov	r5, r0
 800947c:	4648      	mov	r0, r9
 800947e:	f7f7 fbc1 	bl	8000c04 <__addsf3>
 8009482:	9908      	ldr	r1, [sp, #32]
 8009484:	4607      	mov	r7, r0
 8009486:	9807      	ldr	r0, [sp, #28]
 8009488:	f7f7 fbba 	bl	8000c00 <__aeabi_fsub>
 800948c:	9908      	ldr	r1, [sp, #32]
 800948e:	4681      	mov	r9, r0
 8009490:	9807      	ldr	r0, [sp, #28]
 8009492:	f7f7 fbb7 	bl	8000c04 <__addsf3>
 8009496:	4601      	mov	r1, r0
 8009498:	9007      	str	r0, [sp, #28]
 800949a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800949c:	f7f7 fbb2 	bl	8000c04 <__addsf3>
 80094a0:	9a07      	ldr	r2, [sp, #28]
 80094a2:	9b01      	ldr	r3, [sp, #4]
 80094a4:	4611      	mov	r1, r2
 80094a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80094a8:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
 80094ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094ae:	f7f7 fba7 	bl	8000c00 <__aeabi_fsub>
 80094b2:	4649      	mov	r1, r9
 80094b4:	f8ca 0000 	str.w	r0, [sl]
 80094b8:	4640      	mov	r0, r8
 80094ba:	f7f7 fba3 	bl	8000c04 <__addsf3>
 80094be:	9a02      	ldr	r2, [sp, #8]
 80094c0:	4649      	mov	r1, r9
 80094c2:	f842 0c04 	str.w	r0, [r2, #-4]
 80094c6:	4640      	mov	r0, r8
 80094c8:	f7f7 fb9a 	bl	8000c00 <__aeabi_fsub>
 80094cc:	4631      	mov	r1, r6
 80094ce:	f84b 0c04 	str.w	r0, [fp, #-4]
 80094d2:	4638      	mov	r0, r7
 80094d4:	f7f7 fb94 	bl	8000c00 <__aeabi_fsub>
 80094d8:	4639      	mov	r1, r7
 80094da:	9f06      	ldr	r7, [sp, #24]
 80094dc:	f84b 0007 	str.w	r0, [fp, r7]
 80094e0:	4630      	mov	r0, r6
 80094e2:	f7f7 fb8f 	bl	8000c04 <__addsf3>
 80094e6:	4621      	mov	r1, r4
 80094e8:	f8ca 0004 	str.w	r0, [sl, #4]
 80094ec:	4628      	mov	r0, r5
 80094ee:	f7f7 fb87 	bl	8000c00 <__aeabi_fsub>
 80094f2:	4629      	mov	r1, r5
 80094f4:	9d05      	ldr	r5, [sp, #20]
 80094f6:	f84b 0005 	str.w	r0, [fp, r5]
 80094fa:	4620      	mov	r0, r4
 80094fc:	f7f7 fb82 	bl	8000c04 <__addsf3>
 8009500:	9b01      	ldr	r3, [sp, #4]
 8009502:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8009504:	9a02      	ldr	r2, [sp, #8]
 8009506:	440b      	add	r3, r1
 8009508:	461c      	mov	r4, r3
 800950a:	9301      	str	r3, [sp, #4]
 800950c:	9f06      	ldr	r7, [sp, #24]
 800950e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009510:	51d0      	str	r0, [r2, r7]
 8009512:	441a      	add	r2, r3
 8009514:	9202      	str	r2, [sp, #8]
 8009516:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009518:	449a      	add	sl, r3
 800951a:	4611      	mov	r1, r2
 800951c:	42a1      	cmp	r1, r4
 800951e:	449b      	add	fp, r3
 8009520:	f63f ae7e 	bhi.w	8009220 <arm_radix8_butterfly_f32+0x84>
 8009524:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 8009526:	2c07      	cmp	r4, #7
 8009528:	f240 830b 	bls.w	8009b42 <arm_radix8_butterfly_f32+0x9a6>
 800952c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800952e:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 8009532:	00cb      	lsls	r3, r1, #3
 8009534:	4618      	mov	r0, r3
 8009536:	460a      	mov	r2, r1
 8009538:	9336      	str	r3, [sp, #216]	@ 0xd8
 800953a:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 800953c:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 8009540:	4403      	add	r3, r0
 8009542:	187d      	adds	r5, r7, r1
 8009544:	1818      	adds	r0, r3, r0
 8009546:	902e      	str	r0, [sp, #184]	@ 0xb8
 8009548:	9026      	str	r0, [sp, #152]	@ 0x98
 800954a:	1868      	adds	r0, r5, r1
 800954c:	1841      	adds	r1, r0, r1
 800954e:	eb01 0c02 	add.w	ip, r1, r2
 8009552:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009554:	00c9      	lsls	r1, r1, #3
 8009556:	4616      	mov	r6, r2
 8009558:	4426      	add	r6, r4
 800955a:	4632      	mov	r2, r6
 800955c:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800955e:	912f      	str	r1, [sp, #188]	@ 0xbc
 8009560:	ebc4 0e06 	rsb	lr, r4, r6
 8009564:	ea4f 06cc 	mov.w	r6, ip, lsl #3
 8009568:	4634      	mov	r4, r6
 800956a:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 800956c:	9634      	str	r6, [sp, #208]	@ 0xd0
 800956e:	0116      	lsls	r6, r2, #4
 8009570:	9608      	str	r6, [sp, #32]
 8009572:	ea4f 06ce 	mov.w	r6, lr, lsl #3
 8009576:	9607      	str	r6, [sp, #28]
 8009578:	190e      	adds	r6, r1, r4
 800957a:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
 800957c:	00c0      	lsls	r0, r0, #3
 800957e:	00ed      	lsls	r5, r5, #3
 8009580:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009582:	f8dd 90ac 	ldr.w	r9, [sp, #172]	@ 0xac
 8009586:	9035      	str	r0, [sp, #212]	@ 0xd4
 8009588:	9624      	str	r6, [sp, #144]	@ 0x90
 800958a:	1808      	adds	r0, r1, r0
 800958c:	190e      	adds	r6, r1, r4
 800958e:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 8009590:	9028      	str	r0, [sp, #160]	@ 0xa0
 8009592:	1948      	adds	r0, r1, r5
 8009594:	962a      	str	r6, [sp, #168]	@ 0xa8
 8009596:	9029      	str	r0, [sp, #164]	@ 0xa4
 8009598:	4646      	mov	r6, r8
 800959a:	0110      	lsls	r0, r2, #4
 800959c:	0162      	lsls	r2, r4, #5
 800959e:	464c      	mov	r4, r9
 80095a0:	00ff      	lsls	r7, r7, #3
 80095a2:	4439      	add	r1, r7
 80095a4:	9204      	str	r2, [sp, #16]
 80095a6:	2201      	movs	r2, #1
 80095a8:	9733      	str	r7, [sp, #204]	@ 0xcc
 80095aa:	9532      	str	r5, [sp, #200]	@ 0xc8
 80095ac:	9031      	str	r0, [sp, #196]	@ 0xc4
 80095ae:	9127      	str	r1, [sp, #156]	@ 0x9c
 80095b0:	9225      	str	r2, [sp, #148]	@ 0x94
 80095b2:	f104 0208 	add.w	r2, r4, #8
 80095b6:	922d      	str	r2, [sp, #180]	@ 0xb4
 80095b8:	9201      	str	r2, [sp, #4]
 80095ba:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80095bc:	f106 0108 	add.w	r1, r6, #8
 80095c0:	920a      	str	r2, [sp, #40]	@ 0x28
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80095c8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80095ca:	912c      	str	r1, [sp, #176]	@ 0xb0
 80095cc:	9103      	str	r1, [sp, #12]
 80095ce:	930e      	str	r3, [sp, #56]	@ 0x38
 80095d0:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 80095d2:	6813      	ldr	r3, [r2, #0]
 80095d4:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 80095d6:	9319      	str	r3, [sp, #100]	@ 0x64
 80095d8:	680b      	ldr	r3, [r1, #0]
 80095da:	9d28      	ldr	r5, [sp, #160]	@ 0xa0
 80095dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80095de:	6803      	ldr	r3, [r0, #0]
 80095e0:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 80095e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80095e4:	682b      	ldr	r3, [r5, #0]
 80095e6:	6852      	ldr	r2, [r2, #4]
 80095e8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	921d      	str	r2, [sp, #116]	@ 0x74
 80095ee:	931c      	str	r3, [sp, #112]	@ 0x70
 80095f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80095f2:	684a      	ldr	r2, [r1, #4]
 80095f4:	f8d3 e000 	ldr.w	lr, [r3]
 80095f8:	921e      	str	r2, [sp, #120]	@ 0x78
 80095fa:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 80095fe:	6842      	ldr	r2, [r0, #4]
 8009600:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009602:	921f      	str	r2, [sp, #124]	@ 0x7c
 8009604:	686a      	ldr	r2, [r5, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	9220      	str	r2, [sp, #128]	@ 0x80
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	9322      	str	r3, [sp, #136]	@ 0x88
 800960e:	f104 030c 	add.w	r3, r4, #12
 8009612:	9221      	str	r2, [sp, #132]	@ 0x84
 8009614:	9302      	str	r3, [sp, #8]
 8009616:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 8009618:	f106 030c 	add.w	r3, r6, #12
 800961c:	9306      	str	r3, [sp, #24]
 800961e:	e001      	b.n	8009624 <arm_radix8_butterfly_f32+0x488>
 8009620:	3f3504f3 	.word	0x3f3504f3
 8009624:	9b02      	ldr	r3, [sp, #8]
 8009626:	9f04      	ldr	r7, [sp, #16]
 8009628:	9216      	str	r2, [sp, #88]	@ 0x58
 800962a:	9a01      	ldr	r2, [sp, #4]
 800962c:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8009630:	59d6      	ldr	r6, [r2, r7]
 8009632:	4628      	mov	r0, r5
 8009634:	4631      	mov	r1, r6
 8009636:	f7f7 fae5 	bl	8000c04 <__addsf3>
 800963a:	4631      	mov	r1, r6
 800963c:	4604      	mov	r4, r0
 800963e:	4628      	mov	r0, r5
 8009640:	f7f7 fade 	bl	8000c00 <__aeabi_fsub>
 8009644:	9d06      	ldr	r5, [sp, #24]
 8009646:	9903      	ldr	r1, [sp, #12]
 8009648:	f855 6c04 	ldr.w	r6, [r5, #-4]
 800964c:	9704      	str	r7, [sp, #16]
 800964e:	59cf      	ldr	r7, [r1, r7]
 8009650:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009652:	4639      	mov	r1, r7
 8009654:	4630      	mov	r0, r6
 8009656:	f7f7 fad5 	bl	8000c04 <__addsf3>
 800965a:	4639      	mov	r1, r7
 800965c:	4605      	mov	r5, r0
 800965e:	4630      	mov	r0, r6
 8009660:	f7f7 face 	bl	8000c00 <__aeabi_fsub>
 8009664:	9a01      	ldr	r2, [sp, #4]
 8009666:	9e05      	ldr	r6, [sp, #20]
 8009668:	9010      	str	r0, [sp, #64]	@ 0x40
 800966a:	5997      	ldr	r7, [r2, r6]
 800966c:	4616      	mov	r6, r2
 800966e:	9a08      	ldr	r2, [sp, #32]
 8009670:	4638      	mov	r0, r7
 8009672:	f856 8002 	ldr.w	r8, [r6, r2]
 8009676:	4641      	mov	r1, r8
 8009678:	f7f7 fac4 	bl	8000c04 <__addsf3>
 800967c:	4641      	mov	r1, r8
 800967e:	4606      	mov	r6, r0
 8009680:	4638      	mov	r0, r7
 8009682:	f7f7 fabd 	bl	8000c00 <__aeabi_fsub>
 8009686:	9903      	ldr	r1, [sp, #12]
 8009688:	9a01      	ldr	r2, [sp, #4]
 800968a:	468e      	mov	lr, r1
 800968c:	9b07      	ldr	r3, [sp, #28]
 800968e:	9905      	ldr	r1, [sp, #20]
 8009690:	f852 9003 	ldr.w	r9, [r2, r3]
 8009694:	f85e 8001 	ldr.w	r8, [lr, r1]
 8009698:	9011      	str	r0, [sp, #68]	@ 0x44
 800969a:	4649      	mov	r1, r9
 800969c:	4640      	mov	r0, r8
 800969e:	f7f7 fab1 	bl	8000c04 <__addsf3>
 80096a2:	4649      	mov	r1, r9
 80096a4:	4607      	mov	r7, r0
 80096a6:	4640      	mov	r0, r8
 80096a8:	f7f7 faaa 	bl	8000c00 <__aeabi_fsub>
 80096ac:	4631      	mov	r1, r6
 80096ae:	9012      	str	r0, [sp, #72]	@ 0x48
 80096b0:	4620      	mov	r0, r4
 80096b2:	f7f7 faa5 	bl	8000c00 <__aeabi_fsub>
 80096b6:	4631      	mov	r1, r6
 80096b8:	4682      	mov	sl, r0
 80096ba:	4620      	mov	r0, r4
 80096bc:	f7f7 faa2 	bl	8000c04 <__addsf3>
 80096c0:	4639      	mov	r1, r7
 80096c2:	4604      	mov	r4, r0
 80096c4:	4628      	mov	r0, r5
 80096c6:	f7f7 fa9b 	bl	8000c00 <__aeabi_fsub>
 80096ca:	4639      	mov	r1, r7
 80096cc:	4606      	mov	r6, r0
 80096ce:	4628      	mov	r0, r5
 80096d0:	f7f7 fa98 	bl	8000c04 <__addsf3>
 80096d4:	4605      	mov	r5, r0
 80096d6:	4601      	mov	r1, r0
 80096d8:	4620      	mov	r0, r4
 80096da:	f7f7 fa93 	bl	8000c04 <__addsf3>
 80096de:	9f02      	ldr	r7, [sp, #8]
 80096e0:	4629      	mov	r1, r5
 80096e2:	f847 0c04 	str.w	r0, [r7, #-4]
 80096e6:	4620      	mov	r0, r4
 80096e8:	f7f7 fa8a 	bl	8000c00 <__aeabi_fsub>
 80096ec:	4639      	mov	r1, r7
 80096ee:	9b01      	ldr	r3, [sp, #4]
 80096f0:	9702      	str	r7, [sp, #8]
 80096f2:	9f04      	ldr	r7, [sp, #16]
 80096f4:	685c      	ldr	r4, [r3, #4]
 80096f6:	59cf      	ldr	r7, [r1, r7]
 80096f8:	4605      	mov	r5, r0
 80096fa:	4639      	mov	r1, r7
 80096fc:	4620      	mov	r0, r4
 80096fe:	f7f7 fa81 	bl	8000c04 <__addsf3>
 8009702:	4639      	mov	r1, r7
 8009704:	4680      	mov	r8, r0
 8009706:	4620      	mov	r0, r4
 8009708:	f7f7 fa7a 	bl	8000c00 <__aeabi_fsub>
 800970c:	9c03      	ldr	r4, [sp, #12]
 800970e:	9013      	str	r0, [sp, #76]	@ 0x4c
 8009710:	6867      	ldr	r7, [r4, #4]
 8009712:	9c06      	ldr	r4, [sp, #24]
 8009714:	4638      	mov	r0, r7
 8009716:	46a6      	mov	lr, r4
 8009718:	9c04      	ldr	r4, [sp, #16]
 800971a:	f85e 9004 	ldr.w	r9, [lr, r4]
 800971e:	4649      	mov	r1, r9
 8009720:	f7f7 fa70 	bl	8000c04 <__addsf3>
 8009724:	4649      	mov	r1, r9
 8009726:	4604      	mov	r4, r0
 8009728:	4638      	mov	r0, r7
 800972a:	f7f7 fa69 	bl	8000c00 <__aeabi_fsub>
 800972e:	9b08      	ldr	r3, [sp, #32]
 8009730:	9902      	ldr	r1, [sp, #8]
 8009732:	9f05      	ldr	r7, [sp, #20]
 8009734:	f851 9003 	ldr.w	r9, [r1, r3]
 8009738:	59cf      	ldr	r7, [r1, r7]
 800973a:	9014      	str	r0, [sp, #80]	@ 0x50
 800973c:	4649      	mov	r1, r9
 800973e:	4638      	mov	r0, r7
 8009740:	f7f7 fa60 	bl	8000c04 <__addsf3>
 8009744:	4649      	mov	r1, r9
 8009746:	4683      	mov	fp, r0
 8009748:	4638      	mov	r0, r7
 800974a:	f7f7 fa59 	bl	8000c00 <__aeabi_fsub>
 800974e:	9a07      	ldr	r2, [sp, #28]
 8009750:	9b06      	ldr	r3, [sp, #24]
 8009752:	9902      	ldr	r1, [sp, #8]
 8009754:	9f05      	ldr	r7, [sp, #20]
 8009756:	9009      	str	r0, [sp, #36]	@ 0x24
 8009758:	59df      	ldr	r7, [r3, r7]
 800975a:	588b      	ldr	r3, [r1, r2]
 800975c:	4638      	mov	r0, r7
 800975e:	4619      	mov	r1, r3
 8009760:	9315      	str	r3, [sp, #84]	@ 0x54
 8009762:	f7f7 fa4f 	bl	8000c04 <__addsf3>
 8009766:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009768:	4681      	mov	r9, r0
 800976a:	4619      	mov	r1, r3
 800976c:	4638      	mov	r0, r7
 800976e:	f7f7 fa47 	bl	8000c00 <__aeabi_fsub>
 8009772:	4659      	mov	r1, fp
 8009774:	9015      	str	r0, [sp, #84]	@ 0x54
 8009776:	4640      	mov	r0, r8
 8009778:	f7f7 fa42 	bl	8000c00 <__aeabi_fsub>
 800977c:	4659      	mov	r1, fp
 800977e:	4607      	mov	r7, r0
 8009780:	4640      	mov	r0, r8
 8009782:	f7f7 fa3f 	bl	8000c04 <__addsf3>
 8009786:	4649      	mov	r1, r9
 8009788:	4680      	mov	r8, r0
 800978a:	4620      	mov	r0, r4
 800978c:	f7f7 fa38 	bl	8000c00 <__aeabi_fsub>
 8009790:	4649      	mov	r1, r9
 8009792:	4683      	mov	fp, r0
 8009794:	4620      	mov	r0, r4
 8009796:	f7f7 fa35 	bl	8000c04 <__addsf3>
 800979a:	4659      	mov	r1, fp
 800979c:	4681      	mov	r9, r0
 800979e:	4650      	mov	r0, sl
 80097a0:	f7f7 fa30 	bl	8000c04 <__addsf3>
 80097a4:	4659      	mov	r1, fp
 80097a6:	4604      	mov	r4, r0
 80097a8:	4650      	mov	r0, sl
 80097aa:	f7f7 fa29 	bl	8000c00 <__aeabi_fsub>
 80097ae:	4649      	mov	r1, r9
 80097b0:	4682      	mov	sl, r0
 80097b2:	4640      	mov	r0, r8
 80097b4:	f7f7 fa26 	bl	8000c04 <__addsf3>
 80097b8:	9a01      	ldr	r2, [sp, #4]
 80097ba:	4649      	mov	r1, r9
 80097bc:	6050      	str	r0, [r2, #4]
 80097be:	4640      	mov	r0, r8
 80097c0:	f7f7 fa1e 	bl	8000c00 <__aeabi_fsub>
 80097c4:	4631      	mov	r1, r6
 80097c6:	4681      	mov	r9, r0
 80097c8:	4638      	mov	r0, r7
 80097ca:	f7f7 fa19 	bl	8000c00 <__aeabi_fsub>
 80097ce:	4639      	mov	r1, r7
 80097d0:	4680      	mov	r8, r0
 80097d2:	4630      	mov	r0, r6
 80097d4:	f7f7 fa16 	bl	8000c04 <__addsf3>
 80097d8:	4629      	mov	r1, r5
 80097da:	4606      	mov	r6, r0
 80097dc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80097de:	f7f7 fb19 	bl	8000e14 <__aeabi_fmul>
 80097e2:	f8dd b07c 	ldr.w	fp, [sp, #124]	@ 0x7c
 80097e6:	4607      	mov	r7, r0
 80097e8:	4649      	mov	r1, r9
 80097ea:	4658      	mov	r0, fp
 80097ec:	f7f7 fb12 	bl	8000e14 <__aeabi_fmul>
 80097f0:	4601      	mov	r1, r0
 80097f2:	4638      	mov	r0, r7
 80097f4:	f7f7 fa06 	bl	8000c04 <__addsf3>
 80097f8:	9b01      	ldr	r3, [sp, #4]
 80097fa:	9a04      	ldr	r2, [sp, #16]
 80097fc:	4649      	mov	r1, r9
 80097fe:	5098      	str	r0, [r3, r2]
 8009800:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8009802:	f7f7 fb07 	bl	8000e14 <__aeabi_fmul>
 8009806:	4629      	mov	r1, r5
 8009808:	4607      	mov	r7, r0
 800980a:	4658      	mov	r0, fp
 800980c:	f7f7 fb02 	bl	8000e14 <__aeabi_fmul>
 8009810:	4601      	mov	r1, r0
 8009812:	4638      	mov	r0, r7
 8009814:	f7f7 f9f4 	bl	8000c00 <__aeabi_fsub>
 8009818:	9f02      	ldr	r7, [sp, #8]
 800981a:	f8dd b064 	ldr.w	fp, [sp, #100]	@ 0x64
 800981e:	9d04      	ldr	r5, [sp, #16]
 8009820:	4621      	mov	r1, r4
 8009822:	5178      	str	r0, [r7, r5]
 8009824:	4658      	mov	r0, fp
 8009826:	f7f7 faf5 	bl	8000e14 <__aeabi_fmul>
 800982a:	f8dd 9074 	ldr.w	r9, [sp, #116]	@ 0x74
 800982e:	4605      	mov	r5, r0
 8009830:	4641      	mov	r1, r8
 8009832:	4648      	mov	r0, r9
 8009834:	f7f7 faee 	bl	8000e14 <__aeabi_fmul>
 8009838:	4601      	mov	r1, r0
 800983a:	4628      	mov	r0, r5
 800983c:	f7f7 f9e2 	bl	8000c04 <__addsf3>
 8009840:	9a05      	ldr	r2, [sp, #20]
 8009842:	9d01      	ldr	r5, [sp, #4]
 8009844:	4641      	mov	r1, r8
 8009846:	50a8      	str	r0, [r5, r2]
 8009848:	4658      	mov	r0, fp
 800984a:	f7f7 fae3 	bl	8000e14 <__aeabi_fmul>
 800984e:	4621      	mov	r1, r4
 8009850:	4605      	mov	r5, r0
 8009852:	4648      	mov	r0, r9
 8009854:	f7f7 fade 	bl	8000e14 <__aeabi_fmul>
 8009858:	4601      	mov	r1, r0
 800985a:	4628      	mov	r0, r5
 800985c:	f7f7 f9d0 	bl	8000c00 <__aeabi_fsub>
 8009860:	9c05      	ldr	r4, [sp, #20]
 8009862:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 8009866:	5138      	str	r0, [r7, r4]
 8009868:	4651      	mov	r1, sl
 800986a:	4658      	mov	r0, fp
 800986c:	f7f7 fad2 	bl	8000e14 <__aeabi_fmul>
 8009870:	f8dd 9084 	ldr.w	r9, [sp, #132]	@ 0x84
 8009874:	4604      	mov	r4, r0
 8009876:	4631      	mov	r1, r6
 8009878:	4648      	mov	r0, r9
 800987a:	f7f7 facb 	bl	8000e14 <__aeabi_fmul>
 800987e:	4601      	mov	r1, r0
 8009880:	4620      	mov	r0, r4
 8009882:	f7f7 f9bf 	bl	8000c04 <__addsf3>
 8009886:	463d      	mov	r5, r7
 8009888:	9a01      	ldr	r2, [sp, #4]
 800988a:	9f08      	ldr	r7, [sp, #32]
 800988c:	4631      	mov	r1, r6
 800988e:	51d0      	str	r0, [r2, r7]
 8009890:	4658      	mov	r0, fp
 8009892:	f7f7 fabf 	bl	8000e14 <__aeabi_fmul>
 8009896:	4651      	mov	r1, sl
 8009898:	4604      	mov	r4, r0
 800989a:	4648      	mov	r0, r9
 800989c:	f7f7 faba 	bl	8000e14 <__aeabi_fmul>
 80098a0:	4601      	mov	r1, r0
 80098a2:	4620      	mov	r0, r4
 80098a4:	f7f7 f9ac 	bl	8000c00 <__aeabi_fsub>
 80098a8:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 80098ac:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 80098b0:	51e8      	str	r0, [r5, r7]
 80098b2:	4651      	mov	r1, sl
 80098b4:	4648      	mov	r0, r9
 80098b6:	9502      	str	r5, [sp, #8]
 80098b8:	f7f7 f9a2 	bl	8000c00 <__aeabi_fsub>
 80098bc:	49a2      	ldr	r1, [pc, #648]	@ (8009b48 <arm_radix8_butterfly_f32+0x9ac>)
 80098be:	f7f7 faa9 	bl	8000e14 <__aeabi_fmul>
 80098c2:	4651      	mov	r1, sl
 80098c4:	4604      	mov	r4, r0
 80098c6:	4648      	mov	r0, r9
 80098c8:	f7f7 f99c 	bl	8000c04 <__addsf3>
 80098cc:	499e      	ldr	r1, [pc, #632]	@ (8009b48 <arm_radix8_butterfly_f32+0x9ac>)
 80098ce:	f7f7 faa1 	bl	8000e14 <__aeabi_fmul>
 80098d2:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 80098d6:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80098da:	4607      	mov	r7, r0
 80098dc:	4641      	mov	r1, r8
 80098de:	4650      	mov	r0, sl
 80098e0:	f7f7 f98e 	bl	8000c00 <__aeabi_fsub>
 80098e4:	4998      	ldr	r1, [pc, #608]	@ (8009b48 <arm_radix8_butterfly_f32+0x9ac>)
 80098e6:	f7f7 fa95 	bl	8000e14 <__aeabi_fmul>
 80098ea:	4641      	mov	r1, r8
 80098ec:	4681      	mov	r9, r0
 80098ee:	4650      	mov	r0, sl
 80098f0:	f7f7 f988 	bl	8000c04 <__addsf3>
 80098f4:	4994      	ldr	r1, [pc, #592]	@ (8009b48 <arm_radix8_butterfly_f32+0x9ac>)
 80098f6:	f7f7 fa8d 	bl	8000e14 <__aeabi_fmul>
 80098fa:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80098fc:	4605      	mov	r5, r0
 80098fe:	4621      	mov	r1, r4
 8009900:	4630      	mov	r0, r6
 8009902:	f7f7 f97d 	bl	8000c00 <__aeabi_fsub>
 8009906:	4621      	mov	r1, r4
 8009908:	4682      	mov	sl, r0
 800990a:	4630      	mov	r0, r6
 800990c:	f7f7 f97a 	bl	8000c04 <__addsf3>
 8009910:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8009914:	4604      	mov	r4, r0
 8009916:	4639      	mov	r1, r7
 8009918:	4640      	mov	r0, r8
 800991a:	f7f7 f971 	bl	8000c00 <__aeabi_fsub>
 800991e:	4639      	mov	r1, r7
 8009920:	4606      	mov	r6, r0
 8009922:	4640      	mov	r0, r8
 8009924:	f7f7 f96e 	bl	8000c04 <__addsf3>
 8009928:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
 800992c:	4680      	mov	r8, r0
 800992e:	4649      	mov	r1, r9
 8009930:	4658      	mov	r0, fp
 8009932:	f7f7 f965 	bl	8000c00 <__aeabi_fsub>
 8009936:	4649      	mov	r1, r9
 8009938:	4607      	mov	r7, r0
 800993a:	4658      	mov	r0, fp
 800993c:	f7f7 f962 	bl	8000c04 <__addsf3>
 8009940:	4629      	mov	r1, r5
 8009942:	4681      	mov	r9, r0
 8009944:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009946:	f7f7 f95b 	bl	8000c00 <__aeabi_fsub>
 800994a:	4629      	mov	r1, r5
 800994c:	4683      	mov	fp, r0
 800994e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009950:	f7f7 f958 	bl	8000c04 <__addsf3>
 8009954:	4601      	mov	r1, r0
 8009956:	9009      	str	r0, [sp, #36]	@ 0x24
 8009958:	4620      	mov	r0, r4
 800995a:	f7f7 f953 	bl	8000c04 <__addsf3>
 800995e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009960:	4605      	mov	r5, r0
 8009962:	4619      	mov	r1, r3
 8009964:	4620      	mov	r0, r4
 8009966:	f7f7 f94b 	bl	8000c00 <__aeabi_fsub>
 800996a:	4659      	mov	r1, fp
 800996c:	4604      	mov	r4, r0
 800996e:	4650      	mov	r0, sl
 8009970:	f7f7 f948 	bl	8000c04 <__addsf3>
 8009974:	4659      	mov	r1, fp
 8009976:	9009      	str	r0, [sp, #36]	@ 0x24
 8009978:	4650      	mov	r0, sl
 800997a:	f7f7 f941 	bl	8000c00 <__aeabi_fsub>
 800997e:	4641      	mov	r1, r8
 8009980:	4683      	mov	fp, r0
 8009982:	4648      	mov	r0, r9
 8009984:	f7f7 f93c 	bl	8000c00 <__aeabi_fsub>
 8009988:	4649      	mov	r1, r9
 800998a:	4682      	mov	sl, r0
 800998c:	4640      	mov	r0, r8
 800998e:	f7f7 f939 	bl	8000c04 <__addsf3>
 8009992:	4631      	mov	r1, r6
 8009994:	4681      	mov	r9, r0
 8009996:	4638      	mov	r0, r7
 8009998:	f7f7 f932 	bl	8000c00 <__aeabi_fsub>
 800999c:	4639      	mov	r1, r7
 800999e:	4680      	mov	r8, r0
 80099a0:	4630      	mov	r0, r6
 80099a2:	f7f7 f92f 	bl	8000c04 <__addsf3>
 80099a6:	4629      	mov	r1, r5
 80099a8:	4606      	mov	r6, r0
 80099aa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80099ac:	f7f7 fa32 	bl	8000e14 <__aeabi_fmul>
 80099b0:	4651      	mov	r1, sl
 80099b2:	4607      	mov	r7, r0
 80099b4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80099b6:	f7f7 fa2d 	bl	8000e14 <__aeabi_fmul>
 80099ba:	4601      	mov	r1, r0
 80099bc:	4638      	mov	r0, r7
 80099be:	f7f7 f921 	bl	8000c04 <__addsf3>
 80099c2:	9b06      	ldr	r3, [sp, #24]
 80099c4:	4651      	mov	r1, sl
 80099c6:	f843 0c04 	str.w	r0, [r3, #-4]
 80099ca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80099cc:	f7f7 fa22 	bl	8000e14 <__aeabi_fmul>
 80099d0:	4629      	mov	r1, r5
 80099d2:	4607      	mov	r7, r0
 80099d4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80099d6:	f7f7 fa1d 	bl	8000e14 <__aeabi_fmul>
 80099da:	4601      	mov	r1, r0
 80099dc:	4638      	mov	r0, r7
 80099de:	f7f7 f90f 	bl	8000c00 <__aeabi_fsub>
 80099e2:	9f03      	ldr	r7, [sp, #12]
 80099e4:	4621      	mov	r1, r4
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80099ea:	f7f7 fa13 	bl	8000e14 <__aeabi_fmul>
 80099ee:	f8dd a088 	ldr.w	sl, [sp, #136]	@ 0x88
 80099f2:	4605      	mov	r5, r0
 80099f4:	4649      	mov	r1, r9
 80099f6:	4650      	mov	r0, sl
 80099f8:	f7f7 fa0c 	bl	8000e14 <__aeabi_fmul>
 80099fc:	4601      	mov	r1, r0
 80099fe:	4628      	mov	r0, r5
 8009a00:	f7f7 f900 	bl	8000c04 <__addsf3>
 8009a04:	9a07      	ldr	r2, [sp, #28]
 8009a06:	9f01      	ldr	r7, [sp, #4]
 8009a08:	4649      	mov	r1, r9
 8009a0a:	50b8      	str	r0, [r7, r2]
 8009a0c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009a0e:	f7f7 fa01 	bl	8000e14 <__aeabi_fmul>
 8009a12:	4621      	mov	r1, r4
 8009a14:	4605      	mov	r5, r0
 8009a16:	4650      	mov	r0, sl
 8009a18:	f7f7 f9fc 	bl	8000e14 <__aeabi_fmul>
 8009a1c:	4601      	mov	r1, r0
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f7f7 f8ee 	bl	8000c00 <__aeabi_fsub>
 8009a24:	9a07      	ldr	r2, [sp, #28]
 8009a26:	9d02      	ldr	r5, [sp, #8]
 8009a28:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
 8009a2c:	50a8      	str	r0, [r5, r2]
 8009a2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a30:	4650      	mov	r0, sl
 8009a32:	f7f7 f9ef 	bl	8000e14 <__aeabi_fmul>
 8009a36:	f8dd 9080 	ldr.w	r9, [sp, #128]	@ 0x80
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	4641      	mov	r1, r8
 8009a3e:	4648      	mov	r0, r9
 8009a40:	f7f7 f9e8 	bl	8000e14 <__aeabi_fmul>
 8009a44:	4601      	mov	r1, r0
 8009a46:	4620      	mov	r0, r4
 8009a48:	f7f7 f8dc 	bl	8000c04 <__addsf3>
 8009a4c:	9a03      	ldr	r2, [sp, #12]
 8009a4e:	9b04      	ldr	r3, [sp, #16]
 8009a50:	4641      	mov	r1, r8
 8009a52:	50d0      	str	r0, [r2, r3]
 8009a54:	4650      	mov	r0, sl
 8009a56:	f7f7 f9dd 	bl	8000e14 <__aeabi_fmul>
 8009a5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	4648      	mov	r0, r9
 8009a60:	f7f7 f9d8 	bl	8000e14 <__aeabi_fmul>
 8009a64:	4601      	mov	r1, r0
 8009a66:	4620      	mov	r0, r4
 8009a68:	f7f7 f8ca 	bl	8000c00 <__aeabi_fsub>
 8009a6c:	9a06      	ldr	r2, [sp, #24]
 8009a6e:	9b04      	ldr	r3, [sp, #16]
 8009a70:	f8dd 9068 	ldr.w	r9, [sp, #104]	@ 0x68
 8009a74:	50d0      	str	r0, [r2, r3]
 8009a76:	4659      	mov	r1, fp
 8009a78:	4648      	mov	r0, r9
 8009a7a:	f7f7 f9cb 	bl	8000e14 <__aeabi_fmul>
 8009a7e:	f8dd 8078 	ldr.w	r8, [sp, #120]	@ 0x78
 8009a82:	4604      	mov	r4, r0
 8009a84:	4631      	mov	r1, r6
 8009a86:	4640      	mov	r0, r8
 8009a88:	f7f7 f9c4 	bl	8000e14 <__aeabi_fmul>
 8009a8c:	4601      	mov	r1, r0
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f7f7 f8b8 	bl	8000c04 <__addsf3>
 8009a94:	9b03      	ldr	r3, [sp, #12]
 8009a96:	4631      	mov	r1, r6
 8009a98:	469e      	mov	lr, r3
 8009a9a:	9e05      	ldr	r6, [sp, #20]
 8009a9c:	f84e 0006 	str.w	r0, [lr, r6]
 8009aa0:	4648      	mov	r0, r9
 8009aa2:	f7f7 f9b7 	bl	8000e14 <__aeabi_fmul>
 8009aa6:	4659      	mov	r1, fp
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	4640      	mov	r0, r8
 8009aac:	f7f7 f9b2 	bl	8000e14 <__aeabi_fmul>
 8009ab0:	4601      	mov	r1, r0
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f7f7 f8a4 	bl	8000c00 <__aeabi_fsub>
 8009ab8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009aba:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8009abc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009abe:	4421      	add	r1, r4
 8009ac0:	460c      	mov	r4, r1
 8009ac2:	9b03      	ldr	r3, [sp, #12]
 8009ac4:	910a      	str	r1, [sp, #40]	@ 0x28
 8009ac6:	18b9      	adds	r1, r7, r2
 8009ac8:	9101      	str	r1, [sp, #4]
 8009aca:	18a9      	adds	r1, r5, r2
 8009acc:	9d06      	ldr	r5, [sp, #24]
 8009ace:	4413      	add	r3, r2
 8009ad0:	9303      	str	r3, [sp, #12]
 8009ad2:	18ab      	adds	r3, r5, r2
 8009ad4:	9306      	str	r3, [sp, #24]
 8009ad6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8009ad8:	9102      	str	r1, [sp, #8]
 8009ada:	42a3      	cmp	r3, r4
 8009adc:	51a8      	str	r0, [r5, r6]
 8009ade:	f63f ada1 	bhi.w	8009624 <arm_radix8_butterfly_f32+0x488>
 8009ae2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8009ae4:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	461a      	mov	r2, r3
 8009aea:	9325      	str	r3, [sp, #148]	@ 0x94
 8009aec:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009aee:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8009af0:	440b      	add	r3, r1
 8009af2:	9326      	str	r3, [sp, #152]	@ 0x98
 8009af4:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 8009af6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009af8:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 8009afa:	440b      	add	r3, r1
 8009afc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009afe:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 8009b00:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8009b02:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 8009b04:	440b      	add	r3, r1
 8009b06:	9329      	str	r3, [sp, #164]	@ 0xa4
 8009b08:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 8009b0a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009b0c:	440b      	add	r3, r1
 8009b0e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009b10:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8009b12:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8009b14:	440b      	add	r3, r1
 8009b16:	932a      	str	r3, [sp, #168]	@ 0xa8
 8009b18:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8009b1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009b1c:	440b      	add	r3, r1
 8009b1e:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8009b20:	9324      	str	r3, [sp, #144]	@ 0x90
 8009b22:	4291      	cmp	r1, r2
 8009b24:	4603      	mov	r3, r0
 8009b26:	d004      	beq.n	8009b32 <arm_radix8_butterfly_f32+0x996>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8009b2c:	440a      	add	r2, r1
 8009b2e:	922e      	str	r2, [sp, #184]	@ 0xb8
 8009b30:	e53f      	b.n	80095b2 <arm_radix8_butterfly_f32+0x416>
 8009b32:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	@ 0xd8
 8009b36:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8009b38:	9314      	str	r3, [sp, #80]	@ 0x50
 8009b3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b3c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8009b3e:	f7ff bb37 	b.w	80091b0 <arm_radix8_butterfly_f32+0x14>
 8009b42:	b039      	add	sp, #228	@ 0xe4
 8009b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b48:	3f3504f3 	.word	0x3f3504f3

08009b4c <siprintf>:
 8009b4c:	b40e      	push	{r1, r2, r3}
 8009b4e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b52:	b510      	push	{r4, lr}
 8009b54:	2400      	movs	r4, #0
 8009b56:	b09d      	sub	sp, #116	@ 0x74
 8009b58:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009b5a:	9002      	str	r0, [sp, #8]
 8009b5c:	9006      	str	r0, [sp, #24]
 8009b5e:	9107      	str	r1, [sp, #28]
 8009b60:	9104      	str	r1, [sp, #16]
 8009b62:	4809      	ldr	r0, [pc, #36]	@ (8009b88 <siprintf+0x3c>)
 8009b64:	4909      	ldr	r1, [pc, #36]	@ (8009b8c <siprintf+0x40>)
 8009b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b6a:	9105      	str	r1, [sp, #20]
 8009b6c:	6800      	ldr	r0, [r0, #0]
 8009b6e:	a902      	add	r1, sp, #8
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009b74:	f000 f99a 	bl	8009eac <_svfiprintf_r>
 8009b78:	9b02      	ldr	r3, [sp, #8]
 8009b7a:	701c      	strb	r4, [r3, #0]
 8009b7c:	b01d      	add	sp, #116	@ 0x74
 8009b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b82:	b003      	add	sp, #12
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	200020d8 	.word	0x200020d8
 8009b8c:	ffff0208 	.word	0xffff0208

08009b90 <memset>:
 8009b90:	4603      	mov	r3, r0
 8009b92:	4402      	add	r2, r0
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d100      	bne.n	8009b9a <memset+0xa>
 8009b98:	4770      	bx	lr
 8009b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b9e:	e7f9      	b.n	8009b94 <memset+0x4>

08009ba0 <__errno>:
 8009ba0:	4b01      	ldr	r3, [pc, #4]	@ (8009ba8 <__errno+0x8>)
 8009ba2:	6818      	ldr	r0, [r3, #0]
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	200020d8 	.word	0x200020d8

08009bac <__libc_init_array>:
 8009bac:	b570      	push	{r4, r5, r6, lr}
 8009bae:	2600      	movs	r6, #0
 8009bb0:	4d0c      	ldr	r5, [pc, #48]	@ (8009be4 <__libc_init_array+0x38>)
 8009bb2:	4c0d      	ldr	r4, [pc, #52]	@ (8009be8 <__libc_init_array+0x3c>)
 8009bb4:	1b64      	subs	r4, r4, r5
 8009bb6:	10a4      	asrs	r4, r4, #2
 8009bb8:	42a6      	cmp	r6, r4
 8009bba:	d109      	bne.n	8009bd0 <__libc_init_array+0x24>
 8009bbc:	f000 fd08 	bl	800a5d0 <_init>
 8009bc0:	2600      	movs	r6, #0
 8009bc2:	4d0a      	ldr	r5, [pc, #40]	@ (8009bec <__libc_init_array+0x40>)
 8009bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8009bf0 <__libc_init_array+0x44>)
 8009bc6:	1b64      	subs	r4, r4, r5
 8009bc8:	10a4      	asrs	r4, r4, #2
 8009bca:	42a6      	cmp	r6, r4
 8009bcc:	d105      	bne.n	8009bda <__libc_init_array+0x2e>
 8009bce:	bd70      	pop	{r4, r5, r6, pc}
 8009bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bd4:	4798      	blx	r3
 8009bd6:	3601      	adds	r6, #1
 8009bd8:	e7ee      	b.n	8009bb8 <__libc_init_array+0xc>
 8009bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bde:	4798      	blx	r3
 8009be0:	3601      	adds	r6, #1
 8009be2:	e7f2      	b.n	8009bca <__libc_init_array+0x1e>
 8009be4:	0801ea50 	.word	0x0801ea50
 8009be8:	0801ea50 	.word	0x0801ea50
 8009bec:	0801ea50 	.word	0x0801ea50
 8009bf0:	0801ea54 	.word	0x0801ea54

08009bf4 <__retarget_lock_acquire_recursive>:
 8009bf4:	4770      	bx	lr

08009bf6 <__retarget_lock_release_recursive>:
 8009bf6:	4770      	bx	lr

08009bf8 <strcpy>:
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bfe:	f803 2b01 	strb.w	r2, [r3], #1
 8009c02:	2a00      	cmp	r2, #0
 8009c04:	d1f9      	bne.n	8009bfa <strcpy+0x2>
 8009c06:	4770      	bx	lr

08009c08 <_free_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	2900      	cmp	r1, #0
 8009c0e:	d040      	beq.n	8009c92 <_free_r+0x8a>
 8009c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c14:	1f0c      	subs	r4, r1, #4
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	bfb8      	it	lt
 8009c1a:	18e4      	addlt	r4, r4, r3
 8009c1c:	f000 f8de 	bl	8009ddc <__malloc_lock>
 8009c20:	4a1c      	ldr	r2, [pc, #112]	@ (8009c94 <_free_r+0x8c>)
 8009c22:	6813      	ldr	r3, [r2, #0]
 8009c24:	b933      	cbnz	r3, 8009c34 <_free_r+0x2c>
 8009c26:	6063      	str	r3, [r4, #4]
 8009c28:	6014      	str	r4, [r2, #0]
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c30:	f000 b8da 	b.w	8009de8 <__malloc_unlock>
 8009c34:	42a3      	cmp	r3, r4
 8009c36:	d908      	bls.n	8009c4a <_free_r+0x42>
 8009c38:	6820      	ldr	r0, [r4, #0]
 8009c3a:	1821      	adds	r1, r4, r0
 8009c3c:	428b      	cmp	r3, r1
 8009c3e:	bf01      	itttt	eq
 8009c40:	6819      	ldreq	r1, [r3, #0]
 8009c42:	685b      	ldreq	r3, [r3, #4]
 8009c44:	1809      	addeq	r1, r1, r0
 8009c46:	6021      	streq	r1, [r4, #0]
 8009c48:	e7ed      	b.n	8009c26 <_free_r+0x1e>
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	b10b      	cbz	r3, 8009c54 <_free_r+0x4c>
 8009c50:	42a3      	cmp	r3, r4
 8009c52:	d9fa      	bls.n	8009c4a <_free_r+0x42>
 8009c54:	6811      	ldr	r1, [r2, #0]
 8009c56:	1850      	adds	r0, r2, r1
 8009c58:	42a0      	cmp	r0, r4
 8009c5a:	d10b      	bne.n	8009c74 <_free_r+0x6c>
 8009c5c:	6820      	ldr	r0, [r4, #0]
 8009c5e:	4401      	add	r1, r0
 8009c60:	1850      	adds	r0, r2, r1
 8009c62:	4283      	cmp	r3, r0
 8009c64:	6011      	str	r1, [r2, #0]
 8009c66:	d1e0      	bne.n	8009c2a <_free_r+0x22>
 8009c68:	6818      	ldr	r0, [r3, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	4408      	add	r0, r1
 8009c6e:	6010      	str	r0, [r2, #0]
 8009c70:	6053      	str	r3, [r2, #4]
 8009c72:	e7da      	b.n	8009c2a <_free_r+0x22>
 8009c74:	d902      	bls.n	8009c7c <_free_r+0x74>
 8009c76:	230c      	movs	r3, #12
 8009c78:	602b      	str	r3, [r5, #0]
 8009c7a:	e7d6      	b.n	8009c2a <_free_r+0x22>
 8009c7c:	6820      	ldr	r0, [r4, #0]
 8009c7e:	1821      	adds	r1, r4, r0
 8009c80:	428b      	cmp	r3, r1
 8009c82:	bf01      	itttt	eq
 8009c84:	6819      	ldreq	r1, [r3, #0]
 8009c86:	685b      	ldreq	r3, [r3, #4]
 8009c88:	1809      	addeq	r1, r1, r0
 8009c8a:	6021      	streq	r1, [r4, #0]
 8009c8c:	6063      	str	r3, [r4, #4]
 8009c8e:	6054      	str	r4, [r2, #4]
 8009c90:	e7cb      	b.n	8009c2a <_free_r+0x22>
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	20006458 	.word	0x20006458

08009c98 <sbrk_aligned>:
 8009c98:	b570      	push	{r4, r5, r6, lr}
 8009c9a:	4e0f      	ldr	r6, [pc, #60]	@ (8009cd8 <sbrk_aligned+0x40>)
 8009c9c:	460c      	mov	r4, r1
 8009c9e:	6831      	ldr	r1, [r6, #0]
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	b911      	cbnz	r1, 8009caa <sbrk_aligned+0x12>
 8009ca4:	f000 fba8 	bl	800a3f8 <_sbrk_r>
 8009ca8:	6030      	str	r0, [r6, #0]
 8009caa:	4621      	mov	r1, r4
 8009cac:	4628      	mov	r0, r5
 8009cae:	f000 fba3 	bl	800a3f8 <_sbrk_r>
 8009cb2:	1c43      	adds	r3, r0, #1
 8009cb4:	d103      	bne.n	8009cbe <sbrk_aligned+0x26>
 8009cb6:	f04f 34ff 	mov.w	r4, #4294967295
 8009cba:	4620      	mov	r0, r4
 8009cbc:	bd70      	pop	{r4, r5, r6, pc}
 8009cbe:	1cc4      	adds	r4, r0, #3
 8009cc0:	f024 0403 	bic.w	r4, r4, #3
 8009cc4:	42a0      	cmp	r0, r4
 8009cc6:	d0f8      	beq.n	8009cba <sbrk_aligned+0x22>
 8009cc8:	1a21      	subs	r1, r4, r0
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f000 fb94 	bl	800a3f8 <_sbrk_r>
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d1f2      	bne.n	8009cba <sbrk_aligned+0x22>
 8009cd4:	e7ef      	b.n	8009cb6 <sbrk_aligned+0x1e>
 8009cd6:	bf00      	nop
 8009cd8:	20006454 	.word	0x20006454

08009cdc <_malloc_r>:
 8009cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce0:	1ccd      	adds	r5, r1, #3
 8009ce2:	f025 0503 	bic.w	r5, r5, #3
 8009ce6:	3508      	adds	r5, #8
 8009ce8:	2d0c      	cmp	r5, #12
 8009cea:	bf38      	it	cc
 8009cec:	250c      	movcc	r5, #12
 8009cee:	2d00      	cmp	r5, #0
 8009cf0:	4606      	mov	r6, r0
 8009cf2:	db01      	blt.n	8009cf8 <_malloc_r+0x1c>
 8009cf4:	42a9      	cmp	r1, r5
 8009cf6:	d904      	bls.n	8009d02 <_malloc_r+0x26>
 8009cf8:	230c      	movs	r3, #12
 8009cfa:	6033      	str	r3, [r6, #0]
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009dd8 <_malloc_r+0xfc>
 8009d06:	f000 f869 	bl	8009ddc <__malloc_lock>
 8009d0a:	f8d8 3000 	ldr.w	r3, [r8]
 8009d0e:	461c      	mov	r4, r3
 8009d10:	bb44      	cbnz	r4, 8009d64 <_malloc_r+0x88>
 8009d12:	4629      	mov	r1, r5
 8009d14:	4630      	mov	r0, r6
 8009d16:	f7ff ffbf 	bl	8009c98 <sbrk_aligned>
 8009d1a:	1c43      	adds	r3, r0, #1
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	d158      	bne.n	8009dd2 <_malloc_r+0xf6>
 8009d20:	f8d8 4000 	ldr.w	r4, [r8]
 8009d24:	4627      	mov	r7, r4
 8009d26:	2f00      	cmp	r7, #0
 8009d28:	d143      	bne.n	8009db2 <_malloc_r+0xd6>
 8009d2a:	2c00      	cmp	r4, #0
 8009d2c:	d04b      	beq.n	8009dc6 <_malloc_r+0xea>
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	4639      	mov	r1, r7
 8009d32:	4630      	mov	r0, r6
 8009d34:	eb04 0903 	add.w	r9, r4, r3
 8009d38:	f000 fb5e 	bl	800a3f8 <_sbrk_r>
 8009d3c:	4581      	cmp	r9, r0
 8009d3e:	d142      	bne.n	8009dc6 <_malloc_r+0xea>
 8009d40:	6821      	ldr	r1, [r4, #0]
 8009d42:	4630      	mov	r0, r6
 8009d44:	1a6d      	subs	r5, r5, r1
 8009d46:	4629      	mov	r1, r5
 8009d48:	f7ff ffa6 	bl	8009c98 <sbrk_aligned>
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	d03a      	beq.n	8009dc6 <_malloc_r+0xea>
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	442b      	add	r3, r5
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	f8d8 3000 	ldr.w	r3, [r8]
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	bb62      	cbnz	r2, 8009db8 <_malloc_r+0xdc>
 8009d5e:	f8c8 7000 	str.w	r7, [r8]
 8009d62:	e00f      	b.n	8009d84 <_malloc_r+0xa8>
 8009d64:	6822      	ldr	r2, [r4, #0]
 8009d66:	1b52      	subs	r2, r2, r5
 8009d68:	d420      	bmi.n	8009dac <_malloc_r+0xd0>
 8009d6a:	2a0b      	cmp	r2, #11
 8009d6c:	d917      	bls.n	8009d9e <_malloc_r+0xc2>
 8009d6e:	1961      	adds	r1, r4, r5
 8009d70:	42a3      	cmp	r3, r4
 8009d72:	6025      	str	r5, [r4, #0]
 8009d74:	bf18      	it	ne
 8009d76:	6059      	strne	r1, [r3, #4]
 8009d78:	6863      	ldr	r3, [r4, #4]
 8009d7a:	bf08      	it	eq
 8009d7c:	f8c8 1000 	streq.w	r1, [r8]
 8009d80:	5162      	str	r2, [r4, r5]
 8009d82:	604b      	str	r3, [r1, #4]
 8009d84:	4630      	mov	r0, r6
 8009d86:	f000 f82f 	bl	8009de8 <__malloc_unlock>
 8009d8a:	f104 000b 	add.w	r0, r4, #11
 8009d8e:	1d23      	adds	r3, r4, #4
 8009d90:	f020 0007 	bic.w	r0, r0, #7
 8009d94:	1ac2      	subs	r2, r0, r3
 8009d96:	bf1c      	itt	ne
 8009d98:	1a1b      	subne	r3, r3, r0
 8009d9a:	50a3      	strne	r3, [r4, r2]
 8009d9c:	e7af      	b.n	8009cfe <_malloc_r+0x22>
 8009d9e:	6862      	ldr	r2, [r4, #4]
 8009da0:	42a3      	cmp	r3, r4
 8009da2:	bf0c      	ite	eq
 8009da4:	f8c8 2000 	streq.w	r2, [r8]
 8009da8:	605a      	strne	r2, [r3, #4]
 8009daa:	e7eb      	b.n	8009d84 <_malloc_r+0xa8>
 8009dac:	4623      	mov	r3, r4
 8009dae:	6864      	ldr	r4, [r4, #4]
 8009db0:	e7ae      	b.n	8009d10 <_malloc_r+0x34>
 8009db2:	463c      	mov	r4, r7
 8009db4:	687f      	ldr	r7, [r7, #4]
 8009db6:	e7b6      	b.n	8009d26 <_malloc_r+0x4a>
 8009db8:	461a      	mov	r2, r3
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	42a3      	cmp	r3, r4
 8009dbe:	d1fb      	bne.n	8009db8 <_malloc_r+0xdc>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	6053      	str	r3, [r2, #4]
 8009dc4:	e7de      	b.n	8009d84 <_malloc_r+0xa8>
 8009dc6:	230c      	movs	r3, #12
 8009dc8:	4630      	mov	r0, r6
 8009dca:	6033      	str	r3, [r6, #0]
 8009dcc:	f000 f80c 	bl	8009de8 <__malloc_unlock>
 8009dd0:	e794      	b.n	8009cfc <_malloc_r+0x20>
 8009dd2:	6005      	str	r5, [r0, #0]
 8009dd4:	e7d6      	b.n	8009d84 <_malloc_r+0xa8>
 8009dd6:	bf00      	nop
 8009dd8:	20006458 	.word	0x20006458

08009ddc <__malloc_lock>:
 8009ddc:	4801      	ldr	r0, [pc, #4]	@ (8009de4 <__malloc_lock+0x8>)
 8009dde:	f7ff bf09 	b.w	8009bf4 <__retarget_lock_acquire_recursive>
 8009de2:	bf00      	nop
 8009de4:	20006450 	.word	0x20006450

08009de8 <__malloc_unlock>:
 8009de8:	4801      	ldr	r0, [pc, #4]	@ (8009df0 <__malloc_unlock+0x8>)
 8009dea:	f7ff bf04 	b.w	8009bf6 <__retarget_lock_release_recursive>
 8009dee:	bf00      	nop
 8009df0:	20006450 	.word	0x20006450

08009df4 <__ssputs_r>:
 8009df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df8:	461f      	mov	r7, r3
 8009dfa:	688e      	ldr	r6, [r1, #8]
 8009dfc:	4682      	mov	sl, r0
 8009dfe:	42be      	cmp	r6, r7
 8009e00:	460c      	mov	r4, r1
 8009e02:	4690      	mov	r8, r2
 8009e04:	680b      	ldr	r3, [r1, #0]
 8009e06:	d82d      	bhi.n	8009e64 <__ssputs_r+0x70>
 8009e08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e10:	d026      	beq.n	8009e60 <__ssputs_r+0x6c>
 8009e12:	6965      	ldr	r5, [r4, #20]
 8009e14:	6909      	ldr	r1, [r1, #16]
 8009e16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e1a:	eba3 0901 	sub.w	r9, r3, r1
 8009e1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e22:	1c7b      	adds	r3, r7, #1
 8009e24:	444b      	add	r3, r9
 8009e26:	106d      	asrs	r5, r5, #1
 8009e28:	429d      	cmp	r5, r3
 8009e2a:	bf38      	it	cc
 8009e2c:	461d      	movcc	r5, r3
 8009e2e:	0553      	lsls	r3, r2, #21
 8009e30:	d527      	bpl.n	8009e82 <__ssputs_r+0x8e>
 8009e32:	4629      	mov	r1, r5
 8009e34:	f7ff ff52 	bl	8009cdc <_malloc_r>
 8009e38:	4606      	mov	r6, r0
 8009e3a:	b360      	cbz	r0, 8009e96 <__ssputs_r+0xa2>
 8009e3c:	464a      	mov	r2, r9
 8009e3e:	6921      	ldr	r1, [r4, #16]
 8009e40:	f000 faf8 	bl	800a434 <memcpy>
 8009e44:	89a3      	ldrh	r3, [r4, #12]
 8009e46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e4e:	81a3      	strh	r3, [r4, #12]
 8009e50:	6126      	str	r6, [r4, #16]
 8009e52:	444e      	add	r6, r9
 8009e54:	6026      	str	r6, [r4, #0]
 8009e56:	463e      	mov	r6, r7
 8009e58:	6165      	str	r5, [r4, #20]
 8009e5a:	eba5 0509 	sub.w	r5, r5, r9
 8009e5e:	60a5      	str	r5, [r4, #8]
 8009e60:	42be      	cmp	r6, r7
 8009e62:	d900      	bls.n	8009e66 <__ssputs_r+0x72>
 8009e64:	463e      	mov	r6, r7
 8009e66:	4632      	mov	r2, r6
 8009e68:	4641      	mov	r1, r8
 8009e6a:	6820      	ldr	r0, [r4, #0]
 8009e6c:	f000 faaa 	bl	800a3c4 <memmove>
 8009e70:	2000      	movs	r0, #0
 8009e72:	68a3      	ldr	r3, [r4, #8]
 8009e74:	1b9b      	subs	r3, r3, r6
 8009e76:	60a3      	str	r3, [r4, #8]
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	4433      	add	r3, r6
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e82:	462a      	mov	r2, r5
 8009e84:	f000 fae4 	bl	800a450 <_realloc_r>
 8009e88:	4606      	mov	r6, r0
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d1e0      	bne.n	8009e50 <__ssputs_r+0x5c>
 8009e8e:	4650      	mov	r0, sl
 8009e90:	6921      	ldr	r1, [r4, #16]
 8009e92:	f7ff feb9 	bl	8009c08 <_free_r>
 8009e96:	230c      	movs	r3, #12
 8009e98:	f8ca 3000 	str.w	r3, [sl]
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ea6:	81a3      	strh	r3, [r4, #12]
 8009ea8:	e7e9      	b.n	8009e7e <__ssputs_r+0x8a>
	...

08009eac <_svfiprintf_r>:
 8009eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb0:	4698      	mov	r8, r3
 8009eb2:	898b      	ldrh	r3, [r1, #12]
 8009eb4:	4607      	mov	r7, r0
 8009eb6:	061b      	lsls	r3, r3, #24
 8009eb8:	460d      	mov	r5, r1
 8009eba:	4614      	mov	r4, r2
 8009ebc:	b09d      	sub	sp, #116	@ 0x74
 8009ebe:	d510      	bpl.n	8009ee2 <_svfiprintf_r+0x36>
 8009ec0:	690b      	ldr	r3, [r1, #16]
 8009ec2:	b973      	cbnz	r3, 8009ee2 <_svfiprintf_r+0x36>
 8009ec4:	2140      	movs	r1, #64	@ 0x40
 8009ec6:	f7ff ff09 	bl	8009cdc <_malloc_r>
 8009eca:	6028      	str	r0, [r5, #0]
 8009ecc:	6128      	str	r0, [r5, #16]
 8009ece:	b930      	cbnz	r0, 8009ede <_svfiprintf_r+0x32>
 8009ed0:	230c      	movs	r3, #12
 8009ed2:	603b      	str	r3, [r7, #0]
 8009ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed8:	b01d      	add	sp, #116	@ 0x74
 8009eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ede:	2340      	movs	r3, #64	@ 0x40
 8009ee0:	616b      	str	r3, [r5, #20]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ee6:	2320      	movs	r3, #32
 8009ee8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009eec:	2330      	movs	r3, #48	@ 0x30
 8009eee:	f04f 0901 	mov.w	r9, #1
 8009ef2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ef6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a090 <_svfiprintf_r+0x1e4>
 8009efa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009efe:	4623      	mov	r3, r4
 8009f00:	469a      	mov	sl, r3
 8009f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f06:	b10a      	cbz	r2, 8009f0c <_svfiprintf_r+0x60>
 8009f08:	2a25      	cmp	r2, #37	@ 0x25
 8009f0a:	d1f9      	bne.n	8009f00 <_svfiprintf_r+0x54>
 8009f0c:	ebba 0b04 	subs.w	fp, sl, r4
 8009f10:	d00b      	beq.n	8009f2a <_svfiprintf_r+0x7e>
 8009f12:	465b      	mov	r3, fp
 8009f14:	4622      	mov	r2, r4
 8009f16:	4629      	mov	r1, r5
 8009f18:	4638      	mov	r0, r7
 8009f1a:	f7ff ff6b 	bl	8009df4 <__ssputs_r>
 8009f1e:	3001      	adds	r0, #1
 8009f20:	f000 80a7 	beq.w	800a072 <_svfiprintf_r+0x1c6>
 8009f24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f26:	445a      	add	r2, fp
 8009f28:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 809f 	beq.w	800a072 <_svfiprintf_r+0x1c6>
 8009f34:	2300      	movs	r3, #0
 8009f36:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f3e:	f10a 0a01 	add.w	sl, sl, #1
 8009f42:	9304      	str	r3, [sp, #16]
 8009f44:	9307      	str	r3, [sp, #28]
 8009f46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f4c:	4654      	mov	r4, sl
 8009f4e:	2205      	movs	r2, #5
 8009f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f54:	484e      	ldr	r0, [pc, #312]	@ (800a090 <_svfiprintf_r+0x1e4>)
 8009f56:	f000 fa5f 	bl	800a418 <memchr>
 8009f5a:	9a04      	ldr	r2, [sp, #16]
 8009f5c:	b9d8      	cbnz	r0, 8009f96 <_svfiprintf_r+0xea>
 8009f5e:	06d0      	lsls	r0, r2, #27
 8009f60:	bf44      	itt	mi
 8009f62:	2320      	movmi	r3, #32
 8009f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f68:	0711      	lsls	r1, r2, #28
 8009f6a:	bf44      	itt	mi
 8009f6c:	232b      	movmi	r3, #43	@ 0x2b
 8009f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f72:	f89a 3000 	ldrb.w	r3, [sl]
 8009f76:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f78:	d015      	beq.n	8009fa6 <_svfiprintf_r+0xfa>
 8009f7a:	4654      	mov	r4, sl
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	f04f 0c0a 	mov.w	ip, #10
 8009f82:	9a07      	ldr	r2, [sp, #28]
 8009f84:	4621      	mov	r1, r4
 8009f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f8a:	3b30      	subs	r3, #48	@ 0x30
 8009f8c:	2b09      	cmp	r3, #9
 8009f8e:	d94b      	bls.n	800a028 <_svfiprintf_r+0x17c>
 8009f90:	b1b0      	cbz	r0, 8009fc0 <_svfiprintf_r+0x114>
 8009f92:	9207      	str	r2, [sp, #28]
 8009f94:	e014      	b.n	8009fc0 <_svfiprintf_r+0x114>
 8009f96:	eba0 0308 	sub.w	r3, r0, r8
 8009f9a:	fa09 f303 	lsl.w	r3, r9, r3
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	46a2      	mov	sl, r4
 8009fa2:	9304      	str	r3, [sp, #16]
 8009fa4:	e7d2      	b.n	8009f4c <_svfiprintf_r+0xa0>
 8009fa6:	9b03      	ldr	r3, [sp, #12]
 8009fa8:	1d19      	adds	r1, r3, #4
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	9103      	str	r1, [sp, #12]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	bfbb      	ittet	lt
 8009fb2:	425b      	neglt	r3, r3
 8009fb4:	f042 0202 	orrlt.w	r2, r2, #2
 8009fb8:	9307      	strge	r3, [sp, #28]
 8009fba:	9307      	strlt	r3, [sp, #28]
 8009fbc:	bfb8      	it	lt
 8009fbe:	9204      	strlt	r2, [sp, #16]
 8009fc0:	7823      	ldrb	r3, [r4, #0]
 8009fc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fc4:	d10a      	bne.n	8009fdc <_svfiprintf_r+0x130>
 8009fc6:	7863      	ldrb	r3, [r4, #1]
 8009fc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fca:	d132      	bne.n	800a032 <_svfiprintf_r+0x186>
 8009fcc:	9b03      	ldr	r3, [sp, #12]
 8009fce:	3402      	adds	r4, #2
 8009fd0:	1d1a      	adds	r2, r3, #4
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	9203      	str	r2, [sp, #12]
 8009fd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009fda:	9305      	str	r3, [sp, #20]
 8009fdc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a094 <_svfiprintf_r+0x1e8>
 8009fe0:	2203      	movs	r2, #3
 8009fe2:	4650      	mov	r0, sl
 8009fe4:	7821      	ldrb	r1, [r4, #0]
 8009fe6:	f000 fa17 	bl	800a418 <memchr>
 8009fea:	b138      	cbz	r0, 8009ffc <_svfiprintf_r+0x150>
 8009fec:	2240      	movs	r2, #64	@ 0x40
 8009fee:	9b04      	ldr	r3, [sp, #16]
 8009ff0:	eba0 000a 	sub.w	r0, r0, sl
 8009ff4:	4082      	lsls	r2, r0
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	3401      	adds	r4, #1
 8009ffa:	9304      	str	r3, [sp, #16]
 8009ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a000:	2206      	movs	r2, #6
 800a002:	4825      	ldr	r0, [pc, #148]	@ (800a098 <_svfiprintf_r+0x1ec>)
 800a004:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a008:	f000 fa06 	bl	800a418 <memchr>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d036      	beq.n	800a07e <_svfiprintf_r+0x1d2>
 800a010:	4b22      	ldr	r3, [pc, #136]	@ (800a09c <_svfiprintf_r+0x1f0>)
 800a012:	bb1b      	cbnz	r3, 800a05c <_svfiprintf_r+0x1b0>
 800a014:	9b03      	ldr	r3, [sp, #12]
 800a016:	3307      	adds	r3, #7
 800a018:	f023 0307 	bic.w	r3, r3, #7
 800a01c:	3308      	adds	r3, #8
 800a01e:	9303      	str	r3, [sp, #12]
 800a020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a022:	4433      	add	r3, r6
 800a024:	9309      	str	r3, [sp, #36]	@ 0x24
 800a026:	e76a      	b.n	8009efe <_svfiprintf_r+0x52>
 800a028:	460c      	mov	r4, r1
 800a02a:	2001      	movs	r0, #1
 800a02c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a030:	e7a8      	b.n	8009f84 <_svfiprintf_r+0xd8>
 800a032:	2300      	movs	r3, #0
 800a034:	f04f 0c0a 	mov.w	ip, #10
 800a038:	4619      	mov	r1, r3
 800a03a:	3401      	adds	r4, #1
 800a03c:	9305      	str	r3, [sp, #20]
 800a03e:	4620      	mov	r0, r4
 800a040:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a044:	3a30      	subs	r2, #48	@ 0x30
 800a046:	2a09      	cmp	r2, #9
 800a048:	d903      	bls.n	800a052 <_svfiprintf_r+0x1a6>
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0c6      	beq.n	8009fdc <_svfiprintf_r+0x130>
 800a04e:	9105      	str	r1, [sp, #20]
 800a050:	e7c4      	b.n	8009fdc <_svfiprintf_r+0x130>
 800a052:	4604      	mov	r4, r0
 800a054:	2301      	movs	r3, #1
 800a056:	fb0c 2101 	mla	r1, ip, r1, r2
 800a05a:	e7f0      	b.n	800a03e <_svfiprintf_r+0x192>
 800a05c:	ab03      	add	r3, sp, #12
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	462a      	mov	r2, r5
 800a062:	4638      	mov	r0, r7
 800a064:	4b0e      	ldr	r3, [pc, #56]	@ (800a0a0 <_svfiprintf_r+0x1f4>)
 800a066:	a904      	add	r1, sp, #16
 800a068:	f3af 8000 	nop.w
 800a06c:	1c42      	adds	r2, r0, #1
 800a06e:	4606      	mov	r6, r0
 800a070:	d1d6      	bne.n	800a020 <_svfiprintf_r+0x174>
 800a072:	89ab      	ldrh	r3, [r5, #12]
 800a074:	065b      	lsls	r3, r3, #25
 800a076:	f53f af2d 	bmi.w	8009ed4 <_svfiprintf_r+0x28>
 800a07a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a07c:	e72c      	b.n	8009ed8 <_svfiprintf_r+0x2c>
 800a07e:	ab03      	add	r3, sp, #12
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	462a      	mov	r2, r5
 800a084:	4638      	mov	r0, r7
 800a086:	4b06      	ldr	r3, [pc, #24]	@ (800a0a0 <_svfiprintf_r+0x1f4>)
 800a088:	a904      	add	r1, sp, #16
 800a08a:	f000 f87d 	bl	800a188 <_printf_i>
 800a08e:	e7ed      	b.n	800a06c <_svfiprintf_r+0x1c0>
 800a090:	0801ea0c 	.word	0x0801ea0c
 800a094:	0801ea12 	.word	0x0801ea12
 800a098:	0801ea16 	.word	0x0801ea16
 800a09c:	00000000 	.word	0x00000000
 800a0a0:	08009df5 	.word	0x08009df5

0800a0a4 <_printf_common>:
 800a0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a8:	4616      	mov	r6, r2
 800a0aa:	4698      	mov	r8, r3
 800a0ac:	688a      	ldr	r2, [r1, #8]
 800a0ae:	690b      	ldr	r3, [r1, #16]
 800a0b0:	4607      	mov	r7, r0
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	bfb8      	it	lt
 800a0b6:	4613      	movlt	r3, r2
 800a0b8:	6033      	str	r3, [r6, #0]
 800a0ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a0be:	460c      	mov	r4, r1
 800a0c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a0c4:	b10a      	cbz	r2, 800a0ca <_printf_common+0x26>
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	6033      	str	r3, [r6, #0]
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	0699      	lsls	r1, r3, #26
 800a0ce:	bf42      	ittt	mi
 800a0d0:	6833      	ldrmi	r3, [r6, #0]
 800a0d2:	3302      	addmi	r3, #2
 800a0d4:	6033      	strmi	r3, [r6, #0]
 800a0d6:	6825      	ldr	r5, [r4, #0]
 800a0d8:	f015 0506 	ands.w	r5, r5, #6
 800a0dc:	d106      	bne.n	800a0ec <_printf_common+0x48>
 800a0de:	f104 0a19 	add.w	sl, r4, #25
 800a0e2:	68e3      	ldr	r3, [r4, #12]
 800a0e4:	6832      	ldr	r2, [r6, #0]
 800a0e6:	1a9b      	subs	r3, r3, r2
 800a0e8:	42ab      	cmp	r3, r5
 800a0ea:	dc2b      	bgt.n	800a144 <_printf_common+0xa0>
 800a0ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a0f0:	6822      	ldr	r2, [r4, #0]
 800a0f2:	3b00      	subs	r3, #0
 800a0f4:	bf18      	it	ne
 800a0f6:	2301      	movne	r3, #1
 800a0f8:	0692      	lsls	r2, r2, #26
 800a0fa:	d430      	bmi.n	800a15e <_printf_common+0xba>
 800a0fc:	4641      	mov	r1, r8
 800a0fe:	4638      	mov	r0, r7
 800a100:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a104:	47c8      	blx	r9
 800a106:	3001      	adds	r0, #1
 800a108:	d023      	beq.n	800a152 <_printf_common+0xae>
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	6922      	ldr	r2, [r4, #16]
 800a10e:	f003 0306 	and.w	r3, r3, #6
 800a112:	2b04      	cmp	r3, #4
 800a114:	bf14      	ite	ne
 800a116:	2500      	movne	r5, #0
 800a118:	6833      	ldreq	r3, [r6, #0]
 800a11a:	f04f 0600 	mov.w	r6, #0
 800a11e:	bf08      	it	eq
 800a120:	68e5      	ldreq	r5, [r4, #12]
 800a122:	f104 041a 	add.w	r4, r4, #26
 800a126:	bf08      	it	eq
 800a128:	1aed      	subeq	r5, r5, r3
 800a12a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a12e:	bf08      	it	eq
 800a130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a134:	4293      	cmp	r3, r2
 800a136:	bfc4      	itt	gt
 800a138:	1a9b      	subgt	r3, r3, r2
 800a13a:	18ed      	addgt	r5, r5, r3
 800a13c:	42b5      	cmp	r5, r6
 800a13e:	d11a      	bne.n	800a176 <_printf_common+0xd2>
 800a140:	2000      	movs	r0, #0
 800a142:	e008      	b.n	800a156 <_printf_common+0xb2>
 800a144:	2301      	movs	r3, #1
 800a146:	4652      	mov	r2, sl
 800a148:	4641      	mov	r1, r8
 800a14a:	4638      	mov	r0, r7
 800a14c:	47c8      	blx	r9
 800a14e:	3001      	adds	r0, #1
 800a150:	d103      	bne.n	800a15a <_printf_common+0xb6>
 800a152:	f04f 30ff 	mov.w	r0, #4294967295
 800a156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a15a:	3501      	adds	r5, #1
 800a15c:	e7c1      	b.n	800a0e2 <_printf_common+0x3e>
 800a15e:	2030      	movs	r0, #48	@ 0x30
 800a160:	18e1      	adds	r1, r4, r3
 800a162:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a166:	1c5a      	adds	r2, r3, #1
 800a168:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a16c:	4422      	add	r2, r4
 800a16e:	3302      	adds	r3, #2
 800a170:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a174:	e7c2      	b.n	800a0fc <_printf_common+0x58>
 800a176:	2301      	movs	r3, #1
 800a178:	4622      	mov	r2, r4
 800a17a:	4641      	mov	r1, r8
 800a17c:	4638      	mov	r0, r7
 800a17e:	47c8      	blx	r9
 800a180:	3001      	adds	r0, #1
 800a182:	d0e6      	beq.n	800a152 <_printf_common+0xae>
 800a184:	3601      	adds	r6, #1
 800a186:	e7d9      	b.n	800a13c <_printf_common+0x98>

0800a188 <_printf_i>:
 800a188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a18c:	7e0f      	ldrb	r7, [r1, #24]
 800a18e:	4691      	mov	r9, r2
 800a190:	2f78      	cmp	r7, #120	@ 0x78
 800a192:	4680      	mov	r8, r0
 800a194:	460c      	mov	r4, r1
 800a196:	469a      	mov	sl, r3
 800a198:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a19a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a19e:	d807      	bhi.n	800a1b0 <_printf_i+0x28>
 800a1a0:	2f62      	cmp	r7, #98	@ 0x62
 800a1a2:	d80a      	bhi.n	800a1ba <_printf_i+0x32>
 800a1a4:	2f00      	cmp	r7, #0
 800a1a6:	f000 80d1 	beq.w	800a34c <_printf_i+0x1c4>
 800a1aa:	2f58      	cmp	r7, #88	@ 0x58
 800a1ac:	f000 80b8 	beq.w	800a320 <_printf_i+0x198>
 800a1b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a1b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a1b8:	e03a      	b.n	800a230 <_printf_i+0xa8>
 800a1ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a1be:	2b15      	cmp	r3, #21
 800a1c0:	d8f6      	bhi.n	800a1b0 <_printf_i+0x28>
 800a1c2:	a101      	add	r1, pc, #4	@ (adr r1, 800a1c8 <_printf_i+0x40>)
 800a1c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1c8:	0800a221 	.word	0x0800a221
 800a1cc:	0800a235 	.word	0x0800a235
 800a1d0:	0800a1b1 	.word	0x0800a1b1
 800a1d4:	0800a1b1 	.word	0x0800a1b1
 800a1d8:	0800a1b1 	.word	0x0800a1b1
 800a1dc:	0800a1b1 	.word	0x0800a1b1
 800a1e0:	0800a235 	.word	0x0800a235
 800a1e4:	0800a1b1 	.word	0x0800a1b1
 800a1e8:	0800a1b1 	.word	0x0800a1b1
 800a1ec:	0800a1b1 	.word	0x0800a1b1
 800a1f0:	0800a1b1 	.word	0x0800a1b1
 800a1f4:	0800a333 	.word	0x0800a333
 800a1f8:	0800a25f 	.word	0x0800a25f
 800a1fc:	0800a2ed 	.word	0x0800a2ed
 800a200:	0800a1b1 	.word	0x0800a1b1
 800a204:	0800a1b1 	.word	0x0800a1b1
 800a208:	0800a355 	.word	0x0800a355
 800a20c:	0800a1b1 	.word	0x0800a1b1
 800a210:	0800a25f 	.word	0x0800a25f
 800a214:	0800a1b1 	.word	0x0800a1b1
 800a218:	0800a1b1 	.word	0x0800a1b1
 800a21c:	0800a2f5 	.word	0x0800a2f5
 800a220:	6833      	ldr	r3, [r6, #0]
 800a222:	1d1a      	adds	r2, r3, #4
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	6032      	str	r2, [r6, #0]
 800a228:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a22c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a230:	2301      	movs	r3, #1
 800a232:	e09c      	b.n	800a36e <_printf_i+0x1e6>
 800a234:	6833      	ldr	r3, [r6, #0]
 800a236:	6820      	ldr	r0, [r4, #0]
 800a238:	1d19      	adds	r1, r3, #4
 800a23a:	6031      	str	r1, [r6, #0]
 800a23c:	0606      	lsls	r6, r0, #24
 800a23e:	d501      	bpl.n	800a244 <_printf_i+0xbc>
 800a240:	681d      	ldr	r5, [r3, #0]
 800a242:	e003      	b.n	800a24c <_printf_i+0xc4>
 800a244:	0645      	lsls	r5, r0, #25
 800a246:	d5fb      	bpl.n	800a240 <_printf_i+0xb8>
 800a248:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a24c:	2d00      	cmp	r5, #0
 800a24e:	da03      	bge.n	800a258 <_printf_i+0xd0>
 800a250:	232d      	movs	r3, #45	@ 0x2d
 800a252:	426d      	negs	r5, r5
 800a254:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a258:	230a      	movs	r3, #10
 800a25a:	4858      	ldr	r0, [pc, #352]	@ (800a3bc <_printf_i+0x234>)
 800a25c:	e011      	b.n	800a282 <_printf_i+0xfa>
 800a25e:	6821      	ldr	r1, [r4, #0]
 800a260:	6833      	ldr	r3, [r6, #0]
 800a262:	0608      	lsls	r0, r1, #24
 800a264:	f853 5b04 	ldr.w	r5, [r3], #4
 800a268:	d402      	bmi.n	800a270 <_printf_i+0xe8>
 800a26a:	0649      	lsls	r1, r1, #25
 800a26c:	bf48      	it	mi
 800a26e:	b2ad      	uxthmi	r5, r5
 800a270:	2f6f      	cmp	r7, #111	@ 0x6f
 800a272:	6033      	str	r3, [r6, #0]
 800a274:	bf14      	ite	ne
 800a276:	230a      	movne	r3, #10
 800a278:	2308      	moveq	r3, #8
 800a27a:	4850      	ldr	r0, [pc, #320]	@ (800a3bc <_printf_i+0x234>)
 800a27c:	2100      	movs	r1, #0
 800a27e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a282:	6866      	ldr	r6, [r4, #4]
 800a284:	2e00      	cmp	r6, #0
 800a286:	60a6      	str	r6, [r4, #8]
 800a288:	db05      	blt.n	800a296 <_printf_i+0x10e>
 800a28a:	6821      	ldr	r1, [r4, #0]
 800a28c:	432e      	orrs	r6, r5
 800a28e:	f021 0104 	bic.w	r1, r1, #4
 800a292:	6021      	str	r1, [r4, #0]
 800a294:	d04b      	beq.n	800a32e <_printf_i+0x1a6>
 800a296:	4616      	mov	r6, r2
 800a298:	fbb5 f1f3 	udiv	r1, r5, r3
 800a29c:	fb03 5711 	mls	r7, r3, r1, r5
 800a2a0:	5dc7      	ldrb	r7, [r0, r7]
 800a2a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2a6:	462f      	mov	r7, r5
 800a2a8:	42bb      	cmp	r3, r7
 800a2aa:	460d      	mov	r5, r1
 800a2ac:	d9f4      	bls.n	800a298 <_printf_i+0x110>
 800a2ae:	2b08      	cmp	r3, #8
 800a2b0:	d10b      	bne.n	800a2ca <_printf_i+0x142>
 800a2b2:	6823      	ldr	r3, [r4, #0]
 800a2b4:	07df      	lsls	r7, r3, #31
 800a2b6:	d508      	bpl.n	800a2ca <_printf_i+0x142>
 800a2b8:	6923      	ldr	r3, [r4, #16]
 800a2ba:	6861      	ldr	r1, [r4, #4]
 800a2bc:	4299      	cmp	r1, r3
 800a2be:	bfde      	ittt	le
 800a2c0:	2330      	movle	r3, #48	@ 0x30
 800a2c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a2c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a2ca:	1b92      	subs	r2, r2, r6
 800a2cc:	6122      	str	r2, [r4, #16]
 800a2ce:	464b      	mov	r3, r9
 800a2d0:	4621      	mov	r1, r4
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	f8cd a000 	str.w	sl, [sp]
 800a2d8:	aa03      	add	r2, sp, #12
 800a2da:	f7ff fee3 	bl	800a0a4 <_printf_common>
 800a2de:	3001      	adds	r0, #1
 800a2e0:	d14a      	bne.n	800a378 <_printf_i+0x1f0>
 800a2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e6:	b004      	add	sp, #16
 800a2e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ec:	6823      	ldr	r3, [r4, #0]
 800a2ee:	f043 0320 	orr.w	r3, r3, #32
 800a2f2:	6023      	str	r3, [r4, #0]
 800a2f4:	2778      	movs	r7, #120	@ 0x78
 800a2f6:	4832      	ldr	r0, [pc, #200]	@ (800a3c0 <_printf_i+0x238>)
 800a2f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a2fc:	6823      	ldr	r3, [r4, #0]
 800a2fe:	6831      	ldr	r1, [r6, #0]
 800a300:	061f      	lsls	r7, r3, #24
 800a302:	f851 5b04 	ldr.w	r5, [r1], #4
 800a306:	d402      	bmi.n	800a30e <_printf_i+0x186>
 800a308:	065f      	lsls	r7, r3, #25
 800a30a:	bf48      	it	mi
 800a30c:	b2ad      	uxthmi	r5, r5
 800a30e:	6031      	str	r1, [r6, #0]
 800a310:	07d9      	lsls	r1, r3, #31
 800a312:	bf44      	itt	mi
 800a314:	f043 0320 	orrmi.w	r3, r3, #32
 800a318:	6023      	strmi	r3, [r4, #0]
 800a31a:	b11d      	cbz	r5, 800a324 <_printf_i+0x19c>
 800a31c:	2310      	movs	r3, #16
 800a31e:	e7ad      	b.n	800a27c <_printf_i+0xf4>
 800a320:	4826      	ldr	r0, [pc, #152]	@ (800a3bc <_printf_i+0x234>)
 800a322:	e7e9      	b.n	800a2f8 <_printf_i+0x170>
 800a324:	6823      	ldr	r3, [r4, #0]
 800a326:	f023 0320 	bic.w	r3, r3, #32
 800a32a:	6023      	str	r3, [r4, #0]
 800a32c:	e7f6      	b.n	800a31c <_printf_i+0x194>
 800a32e:	4616      	mov	r6, r2
 800a330:	e7bd      	b.n	800a2ae <_printf_i+0x126>
 800a332:	6833      	ldr	r3, [r6, #0]
 800a334:	6825      	ldr	r5, [r4, #0]
 800a336:	1d18      	adds	r0, r3, #4
 800a338:	6961      	ldr	r1, [r4, #20]
 800a33a:	6030      	str	r0, [r6, #0]
 800a33c:	062e      	lsls	r6, r5, #24
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	d501      	bpl.n	800a346 <_printf_i+0x1be>
 800a342:	6019      	str	r1, [r3, #0]
 800a344:	e002      	b.n	800a34c <_printf_i+0x1c4>
 800a346:	0668      	lsls	r0, r5, #25
 800a348:	d5fb      	bpl.n	800a342 <_printf_i+0x1ba>
 800a34a:	8019      	strh	r1, [r3, #0]
 800a34c:	2300      	movs	r3, #0
 800a34e:	4616      	mov	r6, r2
 800a350:	6123      	str	r3, [r4, #16]
 800a352:	e7bc      	b.n	800a2ce <_printf_i+0x146>
 800a354:	6833      	ldr	r3, [r6, #0]
 800a356:	2100      	movs	r1, #0
 800a358:	1d1a      	adds	r2, r3, #4
 800a35a:	6032      	str	r2, [r6, #0]
 800a35c:	681e      	ldr	r6, [r3, #0]
 800a35e:	6862      	ldr	r2, [r4, #4]
 800a360:	4630      	mov	r0, r6
 800a362:	f000 f859 	bl	800a418 <memchr>
 800a366:	b108      	cbz	r0, 800a36c <_printf_i+0x1e4>
 800a368:	1b80      	subs	r0, r0, r6
 800a36a:	6060      	str	r0, [r4, #4]
 800a36c:	6863      	ldr	r3, [r4, #4]
 800a36e:	6123      	str	r3, [r4, #16]
 800a370:	2300      	movs	r3, #0
 800a372:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a376:	e7aa      	b.n	800a2ce <_printf_i+0x146>
 800a378:	4632      	mov	r2, r6
 800a37a:	4649      	mov	r1, r9
 800a37c:	4640      	mov	r0, r8
 800a37e:	6923      	ldr	r3, [r4, #16]
 800a380:	47d0      	blx	sl
 800a382:	3001      	adds	r0, #1
 800a384:	d0ad      	beq.n	800a2e2 <_printf_i+0x15a>
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	079b      	lsls	r3, r3, #30
 800a38a:	d413      	bmi.n	800a3b4 <_printf_i+0x22c>
 800a38c:	68e0      	ldr	r0, [r4, #12]
 800a38e:	9b03      	ldr	r3, [sp, #12]
 800a390:	4298      	cmp	r0, r3
 800a392:	bfb8      	it	lt
 800a394:	4618      	movlt	r0, r3
 800a396:	e7a6      	b.n	800a2e6 <_printf_i+0x15e>
 800a398:	2301      	movs	r3, #1
 800a39a:	4632      	mov	r2, r6
 800a39c:	4649      	mov	r1, r9
 800a39e:	4640      	mov	r0, r8
 800a3a0:	47d0      	blx	sl
 800a3a2:	3001      	adds	r0, #1
 800a3a4:	d09d      	beq.n	800a2e2 <_printf_i+0x15a>
 800a3a6:	3501      	adds	r5, #1
 800a3a8:	68e3      	ldr	r3, [r4, #12]
 800a3aa:	9903      	ldr	r1, [sp, #12]
 800a3ac:	1a5b      	subs	r3, r3, r1
 800a3ae:	42ab      	cmp	r3, r5
 800a3b0:	dcf2      	bgt.n	800a398 <_printf_i+0x210>
 800a3b2:	e7eb      	b.n	800a38c <_printf_i+0x204>
 800a3b4:	2500      	movs	r5, #0
 800a3b6:	f104 0619 	add.w	r6, r4, #25
 800a3ba:	e7f5      	b.n	800a3a8 <_printf_i+0x220>
 800a3bc:	0801ea1d 	.word	0x0801ea1d
 800a3c0:	0801ea2e 	.word	0x0801ea2e

0800a3c4 <memmove>:
 800a3c4:	4288      	cmp	r0, r1
 800a3c6:	b510      	push	{r4, lr}
 800a3c8:	eb01 0402 	add.w	r4, r1, r2
 800a3cc:	d902      	bls.n	800a3d4 <memmove+0x10>
 800a3ce:	4284      	cmp	r4, r0
 800a3d0:	4623      	mov	r3, r4
 800a3d2:	d807      	bhi.n	800a3e4 <memmove+0x20>
 800a3d4:	1e43      	subs	r3, r0, #1
 800a3d6:	42a1      	cmp	r1, r4
 800a3d8:	d008      	beq.n	800a3ec <memmove+0x28>
 800a3da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3e2:	e7f8      	b.n	800a3d6 <memmove+0x12>
 800a3e4:	4601      	mov	r1, r0
 800a3e6:	4402      	add	r2, r0
 800a3e8:	428a      	cmp	r2, r1
 800a3ea:	d100      	bne.n	800a3ee <memmove+0x2a>
 800a3ec:	bd10      	pop	{r4, pc}
 800a3ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3f6:	e7f7      	b.n	800a3e8 <memmove+0x24>

0800a3f8 <_sbrk_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	4d05      	ldr	r5, [pc, #20]	@ (800a414 <_sbrk_r+0x1c>)
 800a3fe:	4604      	mov	r4, r0
 800a400:	4608      	mov	r0, r1
 800a402:	602b      	str	r3, [r5, #0]
 800a404:	f7f9 fe9c 	bl	8004140 <_sbrk>
 800a408:	1c43      	adds	r3, r0, #1
 800a40a:	d102      	bne.n	800a412 <_sbrk_r+0x1a>
 800a40c:	682b      	ldr	r3, [r5, #0]
 800a40e:	b103      	cbz	r3, 800a412 <_sbrk_r+0x1a>
 800a410:	6023      	str	r3, [r4, #0]
 800a412:	bd38      	pop	{r3, r4, r5, pc}
 800a414:	2000644c 	.word	0x2000644c

0800a418 <memchr>:
 800a418:	4603      	mov	r3, r0
 800a41a:	b510      	push	{r4, lr}
 800a41c:	b2c9      	uxtb	r1, r1
 800a41e:	4402      	add	r2, r0
 800a420:	4293      	cmp	r3, r2
 800a422:	4618      	mov	r0, r3
 800a424:	d101      	bne.n	800a42a <memchr+0x12>
 800a426:	2000      	movs	r0, #0
 800a428:	e003      	b.n	800a432 <memchr+0x1a>
 800a42a:	7804      	ldrb	r4, [r0, #0]
 800a42c:	3301      	adds	r3, #1
 800a42e:	428c      	cmp	r4, r1
 800a430:	d1f6      	bne.n	800a420 <memchr+0x8>
 800a432:	bd10      	pop	{r4, pc}

0800a434 <memcpy>:
 800a434:	440a      	add	r2, r1
 800a436:	4291      	cmp	r1, r2
 800a438:	f100 33ff 	add.w	r3, r0, #4294967295
 800a43c:	d100      	bne.n	800a440 <memcpy+0xc>
 800a43e:	4770      	bx	lr
 800a440:	b510      	push	{r4, lr}
 800a442:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a446:	4291      	cmp	r1, r2
 800a448:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a44c:	d1f9      	bne.n	800a442 <memcpy+0xe>
 800a44e:	bd10      	pop	{r4, pc}

0800a450 <_realloc_r>:
 800a450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a454:	4607      	mov	r7, r0
 800a456:	4614      	mov	r4, r2
 800a458:	460d      	mov	r5, r1
 800a45a:	b921      	cbnz	r1, 800a466 <_realloc_r+0x16>
 800a45c:	4611      	mov	r1, r2
 800a45e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a462:	f7ff bc3b 	b.w	8009cdc <_malloc_r>
 800a466:	b92a      	cbnz	r2, 800a474 <_realloc_r+0x24>
 800a468:	f7ff fbce 	bl	8009c08 <_free_r>
 800a46c:	4625      	mov	r5, r4
 800a46e:	4628      	mov	r0, r5
 800a470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a474:	f000 f81a 	bl	800a4ac <_malloc_usable_size_r>
 800a478:	4284      	cmp	r4, r0
 800a47a:	4606      	mov	r6, r0
 800a47c:	d802      	bhi.n	800a484 <_realloc_r+0x34>
 800a47e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a482:	d8f4      	bhi.n	800a46e <_realloc_r+0x1e>
 800a484:	4621      	mov	r1, r4
 800a486:	4638      	mov	r0, r7
 800a488:	f7ff fc28 	bl	8009cdc <_malloc_r>
 800a48c:	4680      	mov	r8, r0
 800a48e:	b908      	cbnz	r0, 800a494 <_realloc_r+0x44>
 800a490:	4645      	mov	r5, r8
 800a492:	e7ec      	b.n	800a46e <_realloc_r+0x1e>
 800a494:	42b4      	cmp	r4, r6
 800a496:	4622      	mov	r2, r4
 800a498:	4629      	mov	r1, r5
 800a49a:	bf28      	it	cs
 800a49c:	4632      	movcs	r2, r6
 800a49e:	f7ff ffc9 	bl	800a434 <memcpy>
 800a4a2:	4629      	mov	r1, r5
 800a4a4:	4638      	mov	r0, r7
 800a4a6:	f7ff fbaf 	bl	8009c08 <_free_r>
 800a4aa:	e7f1      	b.n	800a490 <_realloc_r+0x40>

0800a4ac <_malloc_usable_size_r>:
 800a4ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4b0:	1f18      	subs	r0, r3, #4
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	bfbc      	itt	lt
 800a4b6:	580b      	ldrlt	r3, [r1, r0]
 800a4b8:	18c0      	addlt	r0, r0, r3
 800a4ba:	4770      	bx	lr

0800a4bc <sqrtf>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	4605      	mov	r5, r0
 800a4c0:	f000 f816 	bl	800a4f0 <__ieee754_sqrtf>
 800a4c4:	4629      	mov	r1, r5
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	f7f6 fe69 	bl	80011a0 <__aeabi_fcmpun>
 800a4ce:	b968      	cbnz	r0, 800a4ec <sqrtf+0x30>
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	f7f6 fe3c 	bl	8001150 <__aeabi_fcmplt>
 800a4d8:	b140      	cbz	r0, 800a4ec <sqrtf+0x30>
 800a4da:	f7ff fb61 	bl	8009ba0 <__errno>
 800a4de:	2321      	movs	r3, #33	@ 0x21
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	6003      	str	r3, [r0, #0]
 800a4e4:	4608      	mov	r0, r1
 800a4e6:	f7f6 fd49 	bl	8000f7c <__aeabi_fdiv>
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	bd38      	pop	{r3, r4, r5, pc}

0800a4f0 <__ieee754_sqrtf>:
 800a4f0:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800a4f4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	4604      	mov	r4, r0
 800a500:	d30a      	bcc.n	800a518 <__ieee754_sqrtf+0x28>
 800a502:	4601      	mov	r1, r0
 800a504:	f7f6 fc86 	bl	8000e14 <__aeabi_fmul>
 800a508:	4601      	mov	r1, r0
 800a50a:	4620      	mov	r0, r4
 800a50c:	f7f6 fb7a 	bl	8000c04 <__addsf3>
 800a510:	4604      	mov	r4, r0
 800a512:	4620      	mov	r0, r4
 800a514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a518:	2a00      	cmp	r2, #0
 800a51a:	d0fa      	beq.n	800a512 <__ieee754_sqrtf+0x22>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	da06      	bge.n	800a52e <__ieee754_sqrtf+0x3e>
 800a520:	4601      	mov	r1, r0
 800a522:	f7f6 fb6d 	bl	8000c00 <__aeabi_fsub>
 800a526:	4601      	mov	r1, r0
 800a528:	f7f6 fd28 	bl	8000f7c <__aeabi_fdiv>
 800a52c:	e7f0      	b.n	800a510 <__ieee754_sqrtf+0x20>
 800a52e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800a532:	d03c      	beq.n	800a5ae <__ieee754_sqrtf+0xbe>
 800a534:	15c2      	asrs	r2, r0, #23
 800a536:	2400      	movs	r4, #0
 800a538:	2019      	movs	r0, #25
 800a53a:	4626      	mov	r6, r4
 800a53c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800a540:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a544:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800a548:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a54c:	07d2      	lsls	r2, r2, #31
 800a54e:	bf58      	it	pl
 800a550:	005b      	lslpl	r3, r3, #1
 800a552:	106d      	asrs	r5, r5, #1
 800a554:	005b      	lsls	r3, r3, #1
 800a556:	1872      	adds	r2, r6, r1
 800a558:	429a      	cmp	r2, r3
 800a55a:	bfcf      	iteee	gt
 800a55c:	461a      	movgt	r2, r3
 800a55e:	1856      	addle	r6, r2, r1
 800a560:	1864      	addle	r4, r4, r1
 800a562:	1a9a      	suble	r2, r3, r2
 800a564:	3801      	subs	r0, #1
 800a566:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800a56a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a56e:	d1f2      	bne.n	800a556 <__ieee754_sqrtf+0x66>
 800a570:	b1ba      	cbz	r2, 800a5a2 <__ieee754_sqrtf+0xb2>
 800a572:	4e15      	ldr	r6, [pc, #84]	@ (800a5c8 <__ieee754_sqrtf+0xd8>)
 800a574:	4f15      	ldr	r7, [pc, #84]	@ (800a5cc <__ieee754_sqrtf+0xdc>)
 800a576:	6830      	ldr	r0, [r6, #0]
 800a578:	6839      	ldr	r1, [r7, #0]
 800a57a:	f7f6 fb41 	bl	8000c00 <__aeabi_fsub>
 800a57e:	f8d6 8000 	ldr.w	r8, [r6]
 800a582:	4601      	mov	r1, r0
 800a584:	4640      	mov	r0, r8
 800a586:	f7f6 fded 	bl	8001164 <__aeabi_fcmple>
 800a58a:	b150      	cbz	r0, 800a5a2 <__ieee754_sqrtf+0xb2>
 800a58c:	6830      	ldr	r0, [r6, #0]
 800a58e:	6839      	ldr	r1, [r7, #0]
 800a590:	f7f6 fb38 	bl	8000c04 <__addsf3>
 800a594:	6836      	ldr	r6, [r6, #0]
 800a596:	4601      	mov	r1, r0
 800a598:	4630      	mov	r0, r6
 800a59a:	f7f6 fdd9 	bl	8001150 <__aeabi_fcmplt>
 800a59e:	b170      	cbz	r0, 800a5be <__ieee754_sqrtf+0xce>
 800a5a0:	3402      	adds	r4, #2
 800a5a2:	1064      	asrs	r4, r4, #1
 800a5a4:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800a5a8:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800a5ac:	e7b1      	b.n	800a512 <__ieee754_sqrtf+0x22>
 800a5ae:	005b      	lsls	r3, r3, #1
 800a5b0:	0218      	lsls	r0, r3, #8
 800a5b2:	460a      	mov	r2, r1
 800a5b4:	f101 0101 	add.w	r1, r1, #1
 800a5b8:	d5f9      	bpl.n	800a5ae <__ieee754_sqrtf+0xbe>
 800a5ba:	4252      	negs	r2, r2
 800a5bc:	e7bb      	b.n	800a536 <__ieee754_sqrtf+0x46>
 800a5be:	3401      	adds	r4, #1
 800a5c0:	f024 0401 	bic.w	r4, r4, #1
 800a5c4:	e7ed      	b.n	800a5a2 <__ieee754_sqrtf+0xb2>
 800a5c6:	bf00      	nop
 800a5c8:	0801ea44 	.word	0x0801ea44
 800a5cc:	0801ea40 	.word	0x0801ea40

0800a5d0 <_init>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	bf00      	nop
 800a5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5d6:	bc08      	pop	{r3}
 800a5d8:	469e      	mov	lr, r3
 800a5da:	4770      	bx	lr

0800a5dc <_fini>:
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	bf00      	nop
 800a5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5e2:	bc08      	pop	{r3}
 800a5e4:	469e      	mov	lr, r3
 800a5e6:	4770      	bx	lr
